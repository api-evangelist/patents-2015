---

title: Challenge-dynamic credential pairs for client/server request validation
abstract: Computer systems and methods in various embodiments are configured for improving the security and efficiency of server computers interacting through an intermediary computer with client computers that may be executing malicious and/or autonomous headless browsers or “bots”. In an embodiment, a computer system comprises: a memory; a processor coupled to the memory; a protocol client module that is coupled to the processor and the memory and configured to intercept a first set of instructions that define one or more original operations, which are configured to cause one or more requests to be sent to the server computer when executed by the client computer; a forward transformer module that is coupled to the processor and the memory and configured to: generate, at the intermediary computer system, a first challenge credential to be sent to the client computer; render one or more first dynamic-credential instructions, which when executed by the client computer, cause the client computer to generate a first dynamic credential that corresponds to the first challenge credential and to include the first dynamic credential in the one or more requests from the client computer; modify the first set of instructions to produce a second set of instructions, wherein the second set of instructions include the first challenge credential and the one or more first dynamic-credential instructions, and which when executed by the client computer, cause the first challenge credential to be included in the one or more requests sent from the client computer; send the second set of instructions to a second computer.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09608975&OS=09608975&RS=09608975
owner: SHAPE SECURITY, INC.
number: 09608975
owner_city: Mountain View
owner_country: US
publication_date: 20150330
---
The present disclosure generally relates to security techniques applicable to client server systems and relates more specifically to techniques for improving the security of client computers interacting with server computers through an intermediary computer using morphing credentials.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Browsers are powerful computer program applications that may request and execute instructions received from a web server to generate complex user interfaces that are presented to a user through one or more devices such as a monitor or speakers. In response to input from a user such as a mouse click indicating that the user selected a link a browser may send a request based on the selected link to the web server. The request may be a request for data and or include data to be processed by the web server.

A malicious user may use software often referred to as a bot which imitates a browser by receiving instructions from a web server and generating requests based on those instructions. For example a bot may receive a web page and generate a request based on a link defined in the web page as if the link was selected by a user. Also for example a bot generate and send a request with data assigned to one or more parameters to simulate a user submitting data to a web server through a browser.

Malicious users may use bots to commit many types of unauthorized acts crimes or computer fraud such as content scraping ratings manipulation fake account creation reserving rival goods attacks ballot stuffing attacks password snooping web site scraping attacks vulnerability assessments and stack fingerprinting attacks. As a specific example a malicious user may cause a bot to traverse through pages of a web site and collect private and or proprietary data such as who is connected with whom on a particular social networking web site.

Web server administrators may wish to prevent malicious users from attacking the site while allowing legitimate users to use the site as intended. However determining which requests are generated by a legitimate user using a web browser and a malicious user using a bot may be difficult.

While each of the drawing figures illustrates a particular embodiment for purposes of illustrating a clear example other embodiments may omit add to reorder and or modify any of the elements shown in the drawing figures. For purposes of illustrating clear examples one or more figures may be described with reference to one or more other figures but using the particular arrangement illustrated in the one or more other figures is not required in other embodiments. For example intermediary computer in may be described with reference to several components illustrated in and discussed in detail below but using the particular arrangement illustrated in is not required in other embodiments. Furthermore while the instructions discussed in many example embodiments are HTML JavaScript and CSS instructions in other embodiments the instructions intercepted and generated may be any other standard and or proprietary instructions configured to be executed by a client computer.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the present invention. It will be apparent however that the present invention may be practiced without these specific details. In other instances well known structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In an embodiment a computer system comprises a memory a processor coupled to the memory a protocol client module that is coupled to the processor and the memory and configured to intercept a first set of instructions that define one or more original operations which are configured to cause one or more requests to be sent to the server computer when executed by the client computer a forward transformer module that is coupled to the processor and the memory and configured to generate at the intermediary computer system a first challenge credential to be sent to the client computer render one or more first dynamic credential instructions which when executed by the client computer cause the client computer to generate a first dynamic credential that corresponds to the first challenge credential and to include the first dynamic credential in the one or more requests from the client computer modify the first set of instructions to produce a second set of instructions wherein the second set of instructions include the first challenge credential and the one or more first dynamic credential instructions and which when executed by the client computer cause the first challenge credential to be included in the one or more requests sent from the client computer send the second set of instructions to a second computer.

In an embodiment a data processing method comprises intercepting from a first computer a first set of instructions that define one or more original operations which are configured to cause one or more requests to be sent if executed by a client computer modifying the first set of instructions to produce a modified set of instructions which are configured to cause a credential to be included in the one or more requests sent if executed by the client computer rendering a second set of instructions comprising the modified set of instructions and one or more credential morphing instructions wherein the one or more credential morphing instructions define one or more credential morphing operations which are configured to cause the client computer to update the credential over time if executed sending the second set of instructions to a second computer.

In an embodiment the method comprises receiving a request for data performing a negative responsive action in response to determining the request does not include a valid credential. In an embodiment the method comprises receiving a request for data at a particular time wherein the request includes the credential and the credential corresponds with one or more parameters performing a negative responsive action in response to determining that the one or more parameters are not satisfied based at least in part on the particular time.

In an embodiment the method comprises associating the credential with one or more parameters receiving a first request for a new credential and comprising the credential determining that the one or more parameters associated with the credential are satisfied and in response generating the new credential associating the new credential with one or more new parameters sending the new credential to the second computer receiving a second request which includes the new credential for data on the first computer forwarding at least a portion of the second request to the first computer in response to determining the one or more new parameters associated with the new credential are satisfied.

In an embodiment the method comprises generating the credential which comprises one or more encrypted parameters receiving a first request for a new credential and comprising the credential decrypting the one or more encrypted parameters to produce one or more decrypted parameters determining that the one or more decrypted parameters are satisfied and in response generating the new credential which comprises one or more new encrypted parameters sending the new credential to the second computer receiving a second request which includes the new credential for data from the first computer decrypting the one or more encrypted parameters to produce one or more new decrypted parameters forwarding at least a portion of the second request to the first computer in response to determining that the one or more new decrypted parameters are satisfied.

In an embodiment a method comprises receiving a one or more instructions that define a first challenge credential one or more first dynamic credential instructions and a first object to be displayed to a user storing the first challenge credential executing the one or more first dynamic credential instructions to produce a first dynamic credential that corresponds to the first challenge credential causing displaying the object receiving a first input from the user indicating that the user selected the first object and in response sending a first request to a server computer for a first set of data wherein the first request is based on the object and includes the first challenge credential and the first dynamic credential receiving from the server computer the first set of data and one or more second dynamic credential instructions and in response executing the one or more second dynamic credential instructions to produce a second dynamic credential that corresponds to the first challenge credential wherein the one or more second dynamic credential instructions are different than the one or more first dynamic credential instructions and the second dynamic credential is different than the first dynamic credential.

A web browser may be a tool through which application programs can provide client computers with content in a dynamic custom UI. For example in response to receiving a request for data from a web browser a web server responds with a set of instructions and or data. The instructions may define one or more objects that include data and or other objects. The instructions may also define how the data and or objects may be presented in a UI to enable human computer interaction.

In contrast bots traverse web pages and or web sites to retrieve data from and or submit data to one or more web servers with little if any human computer interaction. For example in response to receiving a request for data from a bot a web server responds with a set of instructions. As discussed above the instructions may define one or more objects that include data and or other objects. The instructions may also define how the data and or objects may be presented in a UI. However a bot may parse the instructions looking for particular data to store and or use to make subsequent requests. A bot need not execute the instructions because the bot is built to operate with little if any human computer interaction. The bot may simply look for data by parsing the one or more data structures defined in the instructions. Thus a bot may be a functionally limited browser.

A server computer that requires a browser to use one or more parsers and or execution environments may filter out requests from bots. For purposes of illustrating a clear example assume a browser includes a JavaScript parser or JavaScript execution engine and a bot does not include a JavaScript parser or JavaScript execution engine. Also assume that a server computer may include one or more JavaScript instructions in a web page which if executed may cause a browser to request receive generate and or update a dynamic credential. A dynamic credential may be a credential that is updated over time. Accordingly the browser may parse and execute the one or more JavaScript instructions which cause the browser to request receive generate and or update the credential over time and include a valid dynamic credential in a subsequent request.

In contrast a bot which does not include a JavaScript parser and or JavaScript execution environment may not request receive generate and or update the dynamic credential over time. Thus the bot may not include a valid dynamic credential in a subsequent request.

If a server computer receives a request for a web page with a valid dynamic credential from a browser then the server computer may send the requested web page to the browser. However if the server computer receives a request without a valid dynamic credential from the bot then the server computer may perform a negative action such as terminating the request or ignoring one or more future requests from the bot.

Browser comprises protocol module domain name server DNS module local storage module image parser CSS parser HTML parser JavaScript parser extension execution environment document object model DOM module and JavaScript execution environment . Protocol module DNS module and local storage module may send and or receive data through OS System API layer . For example protocol module may send and or receive data over any protocol such as HTTP to from a server computer through OS system API layer . Data received through protocol module may reference data sources by one or more domain names. DNS module may resolve the one or more domain names referenced by interfacing with one or more remote domain name servers through OS system API layer . Local storage module may store and or recall data from memory through OS system API layer .

Image parser CSS Parser HTML parser and JavaScript parser may parse data received through protocol module . HTML parser may parse HTML data. CSS parser may parse CSS data. JavaScript parser may parse JavaScript data. Image parser may parse image data. Each parser may generate and or update objects in a DOM maintained by DOM module .

Browser may comprise sets of program logic implementing one or more programmable engines such as extension execution environment and JavaScript execution environment . Extensions may be written one or more programming languages include JavaScript Python Ruby and or any other language. Each programmable engine may have access to DOM module and may operate on one or more objects from a DOM maintained by DOM module . For example JavaScript execution environment may execute JavaScript parsed by JavaScript parser and in response create update and or delete one or more objects managed by DOM module and or one or more aspects of a UI presenting the one or more objects.

Browser comprises rendering engine interactivity module and user interface . Each of the components may cause through OS frontend API layer one or more objects to be presented to a user using a client computer. Rendering engine may determine how objects are presented to a user. For example rendering engine may determine the color shape orientation position and or any other visual and or audio attribute of an image text field button and or any other object defined by a set of received instructions. Furthermore rendering engine may cause a button to be displayed on a monitor coupled to a client computer through OS frontend API layer .

User interface may determine what may be presented to a user. For example user interface may determine that a submit button should be hidden until data has been entered in one or more text fields. After data has been entered in the one or more text fields user interface may notify rendering engine to render the submit button accordingly.

Interactivity module may receive one or more inputs through OS Frontend API layer . For example in response to a user pressing a button on a mouse coupled to a client computer the OS running on the client computer may send a message to interactivity module through OS frontend API layer to indicate that a user pressed a button on a mouse. Interactivity module may determine that a user selected a particular button currently presented on a monitor. Interactively module may notify user interface and or rendering engine to update to update the UI accordingly.

A bot may include a subset of the modules and or features included in browser . For example a bot may include protocol module DNS module local storage module and HTML parser . A bot need not support a UI thus a bot need not include rendering engine interactivity module and user interface .

To increase processing time and speed of development a bot need not include one or more parsers and or execution environments. For example a bot may be configured to look for data embedded in a DOM defined in one or more HTML documents. Therefore a bot may include an HTML parser. However a bot need not include one or more parsers or execution environments such as image parser CSS parser JavaScript parser extension execution environment and or JavaScript execution environment .

A computer may be one or more physical computers virtual computers and or computing devices. As an example a computer may be one or more server computers cloud based computers cloud based cluster of computers virtual machine instances or virtual machine computing elements such as virtual processors storage and memory data centers storage devices desktop computers laptop computers mobile devices and or any other special purpose computing devices. Any reference to a computer herein may mean one or more computers unless expressly stated otherwise.

While each of the components listed above is illustrated as if running on a separate remote computer from each other one or more of the components listed above may be part of and or executed on the same computer. For example intermediary computer configuration storage and or web infrastructure may be executed on the same computer local area and or wide area network. Additionally or alternatively intermediary computer may be a proxy server and or layer for web infrastructure . Additionally or alternatively intermediary computer may be in line between a router and web infrastructure such that intermediary computer may intercept all network data sent to and or sent from web infrastructure over one or more protocols. Additionally or alternatively intermediary computer and or one or more modules comprising intermediary computer discussed herein may be a software layer between and or executed on web infrastructure and or a component of web infrastructure . Additionally or alternatively intermediary computer and or one or more modules comprising intermediary computer discussed herein may be part of a server side application that responds to requests over one or more standard and or proprietary protocols such as HTTP and or any other protocol.

Web infrastructure may comprise one or more server computers that receive requests for data from users through one or more computers such as client computer and or intermediary computer . Web infrastructure may respond by sending data to the browser that sent the request. As illustrated in the data sent from web infrastructure may include instructions HTML JavaScript and CSS . The one or more computers in web infrastructure may but need not be owned and or managed by one or more independent entities and may span across one or more computer networks.

A server computer may be a computer that receives requests for data and responds with data. For example a web server computer may be an HTTP based computer that receives HTTP requests and responds with data comprising HTML CSS and or JavaScript instructions. Additionally or alternatively a server computer may respond with data that references data on other server computers in and or outside of web infrastructure .

Intermediary computer may be an intermediary that may intercept instructions sent from web infrastructure parse and or execute one or more of the intercepted instructions modify the intercepted instructions generate and or add new instructions and send the modified and or new instructions to a client computer. For example intermediary computer may intercept HTML JavaScript and CSS generate modified HTML JavaScript and CSS and send modified HTML JavaScript and CSS to browser . Intermediary computer may intercept a request from browser generate a new and or modified request and send the new and or modified request to web infrastructure .

Intermediary computer may be an HTTP or SPDY intermediary that intercepts parses executes and or processes HTML JavaScript and CSS instructions. Additionally or alternatively intermediary computer may intercept requests for data and or instructions from a client application generate a new HTTP request and send the newly generated HTTP request to one or more HTTP and or SPDY based web servers. Additionally or alternatively intermediary computer may be an intermediary for any other standard and or proprietary protocol. Furthermore each of the components discussed herein which intermediary computer is comprised of may be configured to perform any of the processes and or methods discussed herein for any standard and or proprietary protocol.

Intermediary computer may be a server computer that one or more domain name servers or other elements of the domain name system DNS identify in DNS records as a destination network address associated with one or more internet domain names. Accordingly intermediary computer and or intermediary computer may receive requests sent to the one or more domains from a browser or bot. Based on using DNS to resolve the domain name in a request to a network address intermediary computer may forward the request or a modified request to a server computer in web infrastructure such as original web server computer .

In intermediary computer is programmed to send instructions to and receive requests from a particular type of client application browser . However in an embodiment intermediary computer may be programmed to send instructions to receive requests from and or open sockets with browsers and or bots.

Each module illustrated in intermediary computer may be software and or hardware coupled to a memory and or one or more processors on one or more computers. Additionally or alternatively a module may comprise specialized circuitry. For example a module such as a protocol client module processing engine forward transformer protocol server module credential validation module and or reverse transformer may be hardwired and or persistently programmed to support a set of instructions to and or that are useful to perform the functions discussed herein such as receiving instructions from web infrastructure processing and or executing the instructions modifying the instructions to generate and or update one or more credentials sending the modified instructions to a browser or bot on a client computer receiving requests and determine whether the requests include valid credentials and or responding accordingly as discussed in detail herein.

Protocol client module may intercept data over any standard or proprietary protocol. For example protocol client module may intercept data over HTTP.

Processing engine may process instructions intercepted by protocol client module which causes processing engine to generate one or more data structures. Processing one or more instructions may comprise parsing and or executing the one or more instructions. After processing the instructions processing engine may notify forward transformer to begin rendering instructions based on the one or more data structures created by processing engine that are currently in memory.

Processing engine may make requests for additional data. For example if instructions received from protocol client module reference additional instructions stored on another web server then processing engine may request the additional instructions through protocol client module .

Forward transformer may render a new set of instructions based on the one or more data structures in memory. Additionally or alternatively forward transformer may operate on the objects created by processing engine and generate one or more credential morphing instructions which if executed are configured to cause a browser to request receive generate and or update one or more dynamic credentials. Forward transformer may store the one or more dynamic credentials and or data associated with one or more dynamic credentials in storage . Forward transformer may operate on objects and or render instructions based on one or more configurations specified in configuration . Forward transformer may send the rendered instructions to one or more client computers through protocol server module . Instructions that are programmed and or configured to generate and or update a dynamic credential may be referred to herein as dynamic credential instructions or credential morphing instructions.

Forward transformer may generate one or more challenge credential instructions which if executed are configured to cause a browser to request receive generate and or update one or more challenge credentials. A challenge credential may be a credential that one or more dynamic credentials correspond to. A challenge credential may be static or dynamic. A challenge dynamic credential pair is a challenge credential and a dynamic credential wherein the dynamic credential corresponds to the challenge credential. Forward transformer may store one or more challenge credentials and or data indicating which dynamic credentials correspond to which challenge credentials in storage . Forward transformer may send challenge credentials and or challenge credential instructions to one or more client computers through protocol server module .

Protocol server module may receive the instructions generated by forward transformer and send the generated instructions to client computer . Additionally or alternatively protocol server module may intercept requests from client computer and forward the requests to credential validation module .

Credential validation module may receive requests intercepted by protocol server module from browser . Credential validation module may validate requests and or credentials and forward the requests for one or more pages to reverse transformer .

Credential validation module may generate one or more dynamic credentials. For example forward transformer may render a page and embed a dynamic credential received from credential validation module into the page. Also for example in response to a request from a client computer for a dynamic credential credential validation module may generate a new valid dynamic credential and send the new dynamic credential to the client computer through protocol server module .

Credential validation module may generate one or more parameters associated with a dynamic credential. For example credential validation module may store a credential a timestamp and an Internet Protocol IP address in storage . As discussed in detail herein credential validation module may validate a request with the stored credential based on the timestamp and the IP address associated with the stored credential.

Credential validation module may generate one or more challenge credentials. If credential validation module receives a dynamic credential and a challenge credential then credential validation module may determine whether the dynamic credential is valid based on the challenge credential. For example if credential validation module determines that a dynamic credential which belongs to a challenge dynamic credential pair corresponds with a challenge credential in the challenge dynamic credential pair then credential validation module may determine that the dynamic credential is valid otherwise credential validation module may determine that the dynamic credential is not valid.

Credential validation module may authorize requests based on configuration . For purposes of illustrating a clear example assume that configuration includes data indicating that a particular web page is public. In response to a request for the particular web page which does not include a dynamic credential credential validation module may authorize the request based on configuration .

Reverse transformer may translate requests intercepted by protocol server module which are based on instructions generated by forward transformer into requests that would have been generated by browser had browser received the original instructions sent from web infrastructure . For example if a request from browser includes a dynamic credential generated by credential validation module then reverse transformer may generate a new request that does not include the dynamic credential. Reverse transformer may send the new request web infrastructure through protocol client module on behalf of browser .

Configuration may be a database a configuration file and or any other system that stores configurations settings preferences and or protocols. Configuration may store more than one configuration for one or more web servers in web infrastructure . For example configuration may include data that indicates requests to a particular server computer in web infrastructure need not be validated. Additionally or alternatively configuration may include data that indicates requests for a particular web page need not be validated. Additionally or alternatively configuration may include data that indicates requests to submit data to a particular web site need not be validated. Also for example configuration may include data that indicates whether particular web pages should be processed by processing engine and or modified by forward transformer .

Configuration may be modified by a user and or administrator through one or more computers such intermediary computer a computer in web infrastructure and or any other computer. The one or more computers may present the user with an interface that presents the user with a site map. The site map may comprise a graph wherein the nodes correspond to pages and the edges between the nodes correspond to links.

The user may update configuration through the interface by selecting which links and or pages to be public do not require a valid credential and which links and or pages are private require a valid credential . For example the interface may receive input from a user indicating that a page is public. Configuration may be updated accordingly. When a request is received for the particular page even if the request does not have a valid credential intermediary computer may pass the request to web infrastructure . Also for example the interface may receive input from a user indicating that a link with a particular link identifier is public. When intermediary computer receives a request that includes a particular link identifier then intermediary computer may pass the request to web infrastructure even if the request does not have a valid credential.

Storage may be a database a configuration file and or any other system and or data structure that stores data. In storage is illustrated as if a separate computer from intermediary computer . Additionally or alternatively storage may be a data structure stored in memory on the one or more computers comprising intermediary computer . Additionally or alternatively storage may at least in part be a data structure stored in shared memory between one or more intermediary computers. Additionally or alternatively intermediary computer may at least in part be stored in volatile and or non volatile memory.

Browser may be a browser as described herein and executed on a client computer such as client computer . Additionally or alternatively browser may be a bot comprising one or more of the components traditionally found in a browser.

In an embodiment a data processing method may be configured to intercept instructions from a server computer that are directed toward a browser modify the intercepted instructions include one or more credential morphing instructions render a second set of instructions comprising the modified set of instructions and one or more credential morphing instructions. In an embodiment a data processing method may be configured to receive requests from a browser for a new credential from a client application validate the request using a previous credential generate the new credential and send the new credential to the browser. In an embodiment a data processing method may be configured to receive requests from a client computer for data on a server computer validate the request based on a dynamic credential. In an embodiment if the request is valid then the processing method may be configured to modify the request send the modified request to a server computer receive data from the server computer in response to the modified request and or send a response to a client computer. Various embodiments may use standard web protocols such as HTTP and or standard web based instructions such as HTML CSS and or JavaScript. Additionally or alternatively other standard and or proprietary protocols may be used. Additionally or alternatively other standard and or proprietary instructions may be used.

In step the intermediary computer modifies the first set of instructions to produce a modified set of instructions which if executed are configured to cause a credential to be included in the one or more requests sent by the client computer. For purposes of illustrating a clear example assume that the instructions received in the previous step comprise HTML CSS and JavaScript instructions that define a link which a browser or bot may use to generate a request for additional data and or instructions. Processing engine may parse the instructions. Forward transformer may identify the link processed by processing engine . Forward transformer may modify the instructions that define the link such that if the link is selected by a user using a browser then the browser executes a JavaScript callback that causes the browser to modify the URL one or more parameters in the URL and or data submitted in a request based on the URL to include a dynamic credential. Accordingly when the browser generates the request based at least in part on the URL the request includes a dynamic credential. The foregoing is an example of a technique for modifying instructions to cause a browser to include a credential in a URL. Other embodiments may use one or more other techniques.

For purposes of illustrating another clear example assume that the instructions received in the previous step define a form that is associated with a submit method. The submit method may be configured to collect data from one or more of the fields in the form and send the collected data in a request such as an HTTP POST request to a server computer. After processing engine parses the instructions forward transformer may add a new field in the form that includes a dynamic credential. Accordingly when the submit method is executed the browser may generate a request that includes the credential stored in the added field with other data from other fields in the form. Additionally or alternatively forward transformer may generate a wrapper for the previously defined submit method. The wrapper may be configured to call the previously defined submit method and tack on a credential in the payload of the request.

Additionally or alternatively intermediary computer may determine whether to parse and or modify instructions based on configuration . For example if protocol client module receives a set of original instructions in response to a request for a particular web page and configuration includes data that indicates the particular web page is a public page and or should not be modified then processing engine and or forward transformer may send the original instructions to the intended client computer without processing or modifying the instructions. Also for example if processing engine and or forward transformer determine that a set of instructions define a particular link to a particular target page and or URL and if configuration includes data that indicates the particular link and or the particular target page and or URL are protected then forward transformer may modify the instructions that define the particular link. Similarly if processing engine and or forward transformer determine that a set of instructions define a particular link to a particular target page and or URL and if configuration includes data that indicates the particular link and or the particular target page and or URL are public then forward transformer may modify the instructions that define the particular link.

In the above examples the modified instructions may be executed by a browser using one or more particular parsers and or execution environments such as JavaScript parser extension execution environment and or JavaScript execution environment . Thus a bot without the particular parser s and or execution environment s needed to parse and execute the modified instructions may not generate a request that includes a dynamic credential. Accordingly a request for instructions and or data from a bot may be dismissed ignored and or other responded to in a negative manner.

The modified instructions need not include a valid credential. The modified instructions may merely cause a credential to be included in one or more requests sent by the client computer. How a valid dynamic credential is requested received and or generated is discussed in detail herein.

In one or more of the examples above instructions that define an object such as a link field button and or form are modified to cause a browser to include a credential in a subsequent request. In another embodiment an intermediary computer may include one or more instructions that cause a browser to send one or more credentials in a subsequent request without modifying the instructions that define an object in a web page that the subsequent request is based on. For example an intermediary computer may include one or more instructions that store a credential as a browser cookie. A browser cookie may include data such as one or more credentials or credential parameters. A browser cookie may include one or more cookie parameters such as an expiration date and time a domain and or path. If the browser makes a request and the one or more cookie parameters if any are satisfied then the browser may include the data in the browser cookie such as a credential in the request. A browser cookie that includes one or more credentials and or one or more credential parameters may be referred to herein as a credential cookie. A credential cookie may include a dynamic credential a challenge credential and or a challenge dynamic credential pair.

Instructions which when executed by a browser may store a credential and or credential parameters as one or more browser cookies may be referred to herein as credential cookie instructions. In various embodiments credential cookie instructions may comprise HTML and or JavaScript instructions. Credential cookie instructions may comprise and or be included in dynamic credential instructions challenge credential instructions and or credential morphing instructions. Credential cookie instructions may store one or more credentials and or one or more credential parameters as one or more credential cookies.

Credential cookie instructions for a credential may be encoded as structured data such as XML and or HTML. The structured data may be included a particular section in a document such as a header section in an HTML document. A browser and or a bot may parse the credential cookie instructions comprising structured data and generate a credential cookie as discussed herein without one or more instructions in a programming language that are configured to be executed in an execution environment. For example forward transformer may generate credential cookie instructions that comprises a protocol header and or structured data object that define a challenge credential as a credential cookie without including one or more JavaScript instructions configured to generate process and or update the challenge credential. In an embodiment the credential cookie instructions may be a single line of structured data.

Additionally or alternatively credential cookie instructions may comprise executable instructions configured to be executed in an execution environment which causes the execution environment in a browser to generate and or update a credential as discussed herein. For example forward transformer may generate credential cookie instructions that include dynamic credential instructions that define generate and or update a dynamic credential stored in a credential cookie. Accordingly in an embodiment a challenge credential may be generated by a browser and or bot without executing one or more JavaScript instructions configured to generate process and or update the challenge credential however a browser may execute one or more JavaScript instructions configured to generate process and or update a dynamic credential for the same web page. If a bot does not include a JavaScript executing engine then the bot may generate the challenge credential but may not generate process and or update a dynamic credential for the same web page.

Forward transformer may include credential cookie instructions into one or more files and or instructions that define a web page without modifying the instructions that define an object in the web page. Additionally or alternatively forward transformer may include credential cookie instructions in a separate file and include a reference to the separate file in the web page without modifying the instructions that define an object in the web page. In an embodiment forward transformer may generate credential instructions that are configured to cause browser to generate a credential after a web page has finished loading. For example dynamic credential instructions may be configured to be executed at least partially in response to browser calling an onload page event and or callback.

For purposes of illustrating a clear example of an intermediary computer preforming step using a credential cookie assume that the instructions received in step comprise HTML CSS and JavaScript instructions that define a web page with a link which a browser or bot may use to generate a request for additional data. Forward transformer may include credential cookie instructions that define a cookie credential in the HTML CSS and JavaScript instructions received in the previous. Accordingly if the link is selected by a user using a browser then the browser may generate a request based on the link and the request may include one or more credentials and or credential parameters stored in the cookie credential.

In step the intermediary computer renders a second set of instructions comprising the modified set of instructions and one or more credential morphing instructions. The one or more credential morphing instructions may define one or more operations causing a browser with a particular parser and or execution environment to request receive generate and or update a valid credential that changes over time. For example forward transformer may render a second set of instructions that include the modified instructions and credential morphing instructions comprising one or more JavaScript instructions which if parsed and or executed are configured to cause a browser to request receive generate and or update a valid credential that changes over time. Additionally or alternatively forward transformer may include the credential morphing instructions by including a reference to a file with credential morphing instructions such as an additional JavaScript file in the rendered instructions.

If a bot does not have the particular parser and or execution environment necessary to execute the credential morphing instructions then the bot may not have a valid dynamic credential to submit with a subsequent request. Accordingly subsequent requests from bots may be dismissed ignored and or otherwise negatively dealt with as discussed herein. However requests from browsers may be processed as if uninterrupted by an intermediary.

In step the intermediary computer sends the second set of instructions which comprise the modified instructions and the credential morphing instructions to the client computer. For example forward transformer may send the modified instructions in step and the credential morphing instructions in step to browser .

In step the client computer parses and or executes the credential morphing instructions and updates the credential over time. The credential morphing instructions may cause the client computer and or browser executing on the client computer to perform one or more methods to update a credential over time. In an embodiment the credential may be stored in storage on a client computer intermediary computer and or storage. The storage may but need not be non volatile storage. When a new credential is received and or generated the old credential is deleted. Each newly received and or generated credential may replace a previous credential at the particular address in memory that the previous credential was stored.

In step the intermediary computer determines whether the credential is valid. For example credential validation module may determine that the old credential is valid if it is stored in storage and or other storage device. Additionally or alternatively credential validation module may determine that a credential is valid based on one or more implied and or express parameters. If credential validation module determines that each of the parameters is satisfied then control may pass to step . Otherwise control may pass to step .

Credential validation module may delete a credential and or one or more parameters associated with the credential after credential validation module validates the credential. Thus credential validation module need not validate the same credential more than once.

Bots may request additional web pages quickly compared to a user viewing a page and selecting a link. To thwart and slow down one or more requests from bots a credential may have a parameter that indicates the credential is invalid for a first amount of time before it becomes valid for a second period of time. Thus if a bot is able to determine a valid credential and quickly sends a request with the credential to the intermediary computer the intermediary computer may determine that the credential is invalid and pass to step .

A credential may be associated and or embedded with one or more implied and or express parameters. For example a credential may be and or be associated with a timestamp a time range an IP address a subnet a browser identifier a username a password a keyword a randomly generated value and or any other identifier and or key that may be used to determine whether a credential is valid.

An implied parameter may be a parameter that is inherent to the credential. For example a credential may be based on time and credential validation module may determine the time from the credential. Credential validation module may be configured to determine that a credential is valid if the determined time is within a particular amount of time from the current time. Similarly credential validation module may be configured to determine that a credential is invalid if the determined timestamp identifies a time that is outside a particular amount of time from the current time.

An express parameter may be a parameter that is associated with and or embedded in a credential. For example a credential may be associated with a parameter stored in storage which indicates the time at which the credential is no longer valid. Credential validation module may query for the parameter stored in storage based on the credential. If the current time is less than the time retrieved from storage then credential validation module may determine that the old credential is valid. Otherwise credential validation module may determine that the credential is invalid.

Additionally or alternatively a credential may include one or more encrypted parameters. Instead of storing one or more parameters in storage credential validation module may generate a credential that comprises one or more encrypted parameters. Credential validation module may validate the credential by decrypting the one or more encrypted parameters and determining whether each of the decrypted parameters is satisfied. If so then credential validation module may determine the credential is valid. Otherwise credential validation module may determine the credential is invalid.

In step the intermediary computer generates a new credential. For example credential validation module may generate a new credential with one or more implied and or express parameters. The one or more parameters may include any of the parameters discussed above and or any other value identifier and or key that may be used to determine whether the new credential is valid. Credential validation module may store the new credential and or the one or more parameters in storage . Additionally or alternatively credential validation module may embed one or more parameters in the new credential.

Intermediary computer may not have an old credential to validate. For example when a browser such as browser requests a page and or credential from intermediary computer for the first time browser may not have an old credential for intermediary computer to validate. If intermediary computer receives a request for a new credential without an old credential to validate then intermediary computer may generate a credential as discussed in detail herein. Additionally the credential may be an initialization credential which may be used by the browser and or the credential morphing instructions to request a new valid credential

If intermediary computer receives a request from browser for a new credential with an initialization credential and determines the initialization credential is valid then intermediary computer may respond with a valid new credential as discussed herein. However if intermediary computer receives a request from browser for a web page from web infrastructure with an initialization credential then control may pass to step .

In an embodiment forward transformer may include a credential with the credential morphing instructions. The credential may be an initialization credential. However in an embodiment forward transformer need not include a credential with the credential morphing instructions.

In step the intermediary computer may send the new credential to the client computer. For example credential validation module may send the credential to browser through protocol server module .

In an embodiment credential validation module may send the new credential to forward transformer . Forward transformer may generate one or more new credential morphing instructions which when executed operate on the credential and or request a new credential. For example if executed the one or more instructions may be configured to replace the previous credential in memory on the client computer. Additionally or alternatively if executed the one or more instructions may be configured to indicate when the client computer and or browser should send a new request for a new credential. Additionally or alternatively if executed the one or more instructions may be configured to generate a new credential.

Forward transformer may generate a seed value from a new credential generated by credential validation module which may be used to generate the new credential by the client computer. illustrates a process for generating a seed value and sending the seed value to the client computer to generate one or more new credentials in an example embodiment. In step the intermediary computer generates a seed. For purposes of illustrating a clear example assume forward transformer receives a new credential from credential validation module to be sent to a browser. Forward transformer may generate a seed value based on the new credential. In an embodiment a seed value may be a challenge credential.

In step the intermediary computer sends the seed value to the client computer. For example forward transformer sends the seed value to browser .

In step the client computer generates a new credential based on the seed or a previous credential. For example browser may execute one or more credential morphing instructions which may be configured to generate a valid credential based on a seed received from intermediary computer . In an embodiment over time browser may execute the credential morphing instructions again to generate a new valid credential based on one or more previously generated valid credentials.

The intermediary computer may repeat steps according to the credential morphing instructions. For example the credential morphing instructions may define a time period after which a browser should request receive generate and or update a new credential as discussed in detail herein.

Forward transformer may render and send one or more new credential morphing instructions with each credential and or a seed which if executed may be configured to cause the client computer and or browser to request and or generate a new credential. The one or more new credential morphing instructions may be different than one or more previously sent credential morphing instructions.

Returning now to in step the intermediary intercepts a request for data. For example protocol server module may receive a request from browser for data and or instructions such as a web page from web infrastructure .

In step the intermediary computer determines whether the request is valid by determining if the credential included in the request if any is valid. For example protocol server module may forward the request to credential validation module . Credential validation module may determine whether the credential is valid based on one or more of the methods discussed herein. If credential validation module determines the credential is valid then control passes to step . Otherwise control passes to step . If credential validation module determines that the request does not include a credential then control may pass to step . If credential validation module determines that the request for data includes an initializing credential then control may pass to step .

If configuration includes data indicating that the data requested is public such as a home page of a web site then credential validation module may determine that the request is valid even though the request did not include a credential. In response control may pass to step . If however configuration includes data indicating that the data requested is public but the request includes an invalid credential then control may pass to step .

In step the intermediary computer performs a negative responsive action. For example credential validation module may terminate the request. Additionally or alternatively credential validation module may treat the request as a request for an initializing credential and in response generate and send the initializing credential and or seed value to browser via forward transformer as discussed herein in detail. Additionally or alternatively the intermediary computer may respond with a message defined by a user and or administrator through a client computer and or the intermediary computer. Additionally or alternatively intermediary computer may respond with one or more standard and or proprietary error codes and or messages. For example intermediary computer may return HTTP error code and a message Bad Request to browser and or client computer . Intermediary computer may send a configurable response that indicates the request was invalid the configurable response may be selected by an administrator and or stored in configuration .

In step the intermediary computer forwards the request for data to the server computer. For example credential validation module may pass the request to reverse transformer . Reverse transformer may strip out data relating to the credential and produce a new request which would have been generated by browser had the original instructions been received by browser . Reverse transformer may send the new request to web infrastructure through protocol client module .

If web infrastructure responds to a forwarded request with data and or instructions then intermediary computer may repeat one or more of the steps discussed herein. For example intermediary computer may perform step in response to receiving the new data and or instructions from web infrastructure .

In an embodiment an intermediary computer may be configured to inject one or more challenge dynamic credential pairs into one or more instructions that define a web page a portion of a web page and or data to be included in a web page and send the one or more instructions with the one or more challenge dynamic credential pairs to a client computer. In response to a request from the client computer the intermediary may be configured to receive the request determine whether the request includes a valid dynamic credential based on a challenge credential. If the intermediary determines that the dynamic credential is valid then the intermediary computer may forward the request to a server computer otherwise the intermediary may perform one or more negative responsive actions.

In step the intermediary computer generates a challenge credential. For purposes of illustrating a clear example assume configuration includes data that indicates a challenge credential should be a random value selected from a particular distribution such as a Gaussian distribution with a particular mean variance maximum and minimum. Forward transformer may request a challenge credential from credential validation module . Credential validation module may select a value according to the Gaussian distribution and send the value to forward transformer . Forward transformer may render credential cookie instructions that include the challenge credential.

In step the intermediary computer renders one or more dynamic credential instructions that cause the client computer to generate a dynamic credential that corresponds to the challenge credential a challenge dynamic credential pair and to include the dynamic credential in the one or more requests from the client computer. For example forward transformer may request a dynamic credential from credential validation module that corresponds to the challenge credential generated in the previous step. After receiving a dynamic credential that corresponds to the challenge credential from credential validation module forward transformer may render one or more dynamic credential instructions. The one or more dynamic credential instructions may comprise and or be included in one or more credential cookie instructions.

There are many ways that credential validation module may generate a dynamic credential that corresponds to and or is based on the challenge credential. For purposes of illustrating a clear example assume the challenge credential is an integer and configuration includes data that indicates a valid dynamic credential should be the result of an operation based on and or a transformation of the challenge credential such as the product of the challenge credential a prime number and or the current number of seconds since an epoch. Credential validation module may generate a challenge credential pair wherein the dynamic credential that is a multiple of the challenge credential generated in the previous step the prime number and or the current number of seconds since the epoch.

For purposes of illustrating another clear example assume configuration includes data that indicates a dynamic credential should be a random value selected from a particular distribution such as a uniform distribution ranging from a minimum value to a maximum value. Credential validation module may generate a dynamic credential with a random value selected according to the uniform distribution. Credential validation module and or forward transformer may store a mapping in storage that associates the dynamic credential and the challenge credential.

In step the intermediary computer modifies the first set of instructions to produce a second set of instructions that include the challenge credential and the one or more dynamic credential instructions and which when executed by the client computer cause the challenge credential to be included in the one or more requests sent from the client computer when executed by the client computer. For example forward transformer may include the credential cookie instructions for the challenge cookie generated in step and the credential cookie instructions for the dynamic cookie generated in step in the one or more instructions received in step to produce a modified set of instructions that define a web page with a valid challenge dynamic credential pair.

In step the intermediary computer sends the second set of instructions to the client computer. For example forward transformer may send to browser through protocol server module the one or more instructions with instructions comprising protocol headers structured data and or executable instructions which when executed by a browser generate a valid challenge dynamic credential pair stored in one or more credential cookies.

A dynamic credential in a challenge dynamic credential pair may be updated over time according to one or more of the methods discussed herein. For example browser may execute one or more instructions that cause browser to send a request for a new dynamic credential to intermediary computer . The request may include the dynamic credential and the challenge credential in the challenge dynamic credential pair. Credential validation module may validate the dynamic credential based on the challenge credential generate a new dynamic credential and send the new dynamic credential and or or the challenge credential to browser . After a dynamic credential in a particular challenge dynamic credential pair is updated using one or more of the systems and or methods discussed herein credential validation module and or forward transformer may update the mapping in storage with data indicating that the new updated dynamic credential and or not the previous dynamic credential is associated with the challenge credential in the particular challenge dynamic credential pair.

In an embodiment a challenge credential may also be a dynamic credential. The challenge credential may be generated and or updated using the same one or more methods discussed herein with a dynamic credential. After a challenge credential in a particular challenge dynamic credential pair is updated using one or more of the systems and or methods discussed herein credential validation module and or forward transformer may update the mapping in storage with data indicating that the new updated challenge credential and or not the previous challenge credential is associated with the dynamic credential in the particular challenge dynamic credential pair.

Referring again to in step the intermediary computer receives a request for data. For example browser may receive input indicating that a user selected a particular link in the web page sent to browser in step . In response browser may generate a request based on the particular link and include a challenge credential and or a dynamic credential. Credential validation module may receive the request through protocol server module .

In step the intermediary computer may determine whether the dynamic credential if included in the request is valid. If so then control may pass to step otherwise control may pass to stop . For example if the request includes a challenge credential but not a dynamic credential then credential validation module may determine browser is a bot and or control may pass to step . Similarly if the request includes a dynamic credential but not a challenge credential then credential validation module may determine browser is a bot and or control may pass to step .

If the request includes a challenge credential and a dynamic credential then credential validation module may determine whether the dynamic credential corresponds with the challenge credential to form a valid challenge dynamic credential pair. For example credential validation module may determine whether a mapping in storage associates the challenge credential to the dynamic credential in the request. If so then credential validation module may determine that the dynamic credential corresponds with the challenge credential browser is a legitimate browser browser is not a bot and or control may pass to step otherwise credential validation module may determine that the dynamic credential does not correspond with the challenge credential browser is not a legitimate browser browser is a bot and or control may pass to step .

Credential validation module may determine whether a dynamic credential corresponds with a challenge credential based on configuration . For example if configuration indicates that a dynamic credential should be a transformation of and or based on the challenge credential to be a valid challenge dynamic credential pair then credential validation module may perform one or more transformations on the dynamic credential to produce a transformed credential and determine if the transformed credential matches the challenge credential. If so then credential validation module may determine that the dynamic credential corresponds with the challenge credential browser is a legitimate browser browser is not a bot and or control may pass to step otherwise credential validation module may determine that the dynamic credential does not correspond with the challenge credential browser is not a legitimate browser browser is a bot and or control may pass to step .

In step the intermediary computer may perform a negative responsive action such as the one or more responsive actions discussed herein. In step the intermediary computer may forward the request to a server computer as discussed herein.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other challenge storage device coupled to bus for storing challenge information and instructions for processor . A storage device such as a magnetic disk or optical disk is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a cathode ray tube CRT for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operation in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

Using the networked computer arrangements intermediary computer and or processing methods described herein security in client server data processing may be significantly increased. Dynamic credential techniques discussed herein effectively reduce automated attacks. Consequently one or more various attacks such as a denial of service DOS attack credential stuffing fake account creation ratings or results manipulation man in the browser attacks reserving rival goods or services scanning for vulnerabilities and or exploitation of vulnerabilities are frustrated because requests are accompanied by a credential that changes over time.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

1. An intermediary computer system comprising a memory a processor coupled to the memory a protocol client module that is coupled to the processor and the memory and configured to intercept a first set of instructions that define one or more original operations which are configured to cause one or more requests to be sent to the server computer when executed by the client computer a forward transformer module that is coupled to the processor and the memory and configured to generate at the intermediary computer system a first challenge credential to be sent to the client computer render one or more first dynamic credential instructions which when executed by the client computer cause the client computer to generate a first dynamic credential that corresponds to the first challenge credential and to include the first dynamic credential in the one or more requests from the client computer modify the first set of instructions to produce a second set of instructions wherein the second set of instructions include the first challenge credential and the one or more first dynamic credential instructions and which when executed by the client computer cause the first challenge credential to be included in the one or more requests sent from the client computer send the second set of instructions to a second computer.

2. The intermediary computer system of clause 1 further comprising a protocol server module coupled to the processor and the memory and configured to receive a request for data a credential validation module coupled to the processor and the memory and configured to perform a negative responsive action in response to determining the request does not include a dynamic credential.

3. The intermediary computer system of any clause 1 2 further comprising a protocol server module coupled to the processor and the memory and configured to receive a request for data that includes the first challenge credential and a dynamic credential a credential validation module coupled to the processor and the memory and configured to perform a negative responsive action in response to determining the challenge credential and the dynamic credential included in the request does not correspond to the first challenge credential.

4. The intermediary computer system of any clause 1 3 wherein the credential validation module is further configured to send a configurable response that indicates the request was invalid as at least part of performing the negative responsive action.

5. The intermediary computer system of any clause 1 4 further comprising a protocol server module coupled to the processor and the memory and configured to receive a request for data that includes a challenge credential and a dynamic credential a credential validation module coupled to the processor and the memory and configured to determine that the challenge credential is the first challenge credential and determine that the dynamic credential is the first dynamic credential and corresponds to the first challenge credential a reverse transformer coupled to the processor and the memory and configured to forward at least a portion of the request to the server computer in response to the credential validation module determining that the first dynamic credential corresponds to the first challenge credential.

6. The intermediary computer system of any clause 1 5 wherein the credential validation module is configured to determine that the first dynamic credential corresponds to the first challenge credential by determining a value stored in the intermediary computer system and associated with the first challenge credential matches the first dynamic credential.

7. The intermediary computer system of any clause 1 6 wherein the credential validation module is configured to determine that the first dynamic credential corresponds to the first challenge credential by performing one or more transformations to the dynamic credential to produce a transformed credential and determining that the transformed credential matches the first challenge credential.

8. The intermediary computer system of any clause 1 7 wherein the protocol client module is further configured to intercept a third set of instructions which when executed by the client computer cause one or more second requests to be sent to the server computer the forward transformer module is further configured to generate at the computer a second challenge credential to be sent to the client computer wherein the second challenge credential is different than the first challenge credential render one or more second dynamic credential instructions which when executed by the client computer cause the client computer to generate a second dynamic credential that corresponds to the first challenge credential and to include the second dynamic credential in the one or more second requests from the client computer wherein the second dynamic credential is different than the first dynamic credential modify the third set of instructions to produce a fourth set of instructions wherein the fourth set of instructions include the second challenge credential and the one or more second dynamic credential instructions and which when executed by the client computer cause the second challenge credential to be included in the one or more requests sent from the client computer when executed by the client computer and send the fourth set of instructions to the second computer.

9. The intermediary computer system of any clause 1 8 wherein the first set of instructions comprises a web page and the second set of instructions includes a subset of instructions that cause the first challenge credential to be stored as a first cookie associated with the web page when the second set of instructions are executed by the client computer wherein the subset of instructions are not the one or more first dynamic credential instructions wherein the one or more first dynamic credential instructions cause the first dynamic credential to be stored as a second cookie associated with the same web page when the second set of instructions are executed by the client computer.

10. The intermediary computer system of any clause 1 9 wherein the subset of instructions is a single line of structured data within a header section defined in the web page and the one or more first dynamic credential instructions are configured to be executed after the web page is loaded by a browser being executed on the second computer.

11. The intermediary computer system of any clause 1 10 wherein the second set of instructions include the one or more first dynamic credential instructions by reference.

12. The intermediary computer system of any clause 1 11 further comprising a protocol server module coupled to the processor and the memory and configured to receive a request for data that includes a challenge credential and a dynamic credential a credential validation module coupled to the processor and the memory and configured to determine that the challenge credential is the first challenge credential and associated with a one or more first parameters determine that the dynamic credential is the first dynamic credential and associated with one or more second parameters determine that the dynamic credential corresponds to the first challenge credential the one or more first parameters are satisfied and the one or more second parameters are satisfied a reverse transformer coupled to the processor and the memory and configured to forward at least a portion of the request to the server computer in response to the credential validation module determining that the one or more first parameters are satisfied the one or more second parameters are satisfied and the first dynamic credential corresponds to the first challenge credential.

13. A non transitory computer readable data storage medium storing one or more sequences of instructions which when executed cause one or more processors to perform any of the features recited in any clause 1 12

14. A computer program product including instructions which when implemented on one or more processors carries out any of the features recited in any clause 1 12.

15. A method which when implemented on one or more processors carries out any of the features recited in any clause 1 12.

16. A method comprising receiving a one or more instructions that define a first challenge credential one or more first dynamic credential instructions and a first object to be displayed to a user storing the first challenge credential executing the one or more first dynamic credential instructions to produce a first dynamic credential that corresponds to the first challenge credential causing displaying the object receiving a first input from the user indicating that the user selected the first object and in response sending a first request to a server computer for a first set of data wherein the first request is based on the object and includes the first challenge credential and the first dynamic credential receiving from the server computer the first set of data and one or more second dynamic credential instructions and in response executing the one or more second dynamic credential instructions to produce a second dynamic credential that corresponds to the first challenge credential wherein the one or more second dynamic credential instructions are different than the one or more first dynamic credential instructions and the second dynamic credential is different than the first dynamic credential wherein the method is performed by one or more computing devices.

17. The method of clause 16 further comprising receiving a second input from the user and in response sending a second request to the server computer for a second set of data wherein the second request comprises the first challenge credential and the second dynamic credential receiving from the server computer and in response to the second request that included the first challenge credential and the second dynamic credential that corresponds to the first challenge credential the second set of data.

18. The method of any clause 16 17 further comprising receiving the second set of data comprising a second challenge credential that corresponds to the second dynamic credential storing the second challenge credential and deleting the first challenge credential receiving a third input from the user and in response sending a third request to the server computer for a third set of data wherein the third request comprises the second challenge credential and the second dynamic credential receiving from the server computer and in response to the third request that included the first challenge credential and the second dynamic credential that corresponds to the first challenge credential the third set of data.

19. The method of any clause 16 18 further comprising after a particular time receiving a second input from the user and in response sending a second request to the server computer for a second set of data wherein the second request comprises the first challenge credential and the second dynamic credential receiving from the server computer and in response to the second request that included the first challenge credential and the second dynamic credential that no longer corresponds to the first challenge credential an error indicating that the request is not valid because the second dynamic credential does not correspond with the first challenge credential.

20. The method of any clause 16 19 wherein storing the first challenge credential comprises storing the first challenge credential as a browser cookie that is configured to be included in any request for data from a particular domain.

21. The method of any clause 16 20 wherein executing the one or more first dynamic credential instructions causing storing the first dynamic credential as a browser cookie that is configured to be included in any request for data from a particular domain.

22. The method of any clause 16 21 wherein executing the one or more first dynamic credential instructions causing generating the first dynamic credential based on a value of the first challenge credential.

23. A non transitory computer readable data storage medium storing one or more sequences of instructions which when executed cause one or more processors to perform any of the features recited in any clause 16 22.

24. A computer program product including instructions which when implemented on one or more processors carries out any of the features recited in any clause 16 22.

25. A method which when implemented on one or more processors carries out any of the features recited in any clause 16 22.

