---

title: Method and system for monitoring calls to an application program interface (API) function
abstract: A method and device for monitoring calls to an application program interface (API) function includes monitoring for a memory permission violation of a computing device caused by the API function call. If a memory permission violation occurs, control of the computing device is transferred to a virtual machine monitor to intervene prior to execution of the API function. The virtual machine monitor may perform one or more actions in response to the API function call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09495540&OS=09495540&RS=09495540
owner: Intel Corporation
number: 09495540
owner_city: Santa Clara
owner_country: US
publication_date: 20151027
---
This application is a continuation application of U.S. application Ser. No. 13 997 739 entitled Method and System for Monitoring Calls to an Application Program Interface API Function which was filed on Jun. 25 2013 and which issued as U.S. Pat. No. 9 171 146 on Oct. 27 2015.

Modern computing devices such as laptops smartphones mobile Internet devices MIDs and tablets are becoming ubiquitous with everyday life so much so that the reliability of such devices is becoming increasingly important. The detection and prevention of computer worms viruses and other types of malware is an essential aspect to ensuring the reliability of a computing device. However as malware becomes more sophisticated detecting and preventing malware has become increasingly difficult.

Traditionally detection and prevention of malware on a computing device is performed by anti malware software executing on the computing device. Often such software is designed to operate in connection with a specific operating system or kernel. That is conventional anti malware software is not typically designed to work universally across disparate operating systems. Additionally traditional anti malware solutions are typically solely software based solutions which require a growing amount of resources of the computing device especially in light of the increasing sophistication of malware.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific exemplary embodiments thereof have been shown by way of example in the drawings and will herein be described in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives falling within the spirit and scope of the invention as defined by the appended claims.

In the following description numerous specific details such as logic implementations opcodes means to specify operands resource partitioning sharing duplication implementations types and interrelationships of system components and logic partitioning integration choices are set forth in order to provide a more thorough understanding of the present disclosure. It will be appreciated however by one skilled in the art that embodiments of the disclosure may be practiced without such specific details. In other instances control structures gate level circuits and full software instruction sequences have not been shown in detail in order not to obscure the invention. Those of ordinary skill in the art with the included descriptions will be able to implement appropriate functionality without undue experimentation.

References in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

Embodiments of the invention may be implemented in hardware firmware software or any combination thereof. Embodiments of the invention implemented in a computer system may include one or more bus based interconnects between components and or one or more point to point interconnects between components. Embodiments of the invention may also be implemented as instructions stored on one or more non transitory machine readable media which may be read and executed by one or more processors. A non transitory machine readable medium may include any non transitory mechanism for storing or transmitting information in a form readable by a machine e.g. a computing device . For example a non transitory machine readable medium may include any one or combination of read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices and others.

Referring now to a computing device is configured to monitor calls to a system application programming interface API function to determine for example whether such calls were made to carry out a malicious activity on the computing device or whether they were made for a legitimate reason. To do so as discussed in more detail below memory permissions associated with a memory page on which the monitored API function is located are set to cause a memory permission violation in response to the API function call. As such when the monitored API function is called by a process executed on the computing device the memory permission violation is generated and control is transferred to an agent executing on the computing device to investigate the API function call further. In this way the computing device may make a determination whether the API function call was made to carry out a malicious activity. If so the computing device may prevent execution of the API function and or perform additional security operations. If not the computing device may allow execution of the API function.

The computing device may be embodied as any type of computing device capable of performing the functions described herein. For example the computing device may be embodied as a desktop computer a laptop computer a mobile internet device a handheld computer a smart phone a personal digital assistant a telephony device or other computing device. In the illustrative embodiment of the computing device includes a processor an I O subsystem a memory a data storage device and one or more peripheral devices . In some embodiments several of the foregoing components may be incorporated on a motherboard of the computing device while other components may be communicatively coupled to the motherboard via for example a peripheral port. Furthermore it should be appreciated that the computing device may include other components sub components and devices commonly found in a computer and or computing device which are not illustrated in for clarity of the description.

The processor of the computing device may be embodied as any type of processor capable of executing software firmware such as a microprocessor digital signal processor microcontroller or the like. The processor is illustratively embodied as a single core processor having a processor core . However in other embodiments the processor may be embodied as a multi core processor having multiple processor cores . Additionally the computing device may include additional processors having one or more processor cores .

The processor may also include a memory management unit to control memory functions. In the illustrative embodiment the memory management unit includes hardware and or firmware components that facilitate or otherwise assist in the virtualization of computing environments. For example the memory management unit facilitates the use of extended page tables EPTs which provide memory virtualization for virtual partitions that may be established on the computing device as discussed in more detail below. The EPTs provide additional memory permissions to be set for each memory page. As discussed below those additional memory permissions are used to control the use of the monitored API function.

The I O subsystem of the computing device may be embodied as circuitry and or components to facilitate input output operations with the processor and or other components of the computing device . In some embodiments the I O subsystem may be embodied as a memory controller hub MCH or northbridge an input output controller hub ICH or southbridge and a firmware device. In such embodiments the firmware device of the I O subsystem may be embodied as a memory device for storing Basic Input Output System BIOS data and or instructions and or other information e.g. a BIOS driver used during booting of the computing device . However in other embodiments I O subsystems having other configurations may be used. For example in some embodiments the I O subsystem may be embodied as a platform controller hub PCH . In such embodiments the memory controller hub MCH may be incorporated in or otherwise associated with the processor and the processor may communicate directly with the memory as shown by the hashed line in . Additionally in other embodiments the I O subsystem may form a portion of a system on a chip SoC and be incorporated along with the processor and other components of the computing device on a single integrated circuit chip.

The processor is communicatively coupled to the I O subsystem via a number of signal paths. These signal paths and other signal paths illustrated in may be embodied as any type of signal paths capable of facilitating communication between the components of the computing device . For example the signal paths may be embodied as any number of wires cables light guides printed circuit board traces via bus intervening devices and or the like.

The memory of the computing device may be embodied as or otherwise include one or more memory devices or data storage locations including for example dynamic random access memory devices DRAM synchronous dynamic random access memory devices SDRAM double data rate synchronous dynamic random access memory device DDR SDRAM mask read only memory ROM devices erasable programmable ROM EPROM electrically erasable programmable ROM EEPROM devices flash memory devices and or other volatile and or non volatile memory devices. The memory is communicatively coupled to the I O subsystem via a number of signal paths. Although only a single memory device is illustrated in the computing device may include additional memory devices in other embodiments. Various data and software may be stored in the memory device . For example one or more operating systems applications programs libraries and drivers that make up the software stack executed by the processor may reside in memory during execution. Furthermore software and data stored in memory may be swapped between the memory and the data storage as part of memory management operations.

Additionally as discussed above one or more extended page tables EPTs may be implemented on the computing device . The EPTs may be stored in an addressable location of the memory and utilized to facilitate virtualization of the computing device . As discussed in more detail below an EPT allows a virtual machine monitor VMM of the computing device to specify additional memory permissions for one or more memory pages stored in the memory .

The peripheral devices of the computing device may include any number of peripheral or interface devices. For example the peripheral devices may include a display a touch screen a keyboard a mouse external speakers and or other peripheral devices. Additionally the peripheral devices may include communication circuitry to facilitate communication with one or more remote computing devices over a network. The computing device may use any suitable communication protocol to communicate with other computing devices over the network depending on for example the particular type of network s . The peripheral devices of the computing device may also include data storage device s . The data storage device s may be embodied as any type of device or devices configured for the short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. The particular devices included in the peripheral devices may depend upon for example the intended use of the computing device . The peripheral devices are communicatively coupled to the I O subsystem via a number of signal paths thereby allowing the I O subsystem and or processor to receive inputs from and send outputs to the peripheral devices .

Referring now to in some embodiments a virtualized software execution environment is established on the computing device to monitor for maliciously intended API function calls. As shown in the computing device includes platform hardware which includes the processor and the memory discussed above. Of course it should be appreciated that the platform hardware may include a number of additional structures and devices of the computing device which are not shown in for clarity of the description.

The illustrative virtualized software execution environment is implemented on the platform hardware of the computing device . The software execution environment includes a virtual machine monitor VMM or hypervisor which is a privileged software component that facilitates and manages the virtualization of the platform hardware to allow multiple guest operating systems and or other applications to execute concurrently on the computing device . In the illustrative embodiment the VMM is executed in a privileged or root mode of the computing device and has substantially full control of the hardware resources of the computing device .

The software execution environment also includes one or more virtual machines VMs which are executed as a guest on the VMM . That is the VMs are executed in a non privileged or non root mode. Each of the VMs may execute an operating system OS respectively. The VMs may execute the same or a different OS . For example the OS may be a WINDOWS OS which is commercially available from Microsoft Corporation of Redmond Wash. whereas the OS may be a LINUX OS which is commercially available from one of a number of vendors such as Red Hat of Raleigh N.C. Each of the OS s may execute one or more processes . Each of the processes may be similar or different based on the respective type of the OS the intended use of the respective VM and or other criteria. It should be appreciated that although only two VMs are illustrated in the virtualized environment may include greater or fewer VMs in other embodiments.

The VMM translates operations of each OS to provide a level of abstraction between each OS and the platform hardware . In doing so the VMM may provide each OS operating in each VM with a hardware abstraction of some or all of the components of the platform hardware . For example the VMM may virtualize the processor of the platform hardware for each of the VMs . In some embodiments the VMM may also virtualize the physical memory of the platform hardware to provide an abstraction of the memory for each of the VMs .

As discussed above the processor includes the memory management unit to facilitate the virtualization of computing environments and implement the one or more EPTs on the computing device . In operation the VMM may maintain an EPT which may be utilized to map guest physical addresses of the VMs to host physical addresses of the physical platform memory . Additionally while the applications e.g. the OS s are executing on the associated VMs in the non privileged mode certain instructions processor events and or errors may trigger a hardware assisted transition to the privileged mode i.e. the memory management unit may assist in the transition to allow the VMM to respond to such events.

As discussed above the virtualized software execution environment may be established on the computing device to monitor for maliciously intended attempts to execute the monitored API function. If the computing device detects that an execution attempt has occurred the computing device may determine whether the attempt violates a memory permission. To facilitate such functionality the VMM may set a memory permission of the EPT associated with the memory pages s containing the monitored API function. Specifically the memory permission is selected or otherwise set such that the attempted execution of the monitored API function results in a memory permission violation. It should be appreciated that the memory permission may be enforced by the hardware of the computing device in a hardware independent fashion. For example in one embodiment a memory permission associated with the memory page s containing the monitored API function is set to indicate that the memory page s does not include executable code. As such the attempted execution of the monitored API function which has been identified as being non executable generates a memory permission violation.

For example during operation of the computing device one or more of the processes may invoke a monitored API and attempt to execute a corresponding API function e.g. CreateFile . The guest physical address of the monitored API function may be determined using a guest page table GPT of the VM that invoked the monitored API. The GPT may be used to translate and or map a guest virtual address of the monitored API function to the corresponding guest physical address on the VM . Thereafter the EPT may be used to translate and or map the guest physical address of the monitored API function to the corresponding host physical address of the monitored API function. In such embodiments the host physical address may point to the actual location of the monitored API in the physical memory of the computing device . The computing device may also determine whether the EPT contains a memory permission that prevents execution of the monitored API function e.g. CreateFile or otherwise generates a memory violation in response to the attempted execution. If the computing device determines that the EPT includes such a memory permission the computing device may determine whether the execution of the monitored API function e.g. CreateFile violates the associated memory permission of the computing device .

In some embodiments in response to determining that a violation of a memory permission of the computing device has not occurred the computing device may allow the process to execute the monitored API function. If on the other hand the computing device determines that a violation of the permission has occurred the computing device may transfer control from the non privileged mode to the VMM executed in the privileged mode to provide the VMM with an opportunity to intervene and or instigate further actions. For example in some embodiments the VMM may save a platform context. Additionally or alternatively the VMM may invoke an error handler to perform one or more additional functions in response to the monitored API function call.

For example in some embodiments the computing device may in response to determining that a violation of a memory permission has occurred further determine whether the API function call was made to carry out a malicious activity or whether it was made for legitimate purposes. For example the computing device may determine that the API function call is made to carry out a malicious activity based on a predefined set of rules security policies heuristics and or one or more behavioral patterns associated with known malware. If the computing device determines that the API function call is not made to carry out a malicious activity e.g. the API function call was made for legitimate reasons the computing device may allow the process to execute the corresponding API function. If on the other hand the computing device determines that the API function call is made to carry out a malicious activity the computing device may prevent the process from executing the monitored API function. In some embodiments the computing device may in addition to preventing execution of the associated API function perform one or more additional security functions. For example the computing device may save the context of the maliciously intended API function call to a log for further analysis trigger an OS specific malware monitoring agent to further process the event present a warning message on a display of the computing device to inform a user or administrator of the computing device of the maliciously intended API function call and or perform any other appropriate response to determining that a API function call is maliciously made.

Referring now to a method for configuring the computing device to monitor calls to a monitored API function begins with block . In block the computing device determines whether monitoring of one or more API functions is desired. If so the method advances to block in which the computing device determines a memory location of the API function to be monitored. For example the computing device identifies the one or more memory pages containing the API function. Additionally the computing device identifies the one or more corresponding entries in the EPT corresponding to the memory page s containing the monitored API function.

In block the computing device sets a memory permission of the EPT associated with the identified memory page s containing the API function. For example the computing device may set a memory permission associated with the corresponding memory page s in the EPT that causes an error in response to or otherwise prevents execution of the particular monitored API function. For example in one particular embodiment a memory permission indicating that the memory page s containing the API function include non executable code may be set in block .

In block the computing device may subsequently monitor attempted executions of monitored API functions. For example as discussed in more detail below with regard to the computing device may determine whether an attempted execution of a monitored API function violates the memory permission associated with the memory page s containing the monitored API function. If so the computing device may transition to the privileged mode to determine whether the API function call is made to perform a malicious activity. If the computing device determines that the attempted execution of the monitored API function is made to perform a malicious activity the computing device may prevent execution of the API function and or perform additional security measures.

Referring now to one illustrative embodiment of a method for monitoring a system call for an attempted execution of a monitored API function which may be performed by the computing device begins with block . In block the computing device determines whether execution of a monitored API function is attempted. As discussed above the one or more processes may attempt to execute an API function that is monitored by the computing device .

If the computing device determines in block that execution of the monitored API function is attempted the method advances to block . In block the computing device determines whether execution of the monitored API function violates a memory permission of the computing device . That is the computing device determines whether a memory violation has occurred in response to the attempted execution of the monitored API function. As discussed above the memory permission may be specified by the VMM using the EPT to cause a memory permission violation event in response to the attempted execution of the monitored API functions e.g. the memory permission may indicate that the associated memory page is non executable .

If the computing device determines in block that execution of the monitored API function does not violate a memory permission the method advances to block in which the monitored API function is executed. Upon execution of the monitored API function in block the method may restart. If however the computing device determines in block that execution of the monitored API function violates a memory permission of the computing device the computing device generates a memory permission violation or error and the method advances to block in which control is transferred from the non privileged mode to the privileged mode in which the VMM is executed.

In some embodiments the VMM may be configured to perform certain functions upon or in response to the control transfer. For example the VMM may save a context of the computing device upon the control transfer in block . Additionally the VMM may invoke an error handler to analyze and respond to the attempted execution of the monitored API function. Further the VMM may perform other functions or actions to allow the VMM to intervene analyze and or respond to the memory permission violation as discussed below.

In block the VMM determines whether the attempted execution of the monitored API function is made to perform a malicious action. The VMM or the invoked error handler may use any suitable algorithm data or functions to determine whether the attempted API function call is made to perform a malicious action. If the VMM determines in block that execution of the monitored API function is not made to perform a malicious action the method advances to block in which the monitored API function is executed.

If however the VMM determines that execution of the monitored API function is made to perform a malicious action the method advances to block . In block the VMM or invoked error handler may prevent the one or more processes from executing the monitored API function. Additionally as discussed above the VMM or invoked error handler may perform additional security functions in response to the maliciously intended API function call. For example the computing device may save the context of the maliciously intended API function call to a log for further analysis trigger an OS specific malware monitoring agent to further process the event present a warning message on a display of the computing device to inform a user or administrator of the computing device of the maliciously intended API function call and or perform any other appropriate response to determining that a API function call is maliciously made.

Referring now to one illustrative embodiment of a process flow of the computing device while monitoring for an attempt to execute the monitored API function is shown. In the illustrated example process flow the processes of the VM attempt to execute the monitored API function. For example the processes may attempt to execute a CreateFile API function . Although the CreateFile API functions appear to the calling processes as being stored in one or more memory pages B C of local virtualized memory the CreateFile API functions actually correspond to a CreateFile API that is stored in a memory page K of the physical memory of the computing device . Such physical memory location is not typically known by the calling processes . As such the virtual memory location of the CreateFile API functions are translated to the physical memory location of the CreateFile API . As discussed below the OS of the VM establishes an OS page table e.g. the GPT and the VMM establishes the EPT to facilitate such translations.

The OS page table is utilized to translate the one or more guest virtual addresses of memory pages of the virtual memory to one or more guest physical addresses of memory pages of the physical memory abstraction of the VM . For example the OS page table is utilized to translate the guest virtual address of the memory pages B C containing the CreateFile API in the virtual memory to a guest physical address of a memory page F containing a corresponding CreateFile API in the physical memory abstraction .

The EPT is utilized to translate one or more guest physical addresses of memory pages of the physical memory abstraction to one or more host physical addresses of memory pages of the physical memory of the computing device . For example the EPT is utilized to translate the guest physical address of the memory page F containing the CreateFile API in the physical memory abstraction of the VM to a host physical address of the memory page K containing the corresponding CreateFile API in the physical memory of the computing device .

Additionally as discussed above the EPT includes one or more memory permissions associated with the memory page containing the CreateFile API which is set to prevent execution of the CreateFile API function . For example the memory permission e.g. x may be set to indicate that the memory page s containing the CreateFile API function includes non executable code. Of course it should be appreciated that other memory permissions for other API functions may be used in other embodiments. For example memory permissions other than the non executable memory permission discussed above may be used to generate the memory permission violation. Additionally API functions other than the CreateFile function discussed above may be monitored in other embodiments.

It should be appreciated that the illustrative embodiments shown and described above can be utilized to monitor the actions of each process executing on the computing device . That is embodiments described above enable monitoring API function calls in an OS independent fashion. As such the embodiments described herein may eliminate the need to separately modify each monitored process and or the need for in memory modifications of the user space code and or kernel space code.

While the disclosure has been illustrated and described in detail in the drawings and foregoing description such an illustration and description is to be considered as exemplary and not restrictive in character it being understood that only illustrative embodiments have been shown and described and that all changes and modifications that come within the spirit of the disclosure are desired to be protected.

