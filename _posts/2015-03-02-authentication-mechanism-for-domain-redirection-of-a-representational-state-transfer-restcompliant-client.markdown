---

title: Authentication mechanism for domain redirection of a representational state transfer (REST)-compliant client
abstract: An initial server responds to a request with a redirection object describing the a different server to which the request should be redirected, and providing additional information about authenticating to the other server. The redirection object includes a session check variable indicating whether a forms-based authentication process may need to be performed, a session URI through which the client may determine whether the client was previously authenticated to the other server, and optionally a forms URI through which the client may initiate a forms-based authentication process. If the session check variable indicates that the other server may require forms based authentication, and an authenticated session does not exist between the client and the other server, and the client has a forms URI for the other server, then the client opens a Web browser, and directs the Web browser to the forms URI to complete a forms-based authentication process.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09386006&OS=09386006&RS=09386006
owner: Citrix Systems, Inc.
number: 09386006
owner_city: Fort Lauderdale
owner_country: US
publication_date: 20150302
---
As it is generally known when a Web browser issues a request to a server using the Hyper Text Transfer Protocol HTTP the server may respond by telling the Web browser to issue the request to a different server by returning an HTTP response with the HTTP response status code 302 Found. The HTTP response 302 Found response provides an existing mechanism for performing Uniform Resource Locator URL redirection. The HTTP 302 Found response includes a new URL in a Location header field and instructs the Web browser to perform a second otherwise identical request to the new URL.

The new URL may indicate a server located in a different authentication domain from the initial server. Accordingly when the Web browser attempts to perform the request using the new URL contained in the header of the HTTP 302 Found response the server associated with the new URL may reject the request for example by sending an HTTP 401 Unauthorized response. The HTTP 401 Unauthorized response is a form of authentication challenge that requires the Web browser to provide appropriate credentials in order for the request to be completed through the server associated with the new URL.

Existing mechanisms that support transitioning a Web browser between different authentication domains have been found to be ineffective for use by certain non Web browser client systems. For example some non Web browser clients designed to be compliant with the Representational State Transfer REST software architecture style work within a client server application model in which an application programming interface API server is used that does not send HyperText Markup Language HTML data to the client. Such clients accordingly do not include the ability to process and render HTML data. Accordingly these clients are not designed to handle a situation in which they are redirected from their original API server to a new server and the new server requires authentication using a forms based authentication protocol in which the server sends the client HTML to be rendered to a user of the client. For example if a REST compliant RESTful non Web Browser client expects to receive server messages containing documents made up of for example eXtensible Markup Language XML JavaScript Object Notation JSON or some other non HTML contents such a client would fail if it were redirected from its original API server to a new server that requires forms based authentication and that responds to a redirected request with one or more HTML forms through which credentials are to be obtained from a user.

To address these and other shortcomings of previous systems a new system for domain redirection of a Representational State Transfer REST compliant client is disclosed. The disclosed system supports forms based authentication for clients that lack the capability to process HTML. In the disclosed system when an initial server receives a request from a client system that must be redirected the initial server responds with a redirection object that describes the other server to which the client should re submit the request and that also provides additional information about the other server that is obtained from a directory or the like stored in the initial server. The directory on the initial server maintains information about the other server related to how the client may need to authenticate prior to re submitting the original request to the other server. For example the redirection object may include a session check variable indicating whether a forms based authentication process may need to be performed in order to re submit the request. The redirection object may further include a session uniform resource identifier URI to which the client may issue a request to determine whether the client was previously authenticated to the other server. If the client was previously authenticated to the other server then a session already exists between the client and the other server and no further authentication will be required.

In the case where the session check variable indicates that the other server may possibly require forms based authentication the client issues a request to the session URI to determine whether an authenticated session already exists between the client and the other server. If an authenticated session does not already exist between the client and the other server then the client checks to see whether it has a forms URI for the other server through which the client must initiate a forms based authentication process. The forms URI may for example be included in the redirection object from the initial server. If the session check variable indicates that the other server may possibly require forms based authentication and an authenticated session does not already exist between the client and the other server and the client has a forms URI for the other server then the client opens a separate window that has an HTML parser e.g. a Web browser and directs the Web browser to the forms URI. After the Web browser completes the forms based authentication process for the other server it passes a code to the client. The client then passes the code from the Web browser to a token URI e.g. also contained the redirection object to obtain an authentication cookie allowing the client to re submit the original request to the other server indicated in the redirection object received from the initial server.

Advantageously and in contrast to previous systems the disclosed system enables a non Web browser client to effectively transition among different authentication domains including authentication domains requiring forms based authentication. The disclosed system is applicable to non Web browser clients that are designed to be compliant with the Representational State Transfer REST software architecture style RESTful clients and that are designed to work within a client server application model in which an application programming interface API server is used that does not send HyperText Markup Language HTML data to the client. The disclosed system provides such clients with the ability to handle a situation in which they are redirected from their original API server to a new server and the new server requires authentication using a forms based authentication protocol in which the new server sends the client HTML to be rendered to a user of the client.

A system for domain redirection of a Representational State Transfer REST compliant client is disclosed. The disclosed system supports forms based authentication for clients that lack the capability to process HTML. In the disclosed system when an initial server receives a request from a client system that must be redirected the initial server responds with a redirection object that describes the other server to which the client should re submit the request and that also provides additional information about the other server that is obtained from a directory or the like stored in the initial server. The directory on the initial server maintains information about the other server related to how the client may need to authenticate prior to re submitting the original request to the other server. For example the redirection object may include a session check variable indicating whether a forms based authentication process may need to be performed in order to re submit the request. The redirection object may further include a session uniform resource identifier URI to which the client may issue a request to determine whether the client was previously authenticated to the other server. If the client was previously authenticated to the other server then a session already exists between the client and the other server and no further authentication will be required.

In the case where the session check variable indicates that the other server may possibly require forms based authentication the client issues a request to the session URI to determine whether an authenticated session already exists between the client and the other server. If an authenticated session does not already exist between the client and the other server then the client checks to see whether it has a forms URI for the other server through which the client must initiate a forms based authentication process. The forms URI may for example be included in the redirection object from the initial server. If the session check variable indicates that the other server may possibly require forms based authentication and an authenticated session does not already exist between the client and the other server and the client has a forms URI for the other server then the client opens a separate window that has an HTML parser e.g. a Web browser and directs the Web browser to the forms URI. After the Web browser completes the forms based authentication process for the other server it passes a code to the client. The client then passes the code from the Web browser to a token URI e.g. also contained the redirection object to obtain an authentication cookie allowing the client to re submit the original request to the other server indicated in the redirection object received from the initial server.

The Original Request may be any specific kind of message using any specific type of protocol. In one embodiment the Original Request is an HTTP request having an HTTP method a uniform resource locator URL indicating the First API Server and a body. In such an embodiment the HTTP method in the Original Request may be any specific HTTP request method including but not limited to GET POST HEAD PUT DELETE OPTIONS or CONNECT. The body included in the HTTP request may be any specific body data appropriate for communicating the desired action to be performed in response to the Original Request . For example the body may include or consist of a JavaScript Object Notation JSON or eXtensible Markup Language XML document.

When the First API Server receives the Original Request the First API Server parses the Original Request to determine whether the First API Server can respond to the Original Request completely based on First Secure Resources . For example if the Original Request is a request for a listing of documents that are contained within the First Secure Resources then First API Server determines that it can respond to the Original Request based on the contents of First Secure Resources and accordingly generates and transmits a response to the RESTful Client without performing any redirection.

Otherwise if the First API Server determines by parsing the Original Request that it cannot respond to the Original Request completely based on the contents of First Secure Resources then First API Server generates a Redirection Object to be transmitted from the First API Server to the RESTful Client . For example if the First API Server determines from parsing the Original Request that Original Request is a request for a listing of files contained in Second Secure Resources then First API Server would accordingly generate a Redirection Object to be used by RESTful Client in order to contact Second API Server . First API Server may determine that it cannot respond completely to Original Request at least in part by locating while parsing the contents of the Original Request at least one indication e.g. a URL of a location within an authentication domain other than the First Authentication Domain . In the example of Original Request includes a URL indicating a location within Second Authentication Domain where one or more files are stored and which must be accessed in order to complete Original Request and First API Server accordingly must generate Redirection Object to send to RESTful Client .

The First API Server generates the Redirection Object using information in a data store describing various authentication domains e.g. one or more authentication domains other than First Authentication Domain . For example First API Server may maintain a directory of entries where each directory entry includes one or more fields having contents describing attributes of a corresponding authentication domain. In one embodiment each directory entry includes the following for a corresponding authentication domain 

i a location e.g. an API Server Uniform Resource Identifier URI of an API server in the authentication domain to which requests for resources and or information about resources located in the authentication domain are to be directed 

ii an indication e.g. a SessionCheck flag of whether forms based authentication may be required to access resources in the authentication domain 

iii a location e.g. a SessionURI URI within the authentication domain to which requests can be directed to determine whether an authenticated session currently exists 

iv a location e.g. a FormsURI URI within the authentication domain to which requests can be directed for forms based authentication and

v a location e.g. a TokenURI URI within the authentication domain to which requests can be directed to obtain an authentication cookie using an authentication code indicating authentication has been performed.

In the example of in order to generate the Redirection Object the First API Server finds the entry in the directory corresponding to Second Authentication Domain since Second Authentication Domain is the authentication domain that must be contacted by RESTful Client in order to complete the Original Request . The First API Server then loads portions of the directory entry corresponding to Second Authentication Domain into corresponding components of the Redirection Object . The First API Server also stores the following into the Redirection Object 

iii any additional context information e.g. a ROOT component that may be needed by the API server in the authentication domain containing resources relevant to processing the Original Request to map re submitted Original Request to specific resources located in that authentication domain.

The First API Server then transmits the Redirection Object to the RESTful Client . The RESTful Client processes the Redirection Object by first checking whether the SessionCheck flag indicates that forms based authentication may be required e.g. SessionCheck TRUE . If the SessionCheck flag indicates that forms based authentication may be required the RESTful Client transmits a Check for Established Session to the SessionURI URI. For example RESTful Client may check for an established authentication session by transmitting an HTTP GET request message to the URI contained in the SessionURI component of the Redirection Object . If an authenticated session with Second API Server currently exists the existence of the previously established session is confirmed by Second API Server and RESTful Client next resubmits the original request to the API Server URI using the copies of the request method and request body stored in the Redirection Object by the First API Sever .

Otherwise if a previously established authentication session does not exist with Second API Server Second API Server will respond to Check for Established Session with Authentication Challenge e.g. HTTP 401 Unauthorized . RESTful Client responds to receipt of Authentication Challenge by checking whether the FormsURI component of the Redirection Object is populated with a URI. If the FormsURI component of the Redirection Object is not populated then RESTful Client authenticates to Second API Server using an authentication protocol other than forms based authentication. Otherwise if the FormsURI component of the Redirection Object contains a URI then at reference number RESTful Client opens a Web browser and directs navigates the Web browser to the URI contained in the FormsURI component of the Redirection Object . Alternatively the RESTful Client may navigate the Web Browser to a URI extracted from a Forms variable contained in the Authentication Challenge received from the Second API Server .

The Web browser then completes a Forms Based Authentication process with Second API Server . The Web browser is able to interpret and render any HTML received during the Forms Based Authentication process . For example the Web browser may receive and render in a display device one or more HTML forms through which a user enters one or more authentication credentials e.g. user name password etc. and then pass the credentials received from the user to Second API Server to establish an authenticated session.

At the end of the Forms Based Authentication process an Authentication Complete code is received from the Second API Server and passed to the RESTful Client . In one embodiment while performing Forms Based Authentication the Web browser may issue an HTTP GET request to the URI from the FormsURI component of the Redirection Object or to the Forms URI from the Authentication Challenge . The Web browser may include a parameter with the GET request where the parameter is a redirect URL associated with RESTful Client . The redirect URL in the GET request causes the Second API Server after the authentication session has been established to pass a completion code Authentication Complete code back to the RESTful Client thus informing the RESTful Client that authentication has completed.

The RESTful Client then transmits a Get Authentication Cookie message to the URI contained in the TokenURI component of the Redirection Object . The Get Authentication Cookie message may for example be an HTTP GET request issued by the RESTful Client to the URI contained in the TokenURI component of the Redirection Object . Alternatively the Get Authentication Cookie message may be an HTTP GET request issued by the RESTful Client to a URI extracted from a Token variable contained in the Authentication Challenge received from the Second API Server . The Second API Server responds to the RESTful Client with an Authentication Cookie representing the authenticated session between the RESTful Client and the Second API Server .

The RESTful Client then transmits Resubmit of Original Request to Second API Server . For example the RESTful Client generates an HTTP request and transmits the HTTP request to the Second API Server . The RESTful Client generates the HTTP request for example by loading the URI from the API Server component of the Redirection Object into the HTTP request and loading the copy of the method from the Original Request from the Redirection Object into the HTTP request and loading the copy of the body of the Original Request from the Redirection Object into the HTTP request.

While for purposes of concise illustration only two authentication domains are shown in those skilled in the art will recognize that the disclosed system is not so limited. Accordingly the disclosed system may be embodied and operated such that any specific number of different authentication domains are supported.

Those skilled in the art will recognize that RESTful Client may be embodied as a software application client executing on a client computer system. Such a client computer system and the API Servers and shown in may for example each be embodied as computer systems having processing circuitry e.g. one or more processors memory and or other program storage and one or more input output interfaces. The operations described herein may be embodied in such computer systems using software firmware dedicated hardware circuitry and or some combination thereof. Similarly those skilled in the art will recognize that one or more of the API Servers and shown in may be embodied as including or within one or more virtual machines or the like.

Communication between the RESTful Client and the API Servers and shown in may be provided over one or more computer or other type of communication networks such as for example one or more local area networks LANs wide area networks WANs and or the Internet. Communication between the RESTful Client and the API Servers and may use various specific communication protocols including but not limited to the Hypertext Transfer Protocol HTTP .

The Memory stores program logic for execution on the Processing Circuitry . In the embodiment of Memory includes REST compliant client application software shown as RESTful Client . RESTful Client includes Client User Interface Logic for providing at least a portion of a graphical user interface to a user of Client System within the Display Device . Within RESTful Client Request Generation Logic includes program code for generating requested operations including the Original Request . Response Handlers includes a number of response handler program code modules which are responsible for handling messages e.g. responses received by Client System for the RESTful Client through the Communication Interface . Accordingly when the Client System receives a response for RESTful Client e.g. Redirection Object RESTful Client determines whether the response is an actual response to a previous request or a redirection object. In the case where the received response is or includes a redirection object the received response is passed to the Redirection Object Handler for processing. Other responses received by Client System for RESTful Client are processed by the Other Response Handlers .

Further in the illustrative embodiment of Initial API Server includes Communication Interface Processing Circuitry and program storage shown as Memory . Communication Interface may for example include or consist of one or more network interface cards NICs or the like. Processing Circuitry may for example include or consist of one or more microprocessors or the like. Memory may for example include or consist of any specific type of volatile or non volatile semiconductor memory or the like that is operable to store programs sequences of instructions and or data e.g. program state information for use in the Initial API Server .

The Memory shown in stores program logic for execution on the Processing Circuitry shown as the Request Parsing Logic Redirection Processing Logic and Local Command Processing Logic . The Memory also includes an Authentication Domain Directory .

When a request e.g. Original Request in is received by the Initial API Server through the Communication Interface the request is passed to the Request Parsing Logic . The Request and Command Parsing Logic determines whether the request is directed to one or more resources located in one or more authentication domains other than the local authentication domain e.g. other than the Initial Authentication Domain in . If so then the request is passed to Redirection Processing Logic for processing. Otherwise in the case where the received request operation can be completed using resources contained within the local authentication domain e.g. contained within Initial Authentication Domain in then the request is passed to Local Command Processing Logic .

For example the Request Parsing Logic may examine the contents of a received request to determine whether the request indicates resources contained outside the local authentication domain. Such indications may for example include one or more names paths or URLs specifying files or file locations contained in authentication domains other than the local authentication domain. If the received request indicates resources contained outside the local authentication domain then the received request operation is passed to Redirection Processing Logic . Redirection Processing Logic then generates a redirection object in the Memory based on information stored in the Authentication Domain Directory describing the authentication domain to which the request is to be redirected. Redirection Processing Logic then transmits the redirection object to Client System .

When the redirection object is received by Client System RESTful Client passes the redirection object to Redirection Object Handler for processing. Redirection Object Handler determines based on the contents of the redirection object whether forms based authentication may be required in order to re submit the original request to a different API server e.g. to Second API Server in . If Redirection Object Handler determines that such forms based authentication may be required it transmits an inquiry to the API server indicated in the redirection object to determine whether an authenticated session currently exists with that server. If not and if an authentication challenge is received by Client System from the API server indicated in the redirection object then Redirection Object Handler checks whether the redirection object includes a URL through which a forms based authentication process is to be performed. If the redirection object includes a URL through which forms based authentication is to be performed RESTful Client opens the Web browser and navigates the Web browser to the URL through which a forms based authentication process is to be performed. Forms based authentication is then performed between the Web browser and the API server indicated by the redirection object. The Web Browser processes any HTML received during the forms based authentication process and renders any HTML forms onto the Display Device for a user of Client System so that the user can enter any credentials required to complete the authentication process.

When the forms based authentication process is complete a completion code received from the API server indicated by the redirection object is passed to the RESTful Client and the RESTful Client may then issue a request to the API server indicated by the redirection object for an authentication cookie representing the authenticated session. For example the RESTful Client may issue the token request to a URL contained in the redirection object indicating a location to which tokens requests are to be sent with respect to the API server indicated in the redirection object. After the token is received for the authenticated session the Redirection Object Handler re submits the original request using a method and body of the original request stored in the redirection object and the URL of the API Server contained in the redirection object.

As shown in Redirection Object may include an HTTP Response Type component . HTTP Response Type may for example have value equal to the HTTP response code 200 OK. An Application Response Type component may store a value or code indicating that the Redirection Object is not a final response to the corresponding request but instead a redirection object that should be processed for example by the Redirection Object Handler . An API Server URI component stores a URI of an API Server in the authentication domain to which the original request is being redirected. For example in the example of API Server URI would store a URI of the Second API Server . A Forms URI component stores a URI through which the receiving client system can perform a forms based authentication process if needed prior to resubmitting the original request to the server indicated by the API Server URI component .

A Session URI component stores a URI through which the receiving client can determine whether an authenticated session has been previously established with the server indicated by the API Server URI component . A Token URI component stores a URI through which the receiving client can obtain an authentication cookie with respect to the server indicated by the API Server URI component . A Session Check flag indicates whether forms based authentication may be required prior to re submitting the original request to the server indicated by the API Server URI component . For example Session Check flag may be set to TRUE to indicate that forms based authentication may be required and to FALSE to indicate that forms based authentication will not be required prior to re submitting the original request to the server indicated by the API Server URI component . A Root component stores context information regarding the resources referred to by the original request. For example the contents of Root component may be provided by the First API Server and passed by the RESTful Client to the Second API Server to indicate a context for the resubmitted request e.g. help the Second API Server identify the specific resources within Second Authentication Domain to which the re submitted request should be applied.

The Request Method component stores the method from the original request received for example by the First API Server and the Request Body component stores the body from the original request.

The client system receives the redirection object and reads the value of TRUE stored in the Session Check flag. In response to finding that the Session Check has a value of TRUE the client system knows that forms based authentication may be required and at step checks for a previously established authentication session using the URI stored in the SessionURI component. At step because no authentication session has been previously established the client system receives an authentication challenge in response to the check performed at step . For example at step the client system receives an authentication challenge consisting of an HTTP 401 Unauthorized response.

In response to receiving the authentication challenge at step the client system checks whether the FormsURI component is populated i.e. whether FormsURI stores a URI . In this case the client system determines that FormsURI contains a URI. In response to determining that FormsURI contains a URI at step the client system opens a Web browser and navigates the Web browser to the URI contained in the FormsURI component of the redirection object. The Web browser initiates forms based authentication through the URI from the FormsURI component of the redirection object at step . To initiate forms based authentication the Web browser may issue an HTTP GET request to the URI from the FormsURI component and include a parameter with the GET request that is a redirect URL associated with client system. The redirect URL in the GET request causes the second API Server when the authentication session has been established to pass a completion code back to the client system to inform the client system that authentication has completed at step .

Advantageously the Web browser interprets and renders any HTML received during the forms based authentication process. For example the Web browser may receive and render in a display device one or more HTML forms through which a user enters one or more authentication credentials.

At step the client system obtains an authentication cookie by sending a request to the URI contained in the TokenURI component of the redirection object together with the code received upon completion of the authentication process. When the client system receives the authentication cookie the client system re submits the original request at step . For example the client system may re submit the original request at step by generating an HTTP request at least in part by loading the URI from the API Server component of the redirection into the HTTP request and loading the contents of the Request Method component and Request Body component into the HTTP request prior to transmitting the HTTP request at step .

Those skilled in the art will recognize that the specific user interface objects shown in i.e. folders are provided only for purposes of convenient illustration and explanation and that the disclosed system is not limited embodiments using those specific user interface objects to represent file repositories located in different authentication domains. Any other appropriate type of user interface object may be used as a functional alternative to the Folder Representations . Moreover the Application User Interface itself is shown in a simplified representation and various user interface display objects other than the ones shown may be included or added as needed for a specific embodiment.

Thus there is disclosed a new system for domain redirection of a Representational State Transfer REST compliant client that provides significant improvements over previous solutions. The disclosed system advantageously supports forms based authentication for clients that lack the capability to process HTML. The disclosed system specifically improves over prior approaches by enabling a non Web browser client to effectively transition among different authentication domains including authentication domains requiring forms based authentication. The disclosed system is applicable to non Web browser clients that are designed to be compliant with the Representational State Transfer REST software architecture style RESTful clients and that are designed to work within a client server application model in which an application programming interface API server is used that does not send HyperText Markup Language HTML data to the client. The disclosed system provides such clients with the ability to handle redirections from their original API server to a new server in which the new server requires authentication using a forms based authentication protocol and the new server sends the client HTML to be rendered to a user of the client.

While the above description provides examples of embodiments using various specific terms to indicate specific systems devices and or components such terms are illustrative only and are used only for purposes of convenience and concise explanation. The disclosed system is not limited to embodiments including or involving systems devices and or components identified by the terms used above.

As will be appreciated by one skilled in the art aspects of the present invention may be embodied as a system method or computer program product. Accordingly aspects of the present invention may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. Furthermore aspects of the present invention may take the form of a computer program product embodied in one or more non transitory computer readable storage medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable storage medium s may be utilized. The computer readable storage medium may be for example but not limited to a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any non transitory tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

The disclosed system can take the form of an entirely software based embodiment an entirely hardware based embodiment or an embodiment containing both software and hardware elements. The figures include block diagram and flowchart illustrations of methods apparatus s and computer program products according to an embodiment of the invention. It will be understood that each block in such figures and combinations of these blocks can be implemented by computer program instructions. These computer program instructions may be loaded onto a computer or other programmable data processing apparatus to produce a machine such that the instructions which execute on the computer or other programmable data processing apparatus create means for implementing the functions specified in the block or blocks. These computer program instructions may also be stored in a computer readable memory that can direct a computer or other programmable data processing apparatus to function in a particular manner such that the instructions stored in the computer readable memory produce an article of manufacture including instruction means which implement the function specified in the block or blocks. The computer program instructions may also be loaded onto a computer or other programmable data processing apparatus to cause a series of operational steps to be performed on the computer or other programmable apparatus to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide steps for implementing the functions specified in the block or blocks.

Those skilled in the art should readily appreciate that programs defining the functions of the present invention can be delivered to a computer in many forms including but not limited to a information permanently stored on non writable storage media e.g. read only memory devices within a computer such as ROM or CD ROM disks readable by a computer I O attachment or b information alterably stored on writable storage media e.g. floppy disks and hard drives .

While the invention is described through the above exemplary embodiments it will be understood by those of ordinary skill in the art that modification to and variation of the illustrated embodiments may be made without departing from the inventive concepts herein disclosed.

