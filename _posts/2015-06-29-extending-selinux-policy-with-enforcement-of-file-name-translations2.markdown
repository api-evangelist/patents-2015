---

title: Extending SELinux policy with enforcement of file name translations
abstract: An operating system identifies a request of a process to create a new object with a name in a file system of the processing device. The operating system identifies a policy rule applicable to the new object in view of at least the name of the new object. The operating system creates a label for the new object using the applicable policy rule and associates the new object with the created label.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09641552&OS=09641552&RS=09641552
owner: Red Hat, Inc.
number: 09641552
owner_city: Raleigh
owner_country: US
publication_date: 20150629
---
This application is a continuation of U.S. patent application Ser. No. 13 492 388 filed Jun. 8 2012 and hereby incorporated by reference in its entirety.

Embodiments of the present invention relate in general to operating systems and in particular to generating a Security Enhanced Linux SELinux security policy based on file name translations.

SELinux is a security operation system initiative by the US National Security Agency which attempts to improve security and prevent for example malicious software to obtain control of important system resources. SELinux typically provides for an object e.g. a file system object such as a directory or a file to be assigned a security context or a label which encapsulates the security attributes associated with the object.

SELinux uses security control mechanisms that can provide the accesses that a program needs to perform its task. To implement such security controls SELinux typically provides a security label by associating access control attributes of the form user role type to objects.

Security labels may be assigned to the objects in several ways. For example a primary method for assigning a security label to an object is for the object to adopt the label of the parent directory. A second method for assigning a label to an object can be through the use of a transition rule or policy. In this case an example of a transition rule or policy may be if a process which creates an object is called A and if the directory in which the object is created is called B then the object that is created is labeled C . A third method for assigning a label to an object can be through the use of a rule assignment within a process such that for example if a certain process creates an object then the object is labeled D .

In SELinux a newly created object may need to have a label that is different from the label of the parent directory or the label that is applied by the transition rule. For example an administrator may go into the root directory and create the .ssh directory. The directory may get created with the label admin home t however a policy may require the directory to be labeled ssh home t. If the label is not corrected when the user tries to use the content of the .ssh directory a process may fail to read the content of the directory because the content of the .ssh directory is mislabeled e.g. the process sshd is not permitted to read files labeled admin home t. 

In another example a user may create a public html directory in his or her home directory. The default label for content in the home directory may be user home t however the public html directory may be required to be labeled http user content t otherwise an apache process e.g. httpd t will not be permitted to read the content. A system administrator usually should manually correct such mislabeling which is inconvenient and time consuming and creates a possibility of human errors.

A method and system are described for providing an SELinux system implementing extended security policy models for enforcement.

In one embodiment a policy rule for creating a security label for a newly created object is defined using the label of the process the class of the newly created object the label of the parent object and the name of the new object. As used herein the term object may be referred to as but not limited to for example a file a directory a sub directory a memory location etc.

In one embodiment the policy rule may be compiled by a policy language compiler and included in an operating system package which may be distributed and installed on computer devices. In one embodiment the policy rule may be a file transition rule of an SELinux policy. In one embodiment an SELinux policy rule may define an SELinux label for a newly created object.

During execution the kernel may identify a request of a process to create a new object in the file system. The kernel may identify a policy rule applicable to the new object by using a label of the process a label of the parent object pertaining to the new object a class of the new object and the name of the new object. In one embodiment the parent object pertaining to the new object is a file directory.

After identifying the policy rule the kernel may create a security label for the new object using the identified policy rule and associate the new object with the created security label. For security purposes the kernel may access a security module which may include a security server and an access control database which contains information about the created security label. The security module may determine if a user a program or a process can have permission to access an object.

In the following description numerous details are set forth. It will be apparent however to one skilled in the art that the present invention may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present invention.

The server may be a personal computer PC a server computer a personal digital assistant PDA a smart phone a laptop computer or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. In another embodiment the policy creation tool and the operating system package provider may reside on different servers.

The server may be communicatively coupled to computing devices e.g. computing devices N over a network . The network may be for example a private network e.g. a local area network LAN a wide area network WAN intranet etc. a corporate network e.g. a private network for an organization such as a corporation and or a public network e.g. the Internet .

The computing devices may include computing devices that have a wide range of processing capabilities such as PCs PDAs smart phones laptop computers tablets netbooks etc and or any machine capable of executing a set of instructions sequential or otherwise that specify actions to be taken by that machine. The computing devices may access the operating system package provider over the network . In one embodiment the computing devices may be mobile computing systems including but not limited to laptops smart phones PDAs tablet computers netbook computers etc. In one embodiment the operating system package provider may distribute to each of computing devices an operating system package which may include an operating system and a set of compiled policy rules. In one embodiment the distributed operating system package may include one or more compiled policy rules that are created by the policy creation tool . As will be discussed in more detail below a policy rule for creating a security label for a new object may specify that the security label for the new object should be based on the label of a process creating the new object the class of the new object the label of the parent object of the new object and the name of the new object.

In one embodiment the computing devices may include processes e.g. processes N . A process may be an executable program and may consist of the executing program code a set of resources such as open files internal kernel data an address space one or more threads of execution and a data section containing global variables. Each process may have process descriptors associated with it which may hold the information used to keep track of a process in memory. The various pieces of information stored about a process may include but are not limited to process identifier PID state parent process children siblings processor registers list of open files and address space information.

In one embodiment each of the computing devices may include an operating system . Each operating system may use mandatory access control MAC mechanisms. Mandatory access control mechanisms may provide a requestor e.g. a process an application and or a user with the minimum amount of privileges required to complete a task. For example a requestor using and or operating in the operating system may attempt to perform an operation on an object which the operating system has access to. The operating system may provide the requestor with the least amount of access privileges possible to perform the operation. In another embodiment the mandatory access control mechanisms may prevent requestors from performing unauthorized operations on objects and or gaining unauthorized access to objects. For example the mandatory access control mechanism may prevent a process from overwriting data in another process s memory location. In another example the mandatory access control mechanisms may prevent a user from installing an unauthorized program or accessing system settings or files.

In one embodiment requestors and objects may each have one or more security attributes. When a requestor attempts to access and or operate on an object the mandatory access control mechanisms of the operating system may examine the security attributes of the requestor and the object the requestor is attempting to access. The mandatory access control mechanisms may also examine one or more user roles or contexts to determine whether the requestor is allowed to access the object and allow deny a requestor access to an object based on the role or context. For example an administrator role may provide a user with full or partial access to a computing system while a guest role may only provide a user with less privileged access to files and settings of a computing system. In another embodiment the operations which may be controlled by the mandatory access control mechanisms and the contexts roles may include but are not limited to accessing files and directories accessing hardware accessing ports accessing objects accessing memory and memory locations installing applications and executing applications processes and or threads.

In one embodiment the mandatory access control mechanisms may be part of the operating system e.g. part of the kernel of the operating system . In another embodiment the mandatory access control mechanisms may include one or more software modules and or applications which work in conjunction with the operating system to allow deny requestors access to objects. Examples of operating systems which may use mandatory access control mechanisms include but are not limited to SELinux Windows 7 Windows Vista Mac OS FreeBSD and Trusted Solaris .

In one embodiment the operating system includes a labeling subsystem for extending security policies e.g. SELinux security policies and for providing further refinement of the mandatory access control mechanisms. Alternatively the labeling subsystem may not be part of the operating system but is instead a dedicated application or part of another application running on top of the operating system . In one embodiment the operating system may identify a request of a process to create a new object to reside within the file system . In one embodiment the file system may be included within the computing devices . A file system may be a method for storing and organizing computer files and the data they contain to make it easy to find and access them. For example file system may use a data storage device such as a flash drive a hard disk or CD ROM and may involve maintaining the physical location of the files.

In one embodiment the labeling subsystem may be configured to identify a policy rule which may be applicable to the newly created object in the file system . The labeling subsystem may create a label for the new object by using an applicable policy rule and associate the new object with the created label. As will be discussed in more detail below the labeling subsystem may create a label for the new object based on the label of a process creating the new object the class of the new object the label of the parent object of the new object and the name of the new object. Embodiments of the labeling subsystem are discussed in further detail below in conjunction with .

The computing device may subsequently receive a request from a user to access the new object. In response to the request the operating system may send to a security server not shown an access control decision request based on the created label that is associated with the new object. The security server may determine whether or not access to the new object should be allowed or denied based on the label of the new object. The computing device may then receive from the security server the decision to allow or deny the user access to the new object and execute the received decision from the security server.

In one embodiment the user interface may be used by a user or an administrator to input information for creating a new policy rule for the operating system . For example the user or administrator may input via the user interface policy rules for creating labels for new objects based on the label of a process which will be creating a new object the class of the new object to be created by the process the label of the parent pertaining to the new object and the name of the new object. The class of the new object may be for example a file a directory a character file e.g. chr file or a block file e.g. blk file . Exemplary policy rules are discussed in further detail below with reference to .

In one embodiment the policy language compiler is used to compile the new policy rule for the operating system based on the information that that was provided through the user interface by the user or administrator. The compiled new policy rule may be stored in the policy data store . The operating system package provider may include compiled system rules in an operating system package and distribute the resulting operating system package to computing devices .

The file system object creator may be configured to identify a request from for example a process to create a new object. In one embodiment the new object is created to reside in the file system . The request may specify the label of the process which creates the new object the label of the parent object pertaining to the new object the class of the new object and the name of the new object.

The policy rule selector may identify a policy rule which may reside in the policy data store . The policy rule selector may identify and select a policy rule that is applicable to the new object that is created by a process . The policy rule selector may use the following information for identifying and selecting of the applicable policy rule 1 the label of the process that creates the new object 2 the label of the parent object pertaining to the new object 3 the class of the new object and 4 the name of the new object.

In one embodiment the name of the new object may be the base file name and not the path name. Alternatively the name of the new object may be the entire path name of the new object including the base name of the new object. Yet alternatively the name of the new object may be a portion of the path name of the new object.

In one embodiment the label creator uses the policy rule that is applicable to the new object which was identified and selected by the policy rule selector to create a label for the new object. The created label for the new object may be stored in the label data store . The operating system may associate the new object with the created label.

Referring to the method starts with the policy creation tool receiving information from an administrator via for example the user interface . At block the policy creation tool may define a new base policy specifying that a label of a new object should be created using four characteristics which relate to the new object. These four characteristics may include 1 the label of the process that creates the new object 2 the label of the parent object pertaining to the new object 3 the class of the new object and 4 the name of the new object.

Subsequently at block when a user or an administrator desires to define a policy rule for creating a label for a new object using the label of the process the class of the new object the label of the parent object and the name of the new object the policy creation tool asks to provide the above characteristics and the label of the new object and creates a new policy rule for creating the label for the new object based on the provided input.

At block the policy creation tool determines whether an object label policy rule that includes the above four characteristics or at least the label of the process the label of the parent object pertaining to the new object and the class of the new object already exists in the set of policy rules. If the policy creation tool determines that such a policy rule already exists the policy creation tool replaces the existing policy rule with the new policy rule block and proceeds to block .

If the policy creation tool determines that such a policy rule does not exist then the policy creation tool adds this policy rule to the set of policy rules block . As discussed above the label for the new object may be based on the four characteristics which relate to the new object as noted above.

For purposes of illustration and not limitation the following are examples of a policy rule for creating a label for a new object using the name of the new object. For example a policy rule may specify that if the unconfined t user process creates the .ssh directory in a directory labelled admin home t then the new directory should be labeled ssh home t. In particular this policy rule may be expressed as follows 

In another example if the staff t user process creates a directory named public html in a directory labeled user home dir t then the new directory should be labeled as http user content t. In particular this policy rule may be expressed as follows 

At block the policy language compiler may compile an updated set of policy rules using the policy rule for the new object. At block the operating system package provider may create an operating system package which includes the compiled set of policy rules. At block the operating system package provider may distribute the operating system package which includes the compiled set of policy rules to computing devices via for example the network and the method ends.

Referring to the method starts with the file system object creator identifying a request of a process to create a new object in a file system of the computing device the new object having a name block . At block the labeling subsystem identifies a base policy applicable to the new object request block . The base policy may specify the parameters for performing the request such as the label of the process the label of the parent of the new object the class of the new object and the name of the new object. At block the labeling subsystem determines the label of the process the label of the parent of the new object the class of the new object and the name of the new object. In one embodiment this information is included in the request of the process . The process may be responsible for supplying the name of the new object. In another embodiment the operating system may generate the name of the new object.

At block the labeling subsystem finds a specific policy rule for the above parameters in for example the policy data store . At block the label creator may create a label for the new object using the policy rule. At block the operating system may associate the new object with the label that was created at block and the method ends.

The exemplary computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a secondary memory e.g. a data storage device which communicate with each other via a bus .

The processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be a complex instruction set computing CISC microprocessor reduced instruction set computing RISC microprocessor very long instruction word VLIW microprocessor processor implementing other instruction sets or processors implementing a combination of instruction sets. The processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute authentication tool for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The network interface device may be in communication with a network . The computer system also may include a video display unit e.g. a liquid crystal display LCD a touch screen or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The secondary memory may include a computer readable storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions for policy creation tool and labeling subsystem embodying any one or more of the methodologies or functions described herein. The instructions for policy creation tool and labeling subsystem may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting computer readable storage media. The instructions for policy creation tool and labeling subsystem may further be transmitted or received over a network via the network interface device .

While the computer readable storage medium is shown in an exemplary embodiment to be a single medium the term computer readable storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions . The term computer readable storage medium shall also be taken to include any medium that is capable of storing or encoding a set of instructions for execution by the machine that cause the machine to perform any one or more of the methodologies of the present invention. The term computer readable storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

Some portions of the detailed descriptions above are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as identifying creating associating maintaining receiving authenticating refraining identifying specifying determining granting accessing assigning executing monitoring detecting requesting and adjusting or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

Embodiments of the present invention also relate to an apparatus for performing the operations herein. This apparatus may be specially constructed for the required purposes or it may be a general purpose computer system selectively programmed by a computer program stored in the computer system. Such a computer program may be stored in a computer readable storage medium such as but not limited to any type of disk including optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic disk storage media optical storage media flash memory devices other type of machine accessible storage media or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct a more specialized apparatus to perform the required method steps. The required structure for a variety of these systems will appear as set forth in the description below. In addition the present invention is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the invention as described herein.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present invention has been described with reference to specific exemplary embodiments it will be recognized that the invention is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the invention should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

