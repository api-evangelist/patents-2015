---

title: Nondeterministic value source
abstract: A technology is described for providing a nondeterministic value to computing instances executing an application as part of a high availability system. An example method may include receiving a request for a nondeterministic value at a physical host that hosts a first computing instance, where the request may be for an application executing on the first computing instance. A nondeterministic value may be obtained from a nondeterministic value source located on the physical host and provided to the application executing on the first computing instance. A second request from a second computing instance may be received at the physical host, where the second request may be associated with a copy of the application executing on the second computing instance. The nondeterministic value may then be identified in the computer memory of the physical host and provided to the second computing instance over a computer network.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09521194&OS=09521194&RS=09521194
owner: Amazon Technologies, Inc.
number: 09521194
owner_city: Seattle
owner_country: US
publication_date: 20150316
---
The advent of virtualization technologies for computing resources has provided benefits with respect to managing large scale computing resources for many users with diverse needs and has allowed various computing resources or computing services to be efficiently and securely shared by multiple users. For example virtualization technologies may allow a single physical computing machine to be shared among multiple users by providing each user with one or more computing instances hosted by the single physical computing machine using a an instance manager e.g. a hypervisor or a Virtual Machine Manager VMM . Each computing instance may be a guest machine acting as a distinct logical computing system that provides a user with the perception that the user is the sole operator and administrator of a given virtualized hardware computing resource.

Computing instances may be utilized to execute applications within a high availability system. High availability may refer to a system or component that may be near continuously operational for a significant duration of time. Utilizing multiple computing instances to execute applications may provide redundancy within a system thereby providing high availability by failing over to a redundant computing instance when a failure of a primary computing instance occurs. For example multiple applications of the same kind may execute on computing instances e.g. hosted by separate physical computing machines and may be incorporated into a system design that includes a method to detect failure of an application and automatically reconfigure the system to bypass the failed application.

A technology is described for a centralized nondeterministic value source that provides nondeterministic values to computing instances included in a high availability system. In one example configuration a nondeterministic value service may be used to generate a nondeterministic value e.g. a non static value such as a random value a hardware timer value a software timer value or the like . The nondeterministic value may be provided to primary and redundant computing instances or software containers executing an application e.g. a computer program script app or other software within a high availability system in response to requests from the primary and redundant computing instances for a nondeterministic value.

For example a first computing instance and a second computing instance may be configured as a redundant pair e.g. a primary computing instance and a redundant computing instance . A nondeterministic service may be configured to generate and provide a nondeterministic value to the first computing instance in response to a nondeterministic value request. A duplicate of the nondeterministic value may be provided to the second computing instance in response to a duplicate request made by the second computing instance. Additional redundant computing instances e.g. a second third or additional redundant computing instances included in a high availability system making duplicate requests may also be provided with the duplicate nondeterministic value. Consequently in the event that a primary computing instance fails a failover may be performed to a redundant computing instance executing a copy of an application that the failed primary computing instance had been executing. The redundant computing instance should be exactly the same as the primary computing instance because they have both received the identical deterministic and non deterministic inputs.

Existing high availability systems may include multiple nondeterministic value sources e.g. operating systems hypervisors random number generators clocks that provide redundant computing instances with non duplicate nondeterministic values. For example when executed on a first computing instance an application may include an instruction that requests a random number from the operating system of the first computing instance and in response may be provided with a random number generated by the operating system. A copy of the application executing on a second computing instance may include the same instruction that requests a random number from the operating system of the second computing instance. As a result of receiving a random number from two different random number sources the random number generated by the operating system of the first computing instance may be different from the random number generated by the operating system of the second computing instance. As such the states of the applications executing on the first and second computing instances may be different.

The present technology provides for a single nondeterministic value source that tracks nondeterministic value requests from a first computing instance included in a high availability system and provides duplicate nondeterministic values to one or more secondary computing instances that correspond to the nondeterministic value requests received from the first computing instance. As a result of providing duplicate nondeterministic values in response to duplicate requests for the nondeterministic value from a second computing instance the state of an application executing on a first computing instance and the state of a copy of the application executing on the second computing instance may be identical.

Illustratively a customer wishing to configure a high availability system may utilize a console or Application Programming Interface API to launch a group of computing instances that are configured as a redundant pair. For example a customer may select instances via a command console and specify that the instances are to operate as a high availability group. Alternatively API parameters for a computing instance launch request may be set to specify that the computing instances are within a high availability group.

A physical host may host a primary computing instance that executes an application . The primary computing instance and application may be used to provide a high availability service or computing process to end users e.g. a web service database service business management service etc. . The physical host s may host redundant computing instance s that execute an application copy i.e. a copy of the application . In the event that the primary computing instance fails a failover may be performed to one of the redundant computing instances . Accordingly the application copy is desired to be executed on the redundant computing instance s in near parallel with the application executed on the primary computing instance .

Further the states of the application and the application copy may be synchronized by ensuring that nondeterministic values used in executing the application and the application copy are obtained from the nondeterministic value service and that a nondeterministic value provided to the primary computing instance in response to a particular nondeterministic value request is also provided to the redundant computing instance s in response to an equivalent nondeterministic value request or an identical nondeterministic value request.

In one example the primary computing instance may execute an application instruction that results in a request for a nondeterministic value. The nondeterministic value may be a random number hardware time value e.g. real time clock value software time value or other nondeterministic value. The primary computing instance may be configured to make a request for the nondeterministic value to the nondeterministic value service located on the computing instance . More specifically a nondeterministic request may be transmitted to the nondeterministic value service using a request module included in an instance manager e.g. a hypervisor or a Virtual Machine Manager . The request module may be configured to obtain nondeterministic values from the nondeterministic value service in response to nondeterministic value requests made by an application or an application copy . For example an application or application copy may execute an instruction that results in a request for a nondeterministic value. The request may be transmitted to an instance manager where a request module may handle the request by transmitting the request to the nondeterministic value service .

Upon receiving the nondeterministic value request the nondeterministic value service may be configured to obtain a nondeterministic value from a nondeterministic value generator and then return the nondeterministic value to the primary computing instance by way of the request module . The nondeterministic value generator may be configured to generate a nondeterministic value type specified in a parameter. Illustratively in the case that the parameter specifies a random number type an Application Programming Interface API call may be made to a random number generator e.g. dev random for a random number and the random number may be returned to the primary computing instance . In the case that the parameter specifies a time value type an API call may be made to a hardware timer or software timer for a time value which may then be returned to the primary computing instance . The nondeterministic value provided to the primary computing instance may be stored along with a request identifier for the nondeterministic value request in a request log stored on a data store so that the nondeterministic value may be retrieved in response to a nondeterministic value request made by a redundant computing instance .

As described above in relation to the primary computing instance the redundant computing instance may likewise execute an application instruction that results in a request for a nondeterministic value. Because the redundant computing instance may execute an application copy that may be identical to the application executing on the primary computing instance the application instruction executed by the redundant computing instance may be identical to the application instruction executed on the primary computing instance. In response the redundant computing instance may be configured to request a nondeterministic value from the nondeterministic value service .

Upon receiving the request from the redundant computing instance the nondeterministic value service may be configured to use a request coordination module to identify the request e.g. identify a request identifier for the request and identify a request previously made by the primary computing instance that corresponds to the request from the redundant computing instance . For example a request identifier may be a unique identifier assigned to a specific nondeterministic value request. For instance a request identifier may identify a nondeterministic request as a first request second request third request and so on. The request identifier may be included in a nondeterministic request received by the nondeterministic value service or may be assigned by using the request coordination module . The request identifier may be used by the request coordination module to correlate a nondeterministic value request received from the primary computing instance with a nondeterministic value request received from the redundant computing instance . The nondeterministic value service may be configured to retrieve a nondeterministic value associated with the request identifier from a request log stored on a data store and return the nondeterministic value to the redundant computing instance . As a specific example a first nondeterministic value request received from a primary computing instance may be assigned a request identifier having a value of 0001 . When a first nondeterministic value request is received from a redundant computing instance the request may include a request identifier having the value 0001 or may be assigned the request identifier having the value 0001 . The request identifier having the value 0001 may be used to retrieve a nondeterministic value associated with the request identifier . Thus the primary redundant computing instances may be linked together in the request logs using the request identifier .

In one example configuration a request identifier and associated nondeterministic value may be stored to a request log in the data store . A request log may be associated with a particular computing instance e.g. a primary computing instance or a redundant computing instance . When a nondeterministic value request is received from a computing instance or the request log for the computing instance or may be referenced to determine the identity of the request e.g. whether the request is a first request second request etc. and a request identifier may then be assigned to the nondeterministic value request according to the identity of the request. Requests logs for other computing instances or may then be referenced to determine whether a nondeterministic value request matching the request identifier may have been received from one or more of the computing instances or . In the case that the request logs of the other computing instances or do not include the request identifier a nondeterministic value may be generated via the nondeterministic value generator and provided to a requesting computing instance or and the nondeterministic value and request identifier may be stored to the data store . In the case that the request logs of the other computing instances or do contain the request identifier the nondeterministic value associated with the request identifier may be obtained from the request log and the nondeterministic value may be returned to the requesting computing instance or .

Alternatively nondeterministic values provided to a primary computing instance and associated request identifiers may be stored in computer memory or a memory cache. A nondeterministic value may then be removed from the computer memory after responding to a second or Nth nondeterministic value request in which the nondeterministic value was provided or the nondeterministic value may be deleted after a certain amount of time e.g. 2 5 or 7 minutes .

As an illustration upon receiving a first nondeterministic value request from a primary computing instance the nondeterministic value service may provide the request to the request coordination module which may be configured to identify a requesting computing instance or . Having identified the primary computing instance as the requester a request log associated with the primary computing instance may be referenced to determine the identity of the request and assign a request identifier according to the identity of the request. For instance the request log for the primary computing instance may not contain any entries indicating that the request is the first nondeterministic value request received from the primary computing instance . As a result the request identifier assigned to the request may be a request identifier representing a first request . Request logs for redundant computing instances may be referenced to determine whether the request logs include the request identifier . In the case that the request logs for the redundant computing instances do not contain the request identifier a nondeterministic value may be generated and provided to the primary computing instance and an entry to the request log for the primary computing instance may be made that includes the request identifier and the nondeterministic value .

Having fulfilled the nondeterministic value request for the primary computing instance the nondeterministic value service may receive a first nondeterministic request from a redundant computing instance . The request coordination module may be used to identify the requesting computing instance as a redundant computing instance and a request log for the redundant computing instance may be referenced to determine the identity of the request. For instance the request log for the redundant computing instance may not contain any entries indicating that the request is a first nondeterministic value request whereupon a request identifier representing a first request may be assigned. A request log for the primary computing instance may then be referenced to determine whether the request log includes the first request request identifier . In the case that the request log does contain the request identifier a nondeterministic value associated with the request identifier in the request log may be retrieved and provided to the redundant computing instance . Consequently the redundant computing instance may receive a duplicate of the nondeterministic value associated with a first request for a nondeterministic value that was provided to the primary computing instance .

Although the above illustration describes that a nondeterministic value request may be first received from the primary computing instance and a duplicate of a nondeterministic value provided to the primary computing instance may be provided to the redundant computing instance a nondeterministic value request from the redundant computing instance s may be received prior to a nondeterministic value request from the primary computing instance . Coordination of request identifiers and nondeterministic values provided to the computing instances and may be maintained using the request logs for the computing instances and as described above. As such a nondeterministic value request may be first received from either of the computing instances and and then a duplicate request can be managed accordingly.

In one example configuration of the high availability system the primary computing instance may act as the source of nondeterministic values that may be provided to redundant computing instances . In other examples any of the computing instances or may act as the nondeterministic value source. Illustratively the primary computing instance may execute an application instruction that results in a request for a nondeterministic value. The operating system of the primary computing instance may generate a nondeterministic value in response to the request and the nondeterministic value may then be used in the execution of the application . The nondeterministic value may also be provided to redundant computing instances that request nondeterministic values.

In another example configuration of the high availability system the physical host may act as the source of nondeterministic values provided to computing instances and . For example an instance manager located on the physical host hosting the primary computing instance may be configured to generate nondeterministic values in response to a nondeterministic value request. Illustratively the instance manager may include a kernel module that generates nondeterministic values. A nondeterministic value generated by the instance manager may be provided to the primary computing instance and to redundant computing instances requesting the nondeterministic value.

The instance manager may include a request coordination service . The request coordination service may perform the functions as described in relation to e.g. coordinates nondeterministic value requests received from the primary computing instance and any redundant computing instances . Illustratively a nondeterministic value generated by the operating system of the primary computing instance or by the instance manager may be provided to the request coordination service as well as a request identifier e.g. an identifier used to track the request . The nondeterministic value and the request identifier may then be added to a request log for the primary computing instance stored in a data store .

Redundant computing instances may be configured to send nondeterministic value requests to the request coordination service located on the instance manager . Upon receiving a nondeterministic value request from a redundant computing instance the request coordination service may be configured to identify a request identifier for the nondeterministic value request e.g. an identifier representing a first request second request or the like and a nondeterministic value may be retrieved from the request log for the primary computing instance . The nondeterministic value may be associated with the request identifier . For example in the case that a nondeterministic value request received from a redundant computing instance is identified as an nth request i.e. an nth nondeterministic value request received from the redundant computing instance the request log for the primary computing instance may be referenced and a nondeterministic value associated with a request identifier representing the nth request may be retrieved from the request log and provided to the redundant computing instance .

Having identified a request identifier and a nondeterministic value in response to the request from the redundant computing instance a request log for the redundant computing instance may be updated with the request identifier and the nondeterministic value . Updating a request log for the redundant computing instance results in an audit trail that may be used to identify the identity of a nondeterministic value request and a nondeterministic value provided to the redundant computing instance .

In one example a synchronization service not shown may be used to detect that a sequence of nondeterministic values used by a primary computing instance may be different than a sequence of nondeterministic values provided to a redundant computing instance . For instance the state of an application and an application copy may be kept near identical by providing a nondeterministic value to a primary computing instance and a duplicate of the nondeterministic value to a redundant computing instance . In the event that a non duplicate nondeterministic value is provided to the redundant computing instance the states of the application and the application copy are no longer the same and in one case an alarm may be triggered.

Detecting that the states of the application and the application copy are different may be determined by comparing the request logs for the computing instances and . For example a comparison of request identifiers and associated nondeterministic values may show discrepancies in nondeterministic values that have been provided to the computing instances and . In one example if the comparison of the request logs shows a discrepancy the redundant computing instance may be removed from a pool of redundant computing instances executing the application copy by terminating the computing instance . In another example if the comparison of the request logs shows a discrepancy the application copy may be terminated and restarted whereupon the data and nondeterministic values used to execute the application may be provided to the restarted application copy in order to align the state of the application copy with the application .

In a further example a redundant computing instance may be selected as a nondeterministic data source for other redundant computing instances as a result of a failure of a primary computing instance . For example an agreement among the redundant computing instances may result in the selection of a redundant computing instance to serve as the nondeterministic value source. As one example a voting process may be implemented among the redundant computing instances where the voting process may be based on some factor pertaining to a computing instances ability to serve as the nondeterministic data source. In the event that the primary computing instance fails the voting process may be executed and a redundant computing instance may be selected as the new nondeterministic data source.

The selection of a computing instance as a nondeterministic data source in one example may be the result of a determination that an operational state of the computing instance may be healthier as compared to an operational state of one or more other computing instances. Illustratively the health of an operational state of a computing instance may be based on various factors that include an average computational work load available memory available network bandwidth hardware specifications reliability and the like.

In another example a primary computing instance serving as a nondeterministic value source may be configured to handle data requests that are in addition to nondeterministic data value requests made by a redundant computing instance s . The primary computing instance may obtain the requested data and return the requested data to the redundant computing instance s or may provide the redundant computing instance s with a cached copy of the data. More specifically request traffic associated with obtaining data for the execution of an application copy on a redundant computing instance may be routed to the primary computing instance or the request coordination service . The primary computing instance or the request coordination service may then request the data from a data source and then provide the redundant computing instance with a copy of the data received by the primary computing instance or the request coordination service .

As an illustration a redundant computing instance may execute an application copy instruction that queries a database for data. The query may be routed to the primary computing instance and in the case that the primary computing instance has already queried the database a cached copy of the data may be provided to the redundant computing instance . In the case that the primary computing instance has not yet queried the database the primary computing instance may query the database and then provide the redundant computing instance with a copy of the data returned by the query.

In an alternative example a primary computing instance may include a nondeterministic value module not shown that may be configured to generate nondeterministic values in response to nondeterministic value requests from an application executing on the primary computing instance . The nondeterministic value module on the primary computing instance may be further configured to coordinate nondeterministic value requests received from a redundant computing instance that for example also includes a nondeterministic value module configured to make nondeterministic value request to the primary computing instance . Namely the nondeterministic value modules included on the primary computing instance and redundant computing instances may be configured to communicate with one another where one of the nondeterministic value modules provides nondeterministic values to the other nondeterministic value modules.

In another alternative example a request coordination service may be included within a control plane of a computing service environment . An instance manager may include an instance metadata service not shown that is able to receive various information from the control plane such as an instance identity key values etc. as well as nondeterministic values generated by the request coordination service. When a computing instance is launched the computing instance may be configured to request nondeterministic values from the instance metadata service which in turn may request a nondeterministic value from the request coordination service located within the control plane. After receiving a nondeterministic value from the request coordination service the instance metadata service may provide the nondeterministic value to the computing instance.

In one example the primary computing instance may act as a nondeterministic data source for the one or more redundant computing instances collocated on the physical host e.g. nondeterministic values may be generated on the primary computing instance and the request coordination service may coordinate nondeterministic value requests made by the redundant computing instances . For example an application instruction executed on the primary computing instance may result in a nondeterministic value request made to the operating system of the primary computing instance . The nondeterministic value generated in response to the request may then be used in executing the application and may be saved to a request log with an associated request identifier making the nondeterministic value available to redundant computing instances as described earlier.

In another example the instance manager may act as the nondeterministic data source for the primary computing instance and the redundant computing instance s . For example the computing instances and may be configured to send nondeterministic value requests to the instance manager that includes a request coordination service that coordinates the nondeterministic value requests.

In another example a nondeterministic value service e.g. the nondeterministic value service as shown in that handles nondeterministic value requests may be included on the physical host . The primary computing instance and the redundant computing instance s may make nondeterministic value requests to the nondeterministic value service which may be configured to coordinate the nondeterministic value requests as described earlier.

The various processes and or other functionality contained within the computing service environments illustrated in and may be executed on one or more processors that are in communication with one or more memory modules. The computing service environments may include a number of computing devices that are arranged for example in one or more server banks or computer banks or other arrangements. The computing devices may support a computing environment using the instance managers as illustrated which may include a hypervisor a virtual machine monitor VMMs and other virtualization software. The term data store may refer to any device or combination of devices capable of storing accessing organizing and or retrieving data which may include any combination and number of data servers relational databases object oriented databases cluster storage systems data storage devices data warehouses flat files and data storage configuration in any centralized distributed or clustered environment. The storage system components of the data store may include storage systems such as a SAN Storage Area Network cloud storage network volatile or non volatile RAM optical media or hard drive type media. The data store may be representative of a plurality of data stores as can be appreciated.

A network may facilitate communication between the components of the computing service environments. A network may include any useful computing network including an intranet the Internet a local area network a wide area network a wireless data network or any other such network or combination thereof. Components utilized for such a system may depend at least in part upon the type of network and or environment selected. Communication over the network may be enabled by wired or wireless connections and combinations thereof.

The computing service may be capable of delivery of computing storage and networking capacity as a software service to a community of end recipients. In one example the computing service may be established for an organization by or on behalf of the organization. That is the computing service may offer a private cloud environment. In another example the computing service may support a multi tenant environment wherein a plurality of customers may operate independently i.e. a public cloud environment . Generally speaking the computing service may provide the following models Infrastructure as a Service IaaS Platform as a Service PaaS and or Software as a Service SaaS . Other models may be provided. For the IaaS model the computing service may offer computers as physical or virtual machines and other resources. The virtual machines may be run as guests by an instance manager as described further below. The PaaS model delivers a computing platform that may include an operating system programming language execution environment database and web server.

Application developers may develop and run their software solutions on the computing service platform without incurring the cost of buying and managing the underlying hardware and software. The SaaS model allows installation and operation of application software in the computing service . End customers may access the computing service using networked client devices such as desktop computers laptops tablets smartphones etc. running web browsers or other lightweight client applications for example. Those familiar with the art will recognize that the computing service may be described as a cloud environment.

The particularly illustrated computing service may include a plurality of server computers . While four server computers are shown any number may be used and large data centers may include thousands of server computers. The computing service may provide computing resources for executing computing instances . Computing instances may for example be virtual machines. A virtual machine may be an instance of a software implementation of a machine i.e. a computer that executes applications like a physical machine. In the example of a virtual machine each of the server computers may be configured to execute an instance manager capable of executing the instances. The instance manager may be a hypervisor virtual machine monitor VMM or another type of program configured to enable the execution of multiple computing instances on a single server. Additionally each of the computing instances may be configured to execute one or more applications.

One or more server computers and may be reserved to execute software components for managing the operation of the computing service and the computing instances . For example a server computer may execute a nondeterministic value service that performs functions such as generating a nondeterministic value in response to a request from a computing instance as well as coordinating nondeterministic value requests so that a nondeterministic value provided to a redundant computing instance corresponds with a nondeterministic request made by a primary computing instance.

A server computer may execute a management component . A customer may access the management component to configure various aspects of the operation of the computing instances purchased by a customer. For example the customer may setup computing instances and make changes to the configuration of the computing instances 

A deployment component may be used to assist customers in the deployment of computing instances . The deployment component may have access to account information associated with the computing instances such as the name of an owner of the account credit card information country of the owner etc. The deployment component may receive a configuration from a customer that includes data describing how computing instances may be configured. For example the configuration may include an operating system provide one or more applications to be installed in computing instances provide scripts and or other types of code to be executed for configuring computing instances provide cache logic specifying how an application cache should be prepared and other types of information. The deployment component may utilize the customer provided configuration and cache logic to configure prime and launch computing instances . The configuration cache logic and other information may be specified by a customer accessing the management component or by providing this information directly to the deployment component .

Customer account information may include any desired information associated with a customer of the multi tenant environment. For example the customer account information may include a unique identifier for a customer a customer address billing information licensing information customization parameters for launching instances scheduling information etc. As described above the customer account information may also include security information used in encryption of asynchronous responses to API requests. By asynchronous it is meant that the API response may be made at any time after the initial request and with a different network connection.

A network may be utilized to interconnect the computing service and the server computers . The network may be a local area network LAN and may be connected to a Wide Area Network WAN or the Internet so that end customers may access the computing service . The network topology illustrated in has been simplified many more networks and networking devices may be utilized to interconnect the various computing systems disclosed herein.

In an alternative example in response to a nondeterministic request the nondeterministic value service may be configured to query a request log to determine the identity of the request. For example a determination may be made as to whether the request is a first request second request and so on by referencing a request log associated with the computing instance making the request. By determining the identity of a last request recorded in the request log the identity of a current request may be identified. As a specific example a request log may be queried for the last request identifier added to the request log e.g. 0006 and the last request identifier may then be incremented to identify the current request.

Having identified the nondeterministic request the nondeterministic value service may be configured to generate a nondeterministic value according to specifications of the request. For example a nondeterministic request may include a parameter specifying a type of nondeterministic value that is being requested. Illustratively the request may be for a random number or a time value such as a hardware timer value or a software timer value. The nondeterministic value may then be returned to the first computing instance and the request log may be updated with a request identifier for the request and the nondeterministic value that was provided to the first computing instance in response to the request.

As illustrated the nondeterministic value service may then receive a nondeterministic value request from a second computing instance . A request identifier may be included in the request that identifies the request as a first request. The nondeterministic value service may be configured to query the request log using the request identifier to retrieve a nondeterministic value associated with the request identifier from the request log . The nondeterministic value may then be returned to the second computing instance .

Having received the request at the physical host as in block the nondeterministic value may be obtained from a nondeterministic value source located on the physical host. For example the operating system for the first computing instance may provide the nondeterministic value. Alternatively a kernel module included in an instance manager e.g. hypervisor or VMM associated with the first computing instance may provide the nondeterministic value or the nondeterministic value may be obtained from a service that provides nondeterministic values that may be independent of the first computing instance and the second computing instance.

As in block the nondeterministic value may be provided to the application executing on the first computing instance and the nondeterministic value may be stored in computer memory where the nondeterministic value may be associated with the request. As in block a second request associated with a copy of the application executing on a second computing instance may be received at the physical host. The second computing instance may be configured to receive the nondeterministic value from the nondeterministic value source.

After receiving the second request as in block the nondeterministic value may be identified in the computer memory provided to the first computing instance by the nondeterministic value source. For example the nondeterministic value may be identified as being associated with an identical request associated with the copy of the application executing on the first computing instance. As in block the nondeterministic value may then be provided to the second computing instance over a computer network.

The memory device may contain modules that are executable by the processor s and data for the modules . The modules may execute the functions described earlier. A data store may also be located in the memory device for storing data related to the modules and other applications along with an operating system that is executable by the processor s .

Other applications may also be stored in the memory device and may be executable by the processor s . Components or modules discussed in this description that may be implemented in the form of software using high programming level languages that are compiled interpreted or executed using a hybrid of the methods.

The computing device may also have access to I O input output devices that are usable by the computing devices. Networking devices and similar communication devices may be included in the computing device. The networking devices may be wired or wireless networking devices that connect to the internet a LAN WAN or other computing network.

The components or modules that are shown as being stored in the memory device may be executed by the processor s . The term executable may mean a program file that is in a form that may be executed by a processor . For example a program in a higher level language may be compiled into machine code in a format that may be loaded into a random access portion of the memory device and executed by the processor or source code may be loaded by another executable program and interpreted to generate instructions in a random access portion of the memory to be executed by a processor. The executable program may be stored in any portion or component of the memory device . For example the memory device may be random access memory RAM read only memory ROM flash memory a solid state drive memory card a hard drive optical disk floppy disk magnetic tape or any other memory components.

The processor may represent multiple processors and the memory may represent multiple memory units that operate in parallel to the processing circuits. This may provide parallel processing channels for the processes and data in the system. The local interface may be used as a network to facilitate communication between any of the multiple processors and multiple memories. The local interface may use additional systems designed for coordinating communication such as load balancing bulk data transfer and similar systems.

While the flowcharts presented for this technology may imply a specific order of execution the order of execution may differ from what is illustrated. For example the order of two more blocks may be rearranged relative to the order shown. Further two or more blocks shown in succession may be executed in parallel or with partial parallelization. In some configurations one or more blocks shown in the flow chart may be omitted or skipped. Any number of counters state variables warning semaphores or messages might be added to the logical flow for purposes of enhanced utility accounting performance measurement troubleshooting or for similar reasons.

Some of the functional units described in this specification have been labeled as modules in order to more particularly emphasize their implementation independence. For example a module may be implemented as a hardware circuit comprising custom VLSI circuits or gate arrays off the shelf semiconductors such as logic chips transistors or other discrete components. A module may also be implemented in programmable hardware devices such as field programmable gate arrays programmable array logic programmable logic devices or the like.

Modules may also be implemented in software for execution by various types of processors. An identified module of executable code may for instance comprise one or more blocks of computer instructions which may be organized as an object procedure or function. Nevertheless the executables of an identified module need not be physically located together but may comprise disparate instructions stored in different locations which comprise the module and achieve the stated purpose for the module when joined logically together.

Indeed a module of executable code may be a single instruction or many instructions and may even be distributed over several different code segments among different programs and across several memory devices. Similarly operational data may be identified and illustrated herein within modules and may be embodied in any suitable form and organized within any suitable type of data structure. The operational data may be collected as a single data set or may be distributed over different locations including over different storage devices. The modules may be passive or active including agents operable to perform desired functions.

The technology described here may also be stored on a computer readable storage medium that includes volatile and non volatile removable and non removable media implemented with any technology for the storage of information such as computer readable instructions data structures program modules or other data. Computer readable storage media include but is not limited to non transitory media such as RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disks DVD or other optical storage magnetic cassettes magnetic tapes magnetic disk storage or other magnetic storage devices or any other computer storage medium which may be used to store the desired information and described technology.

The devices described herein may also contain communication connections or networking apparatus and networking connections that allow the devices to communicate with other devices. Communication connections are an example of communication media. Communication media typically embodies computer readable instructions data structures program modules and other data in a modulated data signal such as a carrier wave or other transport mechanism and includes any information delivery media. A modulated data signal means a signal that has one or more of its characteristics set or changed in such a manner as to encode information in the signal. By way of example and not limitation communication media includes wired media such as a wired network or direct wired connection and wireless media such as acoustic radio frequency infrared and other wireless media. The term computer readable media as used herein includes communication media.

Reference was made to the examples illustrated in the drawings and specific language was used herein to describe the same. It will nevertheless be understood that no limitation of the scope of the technology is thereby intended. Alterations and further modifications of the features illustrated herein and additional applications of the examples as illustrated herein are to be considered within the scope of the description.

Furthermore the described features structures or characteristics may be combined in any suitable manner in one or more examples. In the preceding description numerous specific details were provided such as examples of various configurations to provide a thorough understanding of examples of the described technology. It will be recognized however that the technology may be practiced without one or more of the specific details or with other methods components devices etc. In other instances well known structures or operations are not shown or described in detail to avoid obscuring aspects of the technology.

Although the subject matter has been described in language specific to structural features and or operations it is to be understood that the subject matter defined in the appended claims is not necessarily limited to the specific features and operations described above. Rather the specific features and acts described above are disclosed as example forms of implementing the claims. Numerous modifications and alternative arrangements may be devised without departing from the spirit and scope of the described technology.

