---

title: Hybrid distributed storage system
abstract: There is provided a distributed object storage system that includes several performance optimizations with respect to efficiently storing data objects when coping with a desired concurrent failure tolerance of concurrent failures of storage elements which is greater than two and with respect to optimizing encoding/decoding overhead and the number of input and output operations at the level of the storage elements.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645885&OS=09645885&RS=09645885
owner: Amplidata NV
number: 09645885
owner_city: Ghent
owner_country: BE
publication_date: 20150514
---
The present disclosure generally relates to a distributed data storage system. Typically such distributed storage systems are targeted at storing large amounts of data such as objects or files in a distributed and fault tolerant manner with a predetermined level of redundancy.

Large scale storage systems are used to distribute stored data in the storage system over multiple storage elements such as for example hard disks or multiple components such as storage nodes comprising a plurality of such storage elements. However as the number of storage elements in such a distributed object storage system increases equally the probability of failure of one or more of these storage elements increases. In order to be able to cope with such failures of the storage elements of a large scale distributed storage system it is required to introduce a certain level of redundancy into the distributed object storage system. This means that the distributed storage system must be able to cope with a failure of one or more storage elements without irrecoverable data loss. In its simplest form redundancy can be achieved by replication. This means storing multiple copies of data on multiple storage elements of the distributed storage system. In this way when one of the storage elements storing a copy of the data object fails this data object can still be recovered from another storage element holding another copy. Several schemes for replication are known in the art. However in general replication is costly with regard to the storage capacity. This means that in order to survive two concurrent failures of a storage element of a distributed object storage system at least two replica copies for each data object are required which results in a storage capacity overhead of 200 which means that for storing 1 GB of data objects a storage capacity of 3 GB is required. Another well known scheme used for distributed storage systems is referred to as RAID systems of which some implementations are more efficient than replication with respect to storage capacity overhead. However often RAID systems require a form of synchronisation of the different storage elements and require them to be of the same type. In the case of a failure of one of the storage elements RAID systems often require immediate replacement which needs to be followed by a costly and time consuming rebuild process in order to restore the failed storage element completely on the replacement storage element. Therefore known systems based on replication or known RAID systems are generally not configured to survive more than two concurrent storage element failures and or require complex synchronisation between the storage elements and critical rebuild operations in case of a drive failure.

Therefore it has been proposed to use distributed object storage systems that are based on erasure encoding such as for example described in WO2009135630 EP2469411 EP2469413 EP2793130 EP2659369 EP2659372 EP2672387 EP2725491 etc. Such a distributed object storage system stores the data object in fragments that are spread amongst the storage elements in such a way that for example a concurrent failure of six storage elements out of minimum of sixteen storage elements can be tolerated with a corresponding storage overhead of 60 that means that 1 GB of data objects only require a storage capacity of 1.6 GB. It should be clear that in general distributed object storage systems based on erasure encoding referred to above differ considerably from for example parity based RAID 3 4 5 or RAID 6 like systems that can also make use of Reed Solomon codes for dual check data computations. Such RAID like systems can at most tolerate one or two concurrent failures and concern block level byte level or bit level striping of the data and subsequent synchronisation between all storage elements storing such stripes of a data object or a file. The erasure encoding based distributed storage system described above generates for storage of a data object a large number of fragments of which the number for example hundreds or thousands is far greater than the number of storage elements for example ten or twenty among which they need to be distributed. A share of this large number of fragments for example 8000 fragments that suffices for the recovery of the data object is distributed among a plurality of storage elements for example ten storage elements each of these storage elements comprising 800 of these fragments. Redundancy levels can now be flexible chosen to be greater than two for example three four five six etc. by storing on three four five six etc. additionally 800 of these fragments. This can be done without a need for synchronisation between the storage elements and upon failure of a storage element there is no need for full recovery of this failed storage element to a replacement storage element. The number of fragments of a particular data object which it stored can simply be replaced by storing a corresponding number of fragments to any other suitable storage element not yet storing any fragments of this data object. Fragments of different data objects of a failed storage element can be added to different other storage elements as long as they do not yet comprise fragments of the respective data object.

Additionally in large scale distributed storage systems it is advantageous to make use of distributed object storage systems which store data objects referenced by an object identifier as opposed to file systems such as for example US2002 0078244 which store files referenced by an inode or block based systems which store data in the form of data blocks referenced by a block address which have well known limitations in terms of scalability and flexibility. Distributed object storage systems in this way are able to surpass the maximum limits for storage capacity of file systems etc. in a flexible way such that for example storage capacity can be added or removed in function of the needs without degrading its performance as the system grows. This makes such object storage systems excellent candidates for large scale storage systems.

Current erasure encoding based distributed storage systems for large scale data storage are well equipped to efficiently store and retrieve data however the processing power required for encoding and or decoding data objects into a large number of fragments and associated calculation delays are a disadvantage of such systems. Additionally the high number of fragments spread amongst a higher number of storage elements leads to a relatively high number of input output operations at the level of the storage elements which can become a bottleneck especially when for example a high number of relatively small data objects needs to be stored or retrieved. On the other hand replication based systems don t cause such an encoding decoding overhead however they cause a large storage overhead especially when it is desired to implement a large scale distributed storage system which can tolerate a concurrent failure of more than two storage elements.

Therefore there still exists a need for an improved distributed object storage system that is able to overcome the abovementioned drawbacks and is able to provide for an efficient storage overhead when coping with a desired concurrent failure tolerance of storage elements which is greater than two and which optimizes the encoding decoding overhead and the number of input and output operations at the level of the storage elements.

This hybrid storage and retrieval option enables a distributed object storage system with a synergistic effect of enabling a more flexible reliable and efficient way to cope with changing loads with respect to bandwidth input output operations storage capacity processing power etc. during operation of the distributed object storage system. This means for example that in conditions in which there is a high load on the available processing power or when the storage elements involved in a storage or retrieval operation are loaded with a high number of input output operations the replication copy which requires minimal processing power and input output operations will allow for a fast response time for the storage and retrieval operations even when the fragments during a storage operation take be spread amongst the fragment storage subset. This particular combination of encoded fragments and replication copies is furthermore highly unconventional in large scale distributed object storage systems as when it is desired to optimize storage cost generally encoded fragments will be preferred and replication copies will be avoided and vice versa when processing power operations needs to be optimized replication copies will be preferred and encoded fragments will be avoided. This particular combination offered by the hybrid storage and retrieval option thus not only provides for a more efficient storage overhead when coping with a desired concurrent failure tolerance of more than two storage elements combined with a more optimal encoding decoding overhead and an optimized number of input and output at the level of the storage elements but also provides for additional robustness in dealing with varying bottlenecks during operation of the distributed storage system. Whether the bottleneck shifts between network bandwidth storage capacity input output operations processing power etc. and irrespective of the effects on the storage and retrieval operation resulting for example from the particular size or number of the data objects to be stored the hybrid storage and retrieval option will ensure a more robust performant and responsive behaviour during a storage operation and subsequent retrieval operations.

In this way the clustering and decoding module are able to realize a more robust performant and responsive behaviour during subsequent retrieval operations by means of the synergistic effect provided by the availability of the combination of both the replication copy and the fragments for retrieval of the data object from the distributed storage system even when the bottleneck shifts between network bandwidth storage capacity input output operations processing power etc. and irrespective of the effects on the retrieval operation resulting for example from the particular size or number of the data objects to be retrieved.

According to an embodiment the replication storage count is smaller than the redundant fragment storage element count preferably the replication storage count is equal to one and the redundant fragment storage element count is greater than or equal to three.

In this way the increase in storage cost by the replication copies is minimized while still achieving levels of redundancy that are currently only available in large scale distributed object storage systems by means of encoded fragments.

According to an embodiment the fragment storage subset comprises the replication storage subset and the desired concurrent failure tolerance is equal to the redundant fragment storage element count.

In this way as the replication storage subset and the fragment storage subset overlaps the desired concurrent failure tolerance is in a simple way determined by the redundant fragment storage element count while for example the availability of the replication copy is able to reduce the number of input output operations during for example subsequent retrieval operations.

According to an embodiment the fragment storage subset and replication storage subset do not overlap and the redundant fragment storage element count is equal to the desired concurrent failure tolerance minus the replication storage count.

In this way the storage cost is still further optimized as the storage cost of the fragment storage subset is optimized by means of a reduction of the redundant fragment storage element count of the replication storage subset to a number lower than the desired concurrent failure tolerance and thus a corresponding reduction of the storage cost. As there is no overlap between fragment storage subset and replication storage subset the replication storage count of replication copies on the replication storage subset enables still that the desired concurrent failure tolerance can be reached.

According to a further embodiment the clustering module is further adapted to during a retrieval operation to 

In this way a simple and efficient retrieval operation is realised that reduces the load with respect to the number of input output operations and processing power of the distributed storage system. This allows for reduced response times during retrieval of a data object from a storage element as only one storage element is attempted first to be occupied for the retrieval unlike the retrieval of fragment sub collection of fragments from multiple storage elements of the fragment storage subset.

According to an embodiment the hybrid encoding module is further adapted to first generate at least one of the replication storage count of replication copies of the data object.

In this way a particularly simple and efficient storage operation is realised in which processing power and the number of input output operations is reduced thereby reducing for example the responsiveness of the storage operation whereby the replication copy is made available in simple and fast way for subsequent retrieval operations while ongoing fragment encoding and spreading operations ensure the desired level of concurrent failure tolerance.

According to a preferred embodiment the spreading module is further adapted to first store one of the replication copies on the replication storage subset as soon as it is generated by the hybrid encoding module.

This still further optimizes responsiveness of the storage operation of the distributed object storage system in a simple way.

According to an embodiment wherein the distributed object storage system next to a hybrid storage and retrieval option mentioned above also comprises a replication storage and retrieval option and when the distributed object storage system is operated according to said replication storage and retrieval option 

According to a preferred embodiment the distributed object storage system is operated according to the hybrid storage and retrieval option when the size of the data object is greater than a predetermined first data object size threshold and in that the distributed object storage system is operated according to the replication storage and retrieval option when the size of the data object is smaller than or equal to the predetermined first data object size threshold.

Such an additional replication storage and retrieval option is preferable for such small data objects as the overhead associated with generation storage and retrieval and decoding the large number of even smaller fragments is avoided. Additionally this reduces the negative impact of the effect of the block size of a file system on the storage elements for example for a file system comprising a block size of 4 kB this negative impact will be already relevant for data objects smaller than 128 kB for an encoding scheme with a basic fragment storage element count k 10 and a redundant fragment storage element count f 6 this becomes a critical issue for data objects smaller than 64 kB and certainly for data objects with a size of less than ten times the block size of 4 kB.

According to an embodiment wherein the distributed object storage system next to a hybrid storage and retrieval option also comprises an encoding storage and retrieval option and when the distributed object storage system is operated according to an encoding storage and retrieval option 

According to a preferred embodiment the distributed object storage system is operated according to the encoding storage and retrieval option when the size of the data object is greater than a predetermined second data object size threshold and in that the distributed object storage system is operated according to the hybrid storage and retrieval option when the size of the data object is smaller than or equal to the predetermined second data object size threshold.

Such an additional encoding storage and retrieval option is preferable very large data objects as an optimal use is made of the parallel bandwidth of these storage elements and their network connection during storage and retrieval operations and the use of storage capacity is further optimized and more efficient as with an encoding rate of r k n 10 17 the storage cost will only be a factor of 1.7. The predetermined second data object size threshold is for example 1 GB or any other suitable threshold for relatively large data objects.

According to a more preferred embodiment the second data object size threshold is greater than the first data object size threshold.

It is clear that the second data object size threshold T is preferably several orders of magnitude greater than the first data object size threshold T.

According to an embodiment each fragment is associated with decoding data the decoding data comprises a forward error correction code for example an erasure code preferably a rateless erasure code.

In this way the hybrid storage and retrieval option remains compatible with encoding and decoding modules of large scale distributed object storage systems that are able to provide a high level of desired concurrent failure tolerance while limiting the storage cost.

According to a second aspect there is provided a method of operating a distributed storage system such that a desired concurrent failure tolerance of concurrent failures of the storage elements of the storage set can be tolerated the method comprising 

It is clear that according to an exemplary embodiment the fragment collection is generated by the hybrid encoding module such that the data object is decodable from any combination of the fragments of which the number corresponds to a basic fragment count which corresponds to the basic fragment storage element count multiplied by the encoding multiple.

As shown in several storage nodes can be grouped together for example because they are housed in a single rack . For example storage nodes . . . . . . . and . . each are respectively grouped into racks . . . . . .. Controller node could for example be located in rack .. These racks are not required to be located at the same location they are often geographically dispersed across different data centres such as for example rack . . can be located at a data centre in Europe . . at a data centre in the USA and . . at a data centre in China.

As is clear from the distributed storage system comprises a plurality of storage elements . As will be described in further detail below the storage elements could also be referred to as redundant storage elements as the data is stored on these storage elements such that none of the individual storage elements on its own is critical for the functioning of the distributed storage system. It is further clear that each of the storage nodes comprises a share of these storage elements . As shown in storage node . comprises ten storage elements . .. Other storage nodes could comprise a similar amount of storage elements but this is however not essential. Storage node . could for example comprise six storage elements . . and storage node . could for example comprise four storage elements . .. As will be explained in further detail below with respect to the distributed storage system is for example operable as a distributed object storage system to store and retrieve a data object comprising data for example 64 MB of binary data and a data object identifier for addressing this data object for example a universally unique identifier such as a globally unique identifier GUID . Embodiments of the distributed storage system which operate as a distributed object storage system . Storing the data offered for storage by the application in the form of a data object also referred to as object storage has specific advantages over other storage schemes such as conventional block based storage or conventional file based storage such as scalability and flexibility which are of particular importance in a distributed object storage system that is directed to large scale redundant storage applications sometimes also referred to as cloud storage.

The storage elements are redundant and operate independently of one another. This means that if one particular storage element fails its function it can easily be taken on by another storage element in the distributed storage system . However as will be explained in more detail further below there is no need for the storage elements to work in synchronism as is for example the case in many well known RAID configurations which sometimes even require disc spindle rotation to be synchronised. Furthermore the independent and redundant operation of the storage elements allows any suitable mix of types of storage elements to be used in a particular distributed storage system . It is possible to use for example storage elements with differing storage capacity storage elements of differing manufacturers using different hardware technology such as for example conventional hard disks and solid state storage elements using different storage interfaces such as for example different revisions of SATA PATA and so on. This results in advantages relating to scalability and flexibility of the distributed storage system as it allows for adding or removing storage elements without imposing specific requirements to their design in correlation to other storage elements already in use in the distributed object storage system .

According to an alternative embodiment the controller node could have an identical design as a storage node or according to still a further alternative embodiment one of the storage nodes of the distributed object storage system could perform both the function of a controller node and a storage node . According to still further embodiments the components of the controller node as described in more detail below could be distributed amongst a plurality of controller nodes and or storage nodes in any suitable way. According to still a further embodiment the device on which the application runs is a controller node .

As schematically shown in an embodiment of the controller node comprises four modules a hybrid encoding module a spreading module a clustering module and a decoding module . These modules can for example be implemented as programming instructions stored in local memory of the controller node for execution by its processor .

The functioning of these modules will now be explained to . The distributed storage system stores a data object as provided by the application in function of a reliability policy which guarantees a level of redundancy. That means that the distributed object storage system must for example guarantee that it will be able to correctly retrieve data object even if a number of storage elements would be unavailable for example because they are damaged or inaccessible. Such a reliability policy could for example require the distributed storage system to be able to retrieve the data object in case of seven concurrent failures of the storage elements it comprises. In large scale data storage massive amounts of data are stored on storage elements that are individually unreliable as such redundancy must be introduced into the storage system to improve reliability. However the most commonly used form of redundancy straightforward replication of the data on multiple storage elements similar as for example RAID 1 is only able to achieve acceptable levels of reliability at the cost of unacceptable levels of overhead. For example in order to achieve sufficient redundancy to cope with seven concurrent failures of storage elements each data objects would need to be replicated until eight replication copies are stored on eight storage elements such that when seven of these storage elements fail concurrently there still remains one storage element available comprising a replication copy. As such storing 1 GB of data objects in this way would result in the need of 8 GB of storage capacity in a distributed storage system which means an increase in the storage cost by a factor of eight or a storage overhead of 800 . Other standard RAID levels are only able to cope with a single drive failure for example RAID 2 RAID 3 RAID 4 RAID 5 or two concurrent drive failures such as for example RAID 6. Although it would be possible to reach higher redundancy levels with for example nested RAID levels such as for example RAID 5 0 which could provide for a concurrent failure tolerance of seven storage elements when providing seven RAID 0 sets each of these sets comprising a three disk RAID 5 configuration. However it should be clear that in such nested RAID configurations such as for example RAID 5 0 or RAID 6 0 high levels of synchronisation of the storage elements are preferred and that the rebuild process in case of a drive failure is critical often leading to the necessity to provide hot spares which further reduce the storage efficiency of such configurations. Additionally each increase in the level of redundancy leads to the need for providing an additional synchronised set comprising the minimum number storage elements needed for the lowest level RAID configuration and associated control systems. Therefore as will be described in more detail below the distributed storage system will make use of erasure coding techniques in order to achieve the requirements of the reliability policy with higher redundancy levels that can be achieved with standard RAID levels with considerably less storage overhead. As will be explained in further detail below when using erasure encoding with a rate of encoding r 10 16 six concurrent failures of storage element can be tolerated on 16 storage elements which requires a storage overhead of 60 or a storage cost of a factor of 1.6. This means that storing 1 GB of data objects in this way will result in the need for 1.6 GB of storage capacity in a fragment storage subset of the distributed storage system . Some known erasure encoding techniques make use of Reed Solomon codes but also fountain codes or rateless erasure codes such as online codes LDPC codes raptor codes and numerous other coding schemes are available. However as will be explained in further detail below a storage and or retrieval operation of a single data object then results in the need for accessing at least ten of the storage elements and thus a corresponding increase in the number of input output operations per storage element of the distributed storage system. Especially in the case of frequently accessed data objects and or in the case of a high number of storage and or retrieval operations the maximum number of input output operations of the storage elements could become a bottle neck for the performance of the distributed object storage system.

According to this embodiment the storage set comprises seventeen storage elements for storing the data object in the following way. It is clear that systems could comprise much more than seventeen storage elements for example a storage set could comprise more than a hundred or more than thousand storage elements . According to the embodiment shown in as shown the spreading module selects a replication storage subset comprising a replication storage count of storage elements of the storage set which is in this embodiment one storage element .. Storage set comprises the fragment storage subset of storage elements . . and the replication storage subset with storage element .. In this embodiment these storage subsets of the storage set are complementary to each other i.e. they do not overlap. In an alternative embodiment the fragment storage subset and the replication storage subset could at least partly overlap. This means that at least one storage element will store both fragments and a replication copy as explained in further detail below.

The data object is offered to the hybrid encoding module of the controller node . The hybrid encoding module generates a replication copy . of the data object comprising a data object identifier and the object data . Subsequently as shown in the spreading module will store on storage element . of the replication storage subset the replication copy . generated by the hybrid encoding module .

According to an embodiment the storage elements of the replication storage subset comprise a suitable file system in which the object data is stored by the spreading module in the form of a replication file .. Preferably the spreading module stores the object data on a single storage element . into the replication file . that is subsequently stored in the file system that is in use on the respective storage element .. As shown in storage element . is for example arranged in storage node ..

According to an embodiment the hybrid encoding module for example first generates at least one of the replication storage count of replication copies of the data object and the spreading module first stores one of the replication copies on the one or more storage elements of the replication storage subset as soon as it is generated by the hybrid encoding module before generating a fragment collection as will be discussed further. However it is clear that alternative embodiments are possible in which fragments and replication copies are concurrently generated and spread.

The spreading module also selects a fragment storage subset comprising a fragment spreading width of the storage elements of the storage set . As shown according to this embodiment the fragment spreading width equals n 16. This fragment spreading width is the sum of a basic fragment storage element count corresponding to the number of storage elements of the fragment storage subset which are not allowed to fail and a redundant fragment storage element count corresponding to the number of storage elements of the fragment storage subset which are allowed to concurrently fail. Hence according to this embodiment the redundant fragment storage element count i.e. f 6 is equal to the desired concurrent failure tolerance i.e. d 7 minus the replication storage count i.e. q 1.

During a storage operation the data object is offered to the hybrid encoding module of the controller node . The hybrid encoding module will disassemble the data object into an encoding number x n 16 800 12800 of redundant fragments which also comprise the data object identifier . This encoding number x n 16 800 12800 corresponds to an encoding multiple x 800 of a fragment spreading width n 16. This fragment spreading width n 16 k f 10 6 consists of the sum of a basic fragment storage element count k 10 and a redundant fragment storage element count f 6. This redundant fragment storage element count f 6 corresponds to the number of storage elements of the fragment storage set that store fragments of the data object and are allowed to fail concurrently for the fragment storage subset . The basic fragment storage element count k 10 corresponds to the number of storage elements that must store fragments of the data object and are not allowed to fail. The hybrid encoding module for example makes use of an erasure encoding scheme to produce these encoding number x n 16 800 12800 redundant fragments . .. Reference is made to known erasure encoding schemes such as in WO2009135630 which hereby is incorporated by reference. In this way each one of these redundant fragments such as for example fragment . comprises encoded data of equal size of the data object divided by a factor equal to the encoding multiple of the basic fragment storage element count x k 800 10 8000. This means that the size of fragment . in the example above with a data object of 64 MB will be 8 kB as this corresponds to 64 MB divided by x k 800 10 8000. Fragment . will further comprise decoding data f such that the data object can be decoded from any combination of the redundant fragments of which the number x k 800 10 8000 corresponds to the encoding multiple x 800 of the basic fragment storage element count k 10. To accomplish this the hybrid encoding module will preferably make use of an erasure encoding scheme with a rate of encoding r k n 10 16 which corresponds to the basic fragment storage element count k 10 divided by the fragment spreading width n 16. In practice this means that the hybrid encoding module will first split the data object of 64 MB into x k 800 10 8000 chunks of 8 kB subsequently using an erasure encoding scheme with a rate of encoding of r k n 10 16 it will generate x n 800 16 12800 encoded redundant fragments . . which comprise 8 kB of encoded data this means encoded data of a size that is equal to the 8 kB chunks and decoding data f f that allows for decoding. The decoding data could be implemented as for example be a 16 bit header or another small size parameter associated with the fragment such as for example a suitable fragment identifier. Because of the erasure encoding scheme used namely a rate of encoding r k n 10 16 the fragments . . allow the data object to be decoded from any combination of fragments which corresponds to the encoding multiple of the basic fragment storage element count x k 800 10 8000 such as for example the combination of fragments . . and fragments . .. It is clear that according to this embodiment of the distributed object storage system 1 GB of data objects being processed by the hybrid encoding module will result in a need for a storage capacity of 1.6 GB 1 GB 2.6 GB as the storage of the fragments on the fragment storage subset the storage cost of such an erasure coding scheme is inversely proportional to the rate of encoding and in this particular embodiment will be a factor of 1 r 1 10 16 1.6 results in 1.6 GB of data and storage of the replication storage subset results in 1 GB of data. For a data object of 64 MB this results in a need for storage capacity of 64 MB 1.6 64 MB 166 MB.

Subsequently as shown in the spreading module will store the encoding number x n 800 16 12800 of encoded redundant fragments . . on a number of storage elements which corresponds to the fragment spreading width n 16 such as for example storage elements . .. The spreading module will store on each of these storage elements . . the encoding multiple x 800 of these fragments . As shown in fragments . . are stored on storage element . the next x 800 of these fragments are stored on storage element . and so on until the last x 800 of these fragments are stored on storage element .. According to an embodiment the storage elements comprise a suitable file system in which the fragments are stored by the spreading module in the form of fragment files . Preferably the spreading module groups all fragments that need to be stored on a single storage element into a single fragment file that is subsequently stored in the file system that is in use on the respective storage element . For the embodiment shown in this would mean that the fragments . . which need to be stored on the storage element . would be grouped in a single fragment file . by the spreading module . This fragment file . then being stored in the file system of storage element .. As shown in storage elements . . are arranged in storage node . and storage elements . . are arranged in storage node ..

Although alternative methods for determining the share of fragments to be stored on specific storage elements are well known to the person skilled in the art and are for example described in WO2009135630 it is generally preferable to configure the spreading module to store an equal share of the total amount of fragments on each of the storage elements selected for storage. This allows for a simple configuration of the spreading module which then for example generates a fragment file for storage on each of the storage elements selected that will comprise an equal share of the total amount of fragments and will thus also be equal in size. In the example as shown in this would result in 16 fragment files . . each comprising 800 fragments and each fragment file would have a size 6400 kB as it comprise 800 times 8 kB of fragment data .

It is clear that according to alternative embodiments other values could have been chosen for the parameters x f k n k f and r k n mentioned in embodiment above such as for example x 400 f 4 k 12 n k f 12 4 16 and r 12 16 or any other possible combination that conforms to a desired reliability policy for redundancy and concurrent failure tolerance of storage elements of the fragment storage subset of the distributed object storage system .

According to still a further alternative there could be provided a safety margin to the encoding multiple for generating fragments by the hybrid encoding module . In such an embodiment some of the storage efficiency is traded in for some additional redundancy over the theoretical minimum. This preventively increases the tolerance for failures and the time window that is available for a repair activity. However according to a preferred embodiment this safety margin will be rather limited such that it only accounts for an increase in fragments that must be generated and stored of for example approximately 10 to 30 such as for example 20 .

In case this replication file . or other replication files with corresponding data object identifier are not retrievable e.g. when there is a problem in network connectivity between the controller node and storage node . as indicated in the clustering module of the controller node will initiate the retrieval of the fragments associated with this data object identifier . It will try to retrieve the encoding number x n 16 800 12800 of redundant fragments . . from the fragment files . . that were stored on the storage elements . .. Because of the encoding technology used and the corresponding decoding techniques available it is sufficient for the clustering module to retrieve the encoding multiple of the basic fragment storage element count x k 800 10 8000 of the redundant fragments from these storage elements . .. This could be the case when for example there is a problem in network connectivity between the controller node and storage node . as indicated in . In that case the retrieval operation of the clustering module will be able to retrieve the fragments . . which corresponds to the encoding multiple of the basic fragment storage element count x k 800 10 8000. The retrieved blocks . . allow the decoding module to assemble data object and offer it to the application . It is clear that any number in any combination of the redundant fragments corresponding to the data object as long as their number is equal to or greater than the encoding multiple of the basic fragment storage element count x k 800 10 8000 would have enabled the decoding module to assemble the data object .

As shown in the distributed storage system can be operated according to a hybrid storage and retrieval option i.e. according to the method illustrated by the steps of such that the desired concurrent failure tolerance also referenced above as d of concurrent failures of the storage elements of the storage set can be tolerated which cold for example be seven as mentioned above but also any other suitable plurality such as for example four five six eight or more.

After a request is received for storing a data object in step . A storage set is selected at step comprising sufficient storage elements for a fragment storage subset and a replication storage subset . Preferably the fragment storage subset comprises the largest number of storage elements and thus the storage subset thus comprises at least a sufficient number of storage elements for this fragment storage subset optionally increased at least partially by the number of storage elements for a replication storage subset when there is no overlap.

At step the replication storage subset comprising the desired number q of one or more storage elements is selected by the spreading module . At step a fragment storage subset comprising the desired number k f of storage elements is also selected by the spreading module .

The desired number q of one or more replication copies of the data object is generated by the hybrid encoding module in step . As explained above the number of replication copies could is preferably equal to one as this results in the most optimal scenario with respect to storage cost for the hybrid storage and retrieval option. But alternative embodiments are possible in which the number of replication copies is for example two or even more as long as in general the number of replication copies q is smaller than the desired concurrent failure tolerance d. Next to the generation of replication copies as explained above at step a fragment collection of x k f fragments of the data object is generated by the hybrid encoding module . Herein the data object is decodable from any x k fragments of the fragment collection .

On the replication storage subset comprising the desired number q of one or more storage elements selected in step the spreading module then stores the generated one or more replication copy on each storage element of the replication storage subset at step . Also on the fragment storage subset comprising k f storage elements selected in step the spreading module in step then stores on each of the k f storage elements of the fragment storage subset at least x generated fragments of the generated fragment collection .

According to a further embodiment such as for example shown in the distributed data storage system can additionally also be operated according to a replication storage and retrieval option when the size of said data object is smaller than or equal to a first data object size threshold T e.g. 64 kB or any other suitable threshold for relatively small data objects. In that case when a request for storing a data object is received at step in step the process will be continued to step and replication copies of the data object are generated and stored on each storage element of the selected storage set which comprises a replication storage count of storage elements that is equal to the sum of one plus the desired concurrent failure tolerance. With a desired concurrent failure tolerance of seven as described in the example above the storage set would thus comprise eight storage elements on which then replication copies of the data object are stored. Hereby a replication copy can be retrieved from each storage element of said selected storage set . Such an option is preferable for such small data objects as the overhead associated with generation storage and retrieval and decoding the large number of even smaller fragments is avoided. Additionally this reduces the negative impact of the effect of the block size of a file system on the storage elements for example for a file system comprising a block size of 4 kB this negative impact will be already relevant for data objects smaller than 128 kB for an encoding scheme with a basic fragment storage element count k 10 and a redundant fragment storage element count f 6 this becomes a critical issue for data objects smaller than 64 kB and certainly for data objects with a size of less than ten times the block size of 4 kB.

According to the embodiment shown in the distributed data storage system can also be operated according to an encoding storage and retrieval option when the size of said data object is greater than to a second data object size threshold T e.g. 1 GB or any other suitable threshold for relatively large data objects. It is clear that the second data object size threshold T is preferably several orders of magnitude greater than the first data object size threshold T. In that case when storing a data object the method proceeds from step via step and to step and to step where a fragment collection is generated wherein a fragment sub collection of fragments is stored on each storage element of the selected storage set in a similar way as described above. Hereby a data object is decodable from any combination of retrieved fragments of which the number corresponds to a basic fragment count . However now the redundant fragment storage element count will be equal to or greater than the desired concurrent failure tolerance which according to the example described above is for example seven. When similar as described above the basic fragment storage element count is for example equal to ten the storage set will comprise a set of seventeen storage elements among which the fragment collection will be distributed so that each of these storage elements comprises a fragment sub collection comprising for example 800 fragments as described above so that a concurrent failure of seven storage elements can be tolerated. Such an option is preferable for such very large data objects as an optimal use is made of the parallel bandwidth of these storage elements and their network connection during storage and retrieval operations and the use of storage capacity is further optimized and more efficient as with an encoding rate of r k n 10 17 the storage cost will only be a factor of 1.7.

It is further also clear that according to the embodiment of when the size of said data object is in the range between the first data object size threshold T and the second data object size threshold T the method will proceed from step along step to step and to to a hybrid storage and retrieval option with a storage set comprising an encoding storage subset and a replication storage subset. As described in more detail with respect to according to an embodiment where the replication storage subset does not overlap with the encoding storage subset the redundant fragment storage element count will equal to the desired concurrent failure tolerance minus the replication storage count . Preferably the replication storage count is then equal to one as in this way the effect on the storage cost is minimized while additionally the number of input output operations during a subsequent retrieval operation is minimized without compromising the level of desired concurrent failure tolerance.

It is clear that different embodiments of methods of operation are possible then the one described above with reference to as long as in general the hybrid storage and retrieval option as described above is present. Although the embodiment of presents further improvements with respect to particularly small or large data objects even when only using the hybrid storage and retrieval option data objects of any size will be processed with a desired level of efficiency even when the distributed storage system is subject to varying loads with respect to the network bandwidth input output operations etc. According to embodiments of the hybrid storage and retrieval option in which the fragments and replication copy are generated concurrently and subsequently spread concurrently this will automatically result in the fastest response time for a subsequent retrieval operation irrespective of the size of the data object or the particular load condition of the distributed storage system. According to an alternative embodiment in which for example first the replication copy is generated or attempted to be retrieved this results in a particularly simple embodiment in which processing power needed for decoding fragments is only needed for data objects of which the replication copy cannot be retrieved. It is clear that still further embodiments are possible with specific advantages.

According to a further embodiment the desired concurrent failure tolerance can be chosen differently for respectively the replication storage and retrieval option the hybrid storage and retrieval option and the encoding storage and retrieval option. For example when the distributed storage system is operated according to the replication storage and retrieval option the replication storage count can for example be chosen equal to three. For this option the desired concurrent failure tolerance consequently equals two. For a small file with size 10 kB the storage cost would be 200 corresponding to 20 kB. When the system is operated according to the hybrid storage and retrieval option the desired concurrent failure tolerance can be chosen for example equal to four wherein the redundant fragment storage element count equals three and the replication storage count equals one. For a medium file with size 10 MB the storage cost then would be 143 i.e. 3 7 1 corresponding to 14.3 MB. When the system is operated according to the encoding storage and retrieval option the desired concurrent failure tolerance can be chosen for example equal to five wherein the redundant fragment storage element count consequently equals five. For a large file with size 10 GB the storage cost would be 28 i.e. 5 18 corresponding to 2.8 GB.

It is clear that in general the method and system described above can largely be implemented as a computer program comprising software code adapted to perform this method when executed by a processor of suitable computing system such as for example a suitable server or a general purpose computer.

Although the present disclosure has been illustrated by reference to specific embodiments it will be apparent to those skilled in the art that the disclosure is not limited to the details of the foregoing illustrative embodiments and that the present disclosure may be embodied with various changes and modifications without departing from the scope thereof. The present embodiments are therefore to be considered in all respects as illustrative and not restrictive the scope of the disclosure being indicated by the appended claims rather than by the foregoing description and all changes which come within the meaning and range of equivalency of the claims are therefore intended to be embraced therein. In other words it is contemplated to cover any and all modifications variations or equivalents that fall within the scope of the basic underlying principles and whose essential attributes are claimed in this patent application. It will furthermore be understood by the reader of this patent application that the words comprising or comprise do not exclude other elements or steps that the words a or an do not exclude a plurality and that a single element such as a computer system a processor or another integrated unit may fulfil the functions of several means recited in the claims. Any references in the claims shall not be construed as limiting the respective claims concerned. The terms or references first second third . . . A B C . . . 1 2 3 . . . a b c . . . i ii iii . . . and the like when used in the description or in the claims are introduced to distinguish between similar elements or steps and are not necessarily describing a sequential or chronological order. Similarly the terms top bottom over under and the like are introduced for descriptive purposes and not necessarily to denote relative positions. It is to be understood that the terms so used are interchangeable under appropriate circumstances and embodiments of the disclosure are capable of operating according to the present disclosure in other sequences or in orientations different from the one s described or illustrated above.

