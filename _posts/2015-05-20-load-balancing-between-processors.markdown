---

title: Load balancing between processors
abstract: Disclosed are various embodiments for facilitating load balancing between a first processor and a second processor in at least one computing device. A request is obtained to execute a first application in the at least one computing device. In one embodiment, a second application associated with the first application is assigned to be executed in the second processor instead of the first processor when a resource usage profile associated with the first application indicates that the first application imposes a greater load on the first processor than the second processor. Conversely, the second application is assigned to be executed in the first processor instead of the second processor when the resource usage profile indicates that the first application imposes a greater load on the second processor than the first processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09455931&OS=09455931&RS=09455931
owner: Amazon Technologies, Inc.
number: 09455931
owner_city: Seattle
owner_country: US
publication_date: 20150520
---
This application is a continuation of U.S. patent application Ser. No. 12 967 171 titled LOAD BALANCING BETWEEN GENERAL PURPOSE PROCESSORS AND GRAPHICS PROCESSORS filed Dec. 14 2010 and a continuation of U.S. patent application Ser. No. 14 457 264 titled LOAD BALANCING BETWEEN GENERAL PURPOSE PROCESSORS AND GRAPHICS PROCESSORS filed Aug. 12 2014 the entire contents of both of which applications are hereby incorporated herein by reference.

Graphics processing units GPUs are specialized processors for graphics related operations. Many computing devices include one or more GPUs in order to offload and accelerate rendering of 2D and or 3D graphics. The highly parallel structure of a GPU may make the GPU more effective than general purpose processors such as central processing units CPUs for a variety of complex algorithms. Computer games in particular often benefit from GPU availability in a computing device.

The present disclosure relates to facilitating load balancing of applications between central processing units CPUs and graphics processing units GPUs . Some applications such as for example game applications may tend to impose either a greater CPU load or a greater GPU load within a computing device. In other words some applications may be classified as either CPU intensive or GPU intensive. Various embodiments of the present disclosure assign applications to execute in computing devices that are selected based at least in part on the current CPU and GPU loads of the computing devices and CPU and GPU resource usage of the applications. In addition some applications or portions of applications may be assigned to execute in either a CPU or a GPU based at least in part on the current CPU and GPU loads of the computing devices. Accordingly the CPU and GPU resources of the computing devices may be more fully utilized than otherwise would be possible. In the following discussion a general description of the system and its components is provided followed by a discussion of the operation of the same.

With reference to shown is a networked environment according to various embodiments. The networked environment includes one or more computing devices in data communication with one or more clients by way of a network . The network includes for example the Internet intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks or other suitable networks etc. or any combination of two or more such networks.

The computing device may comprise for example a server computer or any other system providing computing capability. Alternatively a plurality of computing devices may be employed that are arranged for example in one or more server banks or computer banks or other arrangements. For example a plurality of networked computing devices together may comprise a cloud computing resource a grid computing resource and or any other distributed computing arrangement. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For purposes of convenience the computing device is referred to herein in the singular. Even though the computing device is referred to in the singular it is understood that a plurality of computing devices may be employed in the various arrangements as described above.

Various applications and or other functionality may be executed in the computing device according to various embodiments. Also various data is stored in a data store that is accessible to the computing device . The data store may be representative of a plurality of data stores as can be appreciated. The data stored in the data store for example is associated with the operation of the various applications and or functional entities described below.

The components executed on the computing device for example include a server application a plurality of applications . . . N a plurality of video encoders . . . N a plurality of wrappers . . . N and other applications services processes systems engines or functionality not discussed in detail herein. The server application may correspond for example to a game server application or another type of application session server. The server application is executed to launch applications which may be executed within wrappers that provide a virtualized environment. The server application is also executed to obtain input data from the clients and provide the input data to the respective wrapper .

The server application is also executed to send video data that is captured from the application to the clients . The server application may communicate with the client over various protocols such as for example hypertext transfer protocol HTTP simple object access protocol SOAP representational state transfer REST real time transport protocol RTP real time streaming protocol RTSP real time messaging protocol RTMP user datagram protocol UDP transmission control protocol TCP and or other protocols for communicating data over the network . The server application is configured to maintain state information associated with the executing applications .

The application may correspond for example to a game or another type of application. As non limiting examples the application may correspond to a first person shooter game an action game an adventure game a party game a role playing game a simulation game a strategy game a vehicle simulation game and or other types of games. The application may be a game originally designed for execution in a general purpose computing device or in a specialized video game device such as for example a video game console a handheld game device an arcade game device etc. The applications may also correspond to mobile phone applications computer aided design CAD applications computer aided manufacturing CAM applications photo manipulation applications video editing applications office productivity applications operating systems and associated applications emulators for operating systems architectures and capabilities not present on a consumer device and other applications and combinations of applications.

The application may expect to access one or more resources of the device on which it is executed. Such resources may correspond to display devices input devices or other devices. In some cases the application may request exclusive access to one or more of the resources whereby no other applications may have access to the particular resources. Various applications may use more GPU resources than CPU resources or more CPU resources than GPU resources.

The video encoder is able to encode a video signal generated by the application into a video stream for transmission over the network to clients . The video stream may include an audio signal generated by the application as well. To this end the video encoder may include various types of video and audio encoders such as for example Moving Pictures Experts Group MPEG encoders H.264 encoders Flash video encoders etc. Such encoders may be selected according to factors such as for example data reduction encoding quality latency etc. Various video encoders may be configured to execute in one or more GPUs or one or more CPUs. In various embodiments the computing device may include one or more dedicated hardware video encoders upon which the video encoder may be executed. Such hardware video encoders may be employed when available.

The wrapper corresponds to an application that provides a virtualized environment for execution of the application . In particular the wrapper may be configured to virtualize one or more of the resources that the application expects to access. Such resources may include a keyboard a mouse a joystick a video device a sound device etc. In this way the wrapper is able to provide input commands to application as if the wrapper emulates a keyboard a mouse or another type of input device.

Different types of wrappers may be provided for different applications or classes of applications . As non limiting examples different wrappers may be provided for applications using different application programming interfaces APIs such as OpenGL DirectX the Graphics Device Interface GDI and so on. The wrapper may include an operating system specific to the applications to be executed. Where the application comprises a mobile phone application for example the wrapper may include the Android operating system or another operating system. Where the application is configured for execution in a specialized video game device or another type of computing device the wrapper may include an emulation application that emulates the device. The wrapper may be configured to deliver the video signal generated by the application to the video encoder for encoding. Various wrappers in association with the applications may use more GPU resources than CPU resources or more CPU resources than GPU resources.

The state information that is maintained by the server application includes various data relating to application sessions that are currently active. For example the state information may track the users that are currently participating in the application session status information associated with the users security permissions associated with the application session e.g. who can or cannot join and so on. In some embodiments some or all of the state information may be discarded when an application session ends.

The data stored in the data store includes for example applications resource usage profiles video encoders wrappers saved state data user data and potentially other data. The applications correspond to a library of applications that are available to be launched as applications . The applications may correspond to executable code within the computing device . Alternatively the applications may correspond to code that is executable within another type of device but is not executable within the computing device . Such applications may be referred to as binaries read only memory images ROMs and other terms. A particular application may be executed as multiple instances of the applications for multiple application sessions.

The resource usage profiles describe a respective resource usage profile for each of the applications . Each resource usage profile indicates whether the respective application tends to use more CPU resources or GPU resources. Some applications tend to be more CPU intensive while other applications tend to be more GPU intensive. For example a resource usage profile may indicate percentages of CPU or GPU typically consumed by the respective application . Where an application is to be executed in conjunction with an emulation application the resource usage profile may also reflect resources consumed by the emulation application. In some embodiments the resource usage profile may also reflect resources consumed by a wrapper . In various embodiments the resource usage profile may describe the memory consumption profile of an application .

The video encoders correspond to the various types of video encoders that may be employed in the computing device . Some video encoders may correspond to specific formats such as for example H.264 MPEG 4 MPEG 2 and or other formats. Some video encoders may be executed in GPUs some video encoders may be executed in CPUs and some video encoders may be executed in both GPUs and CPUs. The wrappers correspond to the executable code that implements the various types of wrappers . The wrappers are executable in the computing device and may be executed as multiple instances of the wrappers for multiple application sessions.

The saved state data corresponds to application states that have been saved by the applications . Because the applications are executed in a virtualized environment the applications may write state information to a virtual location which is then mapped for storage in the data store as the saved state data . The saved state data may correspond to data saved normally by the application or may correspond to a memory image of the application that may be resumed at any time. The user data includes various data related to the users of the applications such as for example security credentials application preferences billing information a listing of other users that are permitted to join application sessions started by the user and so on.

The client is representative of a plurality of client devices that may be coupled to the network . The clients may be geographically diverse. The client may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer personal digital assistants cellular telephones smartphones set top boxes music players web pads tablet computer systems game consoles electronic book readers or other devices with like capability.

The client may include a display . The display may comprise for example one or more devices such as cathode ray tubes CRTs liquid crystal display LCD screens gas plasma based flat panel displays LCD projectors or other types of display devices etc. The client may include one or more input devices . The input devices may comprise for example devices such as keyboards mice joysticks accelerometers light guns game controllers touch pads touch sticks push buttons optical sensors microphones webcams and or any other devices that can provide user input.

The client may be configured to execute various applications such as a client application and or other applications. The client application is executed to allow a user to launch join play and otherwise interact with an application executed in the computing device . To this end the client application is configured to capture input provided by the user through one or more of the input devices and send this input over the network to the computing device as input data .

The client application is also configured to obtain video data over the network from the computing device and render a screen on the display . To this end the client application may include one or more video and audio players to play out a video stream generated by a video encoder . In one embodiment the client application comprises a plug in within a browser application. The client may be configured to execute applications beyond the client application such as for example browser applications email applications instant message applications and or other applications.

Referring next to shown is a schematic block diagram of the computing device according to an embodiment of the present disclosure. The computing device includes at least one processor circuit for example having a processor a memory and one or more graphics devices all of which are coupled to a local interface . To this end the computing device may comprise for example at least one server computer or like device. The local interface may comprise for example a data bus with an accompanying address control bus or other bus structure as can be appreciated. The graphics devices may correspond to high performance graphics hardware including one or more graphics processors . Non limiting examples of commercially available graphics processors include the NVIDIA Tesla series. The graphics devices are configured to render graphics corresponding to the applications executed in the computing device . In one embodiment a graphics device may correspond to a dedicated hardware video encoder.

Stored in the memory are both data and several components that are executable by the processor . In particular stored in the memory and executable by the processor are the server application the application the video encoders the wrappers and potentially other applications. Also stored in the memory may be a data store and other data. In addition an operating system may be stored in the memory and executable by the processor .

It is understood that there may be other applications that are stored in the memory and are executable by the processors as can be appreciated. Where any component discussed herein is implemented in the form of software any one of a number of programming languages may be employed such as for example C C C Objective C Java JavaScript Perl PHP Visual Basic Python Ruby Delphi Flash or other programming languages.

Next with reference to both a general description of the operation of the various components of the networked environment is provided. To begin a user at a client sends a request to launch an application to the server application . The server application obtains the corresponding application and wrapper from the data store . The server application then launches the application in the corresponding wrapper . The server application may track the status of the application within the state information .

The application may be launched in a specific one of the computing devices based in part on a resource usage profile associated with the application . The resource usage profile may indicate that the application has a tendency to use more resources of the processor s compared to the resources of the graphics processor s . Alternatively the resource usage profile may indicate that the application has a tendency to use more resources of the graphics processor s compared to the resources of the processor s .

Thus the server application may be able to match the application to a specific one of the computing devices according to the resource load of one of the computing devices . As a non limiting example an application that tends to be CPU intensive may be assigned to a computing device with ample CPU capacity. As another non limiting example an application that tends to be GPU intensive may be assigned to a computing device with ample GPU capacity. In one embodiment the applications may be assigned to maintain approximately even GPU and CPU usage within a threshold range across the computing devices . Further the applications may be assigned to maximize resource usage so that the number of computing devices in use is minimized.

In addition the video encoder may be configured to execute in either the processor s or the graphics processor s . In one embodiment the video encoder is configured to use the opposite resource from the corresponding application . For example if an application is CPU intensive the video encoder may be configured to use GPUs. Conversely if an application is GPU intensive the video encoder may be configured to use CPUs. Accordingly the resource usage associated with the application including the video encoder may be evened out.

Also video encoders that are currently executing may be transferred from CPUs to GPUs and vice versa based at least in part on the resource load of the computing device or when certain criteria are met. As a non limiting example a video encoder executing in a GPU may be reconfigured to execute in a CPU when the current GPU load meets a threshold. As another non limiting example a video encoder executing in a CPU may be reconfigured to execute in a GPU when the current CPU load meets a threshold.

Such transfers of video encoders may be facilitated by a virtualization layer. Such a virtualization layer for example may make it appear that the video encoder is executed in a virtual device or includes a virtual encoding device which may be mapped either to processors or graphics processors . By reconfiguring and transferring video encoders the balance of load between processors and graphics processors may be altered in such a way as to accommodate an additional application and associated applications. In one embodiment when the execution of the video encoder is transferred the video stream generated by the video encoder is uninterrupted.

In various embodiments the quality of the video stream generated by the video encoder may be adjusted for example to manage server side resource usage. The quality of the video stream may also be adjusted to account for traffic on the network . Furthermore the quality of the video stream may be adjusted depending on the ability of the client to decode the video stream.

The wrapper provides a virtualized environment for the application that virtualizes one or more resources of the computing device . Such resources may include exclusive resources i.e. resources for which the application requests exclusive access. For example the application may request full screen access from a video device which is an exclusive resource because normally only one application can have full screen access. Furthermore the wrapper may virtualize input devices such as for example keyboards mice etc. which may not actually be present in the computing device . In various embodiments the wrapper may correspond to a virtual machine and or the wrapper may be executed within a virtual machine.

The user at the client enters input commands for the application by use of the input devices of the client . As a non limiting example the user may depress a left mouse button. Accordingly the client application functions to encode the input command into a format that may be transmitted over the network within the input data . The server application receives the input command and passes it to the wrapper . The wrapper then provides a left mouse button depression to the application by way of a virtualized mouse. In some embodiments different input commands may be presented to the application from those that were generated by a client . As a non limiting example if a user sends a mouse down command and the client application loses focus the wrapper may be configured to send a mouse down command followed by a mouse up command. In various embodiments the input commands may be relayed to the wrapper as soon as possible or the input commands may be queued by the wrapper and relayed to the application sequentially from the queue according to another approach.

Meanwhile the graphical output of the application is captured by the wrapper and encoded into a video stream. Additionally the audio output of the application may be captured and multiplexed into the video stream. The video stream is transmitted by the server application to the client over the network as the video data . The client application obtains the video data and plays it out on the display in a screen .

Various embodiments enable input generated through one type of input device in a client to be transformed by the wrapper into input commands provided to the application through an entirely different type of virtual input device. As a non limiting example input generated by an accelerometer in the client may be translated by the wrapper into input provided through a virtual mouse. Thus completely different kinds of input devices may be used in providing input to the application that may not have been contemplated when the application was implemented.

Moreover because the client is decoupled from the hardware requirements of the application the application may be used on a diverse variety of clients that are capable of streaming video with acceptable bandwidth and latency over a network . For example a game that requires substantial graphics rendering resources may be played on a client that is a smartphone. Thus the client need not include expensive graphics hardware to perform the complex three dimensional rendering that may be necessary to execute the application . By contrast the hardware of the computing device may be upgraded as needed to meet the hardware requirements of the latest and most computationally intensive applications . In various embodiments the video stream encoded by the video encoder may be scaled according to the bitrate and or other characteristics of the connection between the computing device and the client over the network .

Another specific non limiting example of an application may include a mobile phone application. A customer at a client may wish to browse the features and capabilities of various mobile phones. A wrapper may execute a mobile phone application within a mobile phone operating system. The video signal generated by the mobile phone application may be captured and sent as a video stream to the client . Accordingly a user is able to test and interact with actual mobile phone applications within any client without the specific mobile phone hardware.

It is understood that the principles of the present disclosure may apply to a variety of applications that may use processor s and or graphics processor s . Furthermore although video encoders are discussed as a specific example of another application that operates in conjunction with the applications it is understood that the principles of the present disclosure may apply to a variety of applications that may be configured to execute on either processor s or graphics processor s . Another non limiting example may involve an application that renders graphics for use in motion pictures or television.

Continuing on to shown is a flowchart that provides one example of the operation of a portion of the server application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the server application obtains a request to launch a new application from a client . In box the server application determines a resource usage profile associated with the application . In box the server application determines from the resource usage profile whether the application is classified as GPU intensive.

If the application is not classified as GPU intensive the application may be classified as CPU intensive and the server application proceeds to box . In box the server application configures the video encoder for the application to be executed in a graphics processor rather than a processor . In box the server application assigns one of the computing devices to execute an instance of the application along with the video encoder and any wrappers . Where the computing device comprises a cloud computing resource the specific computing device to which the application is assigned may comprise a virtual machine instance in the cloud computing resource. The functionality of assigning an application to a computing device will be further described in connection with the flowchart of . Thereafter the portion of the server application ends.

If the application is classified as GPU intensive in box the server application proceeds to box and configures the video encoder for the application to be executed in a processor rather than a graphics processor . The server application then continues to box and assigns one of the computing devices to execute an instance of the application along with the video encoder and any wrappers . Thereafter the portion of the server application ends.

Turning now to shown is a flowchart that provides another example of the operation of another portion of the server application according to various embodiments. In particular the functionality shown in provides one example of assigning a new instance of an application to a specific computing device . It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the server application as described herein. As an alternative the flowchart of may be viewed as depicting an example of steps of a method implemented in the computing device according to one or more embodiments.

Beginning with box the server application determines the resource usage status of the computing devices . Where the computing device comprises a cloud computing resource the resource usage status may be determined for virtual machine instances executing in the cloud computing resource. The resource usage status may indicate a load associated with one or more processors a load associated with one or more graphics processors and or other resource usage information. In box the server application determines the computing devices that are best suited for executing the particular application . For example an application may have very high graphics rendering demands and computing devices that are configured with superior hardware based graphics acceleration may be best suited for executing the application .

In box the server application determines whether any one of the computing devices that are currently allocated to application s have available capacity to accommodate a new instance of an application . In one embodiment the server application may examine the resource usage profile to determine an expected amount of resource consumption associated with the application . In another embodiment the server application may use a reference amount of resource consumption in determining the computing capacity necessary to execute the application .

Whether the video encoder associated with the application may be configured to execute in a graphics processor or a processor may allow the application to be executed in computing devices with varying mixtures of CPU and GPU loads. In other words if a computing device has more available CPU resources the video encoder may be configured to be executed in a processor . Conversely if a computing device has more available GPU resources the video encoder may be configured to be executed in a graphics processor .

If a computing device has available capacity the server application assigns the application to be executed in a computing device with available capacity in box . In one embodiment the computing device may be selected when the current GPU load is below a maximum threshold for GPU usage and the resource usage profile associated with the application indicates that the application tends to use more GPU resources than CPU resources. Alternatively the computing device may be selected when a current CPU load is below a maximum threshold for CPU usage and the resource usage profile associated with the application indicates that the application tends to use more CPU resources than GPU resources. Consequently the application may be assigned to computing devices with a goal of maximizing utilization of processors and or graphics processors .

In one embodiment the computing device may be selected when the current GPU load meets a maximum threshold for GPU usage and the resource usage profile associated with the application indicates that the application tends to use more CPU resources than GPU resources. Alternatively the computing device may be selected when a current CPU load meets a maximum threshold for CPU usage and the resource usage profile associated with the application indicates that the application tends to use more GPU resources than CPU resources. Accordingly when either the processors or the graphics processors are currently sufficiently loaded the spare capacity of the others may be used. Once the application is assigned to a computing device the portion of the server application ends.

However if the server application determines in box that none of the computing devices currently allocated to applications has available capacity to accommodate the new instance of an application the server application instead moves to box . In box the server application determines whether any of the computing devices would have available capacity if reconfigured. As a non limiting example the video encoders executing on a computing device may be executing through a virtualization layer that allows execution of the video encoders to be transferred from a graphics processor to a processor and vice versa. Such reconfiguration may allow for sufficient processing capacity to be freed up for the particular application .

If the server application determines that a computing device would have available capacity if reconfigured the server application moves to box and reconfigures the video encoders executed on the computing device in order to accommodate the new instance of the application . In box the server application assigns the new instance of the application to the computing device that has been reconfigured. Thereafter the portion of the server application ends.

If the server application instead determines in box that no computing device would have available capacity even if reconfigured the server application proceeds to box . In box the server application configures or allocates another computing device to accommodate applications . In other words an unallocated one of the computing devices is selected for the application when no other allocated one of the computing devices has sufficient processing resources to accommodate the application .

Where the computing device comprises a cloud computing resource the server application may configure a new virtual machine instance to accommodate applications . Because the available capacity of the existing computing devices is used first the allocation of additional computing devices may be minimized thereby reducing costs. In box the server application assigns the new instance of the application to be executed in the newly allocated computing device . Thereafter the portion of the server application ends.

Referring back to a number of software components are stored in the memory and are executable by the processor . In this respect the term executable means a program file that is in a form that can ultimately be run by the processor . Examples of executable programs may be for example a compiled program that can be translated into machine code in a format that can be loaded into a random access portion of the memory and run by the processor source code that may be expressed in proper format such as object code that is capable of being loaded into a random access portion of the memory and executed by the processor or source code that may be interpreted by another executable program to generate instructions in a random access portion of the memory to be executed by the processor etc. An executable program may be stored in any portion or component of the memory including for example random access memory RAM read only memory ROM hard drive solid state drive USB flash drive memory card optical disc such as compact disc CD or digital versatile disc DVD floppy disk magnetic tape or other memory components.

The memory is defined herein as including both volatile and nonvolatile memory and data storage components. Volatile components are those that do not retain data values upon loss of power. Nonvolatile components are those that retain data upon a loss of power. Thus the memory may comprise for example random access memory RAM read only memory ROM hard disk drives solid state drives USB flash drives memory cards accessed via a memory card reader floppy disks accessed via an associated floppy disk drive optical discs accessed via an optical disc drive magnetic tapes accessed via an appropriate tape drive and or other memory components or a combination of any two or more of these memory components. In addition the RAM may comprise for example static random access memory SRAM dynamic random access memory DRAM or magnetic random access memory MRAM and other such devices. The ROM may comprise for example a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other like memory device.

Also the processor may represent multiple processors and the memory may represent multiple memories that operate in parallel processing circuits respectively. In such a case the local interface may be an appropriate network that facilitates communication between any two of the multiple processors between any processor and any of the memories or between any two of the memories etc. The local interface may comprise additional systems designed to coordinate this communication including for example performing load balancing. The processor may be of electrical or of some other available construction.

Although the server application the applications the video encoders the wrappers and other various systems described herein may be embodied in software or code executed by general purpose hardware as discussed above as an alternative the same may also be embodied in dedicated hardware or a combination of software general purpose hardware and dedicated hardware. If embodied in dedicated hardware each can be implemented as a circuit or state machine that employs any one of or a combination of a number of technologies. These technologies may include but are not limited to discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits having appropriate logic gates or other components etc. Such technologies are generally well known by those skilled in the art and consequently are not described in detail herein.

The flowcharts of show the functionality and operation of an implementation of portions of the server application . If embodied in software each block may represent a module segment or portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of source code that comprises human readable statements written in a programming language or machine code that comprises numerical instructions recognizable by a suitable execution system such as a processor in a computer system or other system. The machine code may be converted from the source code etc. If embodied in hardware each block may represent a circuit or a number of interconnected circuits to implement the specified logical function s .

Although the flowcharts of show a specific order of execution it is understood that the order of execution may differ from that which is depicted. For example the order of execution of two or more blocks may be scrambled relative to the order shown. Also two or more blocks shown in succession in may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the blocks shown in may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement or providing troubleshooting aids etc. It is understood that all such variations are within the scope of the present disclosure.

Also any logic or application described herein including the server application the applications the video encoders and the wrappers that comprises software or code can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. In this sense the logic may comprise for example statements including instructions and declarations that can be fetched from the computer readable medium and executed by the instruction execution system. In the context of the present disclosure a computer readable medium can be any medium that can contain store or maintain the logic or application described herein for use by or in connection with the instruction execution system. The computer readable medium can comprise any one of many physical media such as for example magnetic optical or semiconductor media. More specific examples of a suitable computer readable medium would include but are not limited to magnetic tapes magnetic floppy diskettes magnetic hard drives memory cards solid state drives USB flash drives or optical discs. Also the computer readable medium may be a random access memory RAM including for example static random access memory SRAM and dynamic random access memory DRAM or magnetic random access memory MRAM . In addition the computer readable medium may be a read only memory ROM a programmable read only memory PROM an erasable programmable read only memory EPROM an electrically erasable programmable read only memory EEPROM or other type of memory device.

It should be emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiment s without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

