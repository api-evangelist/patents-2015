---

title: Exploiting software compiler outputs for release-independent remote code vulnerability analysis
abstract: A central check system (CCS) is coupled to a remote software system (RSS). Data is fetched from the RSS, the data being software code derivatives generated by a software compiler on the RSS with a version different than a version of the software program associated with the CCS. Static software testing is performed of the software program on the CCS using the fetched data and test results provided in a required format.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09569335&OS=09569335&RS=09569335
owner: SAP SE
number: 09569335
owner_city: Walldorf
owner_country: DE
publication_date: 20151007
---
IT infrastructures of enterprises are constantly under attack from a variety of threats e.g. hacking or industrial espionage efforts . To satisfy various requirements e.g. product standards performance legal security and other requirements related to the security of software developers need to perform statistical analysis system SAS testing to check their developed software for software code vulnerabilities that could be exploited by hackers and malicious individuals. SAS testing typically includes static application security testing SAST and is designed to analyze application source code byte code and binaries of an application from the inside out in a non running state in other words static testing involves examination of a software program s code and its associated documentation but does not require the software program be executed for coding and design conditions that are indicative of security vulnerabilities in the software s inputs and outputs that can easily be missed by a programmer. The latest release versioned SAS tools are normally not consumable by an older legacy versioned release of software development tools. As the SAS tools provide the ability to check for among other things application backdoors malicious code and other threats that may exist in deployed software applications the inability of legacy versioned software development tools to consume the latest release versioned SAS testing tools for software developed on the legacy versioned releases of the software development tools can result in software that may contain unnecessary security vulnerabilities.

The present disclosure relates to exploiting software compiler outputs for release independent remote code vulnerability analysis.

A central check system CCS is coupled to a remote software system RSS . Data is fetched from the RSS the data being software code derivatives generated by a software compiler on the RSS with a version different than a version of the software program associated with the CCS. Static software testing is performed of the software program on the CCS using the fetched data and test results provided in a required format.

Other implementations can include corresponding computer systems apparatuses and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular operations or actions by virtue of having software firmware hardware or a combination of software firmware or hardware installed on the system that in operation causes or causes the system to perform the actions. One or more computer programs can be configured to perform particular operations or actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

For example one computer implemented method includes coupling a central check system CCS to a remote software system RSS fetching data from the RSS the data being software code derivatives generated by a software compiler on the RSS with a version different than a version of the software program associated with the CCS performing static software testing of the software program on the CCS using the fetched data and providing test results in a required format.

The foregoing and other implementations can each optionally include one or more of the following features alone or in combination 

A first aspect combinable with the general implementation wherein the software program version on the RSS is earlier than the software program version associated with the CCS.

A second aspect combinable with the general implementation wherein the software code derivatives represent an abstract description of the software program.

A third aspect combinable with the general implementation wherein the software code derivatives include one or more of a list of statements occurring in the software program a list of symbols occurring in the software program a list of tokens a list of enhancements and data descripting the structure of the software program.

A fourth aspect combinable with the general implementation wherein the software code derivatives are generated based on the software language used to construct the software program and metadata of development objects used in the software program.

A fifth aspect combinable with the general implementation comprising using the software compiler on the RSS to ensure the correctness of the software program on the RSS.

A sixth aspect combinable with the general implementation wherein software code derivatives are used for testing of the software program on the CCS to avoid incompatibilities between compiled software program byte code associated with the version of the software program on the RSS and the software version of the CCS.

A seventh aspect combinable with the general implementation comprising while fetching the software code derivatives requesting on demand additional metadata related to the fetched software code derivatives.

The subject matter described in this specification can be implemented in particular implementations so as to realize one or more of the following advantages. First the described approach allows a remote software system RSS to perform Static Application Security testing SAST as part of Statistical Analysis System SAS testing using a testing check system even when the RSS is executing older legacy releases of software development tools that are not capable of consuming the latest available versions of SAS testing tools. Second the described approach does not transfer source or byte code from an RSS into a central check system CCS but transfers only compiler generated source code derivatives based on the source code. The software compiler in the RSS is typically used only to assure the correctness e.g. syntax error free condition of software source code and to generate the source code derivatives the compiler and the software code is based on the same version of software development tools . One advantage of transferring source code derivatives is an increase in security for the developers of software in that valuable source code is not vulnerable to interception over a network. Third the transfer of only source code derivatives allows a CCS with a later version of software development tools including SAS SAST testing functionality to perform static testing of the transferred source code derivatives. The static testing can be performed even with source code derivatives based on software developed with earlier versions of software development tools. This removes the necessity of a different check system with particular software development tool versions to be established by a business customer partner on the same system locally for each of their software systems. The RSS can be tested independent of its underlying hardware and software release version by the CSS and does not have to be upgraded to a particular software release version to allow for the latest testing technologies to be used. Fourth to use the CCS an RSS needs only to interface with the CCS using a server add on to provide the necessary interfaces between the RSS and the CCS. The approach allows multiple systems representing different system landscapes e.g. development quality and production to independently use the SAS tools of the CCS to perform static software testing even if each of the different landscapes are using legacy releases of software development tools. A CCS can be provided by the owner of an RSS computing system or by a third party that allows the RSS owner to connect to the third party provided CCS for SAS testing purposes. Fifth network traffic is reduced since source code derivatives are transported to the CCS instead of full byte code of the software program. Source code derivatives require less storage space compared to the base software source code. Sixth overall computing time is also saved on the CCS. Scanning and parsing of software source code on the CCS is unnecessary because the code derivatives fetched from the RSS are resultant outputs of prior scanning parsing etc. already performed by the RSS software compiler of the software source code stored on the RSS. Seventh the use of source code derivatives can help to avoid incompatibility problems which would be seen in typical software testing of byte code if a compilation step were to be performed on the CCS using a legacy versioned release software compiler with legacy versioned source code from the RSS. Other advantages will be apparent to those of ordinary skill in the art.

The details of one or more implementations of the subject matter of this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

The following detailed description is presented to enable any person skilled in the art to make use and or practice the disclosed subject matter and is provided in the context of one or more particular implementations. Various modifications to the disclosed implementations will be readily apparent to those skilled in the art and the general principles defined herein may be applied to other implementations and applications without departing from scope of the disclosure. Thus the present disclosure is not intended to be limited to the described and or illustrated implementations but is to be accorded the widest scope consistent with the principles and features disclosed herein.

IT infrastructures of enterprises are constantly under attack from a variety of threats e.g. hacking or industrial espionage efforts . To satisfy various requirements e.g. product standards performance legal security and other requirements related to the security of software developers need to perform statistical analysis system SAS testing to check their developed software for software code vulnerabilities that could be exploited by hackers and malicious individuals. SAS testing typically includes static application security testing SAST and is designed to analyze application source code byte code and binaries of an application from the inside out in a non running state in other words static testing involves examination of a software program s code and its associated documentation but does not require the software program be executed for coding and design conditions that are indicative of security vulnerabilities in the software s inputs and outputs that can easily be missed by a programmer. The latest release versioned SAS tools are normally not consumable by an older legacy versioned release of software development tools e.g. as part of a particular version of an application builder tool suite as the legacy versioned software development tools either do not contain SAST functionality or out of date SAST functionality. Legacy versioned software development tools remote from a software system executing the latest release versioned software development tools SAS tool are also not able to consume the latest release versioned SAS tools. In some implementations this situation may be due to for example obsolete elements of a software language syntax incompatible standard code e.g. signatures of delivered software language function modules classes data dictionary elements etc. differences in data and control flow in updated standard code and or customization modifications to standard code performed by a software developer. As the SAS tools provide the ability to check for among other things application backdoors malicious code and other threats that may exist in deployed software applications the inability of business customers partners executing legacy versioned software development tools to use the latest release versioned SAS testing tools for software developed on a remote software system RSS using the legacy versioned releases of their software development tools can result in software that may contain unnecessary security vulnerabilities.

Among other things this disclosure describes a server e.g. an application server or other server add on for code vulnerability analysis that can be used to integrate an RSS to a CCS. The server add on includes functionality to use remote functions which allow both a software supplier and business customer partner to perform SAS testing of software source code using a single check system e.g. a CCS with a latest release of software development tools and SAS testing functionality even if an RSS is using legacy software development tools.

In a typical implementation an exemplary summary of high level steps for exploiting software compiler outputs for release independent remote code vulnerability analysis include 

In typical implementations the RSS typically includes an extended syntax check tool SLIN stub as part of a SLIN remove checking stub which together allow SAS SAST for a software program using SLIN functionality on the CCS software development object data e.g. illustrated as including source code other data e.g. lists or database tables of indexes that links statements source code statements symbols e.g. a character string recognized during lexical analysis of software source code by the software compiler etc. and tokens e.g. atomic items such as variables operators keywords special characters literals etc. together that make up software source code and the software source code s structure metadata of used development objects and other data and development data and software development tools . In typical implementations the RSS executes a legacy version of the software development tools as compared to software development tools not illustrated executed by the CCS . Note that the RSS is also usually integrated in a particular system landscape which is not depicted here for reasons of simplicity.

In typical implementations the CCS includes a SLIN remote check function providing overall functionality to perform remote SLIN testing functionality and test result display management using at least development data fetched from the RSS . The SLIN remote check function typically includes a SLIN security check function used to cache the fetched development data from RSS e.g. into cache and to perform manage SLIN testing using a security checker function and the fetched development data from RSS . Security checker function typically executes SLIN tests based on various criteria using the fetched development data from the RSS obtained from the cache as long as the associated software program is the same same version etc. .

The remote quality assurance QA tool retrieves test results from the SLIN security check function and stores them in QA data e.g. as results . In typical implementations the remote QA tool is wrapper based and provides a front end e.g. a graphical user interface GUI for among other functionality managing e.g. triggering executing etc. SAS tests and managing e.g. displaying editing formatting etc. the retrieved test results. QA data typically includes exemption data the results data output of a SLIN check described below a list of code vulnerabilities found and a hash value .fetched development data . For clarification of some instances of exemption data assume that a vulnerability has been found in given source code. This might be a false positive and be located at a particular line number of the source code. As such a quality manager may want to exempt this vulnerability. Since source code can change with time e.g. insertion of comments etc. the line number itself cannot accurately be used to link a vulnerability and an exemption. The QA data the link between the vulnerability and exemption can in some implementations be a HASH value computed using the surrounding source code lines e.g. five or ten source code lines . The QA data is then considered the HASH value and exemptions together. The In typical implementations the CCS executes a version of software development tools not illustrated that are a more current version as compared to the legacy software development tools executed by the RSS .

A software compiler typically generally transforms a file written in a source computing language into a file written in a target computing language. While the source and target computing language could be any computing language e.g. C C etc. in a typical case the source language can be the ABAP programming language plus metadata of the used development objects e.g. other data and the target language can be ABAP byte code that can be executed by an ABAP virtual machine and tested using dynamic type software testing tools manual testing etc.

Besides the above mentioned byte code which represents the primary output of a software compiler the software compiler does provide further outputs including the above mentioned source code derivatives. As described above the source code derivatives can be typically stored on the RSS by the software compiler in development data as part of the software development object data . In typical implementations the software code derivatives can represent an abstract description of a software program and consist of several data tables. The data tables can contain for example 

In various other implementations and as will appreciated by those of ordinary skill in the art the source code derivatives can contain similar and or other data dependent upon for example the source file language software compiler used target file language and the like. The above provided example outputs are not meant to limit this disclosure or the described functionality in any way.

In the described functionality the software compiler in the RSS is typically used only to assure the correctness e.g. syntax error free condition of the software source code and to generate source code derivatives. In general the use of source code derivatives can help to avoid incompatibility problems which would be seen in typical software testing of byte code using the described EDCS of if a compilation step would be performed on the CCS using a later versioned release software compiler with legacy versioned source code from the RSS . In typical implementations of the described functionality the software compiler and the software source code on the RSS is based on the same version of software development tools.

Instead of using the base software source code store on the RSS the above described remote check functionality on CCS performs SAS tests of source code developed on RSS based on processing and analysis of the fetched source code derivatives This means that instead of RSS source code being moved from the RSS to the CCS to be tested the remote check functionally on the CCS fetches the source code derivatives that are created in the RSS e.g. using a local legacy versioned software compiler in software development tools with which to perform SAS testing.

One advantage of transferring only source code derivatives between the RSS and the CCS is an increase in security for the developers of software in that valuable source code is not vulnerable to interception over a network. The transfer of only source code derivatives allows a CCS with a later version of software development tools including SAS testing functionality to perform static testing of the transferred source code derivatives from the RSS even with source code derivatives based on software developed with legacy versions of software development tools. This removes the necessity of a different check system with particular software development tool versions to be established by a business customer partner on the same system locally for each of their software systems. The RSS can be tested independent of its underlying hardware and software release version by the CSS and does not have to be upgraded to a particular software release version to allow for the latest testing technologies to be used. Additionally to use the CCS an RSS needs only to interface with the CCS using a server add on to provide the necessary interfaces between the RSS and the CCS . The approach allows multiple systems representing different system landscapes e.g. development quality and production to independently perform SAS testing e.g. using the remote QA tool of the CCS to perform software testing and functions related to generated test results. Network traffic between the RSS and the CCS is reduced since source code derivatives typically require less storage than full byte code. Overall computing time is also saved because on the CCS scanning and parsing of software source code is unnecessary. This is because the code derivatives fetched from the RSS are resultant outputs of prior scanning parsing etc. already performed by the RSS software compiler of the software source code stored on the RSS .

At a lower level illustrates that at least one computing system has been configured as a CCS with the illustrated SLIN remote function and associated sub components . The CCS is then connected e.g. using a remote function call RFC or other type of connection to another computing system configured as an RSS . For example the connection between the RSS and the CCS is indicated in by the two network connections between the RSS and the CCS .

On the RSS the SLIN remove checking stub is used to permit re direct SLIN testing to be performed by SLIN functionality on the CCS e.g. the SLIN remote check function uses the SLIN security check function which uses the SLIN stub as an interface to data sources such as database tables metadata etc. on the RSS . Note that in typical implementations local checks can still be performed on the RSS if desired within the limitations allowed by the local testing check tools etc. .

In typical implementations when SAS testing is triggered on the CCS by the developer or the quality manager using the quality assurance tool development data e.g. code derivatives required for SAS testing is fetched by the security checker function from the RSS software development object data . The development data from is typically cached in cache for performance reasons. In typical implementations development data has been previously created by a local means on RSS e.g. using the above described software compiler in software development tools . In some implementations if the necessary data is not available e.g. the SLIN security check function tries and fails to recover the required development data from cache receives notice from the SLIN stub that development data is unavailable etc. the security checker function can be used to trigger the software compiler on the RSS using the SLIN stub e.g. using a syntax check call as described below . The security checker function on the CCS then performs SAS based SLIN tests based on the fetched development data . The SLIN security check function then provides generated test results to a wrapper based remote QA tool e.g. remote QA tool providing a front end for displaying and managing the generated test results.

Turning now to is a lower level architectural block diagram illustrating additional components of the EDCS of for exploiting software compiler outputs for release independent remote code vulnerability analysis according to an implementation. In the illustrated EDCS includes the RSS and CCS separated by a system release border indicating where data is retrieved from the RSS and imported into the CCS . Accordingly SAS testing is performed on software source code that originates on a different system. Additionally the system release border indicates that the RSS is executing a legacy versioned release of software development tools and the CCS is executing a latest versioned release of the software development tools. As in the RSS and the CCS are interoperably connected by network not explicitly illustrated . As in while is illustrated with one RSS in other implementations there can be multiple RSSs interoperably coupled with the CCS .

SAS tests are performed by the CCS by executing SLIN checker function where each individual SLIN check is a rule or rules used by the SLIN checker function for testing the software source code for one or more particular vulnerabilities e.g. SQL injection directory traversals and other vulnerabilities . In some implementations and as illustrated in the SLIN checker function can be implemented as separate software classes implementing particular interfaces. For example illustrates the SLIN checker function as an agent outside a defined SLIN framework a component framework .

The SLIN framework is typically provided with a program name e.g. the name of a software source file to be tested as well as a definition of a check group e.g. a set of SLIN checks that represent the scope of a particular SAS testing effort i.e. the set of SLIN checks defines what the particular software source code is to be tested for . In typical implementations the SLIN framework as a component framework provides information for the SLIN checks . The SLIN framework can be used to call the software compiler on the RSS through the SLIN stub using a syntax check statement to request a syntax check of stored source code obtaining metadata related to function modules with a call function statement or obtaining metadata related to database tables using a SQL select statement . In other implementations additional or other statements can be available used to perform functionally consistent with this disclosure.

The SLIN security check retrieves the required data directly from the RSS e.g. using RFC or other calls . This is achieved by introducing the notion of data sources e.g. data sources . In this notion each database table access or relevant access statement e.g. syntax check statement is wrapped by a corresponding call e.g. an RFC or other call . A data source represents one specific element of the code derivatives or metadata information required for SAS testing. In typical implementations a data source may be 1 the output of a specific statement e.g. the syntax check statement which internally triggers the software compiler on the RSS 2 a function module that selects data from one or more database tables e.g. metadata information from call function 3 or a particular database table e.g. using the SQL select .

The access to data sources is encapsulated by the SLIN stub using a logical virtualization layer e.g. a wrapper class providing APIs to virtualize data access . Generally a particular set of data sources that need to be encapsulated depend upon the check s that need to be performed. For example if checks are simply analyzing source code access to the syntax check would be enough. If checks analyze potential data flow from a user interface access to a user interface data source storing a design of the user interface is needed e.g. a database where SQL select can be used . illustrates the virtualization layer which encapsulating a set of API remote function calls that wrap statements e.g. the above described syntax check call function SQL and select used to access the data sources on the RSS . In some implementations access to each data source in data sources can be provided by a separate class method. Note that in some implementations the syntax check is provided by a software compiler on RSS .

For example turning to illustrates an example unified modeling language UML class diagram of the virtualization layer described with respect to according to an implementation. The class diagram depicts the template class VIRUTAL RESOURCES with its two concrete implementations LOCAL RESOURCE which realizes local data access and REMOTE RESOURCE which realizes remote data access. Each method of REMOTE RESOURCE is implemented using an RFC function module of the function group SLIN REMOTE RESOURCES .

In some implementations as will be understood by those of ordinary skill in the art the virtualization layer can be excluded from the described implementation s . Returning to typically SAS testing is performed with three high level steps 

At a developer quality or manager uses a central check system CCS to provide a program name to be checked using SLIN testing e.g. using a quality assurance QA tool . The program name is for software source code that exists on a remote software system RSS . From method proceeds to .

At the developer quality manager provides a set of SLIN checks to be performed on the program. From method proceeds to .

At the set of SLIN checks are triggered to be performed on the program e.g. using the CSS quality assurance QA tool . From method proceeds to .

At the CSS DRIVER component instantiates the set of checks to be performed against the given program. From method proceeds to .

At the CSS PROG component retrieves required data software code derivatives from the RSS for the given program using a SLIN stub. Here PROG component connects to a SLIN stub by calling a SYNTAX CHECK statement in the RSS for the given program. The SLIN stub packages the code derivatives created by a software compiler on the RSS which has been triggered by the SYNTAX CHECK call and provides it to the CCS e.g. data transfer is done using Remote Function Calls RFC . From method proceeds to .

At the code derivatives of the remote program on the RSS are stored in the CSS PROG component. From method proceeds to .

At from the retrieved code derivatives a data flow graph is constructed and stored a CSS FLOW ENGINE component. From method proceeds to .

At SLIN test results are returned for analysis for example using the CSS quality assurance QA tool or a development tool. After method stops.

The computer can process for serve as a client a server and or any other component of the EDCS whether or not illustrated . The illustrated computer is communicably coupled with a network e.g. network of . In some implementations one or more components of the computer may be configured to operate within a cloud computing based environment.

At a high level the computer is an electronic computing device operable to receive transmit process store or manage data and information associated with the EDCS. According to some implementations the computer may also include or be communicably coupled with a cloud computing server application server e mail server web server caching server streaming data server business intelligence BI server and or other server.

The computer can generate requests to transmit over network e.g. as a client or receive requests over network from a client application e.g. a web browser or other application and responding to the received requests by processing the said requests in an appropriate software application hardware etc. In addition requests may also be sent to the computer from internal users e.g. from a command console or by other appropriate access method external or third parties other automated applications as well as any other appropriate entities individuals systems or computers.

Each of the components of the computer can communicate using a system bus . In some implementations any and or all the components of the computer both hardware and or software may interface with each other and or the interface over the system bus using an API and or a service layer . The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the computer and or the EDCS. The functionality of the computer may be accessible for all service consumers using this service layer. Software services such as those provided by the service layer provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C ABAP or other suitable language providing data in extensible markup language XML format or other suitable format. While illustrated as an integrated component of the computer alternative implementations may illustrate the API and or the service layer as stand alone components in relation to other components of the computer and or the EDCS. Moreover any or all parts of the API and or the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

The computer includes an interface . Although illustrated as a single interface in two or more interfaces may be used according to particular needs desires or particular implementations of the computer and or the EDCS. The interface is used by the computer for communicating with other systems in a distributed environment including within the EDCS connected to the network whether illustrated or not . Generally the interface comprises logic encoded in software and or hardware in a suitable combination and operable to communicate with the network . More specifically the interface may comprise software supporting one or more communication protocols associated with communications such that the network or interface s hardware is operable to communicate physical signals within and outside of the illustrated EDCS.

The computer includes a processor . Although illustrated as a single processor in two or more processors may be used according to particular needs desires or particular implementations of the computer and or the EDCS. Generally the processor executes instructions and manipulates data to perform the operations of the computer . Specifically the processor executes the functionality required for exploiting software compiler outputs for release independent remote code vulnerability analysis.

The computer also includes a database and memory that hold data for the computer and or other components of the EDCS. Although illustrated as a single database and memory in two or more databases and memories may be used according to particular needs desires or particular implementations of the computer and or the EDCS. While database and memory are illustrated as integral components of the computer in alternative implementations the database and memory can be external to the computer and or the EDCS. In some implementations the database can be a conventional database or an in memory database or a mix of both. In some implementations the database and memory can be combined into one component.

The application is an algorithmic software engine providing functionality according to particular needs desires or particular implementations of the computer and or the EDCS particularly with respect to functionalities required for exploiting software compiler outputs for release independent remote code vulnerability analysis. For example application can serve as a subcomponent of an RSS CCS or any other component of the EDCS whether or not illustrated . Further although illustrated as a single application the application may be implemented as multiple applications on the computer . In addition although illustrated as integral to the computer in alternative implementations the application can be external to the computer and or the EDCS.

There may be any number of computers associated with or external to the EDCS and communicating over network . Further the term client user and other appropriate terminology may be used interchangeably as appropriate without departing from the scope of this disclosure. Moreover this disclosure contemplates that many users may use one computer or that one user may use multiple computers .

Implementations of the subject matter and the functional operations described in this specification can be implemented in digital electronic circuitry in tangibly embodied computer software or firmware in computer hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Implementations of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on a tangible non transitory computer storage medium for execution by or to control the operation of data processing apparatus. Alternatively or in addition the program instructions can be encoded on an artificially generated propagated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus for execution by a data processing apparatus. The computer storage medium can be a machine readable storage device a machine readable storage substrate a random or serial access memory device or a combination of one or more of them.

The terms data processing apparatus computer or electronic computer device or equivalent as understood by one of ordinary skill in the art refer to data processing hardware and encompass all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can also be or further include special purpose logic circuitry e.g. a central processing unit CPU an FPGA field programmable gate array or an ASIC application specific integrated circuit . In some implementations the data processing apparatus and or special purpose logic circuitry may be hardware based and or software based. The apparatus can optionally include code that creates an execution environment for computer programs e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. The present disclosure contemplates the use of data processing apparatuses with or without conventional operating systems for example LINUX UNIX WINDOWS MAC OS ANDROID IOS or any other suitable conventional operating system.

A computer program which may also be referred to or described as a program software a software application a module a software module a script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment. A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code. A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network. While portions of the programs illustrated in the various figures are shown as individual modules that implement the various features and functionality through various objects methods or other processes the programs may instead include a number of sub modules third party services components libraries and such as appropriate. Conversely the features and functionality of various components can be combined into single components as appropriate.

The processes and logic flows described in this specification can be performed by one or more programmable computers executing one or more computer programs to perform functions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. a CPU an FPGA or an ASIC.

Computers suitable for the execution of a computer program can be based on general or special purpose microprocessors both or any other kind of CPU. Generally a CPU will receive instructions and data from a read only memory ROM or a random access memory RAM or both. The essential elements of a computer are a CPU for performing or executing instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks. However a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a global positioning system GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few.

Computer readable media transitory or non transitory as appropriate suitable for storing computer program instructions and data include all forms of non volatile memory media and memory devices including by way of example semiconductor memory devices e.g. erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM DVD R DVD RAM and DVD ROM disks. The memory may store various objects or data including caches classes frameworks applications backup data jobs web pages web page templates database tables repositories storing business and or dynamic information and any other appropriate information including any parameters variables algorithms instructions rules constraints or references thereto. Additionally the memory may include any other appropriate data such as logs policies security or access data reporting files as well as others. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user implementations of the subject matter described in this specification can be implemented on a computer having a display device e.g. a CRT cathode ray tube LCD liquid crystal display LED Light Emitting Diode or plasma monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse trackball or trackpad by which the user can provide input to the computer. Input may also be provided to the computer using a touchscreen such as a tablet computer surface with pressure sensitivity a multi touch screen using capacitive or electric sensing or other type of touchscreen. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual feedback auditory feedback or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s client device in response to requests received from the web browser.

The term graphical user interface or GUI may be used in the singular or the plural to describe one or more graphical user interfaces and each of the displays of a particular graphical user interface. Therefore a GUI may represent any graphical user interface including but not limited to a web browser a touch screen or a command line interface CLI that processes information and efficiently presents the information results to the user. In general a GUI may include a plurality of user interface UI elements some or all associated with a web browser such as interactive fields pull down lists and buttons operable by the business suite user. These and other UI elements may be related to or represent the functions of the web browser.

Implementations of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server or that includes a middleware component e.g. an application server or that includes a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of wireline and or wireless digital data communication e.g. a communication network. Examples of communication networks include a local area network LAN a radio access network RAN a metropolitan area network MAN a wide area network WAN Worldwide Interoperability for Microwave Access WIMAX a wireless local area network WLAN using for example 802.11 a b g n and or 802.20 all or a portion of the Internet and or any other communication system or systems at one or more locations. The network may communicate with for example Internet Protocol IP packets Frame Relay frames Asynchronous Transfer Mode ATM cells voice video data and or other suitable information between network addresses.

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

In some implementations any or all of the components of the computing system both hardware and or software may interface with each other and or the interface using an application programming interface API and or a service layer. The API may include specifications for routines data structures and object classes. The API may be either computer language independent or dependent and refer to a complete interface a single function or even a set of APIs. The service layer provides software services to the computing system. The functionality of the various components of the computing system may be accessible for all service consumers via this service layer. Software services provide reusable defined business functionalities through a defined interface. For example the interface may be software written in JAVA C or other suitable language providing data in extensible markup language XML format or other suitable format. The API and or service layer may be an integral and or a stand alone component in relation to other components of the computing system. Moreover any or all parts of the service layer may be implemented as child or sub modules of another software module enterprise application or hardware module without departing from the scope of this disclosure.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any invention or on the scope of what may be claimed but rather as descriptions of features that may be specific to particular implementations of particular inventions. Certain features that are described in this specification in the context of separate implementations can also be implemented in combination in a single implementation. Conversely various features that are described in the context of a single implementation can also be implemented in multiple implementations separately or in any suitable sub combination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a sub combination or variation of a sub combination.

Particular implementations of the subject matter have been described. Other implementations alterations and permutations of the described implementations are within the scope of the following claims as will be apparent to those skilled in the art. While operations are depicted in the drawings or claims in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed some operations may be considered optional to achieve desirable results. In certain circumstances multitasking and or parallel processing may be advantageous and performed as deemed appropriate.

Moreover the separation and or integration of various system modules and components in the implementations described above should not be understood as requiring such separation and or integration in all implementations and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Accordingly the above description of example implementations does not define or constrain this disclosure. Other changes substitutions and alterations are also possible without departing from the spirit and scope of this disclosure.

