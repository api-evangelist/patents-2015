---

title: Methods and devices for key management in an as-a-service context
abstract: The present invention discloses methods and devices for key management in an as-a-service (aaS) context. Methods include the steps of: upon receiving a creation request in a provider computing-environment, creating a specific key in at least one location in the provider computing-environment by repetitively computing respective specific-key contributions: in a set of N computing resources in the provider computing-environment; and in a set of M customer locations in a customer computing-environment; and applying the respective specific-key contributions to change a specific-key value in the computing resources, wherein the respective specific-key contributions are never revealed to any computing resources, and to any customer locations, other than respective contributors; wherein at least one location is a region of memory located in a computing resource operationally connected to the provider computing-environment, wherein the customer locations are regions of memory located in a computing resource operationally connected to the customer computing-environment.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09660801&OS=09660801&RS=09660801
owner: Porticor Ltd.
number: 09660801
owner_city: Hod Hasharon
owner_country: unknown
publication_date: 20150623
---
This patent application claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 62 015 547 filed Jun. 23 2014 which is hereby incorporated by reference in its entirety.

The present invention relates to methods and devices for key management in an as a service aaS context e.g. SaaS software as a service PaaS platform as a service and IaaS infrastructure as a service .

Key management processes involving splitting keys are well established. All data encryption keys are split using a master key. The master key is 1 a real key not a password 2 known i.e. revealed only to the customer and 3 very easy to manage. Keys are encrypted and integrity protected using standard algorithms. Keys are associated with encrypted and integrity protected metadata. Customer side key hierarchies provide deployment flexibility.

Assume that a key may be legitimately used by several entities in an environment each is called an appliance some of the appliances may create the key while other appliances may use the key. Each such creation operation or usage operation may in principal be performed by the same or a different entity.

Also the appliances are in communication with a Protected Virtual Key Manager PVKM which may provide services to the abovementioned appliances and to the users of the system. Such services are related to managing the keys of the system and also related to enhancing the security of the system.

In the discussion below the PVKM may be viewed as a location whether physical or virtual in such an environment while each appliance and other security element may be viewed as another location whether physical or virtual . However for the avoidance of doubt while the PVKM itself may be implemented as a collection or a cluster it is still referred to as a location for the sake of simplicity.

Referring to the drawings the overall processes have been depicted according to separate sequential time lines going from top to bottom in the drawings for two primary generalized components an appliance A and a PVKM B in order to representationally isolate the parallel processes that are occurring on each component independently.

It is noted that appliance A is intended to be a simplified example of a plurality of appliances in order to provide clarity throughout the description. It is understood that the present invention has broader applicability to a collection or cluster of such appliances. Furthermore PVKM B is intended to be one conceptual entity e.g. a server however in practical implementations PVKM B may be a plurality of entities e.g. a cluster of servers for fail over protection . In generalizations of this approach there may be more locations and therefore more timelines.

The master key is critical to the security of the whole system. Initially it is kept only in memory. A passive attacker that takes a snapshot of the storage device cannot see the master key. The master key is then encrypted so that even an active attack is mitigated. Such encryption is access controlled policed on the key management service and integrated with customer access control.

In order to encrypt the key and yet still use the key Homomorphic Key Management HKM has been shown to be an effective protocol. Homomorphic functions have F a b F a F b in which is a suitable operator. Partially homomorphic functions are employed for key management only e.g. ElGamal encryption .

ElGamal encryption is homomorphic and entails a secret key x and a public key g h g in which g is a generator. Encryption is random and produces a pair Enc m c d g h m in which r is random and Dec c d d c m. Such keys can be used to exploit the homomorphic property. As an example under a multiplication operation Enc m r Enc m r Enc m m r r for element wise multiplication. Such HKM methods employing split key encryption are amenable to exact proofs of strength.

As mentioned the master key is known i.e. revealed only to the customer. However in as a Service use cases there are actually a chain of customers. For example one customer of the key management mechanisms may be a service provider which may know the master key. However end customers further down the chain may be customers of the service provider. A security conscious end customer desires to be able to use available shared or distributed resources in the aaS context configured for a multi tenant environment as provided by the service provider and yet enjoy full security and control by controlling their own keys in such a way that the service provider knows nothing about the keys.

It would be desirable to have methods and devices methods and devices for key management in an as a service aaS distributed environment. Such methods and devices would inter alia expand on the capabilities and applications of the methods mentioned above.

It is the purpose of the present invention to provide methods and devices for key management in an as a service aaS context.

It is noted that the term exemplary is used herein to refer to examples of embodiments and or implementations and is not meant to necessarily convey a more desirable use case. Similarly the terms alternative and alternatively are used herein to refer to an example out of an assortment of contemplated embodiments and or implementations and is not meant to necessarily convey a more desirable use case. Therefore it is understood from the above that exemplary and alternative may be applied herein to multiple embodiments and or implementations. Various combinations of such alternative and or exemplary embodiments are also contemplated herein.

Embodiments of the present invention enable the security conscious customer to use available shared or distributed resources in an aaS context configured for a multi tenant environment and yet enjoy full security and control with emphasis placed on key management. While three way key splitting in an aaS computing environment using homomorphic key management is described below as an exemplary embodiment it is contemplated and within the scope of the present invention to extend such methods to splitting keys into more than three key shares. For example such further key splitting could accommodate secondary and further distant customers of the primary customers of a service provider.

Therefore according to the present invention there is provided for the first time a method for key management in an as a service aaS context the method including the steps of a upon receiving a creation request in a provider computing environment creating a specific key in at least one location in the provider computing environment by repetitively computing respective specific key contributions i in a set of N computing resources in the provider computing environment wherein N is a non negative integer and ii in a set of M customer locations in a customer computing environment wherein M is a non negative integer and wherein the customer computing environment is outside of the provider computing environment and b applying the respective specific key contributions to change a specific key value in the computing resources wherein the respective specific key contributions are never revealed to any computing resources and to any customer locations other than respective contributors associated with the respective specific key contributions wherein at least one location is a region of memory located in a computing resource operationally connected to the provider computing environment wherein the customer locations are regions of memory located in a computing resource operationally connected to the customer computing environment wherein the provider computing environment is a computing environment of an aaS service provider wherein the customer computing environment is a computing environment of a customer of the aaS service provider and wherein the provider computing environment and the customer computing environment are configured to exchange data with each other.

Alternatively the repetitively computing includes computing at least three specific key contributions.

Alternatively the step of applying is performed using at least one technique selected from the group consisting of key joining blinding and homomorphic encryption.

According to the present invention there is provided for the first time a device for key management in an as a service aaS context the device including a a server including i a CPU for performing computational operations ii a memory module for storing data and iii a network connection for communicating across a network and b a protection module residing on the server configured for i upon receiving a creation request in a provider computing environment creating a specific key in at least one location in the provider computing environment by repetitively computing respective specific key contributions A in a set of N computing resources in the provider computing environment wherein N is a non negative integer and B in a set of M customer locations in a customer computing environment wherein M is a non negative integer and wherein the customer computing environment is outside of the provider computing environment and ii applying the respective specific key contributions to change a specific key value in the computing resources wherein the respective specific key contributions are never revealed to any computing resources and to any customer locations other than respective contributors associated with the respective specific key contributions wherein at least one location is a region of memory located in a computing resource operationally connected to the provider computing environment wherein the customer locations are regions of memory located in a computing resource operationally connected to the customer computing environment wherein the provider computing environment is a computing environment of an aaS service provider wherein the customer computing environment is a computing environment of a customer of the aaS service provider and wherein the provider computing environment and the customer computing environment are configured to exchange data with each other.

Alternatively the repetitively computing includes computing at least three specific key contributions.

Alternatively the applying is performed using at least one technique selected from the group consisting of key joining blinding and homomorphic encryption.

According to the present invention there is provided for the first time a non transitory computer readable medium having computer readable code embodied on the non transitory computer readable medium for key management in an as a service aaS context the computer readable code including a program code for upon receiving a creation request in a provider computing environment creating a specific key in at least one location in the provider computing environment by repetitively computing respective specific key contributions i in a set of N computing resources in the provider computing environment wherein N is a non negative integer and ii in a set of M customer locations in a customer computing environment wherein M is a non negative integer and wherein the customer computing environment is outside of the provider computing environment and b program code for applying the respective specific key contributions to change a specific key value in the computing resources wherein the respective specific key contributions are never revealed to any computing resources and to any customer locations other than respective contributors associated with the respective specific key contributions wherein at least one location is a region of memory located in a computing resource operationally connected to the provider computing environment wherein the customer locations are regions of memory located in a computing resource operationally connected to the customer computing environment wherein the provider computing environment is a computing environment of an aaS service provider wherein the customer computing environment is a computing environment of a customer of the aaS service provider and wherein the provider computing environment and the customer computing environment are configured to exchange data with each other.

Alternatively the repetitively computing includes computing at least three specific key contributions.

Alternatively the applying is performed using at least one technique selected from the group consisting of key joining blinding and homomorphic encryption.

The present invention relates to methods and devices for key management in an as a service aaS context. The principles and operation for providing such methods and devices according to the present invention may be better understood with reference to the accompanying description and the drawings.

Consider a computing system e.g. a software application that includes multiple computing resources. Such resources may be defined broadly e.g. data secret phrases keys memory segments storage areas storage segments networks network segments and computing resources . Some or all of such resources are protected by keys. It is required to use a master key a key encryption key to secure some of the keys in the system.

In computing environments involving an aaS context several assumptions must be made related to aaS requirements.

It is assumed that for such customers it is acceptable that their data will be decrypted while being processed but only in memory and in the customer s context e.g. for a query or a report in a particular service application server which is serving that customer at that moment . It is assumed that it is also acceptable that the decryption key will exist only in memory of the aaS environment for the time needed for decryption and in the customer s context e.g. for a query or report in a particular service application server which is serving that customer at that moment .

Considering a chain of customers the provider of the service is a customer of the key management system and has a master key to ensure that no data leaks outside its control. The end customers are the customers of the service provider so they are customers of the customer. Such end customers also need to have a master key different for each of the end customers and unknown to anyone but themselves. The end customers desire their own master key so that other tenants of the service and also the service provider are not be able to know a particular end customer s data. Therefore three way splitting of keys is desired. One key share is owned by the service provider and unknown to anyone but the service provider. Another key share is owned by the end customer and unknown to any other end customer or to the service provider. Yet another key share is a finer granularity key i.e. specific to the resource intended to be protected .

It is clear that each end customer has their own master key and the service provider has a master key. All these master keys are protected through homomorphic encryption thereby creating a Homomorphic Key Management HKM approach which keeps all such master keys secret even when the master keys are in use. Even when the complete computing system is running and such master keys are in memory an attacker looking into the memory will find all master keys encrypted at all times.

Referring again to the drawings is a simplified high level block diagram of the system architecture for three way key splitting in an aaS computing environment using homomorphic key management according to embodiments of the present invention. A virtual key management VKM system is shown operationally connected to an aaS environment having an aaS database and apps with encryption agents . In such a configuration using encryption agents HKM encrypts keys all the way down to the app context. This means that keys can remain homomorphically encrypted even after key shares are joined so key shares i.e. key contributions and final specific keys remain hidden. The app context can be as specific as a specific thread or process during the brief time of use for the needs of an individual tenant i.e. customer in the aaS system.

Encryption agents can exchange encrypted data via an encrypted transmission connection with an aaS storage server . aaS environment also includes a server or cluster of servers with a VPD Virtual Private Data library . VPD library is the location where keys are split into three shares before storage or joined from three shares before use. It is noted that such splitting and joining is performed by VPD library under homomorphic encryption so the actual key shares and final keys are never revealed to VPD library .

aaS environment is able to receive service provider SP master keys from an SP master key owner . SP master key owner may be either a human using an appropriate homomorphic encryption tool provided by VKM system or a server configured for that purpose. Customers access and utilize aaS environment only after providing customer scoped master keys which are homomorphically encrypted before being provided while the customer s users access and utilize aaS environment using user access tokens .

It is noted that master key scope e.g. a customer organization is usually defined by the service provider in a way that is convenient for the running of aaS environment . In other words scope depends upon an appropriate system definition of the idea of a customer. Such a definition is common in all aaS systems as they must define their tenants.

Scoped master keys never leave a customer s premises except under homomorphic encryption meaning customer s appointed owners always control and own the customer s data. Furthermore specific encryption keys never exist anywhere other than in the memory of a requesting thread not even in an appliance due to homomorphic encryption. Moreover user tokens are an access control mechanism with an API. Projects can include mapping to aaS access control e.g. user level role level organizational level or scope level . The flexible architecture allows encryption decryption of data to be performed by aaS environment or by a system agent. VPD library requires no long term state memory and can be placed on virtual instances as defined by aaS environment meaning that the instances are completely stateless and this approach is massively scalable.

Customer premises include customer scoped master keys which are provided in homomorphically encrypted form to VPD library as needed and user tokens which provide access to applications on aaS database and apps . Encryption agents provide data encryption for the applications on aaS database and apps and interface to VPD library via a REST API .

Instance i uses PKto encrypt a service provider supplied master key K Block Step and also to encrypt a customer supplied master key kas E k . Using the homomorphic property instance i then calculates E K E k E K k Block Step . Block Step defines a new value the combined master key K K k which is encrypted homomorphically and never revealed to anyone neither customer service provider nor key management system ever know it . Instance i therefore holds a vector of combined encrypted master key values Kindexed by j. Instance i also generates and stores a random mask mask Block Step . Instance i performs a homomorphic operation by calculating E K mask Block Step and transmits the result to PVKM B Arrow Step which then decrypts and stores the masked master key K mask Block Step .

It is denoted that is a suitable operator for encryption the inverse of is denoted as sometimes represented by the symbol for decryption. It is further noted that instance i as with appliance A in is intended to be a simplified example of a plurality of cloud instances in order to provide clarity in the description.

To obtain a specific key Sub Process VI an aaS application client C picks a temporary ElGamal key Block Step stores a secret PKI key SK Block Step and transmits a public PKI key PK to PVKM B Arrow Step which stores PK Block Step . PVKM B then retrieves S mask Block Step and calculates E S mask Block Step . PVKM B transmits the result to instance i Arrow Step . Instance i performs a homomorphic operation by calculating E S mask E mask E S Block Step and transmits the result to aaS application client C Arrow Step . aaS application client C then decrypts since it knows SK extracts and uses the cloud instance key S Block Step .

While the present invention has been described with respect to a limited number of embodiments it will be appreciated that many variations modifications and other applications of the present invention may be made.

