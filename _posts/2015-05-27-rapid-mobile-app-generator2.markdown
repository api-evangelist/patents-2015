---

title: Rapid mobile app generator
abstract: Various embodiments herein include one or more of systems, methods, software, and data structures that are utilized in mobile app generation and execution. Such embodiments provide access to functionality and data of non-mobile device applications within mobile device apps without having to expend resources to replicate non-mobile device applications in a mobile context.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09612805&OS=09612805&RS=09612805
owner: SAP SE
number: 09612805
owner_city: Walldorf
owner_country: DE
publication_date: 20150527
---
Modern computing allows users to be connected at virtually any time in any place via mobile devices such as smartphones tablets and smartwatches. Computing systems provide mobile users access to computing resources via web browsers and mobile device applications commonly referred to as apps. However developing browser based applications and apps has required development of new systems and apps that replicate functionality of previously developed system functionality and often replication of data from backend systems to other data repositories that accessible in a mobile computing environment. This development of duplicative system access mechanisms and data repositories and parallel maintenance thereof is costly in terms of at least financial time and resources. Further maintaining multiple access mechanisms adds additional complexity

Various embodiments herein include one or more of systems method software and data structures that are utilized in mobile app generation and execution. Such embodiments provide access to functionality and data of non mobile device applications within mobile device apps without having to expend resources to replicate non mobile device applications in a mobile context. Some such embodiments can be considered as spanning three layers of a technical data processing infrastructure 1 a backend data processing system of an enterprise such as an enterprise resource planning ERP customer relationship management CRM a customer retail system such as may provide data processing functionality of such enterprise data processing systems among other systems 2 a presentation server that operates between the backend system and mobile devices of users or customers to maintain stateful network sessions there between to leverage data and functionality of the enterprise systems including that of the backend system in providing access to the same on mobile devices and 3 mobile devices that present interfaces to allow mobile interaction with data and functionality of the enterprise systems.

The mobile devices as described and illustrated herein include tablet computing devices smartphones handheld computing devices smartwatches and the like. However mobile devices may also include apps that execute within web browsers set top boxes that connect to televisions monitors projectors and other display devices smart controllers within automobiles or home appliances and other devices that are enabled to execute apps.

As mentioned above a presentation server operates between a backend system and mobile devices of users. The presentation server in such embodiments is enabled to communicate with processes of the backend system to establish stateful data processing sessions with the backend system upon request from apps that execute on mobile devices. The presentation server includes user interface templates stored thereon or accessible thereby. The user interface templates include definitions of user interface elements with each user interface element mapped to at least one of data and functionality of a non mobile device user interface such as may be defined elsewhere within a user interface of a non mobile device. The user interface templates user interface definitions are defined in code which may be encoded in a markup language such as eXtensible Markup Language XML . In some embodiments code of a user interface template is executable within the mobile device app. In other embodiments a user interface template may include a portion that is consumed by the mobile device app to present a user interface and includes mappings to data and functions that execute within an execution environment on the presentation server or other server. Thus in various embodiments the code may be compiled or non compiled code executable within one or more of the mobile device app an execution environment of the mobile device app and an execution environment of the backend system.

In some such embodiments a user interface template is generated as a copy of a portion of a thick client application such as may be accessed on a personal computer. The user interface template may include one or more user interfaces that are copied from user interfaces of the thick client application and include some or all of the user interface elements of the respective thick client user interfaces. The user interface template user interfaces in some embodiments include links to the corresponding thick client user interfaces. When the user interface template is accessed on a mobile device the respective thick client user interface s are invoked for execution within an emulator that executes on the presentation server or within the backend system. The user interface template user interface on the mobile device and the emulator maintain a stateful session there between. The stateful session is with regard to data from the user interface elements communicated to and presented by the user interface template on the mobile device. The stateful session is also with regard to input requests and commands received within a user interface presented on the mobile device communicated to the emulator where execution or fulfillment of the input requests and commands are executed and any results communicated by the emulator back to the mobile device. User interfaces of user interface templates in such embodiments can therefore be considered kind of a thick client application stub tailored to a particular mobile device type or mobile device operating system type. At the same time mobile device apps according to such embodiments provide an execution environment within which user interface templates may be presented to facilitate user interaction with data and functional elements that are executed through emulation on a networked computer.

The user interface templates may be stored in the presentation server a template repository or elsewhere. The user interface templates in some embodiments may be downloaded by a mobile device app on demand. The mobile device app may cache or otherwise store some or all retrieved user interface templates. In other embodiments the user interface templates may be a part of the mobile device app or part of an update to the mobile device app.

As there are many different mobile device types with distinct display and interaction properties functionality of a non mobile device application such as a personal computer application may be the subject of multiple user interface templates of multiple mobile device apps. User interface templates may be tailored for each mobile device type or mobile device operating system on which a mobile device app may be deployed. As a result mobile experiences may be tailored to provide user experiences specific to the mobile device a user may possess.

To date however generating such tailored mobile device apps has been expensive in virtually all conceivable terms. Some embodiments herein include a mobile app generator that enables generation of tailored mobile device apps through relatively simple interaction with an existing non mobile device application such as an application that executes or is interacted with on a personal computer. Some such embodiments include placing the existing non mobile device application in a recording mode recording selections of and interactions with user interface elements of one or more user interfaces transitions between user interfaces and the like. From these recorded selections a user interface template is then generated. A generated user interface template may then be published for use by mobile device apps or be customized such as by adding or modifying code prior to publishing.

In the following detailed description reference is made to the accompanying drawings that form a part hereof and in which is shown by way of illustration specific embodiments in which the inventive subject matter may be practiced. These embodiments are described in sufficient detail to enable those skilled in the art to practice them and it is to be understood that other embodiments may be utilized and that structural logical and electrical changes may be made without departing from the scope of the inventive subject matter. Such embodiments of the inventive subject matter may be referred to individually and or collectively herein by the term invention merely for convenience and without intending to voluntarily limit the scope of this application to any single invention or inventive concept if more than one is in fact disclosed.

The following description is therefore not to be taken in a limited sense and the scope of the inventive subject matter is defined by the appended claims.

The functions or algorithms described herein are implemented in hardware software or a combination of software and hardware in one embodiment. The software comprises computer executable instructions stored on computer readable media such as memory or other type of storage devices. Further described functions may correspond to modules which may be software hardware firmware or any combination thereof. Multiple functions are performed in one or more modules as desired and the embodiments described are merely examples. The software is executed on a digital signal processor ASIC microprocessor or other type of processor operating on a system such as a personal computer server a router or other device capable of processing data including network interconnection devices.

Some embodiments implement the functions in two or more specific interconnected hardware modules or devices with related control and data signals communicated between and through the modules or as portions of an application specific integrated circuit. Thus the exemplary process flow is applicable to software firmware and hardware implementations.

The system includes a backend system of an enterprise such as one or more of an enterprise resource planning ERP customer relationship management CRM human resources management HRM a transaction processing system a customer retail system such as may provide multiple data views of various products offered by an enterprise an order and order processing system a banking system and the like. The backend system stores and processes transaction data as may be stored in a database data files and other data storage processes and devices.

The backend system may be deployed to one or more computing devices such as one or more enterprise class server computers virtual machines and the like. The backend system may be accessed by other systems and programs that execute on various computing devices throughout the system . For example the backend system may be accessed via a network by thick client or thin client applications as may be deployed to personal computers by other software systems and other clients. The backend system may also be accessed by a presentation server either directly or via the network .

As discussed above the presentation server operates in the networked environment of the system between the backend system and mobile devices of users although the presentation server may also operate with web browser apps as may be deployed to web browser applications of personal computers and other computing devices. The presentation server in such embodiments communicates with processes of the backend system to establish stateful data processing sessions with the backend system upon request from apps that execute on mobile devices . The presentation server may be deployed as an add on module to the backend system and operate on the same or different hardware thereof in some embodiments. However in other embodiments the presentation server may be deployed as a standalone program that executes on one or more distinct computing devices or virtual machines from the backend system . In some embodiments the presentation server is hosted by a third party such as in a cloud computing type arrangement.

The presentation server includes user interface templates stored in the presentation server a template repository or other network storage location. The user interface templates include mappings between user interface elements renderable within a mobile device app and corresponding user interface elements and associated data and functions thereof within a thick client application. When a user interface is rendered within a mobile device app according to a user interface template the corresponding user interface from which the user interface template was generated is invoked within an emulator or Application Programming Interface API on one of the presentation server and the backend system . The emulator API is an execution environment within which the thick client application is instantiated and executes but there is visual rendering of a user interface based directly thereon. Instead the user interface is a rendering within a mobile device app based on a user interface template. The user input is received within the rendering of the mobile user interface and communicated to the emulator API and data is received in response for processing which may include presenting within the mobile user interface. Through such embodiments the mobile device app is able to leverage previously implemented functionality data and data processing resources to facilitate a mobile deployment thereof. Further such embodiments reduce cost in terms of at least financial time and resource consumption as existing resources are repurposed in the mobile context without requiring duplication through the leveraging of previously deployed solutions.

To generate a user interface template a personal computer user typically a user having sufficient privileges accesses the thick client application an opens a user interface for which a user interface template is to be at least in part based upon. The user then enters a recording mode within the application such as by selecting a menu option or entering a key combination on a keyboard. At this point a secondary user interface may be presented by the application. The user then selects elements of the application user interface and copies of the selected user interface elements are placed within the secondary user interface.

The secondary user interface is a view of how a graphical user interface template will be rendered within a user interface of a mobile device app. Thus as there are many different types of mobile devices having different properties such as different display input types and different operating systems in some embodiments the user may select a type of mobile device or mobile device app for which the user interface template being authored will be tailored. This selection may then cause the shape and size of the secondary window to be modified or an outline of the size and shape of a viewable area on the target mobile device of the user interface template to be presented. The user may then move the user interface elements around and change display properties of the elements to format the user interface elements for the specific user interface template being authored. Each of the selected user interface elements copied to the secondary user interface includes data tying the specific user interface element back to the respective user interface element of the source application from which it was copied.

Selecting of the user interface elements may also include selection of user interface elements that trigger data processing activities such as creating retrieving storing updating and deleting data and even transitioning to another user interface. When transitioning to another user interface the secondary user interface may be cleared of previously selected user interface elements to provide a clean user interface within which user interface elements of the next application user interface may be copied. Once the user has completed selecting user interface elements and arranging and modifying properties of the user interface elements within the secondary user interface the user may remove the application from the recording mode. At this point the user may choose to store the generated user interface template test the user interface template within a mobile device emulator and publish the user interface template for use by mobile device application. The publishing typically includes storing the user interface template to a network storage location from which mobile device apps can download the user interface template such as the user interface template repository .

The user interface template when stored is encoded in a form that can be read and processed by the target mobile device app. This may include storing the user interface template in a markup language form such as eXtensible Markup Language XML or in another form such as ABAP or other computer coding language that can be read and executed by the mobile device app. In some embodiments the user interface template may be encoded in XML and portions of the resulting XML file or other data structure may be encoded in ABAP.

The network is generally a network capable of transporting data between computing devices of the various functional data processing elements of the system such as the backend system the presentation server personal computers and the various mobile devices . The network may include both wired and wireless connections. The network is intended to represent one or more of virtually any type of network capable of transporting data as described such as one or more of a local area network a wide area network a system area network a value added network a virtual private network the Internet and other such networks.

As described above each device app may include or have access to user interface templates to use in presenting data received from a presentation server . While the user interface templates include data defining how a user interface is to be rendered user interface templates for a particular device type or configuration may not be available. Thus in some embodiments device apps may include tailoring options that may be manipulated by users administrators or otherwise to tailor a user interface template that was originally tailored for another mobile device type. The tailoring options may tailor specific user interface templates or may tailor user interface templates generally to allow for better presentation of data within user interface templates. For example such tailoring may be performed to accommodate for a width or resolution of a display of a particular mobile device. Other tailoring may also or alternatively be provided for. Such tailoring options as may be set may be stored on a mobile device or other network location from which a device app may retrieve them.

The presentation server operates between a backend system and devices on which the device apps are deployed. The presentation server communicates with processes of the backend system to establish stateful data processing sessions with the backend system upon request from one of the device apps when executing according to a user interface template. The presentation server may store user interface templates which may be stored in the presentation server or a template repository such as template repository of . The user interface templates include renderable definitions of user interface elements and mappings between the user interface elements and user interface elements of a thick client application that will be invoked within an emulator or API when the user interface template is viewed within a device app . The emulator or API may execute on the presentation server while in other embodiments the emulator or API may execute on the backend system or other data processing resource.

The stateful data processing sessions between the presentation server and the backend system are maintained while a device app is viewing or manipulating data although such sessions may timeout after a period of inactivity. The stateful data sessions are stateful in the sense that a presentation server may hold certain types of transactions open while awaiting further input from a device app . For example a stateful transaction session between a rendering of a user interface template within a device app and an emulated session within an emulator or API of a thick client application user interface.

In some embodiments the copying of the user interface elements is possible as the code underlying the thick client application of the user interface is a non complied code such as ABAP JAVA Script and the like. This allows for copying of user interface user interface element data association and functional code as needed. However other embodiments may be implemented with regard to other code form types with additional programming added to facilitate the associations within an authored user interface template.

The method includes entering a user interface recording mode within a client application. The client application may include a plurality of user interfaces to interact with data and services of a backend computing system. The method further includes receiving selections of at least one client application user interface and at least one user interface element within each selected user interface.

After receiving the selections for each selected user interface and for each selected user interface element therein the method includes creating a copy of the user interface and each selected user interface element therein within a mobile device view such as the secondary user interfaces described above. The copies of the user interfaces and user interface elements therein will include associations to the respective selected user interface and user interface elements and at least one of data and function associated therewith.

The method also includes receiving manipulation input within the mobile device view of at least one copied user interface with regard to at least one copied user interface element. The manipulation input is received to modify at least one of a location and size of the at least one user interface element within the mobile device view. Once the manipulation input has been received the method may then receive a generate input to generate a user interface template or a mobile device app from the copied at least one user interface and respective user interface elements therein. The method may then generate and store code of the copied at least one user interface and respective user interface elements therein in the form of a user interface template or a mobile device app. The code of such embodiments is executable on a mobile device such as within a mobile device app.

In some embodiments of the method the generated code may be a user interface template and includes a copy of code elements from the client application that are executable within an execution environment within an app that executes on the mobile device. The generated code when executed on the mobile device app typically presents the selected user interfaces and respective user interface elements to allow user interaction therewith and interacts with the data and services of the backend computing system in response the user interaction. When the mobile device app executes in some such embodiments the mobile device app establishes a data communication session with a presentation server process and the presentation server process establishes and maintains a stateful session with the backend computing system on behalf of a device app.

Returning to the computer memory may include volatile memory and non volatile memory . Computer may include or have access to a computing environment that includes a variety of computer readable media such as volatile memory and non volatile memory removable storage and non removable storage . Computer storage includes random access memory RAM read only memory ROM erasable programmable read only memory EPROM and electrically erasable programmable read only memory EEPROM flash memory or other memory technologies compact disc read only memory CD ROM Digital Versatile Disks DVD or other optical disk storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium capable of storing computer readable instructions.

Computer may include or have access to a computing environment that includes input output and a communication connection . The input may include one or more of a touchscreen touchpad mouse keyboard camera one or more device specific buttons one or more sensors integrated within or coupled via wired or wireless data connections to the computer and other input devices. The computer may operate in a networked environment using a communication connection to connect to one or more remote computers such as database servers web servers and other computing device. An example remote computer may include a personal computer PC server router network PC a peer device or other common network node or the like. The communication connection may be a network interface device such as one or both of an Ethernet card and a wireless card or circuit that may be connected to a network. The network may include one or more of a Local Area Network LAN a Wide Area Network WAN the Internet and other networks. In some embodiments the communication connection may also or alternatively include a transceiver device such as a BLUETOOTH device that enables the computer to wirelessly receive data from and transmit data to other BLUETOOTH devices.

Computer readable instructions stored on a computer readable medium are executable by the processing unit of the computer . A hard drive magnetic disk or solid state CD ROM and RAM are some examples of articles including a non transitory computer readable medium. For example various computer programs or apps such as one or more applications and modules implementing one or more of the methods illustrated and described herein or an app or application that executes on a mobile device or is accessible via a web browser may be stored on a non transitory computer readable medium.

It will be readily understood to those skilled in the art that various other changes in the details material and arrangements of the parts and method stages which have been described and illustrated in order to explain the nature of the inventive subject matter may be made without departing from the principles and scope of the inventive subject matter as expressed in the subjoined claims.

