---

title: System and method for securing a third party communication with a hosting web page
abstract: A system and method for providing secure communications between third parties and hosting web pages. The method includes uploading a hosting web page to a client device, the hosting web page includes at least a sand-box proxy and a sand-box engine; uploading a third party module to the hosting web page; determining whether a proxy API call received from the third party module meets at least one validation rule, the proxy API call includes at least a script and a payload parameter provided by the third party module; for each validation rule, upon determining that the proxy API call does not meet the validation rule, modifying the script to meet the validation rule; generating an engine API call including at least the payload parameter validating the engine API call; and upon validation of the engine API call, executing, by the sand-box engine over the hosting web page, the payload parameter.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09369475&OS=09369475&RS=09369475
owner: Sizmek Technologies Ltd.
number: 09369475
owner_city: Herzliya
owner_country: IL
publication_date: 20150331
---
This application is a continuation of U.S. patent application Ser. No. 13 712 075 filed on Dec. 12 2012 now allowed which is a continuation of U.S. patent application Ser. No. 12 610 826 filed on Nov. 2 2009 now U.S. Pat. No. 8 347 352. The Ser. No. 12 610 826 application claims the benefit of U.S. Provisional Application No. 61 193 169 filed on Nov. 3 2008. All of the applications referenced above are herein incorporated by reference

Web browsers are increasingly becoming a single stop resource for computing needs including information access personal communications e commerce and much more. Consequently web pages are designed to combine data and functionality from two or more external sources to create a new service. In the related art such web pages are known as mashup pages. 

The mashup technology allows integrating data and functionality into a web page using one or more open application programming interfaces APIs . A prime example of a mashup web page is an online advertisement hosted within a page typically in a form of a banner. The banner generally promotes a specific vendible product and when it is clicked upon the user is linked for example to the advertiser s site where more detailed information is provided about the vendible product. An online advertisement is typically displayed as a combination of text audio still images animation video and interactivity content forms. Different content types may be different objects of a rich media advertisement. Rich media content can be downloadable or may be embedded in a webpage and can be viewed using a media player. The media player may be a plug in or an offline application. An example for a rich media format and player is Flash provided by Adobe .

The mashup web page is typically referred to as a hosting web page and the external objects as third party modules. The drawback of the mashup architecture is that the hosting web page is vulnerable to attacks from third party modules as these modules have full access to APIs of the hosting web page. In the related art solutions to a secure hosting web page include for example browser abstractions. The browser abstractions facilitate resource management and access control. The browser abstractions are implemented using dedicated HTML tags e.g. and a script proxy provided as an extension of a web browser.

The disadvantage of this approach is that APIs of hosting pages are still exposed to malicious third party modules. In addition in order to secure hosting web pages a web browser installed in each client should be updated to include the script proxy. In today s environment where different vendors provide different web versions the security approach of web browser abstractions is not feasible.

It would therefore be advantageous to provide an efficient solution for securing web pages hosting third party modules.

Certain embodiments disclosed herein include a method for providing secure communications between third parties and hosting web pages. The method comprises uploading a hosting web page to a client device wherein the hosting web page includes at least a sand box proxy and a sand box engine uploading a third party module to the hosting web page determining whether a proxy application programming interface API call received from the third party module meets at least one validation rule wherein the proxy API call includes at least a script and a payload parameter provided by the third party module for each validation rule upon determining that the proxy API call does not meet the validation rule modifying the script to meet the validation rule generating an engine API call including at least the payload parameter validating the engine API call and upon validation of the engine API call executing by the sand box engine over the hosting web page the payload parameter.

Certain embodiments disclosed herein also include a system for secure communications between third parties and hosting web pages. The system comprises a processing unit and a memory the memory containing instructions that when executed by the processing unit configure the system to upload a hosting web page to a client device wherein the hosting web page includes at least a sand box proxy and a sand box engine upload a third party module to the hosting web page determine whether a proxy application programming interface API call received from the third party module meets at least one validation rule wherein the proxy API call includes at least a script and a payload parameter provided by the third party module for each validation rule upon determining that the proxy API call does not meet the validation rule modify the script to meet the validation rule generate an engine API call including at least the payload parameter validate the engine API call and upon validation of the engine API call execute by the sand box engine over the hosting web page the payload parameter.

It is important to note that the embodiments disclosed herein are only examples of the many advantageous uses of the innovative teachings herein. In general statements made in the specification of the present application do not necessarily limit any of the various claimed embodiments. Moreover some statements may apply to some inventive features but not to others. In general unless otherwise indicated singular elements may be in plural and vice versa with no loss of generality. In the drawings like numerals refer to like parts through several views.

The publisher server is communicatively connected to the network and is capable of embedding third party modules in hosting web pages downloaded from the servers and further uploading the web pages with the third party modules to web browsers not shown of the clients . The third party modules are downloaded from one or more servers belonging to one or more third party vendors. In accordance with an embodiment third party modules are online advertisements and the vendors are advertisement agencies. In various embodiments all third party modules are embedded in a hosting web page which is hosted by the publisher server and the third party modules cannot directly access APIs of the hosting web page.

A non limiting and exemplary diagram of a hosting web page constructed in accordance with an embodiment of the invention is shown in . The hosting web page includes a sand box proxy and a sand box engine that together provide a security protection layer for the hosting web page . The sand box proxy and the sand box engine block a third party module from directly executing any actions on the hosting web page . With this aim the sand box proxy dynamically loads the third party module to the hosting web page and once uploaded the third party module cannot directly call or access the hosting web page using an API exposed by the hosting web page . Rather the third party module can communicate only with the sand box proxy through a predefined API hereinafter referred to as the proxy API exposed by the sand box proxy . The proxy API includes at least a payload parameter encapsulating an executable script. This executable script is typically a process that is executed by the sand box engine to run over the hosting web page . It should be noted that a typical architecture of a hosting web page mashup page does not include the sand box proxy and the sand box engine . Thus according to various embodiments the third party module can be blocked from running a harmful script over the hosting web page .

The sand box proxy receives a call from the proxy API and determines if the call is potentially harmful using a set of validation rules. For example if the third party module tries to access a restricted network resource the call may be determined to be potentially harmful. In an embodiment only validated proxy API calls are sent to the sand box engine . The sand box proxy generates a new API call hereinafter the engine API which may be communicated to the sand box engine . The engine API has a predefined format having an API method name and parameters. The payload portion includes the proxy API i.e. the script to be executed.

The sand box engine performs a set of checks to determine if the script included in the payload of the engine API is potentially harmful. Validated scripts are safe for execution. It should be appreciated that the sand box proxy and the sand box engine control all communications from the third party module to the hosting web page thereby providing a sealed and safe environment for the hosting web page .

In certain implementations where the hosting web page includes more than one third party module a single sand box proxy handles API calls from a single third party module . The sand box engine validates and executes all API calls received from the sand box proxies .

The sand box proxy the sand box engine and the third party module may be implemented as executable code e.g. a Flash swf file that is temporarily stored in a non transitory computer readable medium in a client e.g. one of the clients and executed thereon. The client may be any computing device including at least a processor and a computer readable medium. In certain embodiments the sand box engine and one or more sand box proxies can be implemented as part of a secure agent.

At S a third party module is uploaded to a hosting web page by a sand box proxy. Thereafter the sand box proxy and the third party module can communicate with each other using a proxy API exposed by the sand box proxy. The format of the proxy API may be predefined and includes at least an API name and an API s parameters. As a non limiting example the proxy API may be 

ExecuteScript is an API s name of a public method that the sand box proxy exposes to the third party module. The third party module calls this method when there is a need to communicate with the hosting web page. Other examples for public methods may be resizeBrowserWindow ShakeBrowserWindow and the like. Payload and isRunSync are the API s parameters. The Payload parameter is a string that includes a script that the proxy should delegate to the sand box engine. The script could be a single function call or a block of inline script that the sand box engine is required to execute once validated. The isRunSync parameter is a Boolean parameter i.e. true false that indicates whether the script should be executed by the sand box engine in a sequential mode or in a parallel mode. The sand box engine can handle engine API calls received from one or more sand box proxies either in a parallel manner or in a sequential manner. The calls are processed in the order determined by the isRunSync parameter.

At S a proxy API call sent by the third party module is received at the sand box proxy. At S the content of the received API proxy s payload is validated by the sand box proxy in order to detect malicious operations. This step is performed using one or more validation rules selected from a predefined set of rules.

A non limiting example for a validation rule is a check performed to determine if a third party module tries to read private information e.g. a credit card number from the hosting web page. Another example is a rule that scans for invalid third party network addresses through which the module can transfer information to malicious third party servers. Another example is a rule that checks for malicious code e.g. a virus or a Trojan horse in the script included in the payload parameter. This rule blocks attackers from breaching the sand box environment and bypassing the proxy. A person with ordinary skill in the art can easily define a new set of validation rules based on the above teachings.

If the proxy API is valid execution continues with S otherwise at S the proxy API is blocked i.e. the API call is not relayed to the sand box engine . In accordance with another embodiment the script in the proxy API s payload can be modified to correct security breaches. For example a DOM of the hosting page can be restricted to a write only option in order to prevent reading of private information. As another example any access to unknown servers addresses can be blocked.

At S an engine API is generated by the sand box proxy by including at least the proxy API s payload in the engine API s parameters. The engine API may be formatted as described above. Once ready at S the engine API is sent to the sand box engine. At S the validity of the API call is checked. Specifically the sand box engine checks the received API using one or more rules selected from a predefined set of rules. One rule includes verification of the source of the engine API i.e. if this API call originated from a known sand box proxy. The rules described in detail above can also be utilized by the sand box engine. If the engine API is determined to be valid execution continues with S where the payload s content or script is executed by the sand box engine otherwise at S the engine API is discarded.

The various embodiments disclosed herein can be implemented as hardware firmware software or any combination thereof. Moreover the software is preferably implemented as an application program tangibly embodied on a program storage unit or computer readable medium consisting of parts or of certain devices and or a combination of devices. The application program may be uploaded to and executed by a machine comprising any suitable architecture. Preferably the machine is implemented on a computer platform having hardware such as one or more central processing units CPUs a memory and input output interfaces. The computer platform may also include an operating system and microinstruction code. The various processes and functions described herein may be either part of the microinstruction code or part of the application program or any combination thereof which may be executed by a CPU whether or not such a computer or processor is explicitly shown. In addition various other peripheral units may be connected to the computer platform such as an additional data storage unit and a printing unit. Furthermore a non transitory computer readable medium is any computer readable medium except for a transitory propagating signal.

All examples and conditional language recited herein are intended for pedagogical purposes to aid the reader in understanding the principles of the disclosed embodiment and the concepts contributed by the inventor to furthering the art and are to be construed as being without limitation to such specifically recited examples and conditions. Moreover all statements herein reciting principles aspects and embodiments of the disclosed embodiments as well as specific examples thereof are intended to encompass both structural and functional equivalents thereof. Additionally it is intended that such equivalents include both currently known equivalents as well as equivalents developed in the future i.e. any elements developed that perform the same function regardless of structure.

