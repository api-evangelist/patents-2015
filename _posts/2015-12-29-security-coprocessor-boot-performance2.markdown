---

title: Security co-processor boot performance
abstract: Technologies for improving platform initialization on a computing device include beginning initialization of a platform of the computing device using a basic input/output system (BIOS) of the computing device. A security co-processor driver module adds a security co-processor command to a command list when a security processor command is received from the BIOS module. The computing device establishes a periodic interrupt of the initialization of the platform to query the security co-processor regarding the availability of a response to a previously submitted security co-processor command, forward any responses received by the security co-processor driver module to the BIOS module, and submit the next security co-processor command in the command list to the security co-processor.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563775&OS=09563775&RS=09563775
owner: intel Corporation
number: 09563775
owner_city: Santa Clara
owner_country: US
publication_date: 20151229
---
This application is a continuation application of U.S. application Ser. No. 13 976 041 entitled Security Co Processor Boot Performance which was filed on Jun. 26 2013 and which issued as U.S. Pat. No. 9 223 983 on Dec. 29 2015.

Trusted platform modules TPM and other security co processors are commonly used to enhance the security of a computing device. Such security co processors typically perform various cryptographic functions and are often used to attest to the integrity of a platform. Additionally because security co processors are generally capable of performing cryptographic procedures they are in some circumstances used to offload those cryptographic procedures from the main processor of the computing device.

In today s society speed is fundamental to a consumer s enjoyment of various computing devices. For example ultrabooks have emerged on the market with a central focus on an increased boot speed compared to standard notebook computers. Further some standards for operating systems and computer platforms require manufactures to pay attention to boot speed by for example requiring the computing device to complete Unified Extensible Firmware Interface UEFI basic input output system BIOS Power On Self Test POST in only a couple seconds. Those standards ensure that computing devices boot quickly and that there is minimal downtime associated with server reboots. Further the latency associated with booting a typical TPM is significant which is contrary to those standards.

While the concepts of the present disclosure are susceptible to various modifications and alternative forms specific embodiments thereof have been shown by way of example in the drawings and will be described herein in detail. It should be understood however that there is no intent to limit the concepts of the present disclosure to the particular forms disclosed but on the contrary the intention is to cover all modifications equivalents and alternatives consistent with the present disclosure and the appended claims.

References in the specification to one embodiment an embodiment an illustrative embodiment etc. indicate that the embodiment described may include a particular feature structure or characteristic but every embodiment may or may not necessarily include that particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it is submitted that it is within the knowledge of one skilled in the art to effect such feature structure or characteristic in connection with other embodiments whether or not explicitly described.

The disclosed embodiments may be implemented in some cases in hardware firmware software or any combination thereof. The disclosed embodiments may also be implemented as instructions carried by or stored on a transitory or non transitory machine readable e.g. computer readable storage medium which may be read and executed by one or more processors. A machine readable storage medium may be embodied as any storage device mechanism or other physical structure for storing or transmitting information in a form readable by a machine e.g. a volatile or non volatile memory a media disc or other media device .

In the drawings some structural or method features may be shown in specific arrangements and or orderings. However it should be appreciated that such specific arrangements and or orderings may not be required. Rather in some embodiments such features may be arranged in a different manner and or order than shown in the illustrative figures. Additionally the inclusion of a structural or method feature in a particular figure is not meant to imply that such feature is required in all embodiments and in some embodiments may not be included or may be combined with other features.

Referring now to in the illustrative embodiment a computing device for improved platform initialization is configured to allow the BIOS of the computing device to continue the initialization process for other components of the computing device while waiting on a response from the security co processor. As discussed in detail below this eliminates substantial latency associated with waiting on a response from the security co processor for each of the security co processor commands sent to the security co processor.

The computing device may be embodied as any type of computing device capable of improving platform initialization and performing the functions described herein. For example the computing device may be embodied as a cellular phone smartphone tablet computer laptop computer personal digital assistant mobile Internet device desktop computer server and or any other computing communication device. As shown in the illustrative computing device includes a processor an input output I O subsystem a memory a data storage one or more peripheral devices and a security co processor . Of course the computing device may include other or additional components such as those commonly found in a typical computing device e.g. various input output devices communication circuitry etc. in other embodiments. Additionally in some embodiments one or more of the illustrative components may be incorporated in or otherwise from a portion of another component. For example the memory or portions thereof may be incorporated in the processor in some embodiments.

The processor may be embodied as any type of processor capable of performing the functions described herein. For example the processor may be embodied as a single or multi core processor s digital signal processor microcontroller or other processor or processing controlling circuit. Similarly the memory may be embodied as any type of volatile or non volatile memory or data storage capable of performing the functions described herein. In operation the memory may store various data and software used during operation of the computing device such as operating systems applications programs libraries and drivers. The memory is communicatively coupled to the processor via the I O subsystem which may be embodied as circuitry and or components to facilitate input output operations with the processor the memory and other components of the computing device . For example the I O subsystem may be embodied as or otherwise include memory controller hubs input output control hubs firmware devices communication links i.e. point to point links bus links wires cables light guides printed circuit board traces etc. and or other components and subsystems to facilitate the input output operations. In some embodiments the I O subsystem may form a portion of a system on a chip SoC and be incorporated along with the processor the memory and other components of the computing device on a single integrated circuit chip.

The data storage may be embodied as any type of device or devices configured for short term or long term storage of data such as for example memory devices and circuits memory cards hard disk drives solid state drives or other data storage devices. The peripheral devices of the computing device may include any number of additional peripheral or interface devices. The particular devices included in the peripheral devices may depend on for example the type and or intended use of the computing device .

The security co processor may be embodied as any hardware component s or circuitry capable of performing the functions described herein. In some embodiments the security co processor is capable of establishing a trusted execution environment. For example the security co processor may be embodied as a trusted platform module TPM a manageability engine ME a converged security engine CSE or another out of band processor. In some embodiments the security co processor is embodied as an out of band processor configured to operate independently and in an out of band manner relative to the processor .

Referring now to in use the computing device establishes an environment for improving platform initialization. The environment in the illustrative embodiment includes a security co processor driver module and a basic input output system BIOS module . Additionally the security co processor driver module further includes an application programming interface a timer module and a security co processor interrupt handler . Each of the security co processor driver module the BIOS module the application programming interface the timer module and the security co processor interrupt handler may be embodied as hardware software firmware or a combination thereof.

The security co processor driver module manages the communication between the security co processor and the other components of the computing device . For example as discussed in detail below the security co processor driver module may transmit a security co processor command to the security co processor for execution or other processing. Rather than waiting for the security co processor to respond which typically results in significant latency in some embodiments the security co processor driver module queries or otherwise polls the status of the security co processor to determine whether the response of the security co processor is ready and if not resumes other initialization as discussed in more detail below.

The BIOS module may begin initialization of a platform of the computing device . As such in some embodiments the BIOS module initializes and or tests various components of the computing device e.g. input output devices . Additionally the BIOS module may communicate and interact with the security co processor driver module using the application programming interface API of the security co processor driver module . In some embodiments the BIOS module does not communicate directly with the security co processor but instead uses the security co processor driver module as an intermediary. Accordingly when the BIOS module wants to send a security co processor command the BIOS module sends that command to the security co processor driver module rather than to the security co processor directly. As discussed below the security co processor adds that security co processor command to a command list. Similarly when a response from the security co processor is received by the security co processor driver module the response may in turn be forwarded to the BIOS module . Of course in some embodiments certain security co processor commands may not elicit a response from the security co processor and or may not need to be forwarded to the BIOS module by the security co processor driver module .

The timer module is configured to establish a periodic interrupt of the initialization of the platform of the computing device . For example in some embodiments the timer module may include or otherwise utilize a High Precision Event Timer HPET or other hardware timer. In one embodiment the periodic interrupt established by the timer module is a real time interrupt that occurs whenever a clock of the computing device reaches a certain value. Of course in other embodiments the timer module may establish an interrupt that is aperiodic or has a period that changes e.g. a set of periods . For example the interrupt may occur less frequently during one BIOS phase than during another BIOS phase i.e. the period may depend on the BIOS phase . When the interrupt occurs the security co processor interrupt handler is invoked and control is transferred to the security co processor interrupt handler e.g. from the BIOS module . As discussed in detail below the security co processor interrupt handler checks the status of the security co processor i.e. determines whether a response to a prior submitted security co processor command is ready and gets the response from the security co processor if it is ready.

If there are any security co processor commands in the command list the security co processor interrupt handler sends the next command in the list to the security co processor for processing and control is returned from the security co processor interrupt handler . Of course as discussed above the response may be forwarded to the BIOS module . In some embodiments the command list is a list of security co processor commands queued for transmission to the security co processor . For example in an embodiment in which the security co processor is a TPM the command list is a list of TPM commands sent from the BIOS module to the security co processor driver module or TPM driver module in such an embodiment to be queued for execution. In some embodiments a security co processor command is removed from the command list once it has been sent to the security co processor for execution. It should be appreciated that the order of execution of security co processor commands in the command list may vary depending on the embodiment. For example in one embodiment a first in first out FIFO policy may be implemented. In another embodiment a last in first out LIFO policy may be used. In yet another embodiment a more sophisticated policy may be used to determine the priority of execution of the security co processor commands. The command list may be stored on the computing device as any suitable data structure.

Referring now to in use the computing device may execute a method for improving platform initialization by for example allowing the BIOS module to continue the initialization process for other components of the computing device while waiting on a response from the security co processor for each of the security co processor commands sent to the security co processor . The illustrative method begins with block of in which the computing device determines whether the computing device is powered on. Once the computing device has been powered on the computing device initializes the security co processor interrupt handler in block . In doing so in block the computing device initializes a timer. That is a periodic interrupt of the initialization of the platform is established as discussed above. Additionally in block the computing device initializes a security co processor command list e.g. establishes an appropriate data structure .

In block the computing device begins platform initialization. For example the computing device may begin initializing and or testing various components of the computing device e.g. various input output components . In block the computing device determines whether a security co processor command has been received by the security co processor driver module from the BIOS module for transmission to the security co processor . If so the computing device adds the security co processor command to the security co processor command list and continues platform initialization in block . In block the computing device determines whether the security co processor interrupt e.g. a periodic interrupt has been triggered. If the computing device determines in block that no security co processor command has been received from the BIOS module the method advances directly to block . If the security co processor interrupt has been triggered the computing device checks the status of the security co processor in block . For example the computing device determines whether a response for a previously submitted security co processor command is available for transmission from the security co processor to the security co processor driver module . Additionally if the computing device determines in block that the security co processor interrupt has not been triggered the method advances to block in which the computing device determines whether the non security co processor platform initialization is complete as discussed in more detail below. In other words in some embodiments the security co processor interrupt handler of the computing device performs the functions described in blocks of the method only in response to an occurrence of the security co processor interrupt.

After checking the status of the security co processor in block the method advances to block see . If the computing device determines that a response from the security co processor is available in block the security co processor driver module of the computing device receives the security co processor response from the security co processor in block . However if the computing device determines that a response is not ready the method advances to block . In block the security co processor driver module forwards the received response to the BIOS module . In some embodiments the security co processor driver module signals an event to inform the BIOS module that a security co processor response is available. In such embodiments the BIOS module is able to retrieve the security co processor response via event callback procedures if the response is needed by the BIOS module .

In block the computing device determines whether the security co processor command list is empty. That is the computing device determines whether there are any security co processor commands waiting for execution by the security co processor . If the command list is empty the method advances to block . If however the command list is not empty the security co processor driver module sends the next security co processor command to the security co processor for execution in block . As discussed above the priority of execution of the security co processor commands in the command list may vary depending on the particular policy implemented. In block the computing device determines whether the non security co processor platform initialization is complete. In other words the computing device determines whether the security co processor commands i.e. the commands in the security co processor command list are the only commands left to be executed in order to complete platform initialization. Of course in some embodiments there may be additional commands to be executed by the BIOS module that rely on a response to a security co processor command from the security co processor . In such an embodiment the computing device may determine for example whether the security co processor commands are the only commands capable of currently being executed.

If the non security co processor platform initialization is complete the computing device stops the timer in block . That is the computing device stops interrupting the platform initialization. In block the computing device determines whether the security co processor command list is empty. It should be appreciated that if the non security co processor platform initialization is complete and there are no security co processor commands remaining in the command list for execution the platform initialization is complete and an operating system of the computing device may now be booted. Accordingly in block the computing device boots the operating system. Of course in some embodiments the computing device may include more than one operating system. As such a default operating system may be booted a user of the computing device may be given an option to choose an operating system for booting or some other boot policy may be implemented.

If the computing device determines in block that the security co processor command list is not empty the computing device executes the remaining security co processor commands in block . For example the security co processor driver module may follow the traditional approach of serially transmitting each security co processor command remaining in the command list to the security co processor for execution waiting for a response to each transmitted command before sending the next and forwarding the responses to the BIOS module to complete initialization. As discussed above in some embodiments one or more non security co processor commands may rely on a response to a security co processor command in order to execute. In such an embodiment if the non security co processor command becomes executable by the BIOS module e.g. due to a response from the security co processor the method may return to block in which the computing device determines whether non security co processor platform initialization is complete. The computing device may also re enable the timer associated with the security co processor interrupt. In other words in such an embodiment the computing device may resume the procedures that permit non security co processor initialization of the platform while waiting on a response to a security co processor command from the security co processor . Returning to block if the computing device determines that the non security co processor initialization is not complete the method returns to block of in which the computing device determines whether a security co processor command has been received by the security co processor driver module from the BIOS module .

Referring now to a boot flow for the computing device implementing the method for improved platform initialization is illustratively shown in whereas a boot flow for the computing device implementing a traditional method for platform initialization is shown in . As shown in the boot flow is generally continuous when implementing the platform initialization for the computing device as described herein. As discussed above when the BIOS module encounters a security co processor command when initializing the platform the command is transmitted to the security co processor driver module for execution by the security co processor . The command is added to a command list of commands awaiting execution and the BIOS module continues platform initialization unrelated to the security co processor . When an established security co processor interrupt is triggered e.g. by expiration of a given period of time the security co processor interrupt handler determines whether the security co processor has a response ready to a previously submitted command and if so receives the response forwards the response to the BIOS module and sends the next command in the command list to the security co processor for execution. As such there is minimal or otherwise reduced latency associated with initializing the security co processor . However as illustratively shown in the traditional method of initializing the security co processor involves substantial time delays associated with waiting for a response from the security co processor for each submitted command . Specifically when the BIOS module encounters a security co processor command the command is transmitted to the security co processor . The BIOS module must wait for a response from the security co processor for the submitted command before continuing platform initialization. Because initialization of the security co processor typically involves the execution of several e.g. twenty or more security co processor commands the latency is significant when implementing traditional platform initialization. For example in the case of a TPM the TpmSelfTest command must be sent to the TPM during the PEI Pre Extensible Firmware Interface Initialization BIOS phase which takes a significant amount to receive a response from the TPM.

Illustrative examples of the devices systems and methods disclosed herein are provided below. An embodiment of the devices systems and methods may include any one or more and any combination of the examples described below.

Example 1 includes a computing device for improving platform initialization the computing device comprising a security co processor to execute security co processor commands submitted thereto a basic input output system module to begin initialization of a platform of the computing device a security co processor driver module to add a security co processor command to a command list in response to receipt of the security co processor command from the basic input output system module and a timer module to establish a periodic interrupt of the initialization of the platform wherein the security co processor driver module is further to in response to an occurrence of the periodic interrupt i query the security co processor regarding an availability of a security co processor response to a prior submitted security co processor command and ii forward in response to receipt of an available security co processor response the available security co processor response to the basic input output system module.

Example 2 includes the subject matter of Example 1 and wherein the security co processor driver module is further to submit the next security co processor command in the command list to the security co processor in response to receipt of the available security co processor response.

Example 3 includes the subject matter of any of Examples 1 and 2 and wherein the security co processor comprises a trusted platform module.

Example 4 includes the subject matter of any of Examples 1 3 and wherein the security co processor comprises a manageability engine.

Example 5 includes the subject matter of any of Examples 1 4 and wherein the security co processor comprises a converged security engine.

Example 6 includes the subject matter of any of Examples 1 5 and wherein the security co processor comprises an out of band processor.

Example 7 includes the subject matter of any of Examples 1 6 and wherein the basic input output module is further to continue initialization of the platform in response to a return from the periodic interrupt.

Example 8 includes the subject matter of any of Examples 1 7 and wherein the timer module is further to discontinue periodic interruption of the initialization in response to completion of initialization procedures not involving the security co processor commands.

Example 9 includes the subject matter of any of Examples 1 8 and wherein the security co processor driver module is further to in response to completion of the initialization procedures not involving the security co processor commands i submit each security co processor command remaining in the command list to the security co processor and ii forward in response to receipt of an available security co processor response to one of the remaining security co processor commands the available security co processor response to the basic input output system module for each of the remaining security co processor commands.

Example 10 includes the subject matter of any of Examples 1 9 and wherein the basic input output system module is further to boot an operating system of the computing device in response to completion of initialization procedures.

Example 11 includes the subject matter of any of Examples 1 10 and wherein the command list follows a first in first out system.

Example 12 includes the subject matter of any of Examples 1 11 and wherein the command list follows a last in first out system.

Example 13 includes a method for improving platform initialization of a computing device the method comprising commencing initialization of a platform of the computing device using a basic input output system of the computing device receiving with a security co processor driver of the computing device and from the basic input output system a security co processor command to be executed by a security co processor of the computing device adding with the security co processor driver the security co processor command to a command list in response to receiving the security co processor command and interrupting with the computing device the initialization of the platform periodically to i query the security co processor regarding an availability of a security co processor response to a prior submitted security co processor command and ii forward in response to receiving an available security co processor response the available security co processor response to the basic input output system module.

Example 14 includes the subject matter of Example 13 and wherein interrupting the initialization of the platform comprises submitting the next security co processor command in the command list to the security co processor in response to receiving the available security co processor response.

Example 15 includes the subject matter of any of Examples 13 and 14 and wherein receiving the security co processor command comprises receiving with a trusted platform module driver of the computing device and from the basic input output system a trusted platform module command to be executed by a trusted platform module of the computing device wherein adding the security co processor command to the command list comprises adding with the trusted platform module driver the trusted platform module command to a command list in response to receiving the trusted platform module command and wherein interrupting the initialization of the platform comprises interrupting with the computing device the initialization of the platform periodically to i query the trusted platform module regarding an availability of a trusted platform module response to a prior submitted trusted platform module command and ii forward in response to receiving an available trusted platform module response the available trusted platform module response to the basic input output system module.

Example 16 includes the subject matter of any of Examples 13 15 and wherein interrupting the initialization of the platform comprises submitting the next trusted platform module command in the command list to the trusted platform module in response to receiving the available trusted platform module response.

Example 17 includes the subject matter of any of Examples 13 16 and wherein receiving the security co processor command comprises receiving with a manageability engine driver of the computing device and from the basic input output system a manageability engine command to be executed by a manageability engine of the computing device wherein adding the security co processor command to the command list comprises adding with the manageability engine driver the manageability engine command to a command list in response to receiving the manageability engine command and wherein interrupting the initialization of the platform comprises interrupting with the computing device the initialization of the platform periodically to i query the manageability engine regarding an availability of a manageability engine response to a prior submitted manageability engine command and ii forward in response to receiving an available manageability engine response the available manageability engine response to the basic input output system module.

Example 18 includes the subject matter of any of Examples 13 17 and wherein receiving the security co processor command comprises receiving with a converged security engine driver of the computing device and from the basic input output system a converged security engine command to be executed by a converged security engine of the computing device wherein adding the security co processor command to the command list comprises adding with the converged security engine driver the converged security engine command to a command list in response to receiving the converged security engine command and wherein interrupting the initialization of the platform comprises interrupting with the computing device the initialization of the platform periodically to i query the converged security engine regarding an availability of a converged security engine response to a prior submitted converged security engine command and ii forward in response to receiving an available converged security engine response the available converged security engine response to the basic input output system module.

Example 19 includes the subject matter of any of Examples 13 18 and further including continuing on the computing device initialization of the platform in response to returning from the periodic interrupt.

Example 20 includes the subject matter of any of Examples 13 19 and further including discontinuing on the computing device periodic interruption of the initialization in response to completing initialization procedures not involving the security co processor commands.

Example 21 includes the subject matter of any of Examples 13 20 and further including submitting with the computing device and in response to completing the initialization procedures not involving the security co processor commands each security co processor command remaining in the command list to the security co processor and forwarding with the computing device and in response to receiving an available security co processor response to one of the remaining security co processor commands the available security co processor response to the basic input output system for each of the remaining security co processor commands.

Example 22 includes the subject matter of any of Examples 13 21 and further including booting on the computing device an operating system of the computing device in response to completing the initialization procedures.

Example 23 includes the subject matter of any of Examples 13 22 and wherein submitting the next security co processor command in the command list to the security co processor comprises submitting the next security co processor command in the command list to the security co processor on a first in first out basis.

Example 24 includes the subject matter of any of Examples 13 23 and wherein submitting the next security co processor command in the command list to the security co processor comprises submitting the next security co processor command in the command list to the security co processor on a last in first out basis.

Example 25 includes a computing device comprising a processor and a memory having stored therein a plurality of instructions that when executed by the processor cause the computing device to perform the method of any of Examples 13 24.

Example 26 includes one or more machine readable storage media comprising a plurality of instructions stored thereon that in response to being executed result in a computing device performing the method of any of Examples 13 24.

Example 27 includes a computing device for improving platform initialization the computing device comprising means for commencing initialization of a platform of the computing device using a basic input output system of the computing device means for receiving with a security co processor driver of the computing device and from the basic input output system a security co processor command to be executed by a security co processor of the computing device means for adding with the security co processor driver the security co processor command to a command list in response to receiving the security co processor command and means for interrupting the initialization of the platform periodically to i query the security co processor regarding an availability of a security co processor response to a prior submitted security co processor command and ii forward in response to receiving an available security co processor response the available security co processor response to the basic input output system module.

Example 28 includes the subject matter of Example 27 and wherein the means for interrupting the initialization of the platform comprises means for submitting the next security co processor command in the command list to the security co processor in response to receiving the available security co processor response.

Example 29 includes the subject matter of any of Examples 27 and 28 and wherein the means for receiving the security co processor command comprises means for receiving with a trusted platform module driver of the computing device and from the basic input output system a trusted platform module command to be executed by a trusted platform module of the computing device wherein the means for adding the security co processor command to the command list comprises means for adding with the trusted platform module driver the trusted platform module command to a command list in response to receiving the trusted platform module command and wherein the means for interrupting the initialization of the platform comprises means for interrupting the initialization of the platform periodically to i query the trusted platform module regarding an availability of a trusted platform module response to a prior submitted trusted platform module command and ii forward in response to receiving an available trusted platform module response the available trusted platform module response to the basic input output system module.

Example 30 includes the subject matter of any of Examples 27 29 and wherein the means for interrupting the initialization of the platform comprises means for submitting the next trusted platform module command in the command list to the trusted platform module in response to receiving the available trusted platform module response.

Example 31 includes the subject matter of any of Examples 27 30 and wherein the means for receiving the security co processor command comprises means for receiving with a manageability engine driver of the computing device and from the basic input output system a manageability engine command to be executed by a manageability engine of the computing device wherein the means for adding the security co processor command to the command list comprises means for adding with the manageability engine driver the manageability engine command to a command list in response to receiving the manageability engine command and wherein the means for interrupting the initialization of the platform comprises means for interrupting the initialization of the platform periodically to i query the manageability engine regarding an availability of a manageability engine response to a prior submitted manageability engine command and ii forward in response to receiving an available manageability engine response the available manageability engine response to the basic input output system module.

Example 32 includes the subject matter of any of Examples 27 31 and wherein the means for receiving the security co processor command comprises means for receiving with a converged security engine driver of the computing device and from the basic input output system a converged security engine command to be executed by a converged security engine of the computing device wherein the means for adding the security co processor command to the command list comprises means for adding with the converged security engine driver the converged security engine command to a command list in response to receiving the converged security engine command and wherein the means for interrupting the initialization of the platform comprises means for interrupting the initialization of the platform periodically to i query the converged security engine regarding an availability of a converged security engine response to a prior submitted converged security engine command and ii forward in response to receiving an available converged security engine response the available converged security engine response to the basic input output system module.

Example 33 includes the subject matter of any of Examples 27 32 and further including means for continuing initialization of the platform in response to returning from the periodic interrupt.

Example 34 includes the subject matter of any of Examples 27 33 and further including means for discontinuing periodic interruption of the initialization in response to completing initialization procedures not involving the security co processor commands.

Example 35 includes the subject matter of any of Examples 27 34 and further including means for submitting in response to completing the initialization procedures not involving the security co processor commands each security co processor command remaining in the command list to the security co processor and means for forwarding in response to receiving an available security co processor response to one of the remaining security co processor commands the available security co processor response to the basic input output system for each of the remaining security co processor commands.

Example 36 includes the subject matter of any of Examples 27 35 and further means for comprising booting an operating system of the computing device in response to completing the initialization procedures.

Example 37 includes the subject matter of any of Examples 27 36 and wherein the means for submitting the next security co processor command in the command list to the security co processor comprises means for submitting the next security co processor command in the command list to the security co processor on a first in first out basis.

Example 38 includes the subject matter of any of Examples 27 37 and wherein the means for submitting the next security co processor command in the command list to the security co processor comprises means for submitting the next security co processor command in the command list to the security co processor on a last in first out basis.

