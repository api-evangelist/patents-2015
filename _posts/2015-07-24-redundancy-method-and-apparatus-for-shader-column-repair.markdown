---

title: Redundancy method and apparatus for shader column repair
abstract: Methods, systems and non-transitory computer readable media are described. A system includes a shader pipe array, a redundant shader pipe array, a sequencer and a redundant shader switch. The shader pipe array includes multiple shader pipes, each of which perform rendering calculations on data provided thereto. The redundant shader pipe array also performs rendering calculations on data provided thereto. The sequencer identifies at least one defective shader pipe in the shader pipe array, and, in response, generates a signal. The redundant shader switch receives the generated signal, and, in response, transfers the data destined for each shader pipe identified as being defective independently to the redundant shader pipe array.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09367891&OS=09367891&RS=09367891
owner: Advanced Micro Devices, Inc.
number: 09367891
owner_city: Sunnyvale
owner_country: US
publication_date: 20150724
---
This application is a continuation of U.S. patent application Ser. No. 12 476 158 filed Jun. 1 2009 which claims the benefit under 35 U.S.C. 119 e to U.S. Provisional Patent Application No. 61 057 513 filed May 30 2008 U.S. Provisional Patent Application No. 61 057 483 filed May 30 2008 U.S. Provisional Patent Application No. 61 057 504 filed May 30 2008 U.S. Provisional Patent Application No. 61 057 492 filed May 30 2008 and U.S. Provisional Patent Application No. 61 057 499 filed May 30 2008 all of which are incorporated by reference herein in their entireties.

The present invention is generally directed to computing operations performed in computing systems and more particularly directed to graphics processing tasks performed in computing systems.

A graphics processing unit GPU is a complex integrated circuit that is specially designed to perform graphics processing tasks. A GPU can for example execute graphics processing tasks required by an end user application such as a video game application. In such an example there are several layers of software between the end user application and the GPU.

The end user application communicates with an application programming interface API . An API allows the end user application to output graphics data and commands in a standardized format rather than in a format that is dependent on the GPU. Several types of APIs are commercially available including DirectX developed by Microsoft Corp. and OpenGL developed by Silicon Graphics Inc. The API communicates with a driver. The driver translates standard code received from the API into a native format of instructions understood by the GPU. The driver is typically written by the manufacturer of the GPU. The GPU then executes the instructions from the driver.

A GPU produces the pixels that make up an image from a higher level description of its components in a process known as rendering. GPU s typically utilize a concept of continuous rendering by the use of pipelines to process pixel texture and geometric data. These pipelines are often referred to as shader pipes or shader pipelines shader being a term in computer graphics referring to a set of software instructions used by a graphic resource primarily to perform rendering effects. In addition GPU s can also employ multiple pipelines in a parallel processing design to obtain higher throughput. A multiple of shader pipelines can also be referred to as a shader pipe array.

Periodically an error occurs somewhere within a pipeline as a shader pipe array for example as a result of a production defect. As the number of errors increase the overall yield of acceptable rendering calculations decreases. Typically the method used to correct a defective pipeline would be to recalculate the entire array of data within the shader pipe array. While this method can correct the defective pipeline data it also consumes a fair amount of processing time to recalculate the entire array of data. This recalculation effort due to even a single defective element within a single pipeline effectively decreases a system s overall performance or the production yield amount of effective product.

What are needed therefore are systems and or methods to alleviate the aforementioned deficiencies. Particularly what is needed is a highly efficient cost effective approach to overcome the effects of a defective shader pipe with minimal impact on overall product production or performance.

Consistent with the principles of the present invention as embodied and broadly described herein the present invention includes method and apparatus for shader pipeline repair comprising a shader pipe array a redundant shader pipe array a redundant shader switch a sequencer and a texture fetch system. During manufacturing test system level test or start up test if a defect is noted a control register is configured to map defective shader pipe columns to redundant shader pipe column. In normal operating mode for example if the redundant shader control register indicates a defect in a shader pipe column within the shader pipe array data that was to be directed to the defective shader pipe column is transferred by a redundant shader switch directly via a horizontal path to a redundant shader pipe array column where it is processed. This can be controlled uniquely per row or common for all rows. A defective shader pipe within the shader pipe array could be caused for example because of a manufacturing defect post manufacturing defect component degradation external interference and or inadvertent static discharge or other electrical or environmental condition or occurrence. A shader pipe will be defective if a static or intermittent error condition is detected during testing. Testing can occur at the time of manufacturing or periodically e.g. at the time of start up or initialization during use of the product. Once the data is processed by the redundant shader pipe array it is re inserted into the correct output column by the redundant shader switch. In addition the redundant shader switch synchronizes the redundant shader pipe array data so that the redundant shader pipe array data is correctly positioned and timed with other output data. In this manner a defective shader pipe is repaired by re routing data that was destined to a defective shader pipe to a redundant shader pipe for processing.

In an embodiment of the invention the shader pipe array comprises one or more Vertical Shader Pipe Columns where each column is made up of one or more Shader Pipe blocks. In this embodiment the shader pipe array is configured as a M N array with M Vertical Shader Pipe Columns where each column comprises N rows of Shader Pipe blocks.

In another embodiment the redundant shader pipe comprises one or more Vertical Redundant Shader Pipe Columns where each column is made up of one or more Redundant Shader Pipe blocks. In this embodiment the redundant shader pipe array is configured as a X N array with X Vertical Redundant Shader Pipe Columns where each column comprises N rows of Redundant Shader Pipe blocks.

In another embodiment where the redundant shader pipe comprises more than one Vertical Redundant Shader Pipe Column the redundant shader pipe is capable of simultaneously receiving processing and outputting data destined to the more than one defective shader pipe column in a single shader pipe array to the more than one Vertical Redundant Shader Pipe Columns. As such each redundant column is capable of repairing an individual column in the primary shader array.

In another embodiment the redundant shader pipe array would include an input and output module. The input module can transfer data to a redundant shader pipe column for processing that was initially destined to a defective shader pipe prior to the data entering the shader pipe array. In this embodiment the output unit of the shader pipe array would also multiplex the processed shader pipe array data from the redundant shader pipe array back into the correct output column and synchronize the output to coincide with other output data.

Further features and advantages of the invention as well as the structure and operation of various embodiments of the present invention are described in detail below with reference to the accompanying drawings. It is noted that the invention is not limited to the specific embodiments described herein. Such embodiments are presented herein for illustrative purposes only. Additional embodiments will be apparent to persons skilled in the relevant art s based on the teachings contained herein.

The features and advantages of the present invention will become more apparent from the detailed description set forth below when taken in conjunction with the drawings in which like reference characters identify corresponding elements throughout. In the drawings like reference numbers generally indicate identical functionally similar and or structurally similar elements. The drawing in which an element first appears is indicated by the leftmost digit s in the corresponding reference number.

The present invention relates to a shader pipe array wherein there is a redundant shader pipe array with the ability to process data destined to a defective shader pipe. In embodiments of this invention defective shader pipes are identified and then through the use of a redundant shader switch data that was destined to the identified defective shader pipe is instead transferred via a horizontal path to a redundant shader pipe array where the shader pipe data is processed. The redundant shader switch also controls returning the processed redundant shader pipe data to the correct output column at the correct time in line with other output data. In this manner the effects of a defective shader pipe can be repaired and the redundant shader pipe array can be used to increase the initial yield at the point of manufacture or to extend the useful life of a device where a subsequent defective shader pipe would otherwise render the device unusable or operating in a degraded condition.

While specific configurations arrangements and steps are discussed it should be understood that this is done for illustrative purposes only. A person skilled in the pertinent art s will recognize that other configurations arrangements and steps can be used without departing from the spirit and scope of the present invention. It will be apparent to a person skilled in the pertinent art s that this invention can also be employed in a variety of other applications.

It is noted that references in the specification to one embodiment an embodiment an example embodiment etc. indicate that the embodiment described can include a particular feature structure or characteristic but every embodiment may not necessarily include the particular feature structure or characteristic. Moreover such phrases are not necessarily referring to the same embodiment. Further when a particular feature structure or characteristic is described in connection with an embodiment it would be within the knowledge of one skilled in the art to incorporate such a feature structure or characteristic in connection with other embodiments whether or not explicitly described.

While the present invention is described herein with reference to illustrative embodiments for particular applications it should be understood that the invention is not limited thereto. Those skilled in the art with access to the teachings provided herein will recognize additional modifications applications and embodiments within the scope thereof and additional fields in which the invention would be of significant utility.

Shader pipe array performs shader program calculations on input data received from shader pipe interpolation unit through RSS In . RSS In controls the flow of input data to shader pipe array . Sequencer controls the flow of data through shader pipe array as well as to identify a defective shader pipe within shader pipe array . In the event that there is no defective shader pipe the processed data continues through RSS Out to the shader pipe output .

In the event there is a defective shader pipe in shader pipe array sequencer notifies RSS In of the location of the defective shader pipe. RSS In then transfers the data destined to the defective shader pipe via a direct horizontal path from shader pipe array to redundant shader pipe array . Redundant shader pipe array is responsible to effectively repair the defective shader pipe by processing the shader pipe data originally targeted to be processed by the defective shader pipe. Once the shader pipe data is processed by redundant shader pipe array the data is returned to RSS Out that places the redundant shader pipe data at the correct location and at the proper time as it would have been if the shader pipe had not been found to be defective.

Shader pipe array and redundant shader pipe array can also issue a texture request to texture filter . In this instance texture filter generates appropriate addresses to cache system not shown that contains texel data associated with pixels.

The cache system after receiving the address will return the associated texel data to texture filter .

In another embodiment in the event that there is no defective shader pipe redundant shader pipe array can be used for other purposes including as an example additional rendering calculations on input data. As an alternative embodiment if special diagnostic testing e.g. software code or hardware testing circuitry identifies a shader pipe to be only intermittently defective or newly defective then the control register not shown can be configured such that the shader pipe data for the intermittently or newly defective shader pipe would only be transferred to the redundant shader array for processing.

In as an example if sequencer identifies the shader pipe located in shader pipe block SP 12 as being defective then RSS In would transfer the data originally destined to the defective pipe SP 12 via the horizontal path to redundant shader pipe array for processing. Once redundant shader pipe array processes the shader pipe data originally destined to the defective shader pipe the processed shader pipe data would be transferred from redundant shader pipe array to RSS Out .

The purpose of a delay buffer is to hold the data output of the vertical shader pipe column in shader pipe array for a sufficient period of time to allow redundant shader pipe array results to be re aligned to complete the processing of shader pipe data and to transfer the processed shader pipe data back to the appropriate column of RSS Out . As an example if sequencer indicates a defective shader pipe in vertical shader pipe column 2 specifically in block SP 2N then shader pipe data that was destined for the defective shader pipe SP 2N would be transferred to redundant shader pipe array via the horizontal path associated with row N illustrated in as . Redundant shader pipe array would process the shader pipe data and would then return the processed shader pipe data to RSS Out via the return path illustrated in as . In this example since the defective pipe was located in column 2 the processed shader pipe data would be returned to output buffer OB 2. Because of the delay buffer in this example DB 2 the output buffer in this case OB 2 would be able to insert the processed shader pipe data into the output stream for column 2 to take the place of the shader pipe data that was originally in SP 2N.

In one embodiment the data can be processed as a Single Instruction Multiple Data SIMD where the defective lane is replaced with a redundant unit where sequencer issues all the instructions necessary for processing including export instructions. Therefore RSS Out performs a re alignment of the data on an instruction basis. However in another embodiment the SIMD approach can be replaced by a Multiple Instruction stream Multiple Data stream MIMD where the components function in a parallel and independent manner.

In step the redundant shader pipe array returns the processed shader pipe data to the appropriate output column of the redundant shader switch. In step the redundant shader switch merges the processed shader pipe data from the shader array and redundant shader array in the appropriate output column.

The functions processes systems and methods outlined in can be implemented in software firmware or hardware or using any combination thereof. If programmable logic is used such logic can execute on a commercially available processing platform or a special purpose device.

As would be apparent to one skilled in the relevant art based on the description herein embodiments of the present invention can be designed in software using a hardware description language HDL such as for example Verilog or VHDL. The HDL design can model the behavior of an electronic system where the design can be synthesized and ultimately fabricated into a hardware device. In addition the HDL design can be stored in a computer product and loaded into a computer system prior to hardware manufacture.

It is to be appreciated that the Detailed Description section and not the Summary and Abstract sections is intended to be used to interpret the claims. The Summary and Abstract sections can set forth one or more but not all exemplary embodiments of the present invention as contemplated by the inventor s and thus are not intended to limit the present invention and the appended claims in any way.

The present invention has been described above with the aid of functional building blocks illustrating the implementation of specified functions and relationships thereof. The boundaries of these functional building blocks have been arbitrarily defined herein for the convenience of the description. Alternate boundaries can be defined so long as the specified functions and relationships thereof are appropriately performed.

The foregoing description of the specific embodiments will so fully reveal the general nature of the invention that others can by applying knowledge within the skill of the art readily modify and or adapt for various applications such specific embodiments without undue experimentation without departing from the general concept of the present invention. Therefore such adaptations and modifications are intended to be within the meaning and range of equivalents of the disclosed embodiments based on the teaching and guidance presented herein. It is to be understood that the phraseology or terminology herein is for the purpose of description and not of limitation such that the terminology or phraseology of the present specification is to be interpreted by the skilled artisan in light of the teachings and guidance.

While various embodiments of the present invention have been described above it should be understood that they have been presented by way of example only and not limitation. It will be apparent to persons skilled in the relevant art that various changes in form and detail can be made therein without departing from the spirit and scope of the invention. Thus the breadth and scope of the present invention should not be limited by any of the above described exemplary embodiments but should be defined only in accordance with the following claims and their equivalents.

