---

title: Secure desktop applications for an open computing platform
abstract: Example secure desktop applications for an open computing platform are disclosed. An example secure desktop method for a computing platform disclosed herein comprises establishing a secure communication connection between a secure desktop provided by the computing platform and a trusted entity, the secure communication connection being accessible to a trusted application authenticated with the secure desktop, the secure communication connection being inaccessible to an untrusted application not authenticated with the secure desktop, and securing data that is stored by the secure desktop in local storage associated with the computing platform, the stored data being accessible to the trusted application and inaccessible to the untrusted application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09342706&OS=09342706&RS=09342706
owner: AT&T Intellectual Property I, L.P.
number: 09342706
owner_city: Atlanta
owner_country: US
publication_date: 20150715
---
This patent arises from a continuation of U.S. patent application Ser. No. 13 290 852 now U.S. Pat. No. 9 100 235 which is entitled SECURE DESKTOP APPLICATIONS FOR AN OPEN COMPUTING PLATFORM and which was filed on Nov. 7 2011. U.S. patent application Ser. No. 13 290 852 is hereby incorporated by reference in its entirety.

This disclosure relates generally to computing platforms and more particularly to a secure desktop applications for an open computing platform.

Computing platforms such as personal computers tablets smartphones etc. are frequently used to access and work with sensitive data. Such sensitive data can include for example proprietary and or private data classified information financial data sensitive personal information etc. Modern computing platforms typically include an operating system layer a communication layer and a suite of applications. In many instances the computing platform used to access sensitive data is open such that there are no inherent restrictions on which applications can and cannot be installed on and executed by the platform s operating system.

Example secure desktop applications for an open computing platform are disclosed herein. An example method disclosed herein to implement a secure desktop for a computing platform includes establishing a secure communication connection between a trusted entity and the secure desktop provided by the computing platform. For example the secure communication connection can be an encrypted communication connection carried by a virtual private network established over an open and untrusted network such as the Internet. As described in greater detail below the secure communication connection can be accessible to a trusted application authenticated with the secure desktop whereas the secure communication connection can be inaccessible to an untrusted application not authenticated with the secure desktop. The example method also includes securing stored data that is stored by the secure desktop in local storage associated with the computing platform. As described in greater detail below the stored data can be accessible to the trusted application and inaccessible to the untrusted application.

In some examples the method further includes refusing inter process communication requests received by the secure desktop unless they are made via an application programming interface provided by the secure desktop. For example the secure desktop can expose the application programming interface to one or more trusted applications to enable the trusted application s but not any untrusted application s to access the secure communication connection and or to access the stored data that is stored securely by the secure desktop in the local storage. In some examples the application programming interface is exposed to a trusted application after the application becomes trusted through a successful authentication procedure.

In some examples the method establishes the secure communication connection between the trusted entity and the secure desktop in response to successful authentication of the secure desktop and or a user associated with the secure desktop by the trusted entity. Additionally or alternatively in some examples the method secures the stored data in local storage by using a set of keys e.g. such as one or more public encryption keys to perform just in time encryption of data to be written to the local storage and to perform just in time decryption of data to be read from the local storage. In such an example the method can also include detecting termination of the secure communication connection between the trusted entity and the secure desktop and revoking the set of keys when the termination of the secure communication connection is detected e.g. to prevent access to sensitive secured data after the secure connection with the trusted entity is terminated . In some examples the method waits until after expiration of a time period beginning when the termination of the secure communication connection is detected before revoking the set of keys e.g. to support off line access to the sensitive secured data for a period of time after the secure connection to the trusted entity is terminated . Additionally or alternatively in some examples the method can wait to revoke the set of keys until the secure desktop itself is to be terminated to permit access to the sensitive secured data while the secure desktop is active even if the secure communication connection has been terminated .

As noted above open computing platforms that have no inherent restrictions on which applications can and cannot be installed on and executed by the platform s operating system are often used to access sensitive data associated with a trusted entity such as an enterprise a bank etc. As such the risk of sensitive personal information and or identity information being compromised is already high and likely to increase. Open computing platforms that do not employ the example secure desktop applications disclosed herein can be vulnerable to malware and or other types of malicious code that can gain access to and compromise this sensitive data.

Some prior techniques to mitigate this threat involve using a virtual private network VPN to restrict access to the sensitive data available at a trusted entity and to secure the communication of this sensitive data between the trusted entity and the computing platform. For example to access sensitive data e.g. proprietary corporate data sensitive personal information etc. from a computing device an enterprise or more generally a trusted entity may mandate installation of a VPN client on the computing device. The VPN allows a trusted user e.g. an employee a trusted customer etc. to establish a secure connection between the trusted entity and the computing device over an open and untrusted network such as the Internet. However while the VPN protects against external intruders it offers no protection against malicious code that finds its way onto the open computing device. Because a VPN establishes a connection between the trusted entity and the device s operating system and not between the trusted entity and a specific application executing on the device a VPN connection can be open for use by any application that runs on the device including malicious code.

Other prior techniques to reduce the vulnerability of computing platforms to malicious code include virus scanners and removing administrative privileges for users such that they cannot install applications on the computing platforms themselves. However such measures can be costly inconvenient and only partially effective. For example without administrative privileges a user may be unable to install and use productivity software that does not need access to sensitive data such as travel assist software news applications hotel reservation applications dictionaries etc.

Unlike such prior techniques that attempt to mitigate the threat of unauthorized access to sensitive data disclosed example methods apparatus and articles of manufacture for providing a secure desktop environment also referred to as a trusted enclave environment in the computing platform can prevent untrusted applications from accessing a secure connection established between a trusted entity and the secure desktop on an otherwise open computing platform. In some examples the secure desktop environment disclosed herein can also prevent untrusted applications from being able to access and compromise sensitive data that is stored locally on the otherwise open computing platform. In some examples the secure desktop environment disclosed herein can further prevent untrusted applications from communicating with the secure desktop environment and or trusted applications executing in the context of the secure desktop environment.

Turning to the figures a block diagram of an example system that includes an example computing platform supporting an example secure desktop as disclosed herein is illustrated in . The computing platform can correspond to any type of computing device such as any personal computer laptop smartphone cellular phone computing pad personal digital assistant tablet personal computer personal communicator kiosk server etc. In the illustrated example the computing platform is an open computing platform in which there are few and possibly no inherent restrictions on which applications can and cannot be installed on and executed by the platform s operating system. As described in greater detail below the secure desktop is able to provide a secure area or trusted enclave in the otherwise open computing platform .

The computing platform includes a communication interface to provide at least one example network connection to an example communication network . In the illustrated example of the communication network is an open and untrusted network such as the Internet. The network connection can be established using any type of wired and or wireless technology capable of providing connectivity to the communication network . For example the network connection can correspond to a fiber cable and or digital subscriber line connection to an Internet service provider ISP one or more mobile e.g. cellular data channels conforming to any type of mobile network communication protocol such as the 3Generation Partnership Project 3GPP Long Term Evolution LTE wireless communication standard the General Packet Radio Service GPRS for second generation 2G protocol the Wideband Code Division Multiple Access W CDMA based third generation 3G protocol the Universal Mobile Telecommunication System UMTS protocol the Global System for Mobile Communications GSM protocol etc. a wireless local area network WLAN connection a Bluetooth connection etc. In the illustrated example the network connection is also open and untrusted such that any application executing on the computing platform can access the network connection . As used herein an application can include for example any type of computing application or app program code procedure process function widget etc. able to be installed on and or executed or otherwise performed by the computing platform .

For example the computing platform of the illustrated example includes and is able to execute example untrusted applications U APP U APP and U APP. Although three 3 untrusted applications U APP U APP and U APP are illustrated in the example of the computing platform can support any appropriate number of untrusted applications. Untrusted applications include for example applications that do not undergo authentication and or whose origins may be unknown. As such one or more of the untrusted applications U APP U APP could be malware and or other malicious or unauthorized code that for example attempts to gain access to and comprise sensitive data stored on the computing platform .

In the illustrated example of the untrusted applications U APP U APP executing on the computing platform can access example storage of the computing platform . As such the untrusted applications U APP U APP can read data from and write data to the storage which could enable malicious code to retrieve and or overwrite e.g. corrupt unprotected sensitive data stored in the storage . The storage can correspond to any type or combination of temporary and or permanent storage media such as one or more of cache volatile memory flash memory local disk storage etc. including but not limited to the mass storage devices and or volatile memory in the example processing system of which is described in greater detail below. Although one storage element is illustrated in the example of the computing platform can support an appropriate number of storage elements .

Additionally in the illustrated example of one or more of the untrusted applications U APP U APP can establish connections to the untrusted network . For example the untrusted applications U APP can establish an example communication connection such as a data stream a data session etc. with the untrusted network via the communication connection as shown. In the example of the untrusted applications U APP U APP can also communicate or in other words exchange data with each other via for example inter process connections A C as shown. The inter process connections A C can be implemented by inter process communications memory area mappings signals etc. and or any other type s of inter process connection s supported by the operating system and or storage of the computing platform .

As mentioned above the computing platform includes the secure desktop also referred to as a secure desktop application a trusted enclave application etc. to provide a secure area or trusted enclave in the otherwise open computing platform . In some examples from the perspective of the open computing platform there may be no noticeable difference between the secure desktop and the untrusted applications U APP U APP e.g. in terms of their interaction with the platform s operating system . However from the perspective of an example trusted entity with which the computing platform is to communicate via the untrusted network the secure desktop is considered to be a trusted application. Trusted applications include for example applications that undergo authentication and or whose origins can otherwise be known. The trusted entity can correspond to any enterprise business server computer processing cloud etc. accessible by the computing platform and that employs authentication and or other trusted computing techniques to establish trusted communications and or data access for users applications devices etc. that access the trusted entity .

Because the secure desktop is a trusted application from the perspective of the trusted entity the secure desktop can establish an example secure communication connection with the trusted entity via the communication connection as shown in and described in greater detail below. For example the secure communication connection can correspond to one or more encrypted data streams data sessions etc. employing any type of data encryption such as encryption according to the data encryption standard DES advanced encryption standard AES etc. In the illustrated example the secure desktop provides the communication endpoint for the secure connection on the computing platform . As such the secure connection is accessible only via the secure desktop . This is unlike prior computing platforms in which a secure connection such as a virtual private network VPN is terminated at the operating system and thus could be accessed by any application via the operating system. However the secure communication connection could be carried by a VPN established between the computing platform and the trusted entity via the communication connection . As described in greater detail below to prevent the untrusted applications U APP U APP from being able to access the secure connection the secure desktop does not exchange data with the untrusted applications U APP U APP which is illustrated in by a line having an X drawn through it . Because the untrusted applications U APP U APP cannot exchange data with the secure desktop and the secure desktop provides the communication endpoint for the secure connection the untrusted applications U APP U APP also cannot access the secure connection between the secure desktop and the trusted entity which is illustrated in by a line having an X drawn through it . In some examples the secure desktop also provides local data security as described in greater detail below to prevent the untrusted applications U APP U APP from being able to access data stored by the secure desktop in the otherwise unsecured local storage of the computing platform .

Although the example computing platform is illustrated in as supporting one secure desktop providing one secure connection to one trusted entity via one network the secure desktop can be used to provide multiple secure connections to the same or different trusted entities over the same or different networks. Furthermore multiple secure desktops can be included in or executed by the computing platform to provide for example different respective secure connections to different respective trusted entities .

A block diagram of an example implementation of the secure desktop of is illustrated in . Similar elements in are labeled with the same reference numerals. The secure desktop of includes an example secure connection endpoint to establish the secure connection with the trusted entity and to provide the endpoint on the computing platform for the secure connection . For example the secure connection established by the secure connection endpoint can be any type of secure connection implemented using any type of secure connection technology such as public key encryption symmetric key encryption certificates two factor authentication etc. In some examples the secure connection is established after the secure connection endpoint has authenticated the secure desktop and or a user of the secure desktop with the trusted entity . For example the secure connection endpoint can provide authentication information for the secure desktop to the trusted entity to enable the trusted entity to authenticate the secure desktop and when authentication is successful permit the secure connection endpoint of the secure desktop to establish the secure connection . Examples of such authentication information for the secure desktop include but are not limited to digital certificate s and or signature s associated with the secure desktop an identification checksum associated with the secure desktop signed identification information etc. Additionally or alternatively the secure connection endpoint can provide authentication information for a user of the secure desktop to the trusted entity to enable the trusted entity to authenticate the user and when authentication is successful permit the secure connection endpoint of the secure desktop to establish the secure connection . Examples of such authentication information for a user of the secure desktop include but are not limited to username and password information biometric information etc. and or other information to support one two or multiple factor authentication.

The secure desktop of also includes an example encryption processor to store local data securely in the storage for use by the secure desktop . In some examples sensitive data used by the secure desktop and or one or more trusted applications executing in the context of the secure desktop as described in greater detail below is stored at the trusted entity in a network cloud etc. However the secure desktop also supports storing data locally e.g. in the computing platform in a secure manner such that any sensitive data included in the stored local data is secure. Thus the encryption processor protects the local data stored by the secure desktop from being read and compromised by for example one or more of the untrusted applications U APP U APP. For example the encryption processor can use any type of key based encryption e.g. public key encryption symmetric key encryption etc. to secure the local data in the storage . In some examples the encryption processor can provide just in time encryption of the local data when the local data is being written to the storage by the secure desktop and or one or more trusted applications executing in the context of the secure desktop . In such an example the encryption processor can also provide just in time decryption of the local data when the local data is being read from the storage by the secure desktop and or one or more trusted applications executing in the context of the secure desktop . Because untrusted applications such as the applications U APP U APP do not possess or otherwise have access to the encryption key s used by the encryption processor to decrypt and or encrypt the encrypted local data the encrypted local data is secure and protected from unauthorized or otherwise improper access by any untrusted application.

In some examples the encryption processor generates the set of one or more encryption keys to be used to encrypt the local data using any type of key generation algorithm using any appropriate input information such as user information e.g. username password etc. provided by a user biometric data data obtained from a security token etc. or any combination thereof. In some examples the trusted entity associated with a particular secure connection is responsible for managing and providing the set of one or more encryption keys to be used by the encryption processor to encrypt local data associated with that particular trusted entity. In such examples the encryption processor can receive the set of keys for encrypting the local data from the appropriate trusted entity over the secure connection that has already been established with the trusted entity . The encryption processor uses the generated received set of keys to perform just in time encryption of data related to the trusted entity that to be written to the local storage and to perform just in time decryption of this data when it is to be read from the local storage . In some examples when the secure desktop detects that the secure connection with the trusted entity has terminated e.g. voluntarily by the secure desktop and or the trusted entity or involuntarily due to one or more error conditions the encryption processor can revoke e.g. by randomization or other intentional overwriting and or corruption of the stored key s to make the key s unusable or otherwise discard the set of encryption keys to protect the local data from any subsequent access attempts. Additionally or alternatively in some examples the encryption processor can wait to revoke the set of keys until the secure desktop itself is to be terminated to permit access to the sensitive secured data while the secure desktop is active even if the secure connection has been terminated . When the computing platform is a portable or shared platform the foregoing feature s can be especially useful for protecting sensitive data included in encrypted local data when the computing platform is lost or being used by a different user.

In some examples the encryption processor may wait until after expiration of time period beginning when termination of the secure connection is detected to revoke or otherwise discard the set of encryption keys used to encrypt the local data . In this way the encryption processor can support an associated period of time during which off line access to the encrypted local data is permitted. The time period for off line access can be a configuration parameter of the secure desktop a parameter provided by the trusted entity a parameter entered by a user etc.

The secure desktop of also includes an example application programming interface API to enable one or more trusted applications to access the secure desktop and thereby access the secure connection and the encrypted local data provided by the secure desktop . In other words the API provides a plug in interface via which trusted application s e.g. trusted plug in extensions can execute in the context of the secure desktop . In this way the API supports extending the capabilities of the secure desktop over time. The API can be implemented as part of a software development kit SDK and or any other type of API architecture.

In the illustrated example the API includes an example communication API an example storage API an example inter process API and an example authentication API . In the example of the communication API provides trusted applications with access to the secure connection provided by the secure desktop . For example the communication API can be used by a trusted application to provide data to the secure connection endpoint that is to be sent to the trusted entity via the secure connection . The communication API can also be used by the trusted application to obtain data from the secure desktop that has been received from the trusted entity via the secure connection and the secure connection endpoint .

In the example of the storage API provides trusted applications with access to the encrypted local data stored in the storage . For example the storage API can be used by a trusted application to provide data to the secure desktop that is to be included by the encryption processor in the secure local data written to the storage . The storage API can also be used by the trusted application to retrieve data from the secure desktop that is read by the encryption processor from the secure local data stored in the storage .

In the example of the inter process API provides trusted applications with access to other trusted applications executing in the context of the secure desktop . For example the inter process API can be used by a trusted application to address and communicate data to another trusted application already associated with the secure desktop . The inter process API can also be used by the trusted application to address and receive data from another trusted application already associated with the secure desktop .

In some examples the secure desktop does not expose the API or at least some portions of the API to an application until the application has been authenticated by the secure desktop and thereby becomes a trusted application. This feature can prevent untrusted applications such as the applications U APP U APP from accessing the API and gaining access to the secure connection the encrypted local data and or one or more trusted applications. For example the secure desktop may expose just the authentication API to an application requesting access to thereby provide an interface via which the application can be authenticated. The application can then use the authentication API to provide authentication information such as a digital certificate and or signature associated with the application an identification checksum associated with the application signed identification information etc. Upon successful authentication of the application the secure desktop considers the application to be a trusted application and exposes the rest of the API or one or more of the other API components to this trusted application.

In the illustrated example the trusted applications T APP and T APP use for example the communication API exposed by the secure desktop to interface with the secure connection endpoint of the secure desktop and thereby gain access to the secure connection with the trusted entity . In these interfaces between the trusted applications T APP and T APP and the secure connection endpoint are depicted by lines and . Additionally in the example of the trusted applications T APP T APP and T APP use for example the storage API exposed by the secure desktop to interface with the encryption processor and thereby gain access to the encrypted local data stored in the otherwise unsecured storage of the computing platform . In these interfaces between the trusted applications T APP T APP and T APP and the encryption processor are depicted by lines and . In the illustrated example of the trusted applications T APP T APP and T APP also use for example the inter process API exposed by the secure desktop to interface and exchange data amongst each other. In the inter process interfaces between the trusted applications T APP T APP and T APP are depicted by lines and . 

While example manners of implementing the secure desktop have been illustrated in one or more of the elements processes and or devices illustrated in may be combined divided re arranged omitted eliminated and or implemented in any other way. Further the example secure connection endpoint the example encryption processor the example API the example communication API the example storage API the example inter process API the example authentication API and or more generally the example secure desktop of may be implemented by hardware software firmware and or any combination of hardware software and or firmware. Thus for example any of the example secure connection endpoint the example encryption processor the example API the example communication API the example storage API the example inter process API the example authentication API and or more generally the example secure desktop could be implemented by one or more circuit s programmable processor s application specific integrated circuit s ASIC s programmable logic device s PLD s and or field programmable logic device s FPLD s etc. When any of the apparatus or system claims of this patent are read to cover a purely software and or firmware implementation at least one of the example secure desktop the example secure connection endpoint the example encryption processor the example API the example communication API the example storage API the example inter process API and or the example authentication API are hereby expressly defined to include a tangible computer readable medium such as a memory digital versatile disk DVD compact disk CD etc. storing such software and or firmware. Further still the example secure desktop of may include one or more elements processes and or devices in addition to or instead of those illustrated in and or may include more than one of any or all of the illustrated elements processes and devices.

Flowcharts representative of example machine readable instructions that may be executed to implement the example secure desktop the example secure connection endpoint the example encryption processor the example API the example communication API the example storage API the example inter process API and or the example authentication API are shown in . In these examples the machine readable instructions represented by each flowchart may comprise one or more programs for execution by a processor such as the processor shown in the example processing system discussed below in connection with . Alternatively the entire program or programs and or portions thereof implementing one or more of the processes represented by the flowcharts of could be executed by a device other than the processor e.g. such as a controller and or any other suitable device and or embodied in firmware or dedicated hardware e.g. implemented by an ASIC a PLD an FPLD discrete logic etc. . Also one or more of the machine readable instructions represented by the flowchart of may be implemented manually. Further although the example machine readable instructions are described with reference to the flowcharts illustrated in many other techniques for implementing the example methods and apparatus described herein may alternatively be used. For example with reference to the flowcharts illustrated in the order of execution of the blocks may be changed and or some of the blocks described may be changed eliminated combined and or subdivided into multiple blocks.

As mentioned above the example processes of may be implemented using coded instructions e.g. computer readable instructions stored on a tangible computer readable medium such as a hard disk drive a flash memory a read only memory ROM a CD a DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term tangible computer readable medium is expressly defined to include any type of computer readable storage and to exclude propagating signals. Additionally or alternatively the example processes of may be implemented using coded instructions e.g. computer readable instructions stored on a non transitory computer readable medium such as a flash memory a ROM a CD a DVD a cache a random access memory RAM and or any other storage media in which information is stored for any duration e.g. for extended time periods permanently brief instances for temporarily buffering and or for caching of the information . As used herein the term non transitory computer readable medium is expressly defined to include any type of computer readable medium and to exclude propagating signals. Also as used herein the terms computer readable and machine readable are considered equivalent unless indicated otherwise.

Example machine readable instructions that may be executed to implement the secure desktop of are represented by the flowchart shown in . With reference to the preceding figures the machine readable instructions of begin execution at block at which the secure desktop provides an endpoint for the secure connection with the trusted entity as described above. Example machine readable instructions that may be used to implement the processing at block are illustrated in which is described in greater detail below. At block the secure desktop secures the local data including any sensitive data associated with the trusted entity that is used by the secure desktop and or any trusted application executing in the context of the secure desktop as described above. Example machine readable instructions that may be used to implement the processing at block are illustrated in which is described in greater detail below. At block the secure desktop provides its API to trusted applications to support plug in extension of the functionality of the secure desktop as described above. Example machine readable instructions that may be used to implement the processing at block are illustrated in which is described in greater detail below.

Example machine readable instructions that may be executed to implement the secure connection endpoint of the secure desktop of and or used to implement the processing at block of are represented by the flowchart shown in . With reference to the preceding figures the machine readable instructions of begin execution at block at which the secure connection endpoint of the secure desktop provides authentication information to the trusted entity e.g. via an untrusted communication session over the untrusted network to enable the trusted entity to authenticate the secure desktop and or a user of the secure desktop as described above. If authentication is successful block then at block the secure connection endpoint generates a set of one or more session keys e.g. public encryption keys symmetric encryption keys etc. to be used to establish the secure connection with the trusted entity . For example the secure connection endpoint can use any type of key generation algorithm using any appropriate input information known by both the trusted entity and the secure desktop such that both the secure connection endpoint and the trusted entity can independently generate the session key s for establishing the secure connection . Such input information can include for example pre exchanged user information e.g. username password etc. and or biometric data provided by a user data associated with a security token provided by the trusted entity to a user of the computing platform etc. or any combination thereof.

At block the secure connection endpoint uses the generated session key s to establish the secure connection over the untrusted network connection and the untrusted network as described above. When the communication session between the secure desktop and the trusted entity ends block at block the secure connection endpoint revokes e.g. via randomization or other intentional overwriting and or corruption of the stored key s to make the key s unusable or otherwise discards the session key s and closes the secure connection with the trusted entity .

Example machine readable instructions that may be executed to implement the encryption processor of the secure desktop of and or used to implement the processing at block of are represented by the flowchart shown in . With reference to the preceding figures the machine readable instructions of begin execution at block at which the secure desktop provides authentication information to the trusted entity e.g. via an untrusted communication session over the untrusted network to enable the trusted entity to authenticate the secure desktop and or a user of the secure desktop as described above. If authentication is successful block then at block the secure connection endpoint obtains a set of one or more security keys e.g. public encryption keys symmetric encryption keys etc. to be used by the encryption processor to secure the local data used by the secure desktop and associated with the trusted entity as described above. In some examples the processing at blocks of can be omitted and the security key s obtained by the secure desktop at block of may be the same as the session key s generated by the secure desktop at block of .

At blocks and the encryption processor of the secure desktop uses the security key s to perform just in time encryption of local data to be written by the secure desktop or a trusted application executing in the context of the secure desktop to the storage and to perform just in time decryption of the local data to be read by the secure desktop or a trusted application executing in the context of the secure desktop from the storage as described above. At block the encryption processor determines whether the secure connection has been terminated and thus the current session between the secure desktop and the trusted entity has ended. If the current session between the secure desktop and the trusted entity has ended block then at block the encryption processor determines whether off line data security is supported for local data associated with this particular trusted entity . If off line data security is supported block and thus off line access of the secure local data associated with this trusted entity is permitted then at block the encryption processor initializes an off line session timer or similar time counting mechanism to enable determination of whether a time period for off line data access has expired as described above. After the time period has expired block or if off line data security is not supported block then at block the encryption processor revokes or otherwise discards the security key s associated with this trusted entity to thereby prevent subsequent access to the local data associated with the trusted entity .

Example machine readable instructions that may be executed to implement the API of the secure desktop of and or used to implement the processing at block of are represented by the flowchart shown in . With reference to the preceding figures the machine readable instructions of begin execution at block at which the secure desktop receives a request from an application to initiate a data interchange with the secure desktop . At block the secure desktop exposes the authentication API of its API to the application to enable the application to provide authentication information to the secure desktop as described above. At block the secure desktop authenticates the application using the authentication information received via the authentication API . If the application is an untrusted application such as the untrusted application U APP then authentication is unsuccessful block and at block the secure desktop refuses the application s request to initiate the data interchange.

However if the application is a trusted application such as the trusted application T APP then authentication is successful block and at block the secure desktop exposes the communication API of its API to enable the trusted application to access the secure communication endpoint of the secure desktop and thereby access the secure connection with the trusted entity as described above. At block the secure desktop exposes the storage API of its API to enable the trusted application to access the secure local data stored in the storage as described above. At block the secure desktop exposes the inter process API of its API to enable the trusted application to communicate with other trusted applications such as the trusted applications T APP and or T APP executing in the context of the secure desktop .

The system of the instant example includes a processor such as a general purpose programmable processor. The processor includes a local memory and executes coded instructions present in the local memory and or in another memory device. The processor may execute among other things the machine readable instructions represented in . The processor may be any type of processing unit such as one or more Intel microprocessors from the Pentium family the Itanium family and or the XScale family one or more microcontrollers from the ARM and or PICO families of microcontrollers etc. Of course other processors from other families are also appropriate.

The processor is in communication with a main memory including a volatile memory and a non volatile memory via a bus . The volatile memory may be implemented by Static Random Access Memory SRAM Synchronous Dynamic Random Access Memory SDRAM Dynamic Random Access Memory DRAM RAMBUS Dynamic Random Access Memory RDRAM and or any other type of random access memory device. The non volatile memory may be implemented by flash memory and or any other desired type of memory device. Access to the main memory is typically controlled by a memory controller not shown .

The processing system also includes an interface circuit . The interface circuit may be implemented by any type of interface standard such as an Ethernet interface a universal serial bus USB and or a third generation input output 3GIO interface.

One or more input devices are connected to the interface circuit . The input device s permit a user to enter data and commands into the processor . The input device s can be implemented by for example a keyboard a mouse a touchscreen a track pad a trackball an isopoint and or a voice recognition system.

One or more output devices are also connected to the interface circuit . The output devices can be implemented for example by display devices e.g. a liquid crystal display a cathode ray tube display CRT by a printer and or by speakers. The interface circuit thus typically includes a graphics driver card.

The interface circuit also includes a communication device such as a modem or network interface card to facilitate exchange of data with external computers via a network e.g. an Ethernet connection a digital subscriber line DSL a telephone line coaxial cable a cellular telephone system etc. .

The processing system also includes one or more mass storage devices for storing machine readable instructions and data. Examples of such mass storage devices include floppy disk drives hard drive disks compact disk drives and digital versatile disk DVD drives. In some examples the mass storage device may implement the storage . Additionally or alternatively in some examples the volatile memory may implement the storage .

The coded instructions of may be stored in the mass storage device in the volatile memory in the non volatile memory in the local memory and or on a removable storage medium such as a CD or DVD .

At least some of the above described example methods and or apparatus are implemented by one or more software and or firmware programs running on a computer processor. However dedicated hardware implementations including but not limited to application specific integrated circuits programmable logic arrays and other hardware devices can likewise be constructed to implement some or all of the example methods and or apparatus described herein either in whole or in part. Furthermore alternative software implementations including but not limited to distributed processing or component object distributed processing parallel processing or virtual machine processing can also be constructed to implement the example methods and or apparatus described herein.

To the extent the above specification describes example components and functions with reference to particular standards and protocols it is understood that the scope of this patent is not limited to such standards and protocols. For instance each of the standards for Internet and other packet switched network transmission e.g. Transmission Control Protocol TCP Internet Protocol IP User Datagram Protocol UDP IP HyperText Markup Language HTML HyperText Transfer Protocol HTTP represent examples of the current state of the art. Such standards are periodically superseded by faster or more efficient equivalents having the same general functionality. Accordingly replacement standards and protocols having the same functions are equivalents which are contemplated by this patent and are intended to be included within the scope of the accompanying claims.

Additionally as used herein when the phrase at least is used as a preamble of a claim it is open ended in the same manner as the term comprising is open ended.

Furthermore although this patent discloses example systems including software or firmware executed on hardware it should be noted that such systems are merely illustrative and should not be considered as limiting. For example it is contemplated that any or all of these hardware and software components could be embodied exclusively in hardware exclusively in software exclusively in firmware or in some combination of hardware firmware and or software. Accordingly while the above specification described example systems methods and articles of manufacture the examples are not the only way to implement such systems methods and articles of manufacture. Therefore although certain example methods apparatus and articles of manufacture have been described herein the scope of coverage of this patent is not limited thereto. On the contrary this patent covers all methods apparatus and articles of manufacture fairly falling within the scope of the claims either literally or under the doctrine of equivalents.

