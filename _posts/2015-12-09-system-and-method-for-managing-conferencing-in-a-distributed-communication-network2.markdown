---

title: System and method for managing conferencing in a distributed communication network
abstract: Systems and methods for a conferencing system. Responsive to a new conference request received at a conference orchestration service, participants of the conference and participant regions for each determined participant are determined. A mixer topology is generated that specifies an assignment of each determined participant to at least one input channel of a plurality of mixers. A mixer state manager generates the mixer topology based on the determined participant regions and at least one regional association of a mixer. Media of each determined participant is routed to the assigned at least one input channel according to the generated mixer topology by using the conference orchestration service. The mixer state manager generates the topology responsive to a request provided by the conference state manager. The conference orchestration service receives the generated mixer topology from the mixer state manager via the conference state manager.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09553900&OS=09553900&RS=09553900
owner: Twilio, Inc.
number: 09553900
owner_city: San Francisco
owner_country: US
publication_date: 20151209
---
This application is a continuation of U.S. patent application Ser. No. 14 791 759 filed 6 Jul. 2015 which claims the benefit of U.S. Provisional Application Ser. No. 62 021 641 filed on 7 Jul. 2014 which is incorporated in its entirety by this reference.

This invention relates generally to the telephony field and more specifically to a new and useful system and method for managing conferencing in a distributed communication network.

In recent years innovations in web application and Voice over Internet Protocol VOIP have brought about considerable changes to the capabilities offered through traditional phone and communication services. In some distributed or cloud based telephony systems the routing of audio video or other media files can be determined or limited by the location and or availability of the appropriate computing resources. In the case of conference calls the size of the conference the quality of the media communication and capability to support all regions can be limited and can be resource prohibitive. In some cases conferencing systems are replicated in different regions. But such solutions do not solve inter regional communication issues and further creates division in infrastructure which can complicate maintenance and further improvement. Thus there is a need in the telephony field to create a new and useful system and method for managing conferencing in a distributed communication network. This invention provides such a new and useful system and method.

The following description of preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a system for operating scalable conferencing services of a preferred embodiment can include a conference management system and a set of distributed mixing resources . The conference management system preferably includes a conferencing orchestration service a conference state manager and a mixer state manager . The system functions to provide a high quality conferencing system. The system preferably additionally provides regional accessibility scalability and efficiency. The system is preferably architected such that communication quality and performance can be high across a wide range of regional areas. The scalability preferably enables the system to scale out to a large number of participants spanning multiple mixer instances as well as supporting multiple distinct conferences. The system efficiency preferably achieves resource usage that can be substantially proportional to the number of participants.

The system is preferably applied in a communication platform e.g. the communicating platform of . In one implementation the system is preferably applied in a communication application platform such as the one described in U.S. Pat. No. 8 306 021 Issued on 6 Nov. 2012 which is hereby incorporated in its entirety by this reference. A communication application platform can execute business logic during a communication session such that a communication state can be directed by application logic and or API requests. The system is preferably used for synchronous media communication such as voice communication. Voice communication may include communication legs over PSTN SIP WebRTC over the top proprietary IP communications and or any suitable communication protocol. Other forms of media such as video may additionally be supplemented or executed using substantially similar systems. For example audio channels of a video communication session may use the system while individual video media channels are individually routed. In another variation video may be composited and mixed into a single media stream in a manner similar to the audio. Within the communication platform the communication is preferably divided into media and signaling and a single communication protocol such as SIP may be used for a consistent transport protocol of the signaling within the platform. Other communication protocols may be connected on the edge of the platform or at any suitable location.

In media and signaling protocols such as SIP the signaling portion of the communication preferably contributes control directives and a mechanism to communicate various aspects concerning a communication session and the media portion of the communication is preferably the channel through which media is transferred. The media portion can be particularly susceptible to latency issues caused by the routing path. The signaling route and the media route can diverge in their network topology.

The conference management system preferably functions to control state of the conferencing system . As one aspect of the system the system is preferably distributed across multiple regional infrastructure systems. Having a physical system presence in different areas can promote higher quality communications. The management is preferably centralized to a single set of resources but may alternatively be replicated in other regional instances. As mentioned above the conference management system preferably includes a conferencing orchestration service a conference state manager and a mixer state manager . The communication platform may provide other services that function to establish individual communication sessions which may be connected in or transitioned to a conferencing state at least partially handled by the system . For example a call router e.g. of may facilitate handing incoming calls making outgoing calls and controlling communication state e.g. state as directed by a communication application .

The conferencing orchestration service of the preferred embodiment functions to orchestrate the conferencing service on a signaling level. The conferencing orchestration service preferably maintains a communication session model of the conference. The conference orchestration service preferably maintains the signaling dialog with communication services e.g. the call router of of the communication platform e.g. of . Requests for a new conference are preferably sent to and established through the conferencing orchestration service . The conferencing orchestration service preferably has a media signaling protocol communication interface with the call router e.g. or other suitable communication services of the communication platform e.g. . In one preferred implementation the conference orchestration service maintains a SIP dialog with a call router e.g. and through a back to back user agent B2BUA mechanism redirects the back leg of a communication to either the call router e.g. or to a mixer channel e.g. a mixer channel of the distributed mixing resources . Redirecting to a call router e.g. may be used to put a communication session into a wait state by playing a wait song or processing any suitable wait state application. The conferencing orchestration service is preferably fronted by load balancing mechanism such that any new incoming requests e.g. SIP INVITES are distributed to a new server using a round robin policy.

Individual nodes in the conferencing orchestration service can additionally include an API that enables the conference state manager to notify the conference orchestration service in of state changes. For example notifications such as conference starting please dial in or conference ending or participant joining leaving may be sent through the API. The API is preferably an internal REST API but any suitable API may alternatively be used. The conferencing orchestration service preferably delegates management of conference state to the conference state manager . The conference state manager can then direct the conferencing orchestration service to negotiate media with assigned mixers e.g. mixers of the distributed mixing resources .

The conference state manager of the preferred embodiment functions to manage the state of the conferences in a highly available manner. The state of conferences is preferably global across multiple communication platform regions. The conference state may reference conference participants and mixers in different regions. The conference state manager preferably maintains an application model of a conference. The conference state manager preferably stores a data object representation of a conference. The data model of a conference may include a list of participants duration of the conference and state of the conference e.g. waiting for participants in session completed and the like . The conference state manager preferably includes an interface to an Application Program Interface API e.g. the API of the communication platform e.g. which may be an access point for programmatically inspecting and or modifying the state of a conference. The conference state manager preferably includes application layer communication interfaces to the API e.g. the conference orchestration service and the mixer state manager . The application layer communication interfaces preferably use HTTP S but may alternatively use any suitable application layer protocol. The conference state manager can relay changes in state of a conference to the conference orchestration service which can make suitable changes to the managed media services. The conference state manager additionally utilizes the mixer state manager to setup and determine mixer setup for a given conference. The conference state manager may be fronted by a load balancer.

The mixer state manager of the preferred embodiment functions to monitor and control the set of mixer resources e.g. mixer resources of the distributed mixing resources . The set of mixers may be distributed across multiple regions e.g. Region Region and Region of and each regional set of mixers may have various amounts of mixing capacity and number of running instances. Additionally each mixer may be in different states depending on whether the mixer is serving a conference multiple conferences or idle. The mixer state manager preferably manages a data model of the mixer resources. The mixer state manager may store the mixer state information across a distributed storage system such that access to the information is highly available. As described above an application layer communication interface preferably exists between the conference state manager and the mixer state manager . The mixer state manager additionally include a communication control protocol interface with the set of mixers e.g. mixers of the distributing mixing resources such as SIP or at least some signaling portion of a media and signaling protocol. The mixer state manager is preferably configured to be responsive to requests of the conference state manager . The mixer state manager can provide information about the current state of mixers e.g. mixers of the distributing mixing resources and additionally allocate mixers. The mixer state manager can assign participants to particular mixers. The mixer state manager can preferably apply regional and quality based heuristics in assigning mixers. Additionally the mixer state manager can additionally consider the distribution of participants according to the partitions of a mixer instance. A mixer may fail at times and the mixer state manager can detect the mixer failure for a conference session allocate a new mixer and re invite participants to recover from the failure.

The set of mixers e.g. mixers of the distributing mixing resources of the preferred embodiment functions to provide a set of resources that can merge bridge or otherwise combine media streams to allow multiple legs in a communication. There is preferably a plurality of mixer instances in the set of mixers. The set of mixers may additionally be distributed across distinct regional areas. A subset of mixers can exist in a first region e.g. Region of and a second subset of mixers can exist in a second region e.g. Region of . A region preferably describes distinct computer cluster location where a set of resources of the communication platform is instantiated. For example a first region may exist on the West coast while a second region exists in the East cost. As media may be sensitive to latency from routing between regions a set of regional subsystems can facilitate improving communication quality and in particular reducing media latency.

Mixers can preferably be used in isolation for a conference one mixer facilitates completing mixing for every participant in a conference. Alternatively mixers may be used in combination to facilitate mixing for all participants. Mixers may be used in series. For example a first mixer may mix three of the eight participants in a conference a second mixer may mix another three and a third may mix two remaining participants. The three mixers are preferably set to be bridged for those partitions so that all eight participants are appropriately mixed. The mixers may be arranged in a hierarchical or network formation. For example two mixers may mix media streams of participants and the output media stream from each of these two child mixers can be mixed by a parent mixer. Such mixing architecture can be used to flexibly use the capacity of the mixing resources.

The system e.g. of the preferred embodiment is preferably operable in at least two regions which are connectable through the media resources of the system. Various provider services in the regions can facilitate connecting media streams to outside endpoints e.g. PSTN phones SIP phones or IP communication devices . The regions are preferably selected to serve endpoints local to that region. The regions may be separated by globally significant distance. A globally significant distance in this document may be understood to be a transmission distance greater than 2000 miles and more preferably greater than 5000 miles. For example the first region may be on the West coast of the US and the second region may be on the East coast separated by a geographic distance greater than 2500 miles. In another example the first region may be in the United States and the second region may be in Europe separated by a distance greater than 3500 miles. The first region and the second region are not limited to functioning with such distance ranges and may be separated by a distance less than 2000 miles or exceeding 5000 miles.

A mixer e.g. a mixer of mixing resources of a preferred embodiment functions to mix or combine at least two sources of synchronous communication. In particular audio media streams are combined into a single audio stream. A mixer is preferably a service that includes a communication interface and processing capabilities. In one preferred implementation the communication interface is an SIP interface which may be used in interfacing with the communication orchestration service in other mixers in the same region mixers in other regions and or other communication resources such as recording services and communication gateways which may connect to destination endpoints .

The mixer may have a participant input capacity which limits the number of participants that can be mixed. The mixer preferably includes a number of participant input channels. For example a mixer may be able to handle up to 500 participants. The number of participant input channels can additionally be distributed across distinct conference sessions such that one mixer instance can serve multiple conferences. A mixer preferably outputs mixed media which may be directed to endpoint connections and or other mixers. A mixer preferably has an identifier such that media can be directed to specific mixers as assigned by the mixer state manager . Various other capabilities may be built into a mixer. The mixers may additionally include media mixing capability that allows a manager to listen to a participant leg i.e. the manager is a silent participant . Additionally the mixer may include mixing capability to segment portions of audio to subset of participants. For example one participant may be able to privately converse with one other participant without other participants hearing their conversation.

The system e.g. can include resources or functionality modules that can provide recording transcription text to speech services DTMF input speaker identification service e.g. which participant is speaking when or any suitable media service.

As shown in a method for operating scalable conferencing services of a preferred embodiment can include receiving a request for a new conference S allocating mixers of the conference S and negotiating media across the allocated mixers S. More specifically a mixer topology is created according to regional associations and restrictions. Then when negotiating media across the allocated mixers participants are allocated to input channels of a mixer and mixers are bridged to form a determined mixer topology.

The method functions to provide a high quality conferencing service. The method may additionally promote regional accessibility scalability and efficiency. The scalability preferably enables the method to facilitate conferences with a large number of participants spanning multiple mixer instances as well as supporting multiple distinct conferences. The system efficiency preferably achieves resource usage that can be substantially proportional to the number of participants. The method is preferably implemented by the system e.g. described above but may alternatively be implemented by any suitable system.

The method may be applied in a variety of conferencing scenarios. The method preferably accounts for different scaling and allocation scenarios so as to provide high capacity and high quality conferencing. The method can be used in conferencing scenarios such as when the participants are geographically distributed where the conference is not started until all participants join where a conference can organically grow without a priori knowledge of the identity or number of participants and other suitable scenarios.

Block S which includes receiving a request for a new conference functions to receive some directive to create a conference. The request can be part of an asynchronous API request. The request may alternatively be a response to the routing of communication. For example a communication session may hit a conference orchestration service e.g. of and be placed in a conference. While an endpoint and corresponding communication session is waiting to join a conference session the communication session may be directed to a wait state application which can play music execute an application or perform any suitable application logic. The communication session is preferably transferred into an active communication session during block S.

Block S preferably includes determining participants of the conference. Participants may be present on an existing or otherwise established communication session. For example a caller may be transferred into a conference. As another example a caller may dial in to a phone number or other suitable endpoint which is mapped to a particular conference. A conference state manager e.g. of preferably manages the conference participants. In one case participants may be specified through an API e.g. the API of . The API calls are preferably directed to the conference state manager e.g. such that state can be updated. In some cases a participant may not be present in an active communication session. The method can include making an outgoing communication request to establish a communication session with the missing participant such that the participant can be added to a conference. In some cases the conference waits for some initiating condition such as a conference start time threshold number of participants or any suitable condition. In other cases a conference session can begin as soon as the conference is created.

In addition to determining participants the method preferably includes determining participant regions. The conferencing infrastructure may be distributed across various regions. Geographic proximity to a region may improve communication quality. The regions associated with a participant may be completed through processing an endpoint. In some cases endpoints such as telephone numbers will include location overloaded information e.g. country area codes . Alternatively location information may be collected and obtained through any suitable method or source.

Block S which includes allocating mixers e.g. mixers of the distributed mixing resources of of the conference functions to setup mixers to handle the conferences session. Allocating mixers preferably includes determining which mixers and specifically which participant will be assigned to which input channel of a mixer. Additionally a multi mixer topology can be created which defines bridging of media between mixers. The mixer state manager preferably stores state of the set of mixers. Mixers may be in different states of usage. In some cases allocating mixers may involve adding mixers in one or more regions. Mixers can additionally be removed from the set of mixers. As another variation allocating mixers can involve transitioning an existing conference in response to the mixing requirements introduced. Such responsive changes to conference mixing function to improve overall communication quality across multiple conferences.

Allocating mixers block S preferably includes processing the information related to the conference and generating a mixer topology. Generating a mixer topology preferably calculates an arrangement architecture to mixer assignment and bridging so as to obtain high quality communication. The mixer topology preferably characterizes and identifies how the media from participants is mixed to form a conferencing experience. With the mixer resources described above a participant is preferably mapped to one particular media input channel. The mixer topology can be generated according to some operational goal. Preferably the goal is communication quality. High quality communication is preferably a function of communication latency which is preferably minimized or reduced. Other properties that may additionally or alternatively be factored into the evaluation function of communication quality can include packet loss post dial delay PDD i.e. time for carrier to indicate the other side is ringing monetary cost to the platform provider monetary price charged to account holder media quality and or any suitable factor. Generating a mixer topology can additionally account for mixer capacity. Additionally how multiple mixers can be bridged may additionally be determined.

The mixer topology can consider various factors and may include heuristics for particular scenarios. In one variation block S can include grouping participants into mixer input channels according to regional association. More specifically the orchestration of mixers may be such that the conference achieves local media communication quality. In other words participants local to other participants experience improved communication quality. For example if a conference exists by a group of 3 participants in the West coast and 4 in the East coast then a set of mixers in a Western region handle the first set of participants and a set of mixers in the Eastern region handle locally conferencing the second set of participants. Communication quality may be of lower quality between the participants in the two regions but conferencing between the local participants may have high quality communication.

In another variation block S can include grouping participants into mixer partitions by participant priority. Participants may be marked by different priority. The priority may be based on who organized the meeting the role in the conference or any suitable property. For example a massive conference may have a host moderator a panel who will contribute to the discussion and then audience members who may be silent participants but may be allowed to ask questions at times. Mixing topology generation can weigh the priority of participants when calculating conference quality. For example participants that will primarily be listening may not have a high demand for low latency communication and so the mixer topology may not optimize for minimizing media latency for these participants.

Block S which includes negotiating routing media of the set of communication sessions to the allocated mixers functions to route media of participants to assigned mixers and start the conferencing session. Negotiation routing media preferably includes various signaling handshaking between involved media resources and the mixer resources. The media is preferably routed according to the mixer topology which can include routing media of participants to assigned mixer input channel and bridging mixed media across mixer instances. As described above SIP or an alternative media and signaling protocol may be used in directing participant communication sessions from a conference orchestration service to mixers. In particular the media of the participant communication session is routed to a mixer. Intermediary nodes may be used in the routing to mixer. For example regional gateway proxy servers may be used when routing media or signaling to outside regions. Within a mixer the set of participant input channels for a conference are mixed or combined through any suitable processing. The output of the mixing can be bridged to another mixer for further mixing or redirected to a connected endpoint.

Negotiating the routing of media preferably establishes various mixer scenarios. In a first variation the participants may be serviced by a single mixer. A single mixer may be used when all participants have relatively close proximity to the mixer and a mixer has capacity to handle the number of participants.

In other instances multiple mixers may be used. In one use case a single mixer may not have capacity for a conference and so the participants are distributed across multiple mixers as shown in . In another use case multiple mixers may be used so as to give a subset of participants regional mixing within the conference as shown in . The mixers preferably bridge over to other mixers such that a mixer output channel is mixed as an input to a second mixer.

In yet another instance mixers may be used in a hierarchical mixing. In hierarchical mixing a mixer mixes output channels of at least two mixers as shown in . Participant input channels can additionally be mixed simultaneously with hierarchical mixing.

Once negotiated a conference session can take place and participants can communicate as a group. Various features may additionally be supported during a conference.

A conference is preferably exposed as an accessible API resource and as such the conference can preferably be manipulated through various directives. The state of the conference can be queried. Information such as conference status e.g. waiting started ended participant count participant identification conference duration an event log of the conference e.g. when people joined left who spoken when etc. and other suitable pieces of information can be supplied in an API response. Additionally the conference may be augmented. API calls directed at a particular conference may add or remove participants mute participants set up individually directed media control split a conference into multiple conferences join a conference with another conference end the conference and or make any suitable change.

A method can additionally include individually directing the media flow of one or more participants. With individual media control in addition to the group mixing participants may be able to listen in on a second participant. As an exemplary use case a manager may want the capability to listen in on a participant s leg of the conference. As another variation a participant may want the capability to transfer media to only a subset of participants. For example during a conference a first participant may want to say something to a second participant without the other participants hearing what is said. As another example the first participant may want to say something to a larger subset of participants e.g. two or more people without the rest hearing.

Event callbacks can additionally be configured for the conference. An event callback is preferably a mapping between an event and a designated callback destination such as an URI or other resource that is accessed when the event is detected. A callback destination may also be a pre established application session using web sockets or some other similar mechanism. In particular a speaker callback may be triggered when a speaker changes in the conference. For example an application that setup the conference may set a speaker callback URI. When a speaker changes in the conference an HTTP messages is sent to the speaker callback URI. The message preferably identifies the new speaker and optionally the time of the change and the last speaker. Another callback may be for communication input. In telephony conferences participants may be able to provide input through DTMF input. An input callback will preferably hit the input callback resource with information about input e.g. who entered what key when . Other callbacks can include when the conference starts when the conference ends when there is a change in the participants e.g. a new one joins or leaves or any suitable event.

The method can additionally include transitioning mixer topology which functions to adapt negotiated mixer topology according to new conditions. Participants can join and leave during a conference and as such the preferred mixer topology can change. The transition can be in response to any number of triggers. In one variation the mixer topology may be re evaluated and possibly transitioned each time there is a change in participants. This may provide high quality communication throughout a conference. In another variation the conference may be re evaluated periodically which may avoid overhead of frequent transitions but allow communication to be eventually transitioned to a preferred state. In another variation the transitioning may be re evaluated and initiated in response to a trigger. For example a user input may signal that the communication quality is lacking and should be refreshed to improve quality. Other variations may include variations more directed at changes in regional mixing or the number of participant changes total number of participants and other factors.

The method described above was directed towards a single conference instance but the system and method is preferably used in situations where multiple conferences are facilitated simultaneously. More preferably the method is used to service the conferencing features of a multi tenant communication platform. The selection of mixers additionally considers the usage of mixers across multiple mixers.

As shown in a conference system in accordance with an embodiment includes a conference management system and distributed mixing resources . In some implementations the conference management system includes a conference orchestration service a conference state manager a mixer state manager and a conference database .

In some implementations the conference management system is similar to the conference management system of . In some implementations the distributed mixing resources is similar to the distributed mixing resources of . In some implementations the conference orchestration service is similar to the conference orchestration service of . In some implementations the conference state manager is similar to the conference state manager of . In some implementations the mixer state manager is similar to the mixer state manager of . In some implementations the conference database is similar to the conference database of .

In some implementations each mixer e.g. is a mixer system. In some implementations each mixer system is a server device e.g. a server device similar to the server device of . In some implementations the mixers e.g. are included in a server device. In some implementations the mixers are included in a plurality of server devices. In some implementations each mixer e.g. includes at least one processing unit e.g. a processing unit similar to the processing units described below for such as for example the processing unit . In some implementations mixers in a same region are included in a same server device. For example the mixers are included in a first server device located in Region e.g. California USA the mixers are included in a second server device located in Region e.g. Virginia USA and the mixers are included in a third server device located in Region e.g. London England . In some implementations mixers in a same region are included in a same computing cluster e.g. a computing cluster that includes a plurality of computing devices such as for example a server device similar to the server device of . For example the mixers are included in a first computing cluster located in Region e.g. California USA the mixers are included in a second computing cluster located in Region e.g. Virginia USA and the mixers are included in a third computing cluster located in Region e.g. London England . In some implementations each server device includes at least one processing unit e.g. a processing unit similar to the processing units described below for such as for example the processing unit .

In some implementations the conference management system is included in a server device e.g. the server device of . In some implementations the conference management system is included in a server device e.g. the server device of and the conference management system includes at least one mixer e.g. at least one of the mixers . In some implementations the conference management system is included in a server device e.g. the server device of and the conference management system includes mixers of at least one region e.g. mixers of at least one of Region Region and Region of .

In some implementations the conference management system is a distributed system that includes a plurality of server devices. In some implementations the conference management system includes at least one mixer e.g. at least one of the mixers . In some implementations the conference management system bio includes mixers of at least one region e.g. mixers of at least one of Region Region and Region of .

In some implementations each of the regions of the distributed mixing resources e.g. Region Region and Region are communicatively coupled via media resources of the system . In some implementations various provider services in the regions facilitate coupling media streams to outside endpoints e.g. PSTN phones SIP phones or IP communication devices . In some implementations the regions are selected to serve endpoints local to that region. In some implementations the regions are separated by a globally significant distance. In some implementations a globally significant distance is a transmission distance greater than 2000 miles. In some implementations a globally significant distance is a transmission distance greater than 5000 miles. In some implementations for example a first region may be on the West coast of the US e.g. California USA and a second region may be on the East coast e.g. Virginia USA separated by a geographic distance greater than 2500 miles. In some implementations for example a first region may be in the United States e.g. Virginia USA and a second region may be in Europe e.g. London England separated by a distance greater than 3500 miles. In some implementations the first region and the second region are not limited to functioning with such distance ranges and may be separated by a distance less than 2000 miles or exceeding 5000 miles.

In some implementations the conference orchestration service the conference state manager the mixer state manager and the conference database are included in a single server device e.g. the server device of . In some implementations the conference orchestration service the conference state manager the mixer state manager and the conference database are included in a distributed computing system that includes a plurality of server devices and each server device of the distributed computing system includes one or more of the conference orchestration service the conference state manager the mixer state manager and the conference database .

In the embodiment of the conference system is communicatively coupled to a communication platform . In some implementations the communication platform is similar to the communication platform of . In some implementations the communication platform includes an API and a call router . In some implementations the API is similar to the API of . In some implementations the call router is similar to the call router of .

As shown in the conference orchestration service is communicatively coupled to the call router via a communication protocol interface and the conference state manager is communicatively coupled to the API via an application layer interface . As shown in the conference database is communicatively coupled with the API .

As shown in the communication protocol interface communicatively couples the conference orchestration service to at least one mixer of the distributed mixing resources .

As shown in an application layer interface communicatively couples the conference orchestration service to an application layer interface of the conference state manager .

As shown in an application layer interface communicatively couples the conference state manager to an application layer interface of the mixer state manager .

As shown in a communication protocol interface communicatively couples the mixer state manager to at least one mixer of the distributed mixing resources .

In some implementations the communication protocol of at least one of the interfaces and is SIP Session Initiation Protocol . In some implementations the application layer interface of at least one of the interfaces and is an HTTP interface.

In some implementations the conference database includes conference state . In some implementations the conference state manager includes the conference state e.g. . In some implementations the conference state includes conference state for each conference of the system . In some implementations the conference state for a conference is generated during reception of a request for a new conference. In some implementations conference state for a conference indicates at least each participant of the conference. In some implementations conference state for a conference indicates at least an endpoint identifier e.g. a telephone number for each participant of the conference.

In some implementations the mixer state manager includes mixer state . In some implementations the mixer state includes mixer state for each mixer of the distributed mixer resources e.g. the mixers of the system . In some implementations the mixer state for a conference is managed by the mixer state manager during operation of each mixer of the distributed mixer resources . In some implementations mixer state for a mixer indicates at least a status of each channel of the mixer. In some implementations the status indicates whether the respective channel is in use or not in use. In some implementations the status indicates that the channel is not in use in a case where the channel is not in use and indicates at least one of participant identifier and a conference identifier in a case where the channel is assigned to a participant of a conference. In some implementations a participant identifier is an endpoint identifier e.g. a telephone number .

In some implementations the conference orchestration service includes mixer topologies . In some implementations the mixer topologies includes a mixer topology for each conference for which at least one mixer is allocated. In some implementations each mixer topology specifies an assignment of each participant of a respective conference to at least one input channel of a mixer. In some implementations each assignment of a mixer topology indicates an endpoint identifier e.g. a telephone number and a corresponding mixer channel identifier e.g. a mixer ID and a corresponding mixer channel ID . In some implementations a mixer topology for a conference identifies a mixer output to be provided to the conference orchestration service . For example in a case of a mixer topology that includes more than one mixer the mixer topology indicates the mixer whose output is provided to the conference orchestration service as the output of the mixer topology.

The exemplary mixer state of represents the mixer state of the mixers e.g. of the distributed mixing resources after allocation of mixer channels in accordance with the mixer topologies of .

In some implementations the conference state manager is constructed to maintain conference state e.g. conference state of each conference and to notify the conference orchestration service of conference state changes via the application layer communication interfaces and .

The method of includes at a conferencing system e.g. boo of constructed to operate scalable conferencing services the conferencing system including a conference orchestration service e.g. a conference state manager e.g. a mixer state manager e.g. and a set of distributed mixers e.g. receiving a request for a new conference via at least one of an application layer interface e.g. of the conferencing system and a signaling protocol communication interface e.g. of the conference orchestration service e.g. process S allocating mixers e.g. mixers of of the conference the mixers being mixers of the set of distributed mixers e.g. process S and negotiating media across the allocated mixers process S . Receiving a request for a new conference includes determining participants of the conference. Allocating mixers of the conference includes generating a mixer topology that specifies an assignment of each determined participant to at least one input channel of at least one mixer of the set of distributed mixers. Negotiating media across the allocated mixers includes routing media of each determined participant to the assigned at least one input channel and starting the conference. The media is routed according to the generated mixer topology. The mixer state manager e.g. generates the topology responsive to an application layer request provided by the conference state manager e.g. the conference state manager provides the application layer request responsive to an application layer request provided by the conference orchestration service e.g. the routing is performed by the conference orchestration service in accordance with a signaling protocol and the conference orchestration service receives the generated mixer topology from the mixer state manager via the conference state manager.

In some implementations the generated mixer topology is stored by the mixer state manager. In some implementations the generated mixer topology is stored at the mixer state manager. In some implementations the generated mixer topology is stored at a storage medium e.g. of of the system .

In some implementations the system performs the processes S S. In some implementations the conference orchestration service of performs the process S. In some implementations the mixer state manager of performs the process S. In some implementations the conference orchestration service of performs the process S.

In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of .

In some implementations the process S functions to control the system boo to receive a request for a new conference via at least one of an application layer interface e.g. of the conferencing system and a signaling protocol communication interface e.g. of the conference orchestration service e.g. . In some implementations the communication interface of the conference orchestration service receives a request for a new conference from a call router e.g. the call router of the communication platform . In some implementations the interface is a SIP interface and the request for a new conference is a SIP request. In some implementations the application layer interface of the conference state manager receives a request for a new conference via an API request e.g. of the API of the communication platform . In some implementations the interface is an HTTP interface. In some implementations the interface is REST application program interface API .

In some implementations the process S includes determining participants of the conference as described above for S of . In some implementations the conference state manager manages conference state of the conference e.g. the conference state and the conference state e.g. indicates participants of the conference e.g. as shown in . In some implementations the conference state e.g. is stored by the conference database . In some implementations the participants of the conference are specified by an API call received by the system . In some implementations the participants of the conference are specified by an API call received by the application layer interface of the conference state manager . In some implementations each participant of the conference is identified by an endpoint identifier e.g. a telephone number . In some implementations the participants of the conference are specified by at least one conference request e.g. a SIP request received by the conference orchestration service via the communication protocol interface .

In some implementations participants include at least one of a participant transferred from an established communication session e.g. a communication session of the communication platform into the conference a participant that establishes a communication session e.g. a communication session of the communication platform with an endpoint that is mapped to the conference e.g. a conference of the conference system and a participant specified by an API request received by the application programming interface e.g. of the conferencing system .

In some implementations determining participants of the conference includes determining participant regions as described above for S of . In some implementations the conference orchestration service determines the participant regions of each participant. In some implementations the conference state manager determines the participant regions of each participant. In some implementations participant regions are specified by an API call received by the system . In some implementations participant regions are specified by an API call received by the application layer interface of the conference state manager . In some implementations the participant regions of the conference are specified by at least one conference request e.g. a SIP request received by the conference orchestration service via the communication protocol interface . In some implementations participant regions of each participant of the conference are identified by respective endpoint identifiers e.g. a telephone number of the corresponding participant. In some implementations participant regions of each participant are determined based on at least one of an area code and a country code of an endpoint e.g. a telephone number of the participant. For example as shown in participant regions for each of the participants P P and P of the conference represented by the conference state are determined to be California USA based on the area code 415 of the corresponding telephone numbers. Similarly as shown in participant regions for each of the participants P and P of the conference represented by the conference state are determined to be London England based on the country code for England 44 an the area code for London 020 of the corresponding telephone numbers.

In some implementations responsive to the request for the new conference the conference orchestration service provides an application layer request e.g. an HTTP request to the conference state manager process S of . In some implementations responsive to the request for the new conference the application layer interface of the conference orchestration service provides the application layer request to the application layer interface of the conference state manager. In some implementations the application layer request of the process S specifies participants of the conference. In some implementations the application layer request of the process S specifies participant regions of the participants of the conference.

In some implementations responsive to the application layer request of the process S the conference state manager determines participants of the conference as described above. In some implementations responsive to the application layer request of the process S the conference state manager determines participant regions of the participants of the conference as described above.

In some implementations responsive to the application layer request of the process S the conference state manager generates conference state for the conference e.g. the conference state of . In some implementations responsive to the application layer request of the process S the conference state manager generates conference state for the conference e.g. the conference state of and stores the generated conference state e.g. as the conference state of the conference database .

In some implementations the conference state includes the determined participants and the determined participant regions of the participants for the conference.

In some implementations responsive to the application layer request of the process S the conference state manager provides an application layer request e.g. an HTTP request to the mixer state manager process S of . In some implementations responsive to the application layer request of the process S the application layer interface of the conference state manger provides the application layer request to the application layer interface of the mixer state manager . In some implementations the application layer request of the process S specifies participants of the conference. In some implementations the application layer request of the process S specifies participant regions of the participants of the conference.

In some implementations responsive to the application layer request of the process S the mixer state manager allocates the mixers of the conference process S .

In some implementations the process S functions to control the system to allocate mixers e.g. the mixers and of the conference e.g. a conference of the conference states and the mixers being mixers of the set of distributed mixers e.g. of . Allocating mixers includes generating a mixer topology e.g. a mixer topology of that specifies an assignment of each determined participant e.g. participants P P of B to at least one input channel e.g. channels of D of at least one mixer e.g. the mixers and of the set of distributed mixers e.g. . In some implementations the mixer state manager generates the mixer topology e.g. one of the mixer topologies of . In some implementations the mixer state manager stores the mixer topology.

In some implementations the mixer state manager allocates each determined participant to a single mixer. In some implementations the mixer state manager allocates the determined participants to multiple mixers to provide increased participant capacity for a conference e.g. as shown in the mixer topology of . In some implementations the mixer state manager allocates the determined participants to multiple mixers to provide a subset of the participants with regional mixing within the conference e.g. as shown in the mixer topology of . In some implementations the mixer state manager allocates mixers of the conference by bridging media of the conference between mixers of the set of distributed mixers. In some implementations the mixer state manager allocates mixers of the conference by bridging media such that a mixer output channel is mixed as an input to a different mixer. In some implementations the mixer state manager allocates mixers of the conference by allocating mixer output channels of at least two mixers to respective input channels of at least one mixer e.g. as shown in the mixer topology of .

In some implementations responsive to the application layer request of the process S the mixer state manager allocates the mixers of the conference process S .

In some implementations the mixer state manager assigns each determined participant to at least one input channel based on a participant region determined for the participant.

In some implementations the application layer request of the process S specifies the determined participants. In some implementations the application layer request of the process S specifies participant regions of the determined participants. In some implementations the mixer state manager determines participant regions of the determined participants as described above.

In some implementations the mixer state manager assigns each determined participant to at least one input channel of at least one mixer system based on the mixer state . depicts exemplary mixer state .

In some implementations the mixer state manager assigns each determined participant to at least one free input channel of at least one mixer system and the mixer state manager determines whether a mixer input channels is free based on the mixer state . In some implementations the mixer state manager updates the mixer state after assignment of participants to input channels to indicated that assigned channels are in use.

As an example responsive to an application layer request provided by the conference state manager for the conference corresponding to the conference state of the mixer state manager assigns participants P P to previously free channels of mixers and and generates the mixer topology of . As shown in for the conference state the mixer state manager assigns the participants to channels and of mixer channels and of mixer and channels and of mixer . The mixer state manager assigns the output of the mixer to channel of mixer and assigns the output of the mixer to channel of mixer . After assignment of the participants P P to the respective mixer channels the mixer state indicates the assigned channels as being used as shown in . More specifically mixer state indicates channels and of mixer channels and of mixer channels and of mixer as being in use.

As an example responsive to an application layer request provided by the conference state manager for the conference corresponding to the conference state of the mixer state manager assigns participants P P to previously free channels of mixers and and generates the mixer topology of . As shown in for the conference state the mixer state manager assigns the participants to channels and of mixer and channels and of mixer . The mixer state manager assigns the output of the mixer to channel of mixer . After assignment of the participants P P to the respective mixer channels the mixer state indicates the assigned channels as being used as shown in . More specifically mixer state indicates channels and of mixer and channels and of mixer as being in use. For the for the conference state the mixer state manager assigns the participants P P and P which have California USA as a participant region e.g. as indicated by the 415 telephone number area code to the mixer which is a mixer of region California USA as indicated by the mixer state and the mixer state manager assigns the participants P and P which have London England as a participant region e.g. as indicated by the 44 country code and 020 telephone number area code to the mixer which is a mixer of region London England as indicated by the mixer state .

As an example responsive to an application layer request provided by the conference state manager for the conference corresponding to the conference state of the mixer state manager assigns participants P P to previously free channels of mixers and and generates the mixer topology of . As shown in for the conference state the mixer state manager assigns the participants to channels and of mixer channels and of mixer and channels and of mixer . The mixer state manager assigns the output of the mixer to channel of mixer and assigns the output of the mixer to channel of mixer . After assignment of the participants P P to the respective mixer channels the mixer state indicates the assigned channels as being used as shown in .

In some implementations the mixer state manager allocates mixers as described above for S of . In some implementations the mixer state manager allocates mixers based on at least one of communication quality packet loss latency packet dial delay PDD monetary cost to the platform provider monetary price charged to account holder media quality mixer capacity regional associations of participants and mixers participant priority and the like.

In some implementations the mixer state manager provides the generated mixer topology e.g. one of the topologies and of to the conference state manager process S . In some implementations the mixer state manager provides the generated mixer topology to the conference state manager via at least one of an application layer response and an application layer request. In some implementations mixer state manager uses the application layer interface to provide the generated mixer topology to the application layer interface of the conference state manager .

In some implementations responsive to the mixer topology provided by the mixer state manager the conference state manager provides the mixer topology to the conference orchestration service manager process S . In some implementations the conference state manager provides the mixer topology to the conference orchestration service manager via at least one of an application layer response and an application layer request. In some implementations the conference state manager provides the mixer topology to the conference orchestration service manager uses the application layer interface to provide the mixer topology to the application layer interface of the conference orchestration service . In some implementations the conference orchestration service stores the topology e.g. as one of the mixer topologies .

In some implementations responsive to the mixer topology e.g. received provided at the process S the conference orchestration service negotiates media across the allocated mixers process S .

In some implementations the mixer bridging of two mixers is performed by the mixer state manager . In some implementations the bridging of two mixers is performed by the mixer state manager during generation of the mixer topology e.g. and the mixer state manager bridges two mixers by instructing a main mixer e.g. a mixer whose output is provided to an input of a child mixer to dial in to a child mixer.

In some implementations the mixer state manager instructs the main mixer to dial in to the child mixer by providing an application layer request e.g. an HTTP REST call to the main mixer the application layer request specifying the mixer identifier of the child mixer and the channel identifier of the channel to receive the output of the main mixer. In some implementations responsive to the application layer request received by the main mixer the main mixer dials into the child mixer and bridges the output of the main mixer to the input channel identified by the channel identifier by providing the child mixer with a SIP INVITE message that specifies the main mixer in a SIP From header specifies a mixer identifier of the child mixer as a parameter to the SIP INVITE message and specifies the channel identifier of the channel in a custom SIP header e.g. a SIP X Header .

In some implementations the mixer state manager instructs the main mixer to dial in to the child mixer by providing an communication protocol interface request e.g. a request provided by the communication protocol interface e.g. a SIP message to the main mixer the communication protocol interface request e.g. SIP message specifying the mixer identifier of the child mixer and the channel identifier of the channel to receive the output of the main mixer. In some implementations responsive to the communication protocol interface request e.g. SIP message received by the main mixer the main mixer dials into the child mixer and bridges the output of the main mixer to the input channel identified by the channel identifier by providing the child mixer with a SIP INVITE message that specifies the main mixer in a SIP From header specifies a mixer identifier of the child mixer as a parameter to the SIP INVITE message and specifies the channel identifier of the channel in a custom SIP header e.g. a SIP X Header .

In some implementations the bridging of two mixers as described above is performed by the conference orchestration service .

In some implementations the process S functions to control the system to negotiate media across the allocated mixers e.g. the mixer systems allocated at the process S . In some implementations negotiating media across the allocated mixers includes routing media of each determined participant to the respective assigned mixer input channel. In some implementations negotiating media across the allocated mixers includes starting the conference. In some implementations the routing is performed by the conference orchestration service in accordance with a signaling protocol.

In some implementations the conference orchestration service negotiates the media across the allocated mixers by routing media of each conference participant e.g. participant media received from the call router via the communication protocol interface to a respective mixer input channel. In some implementations the conference orchestration service determines a mixer input channel for a conference participant based on the mixer topology generated by the mixer state manager for the conference e.g. a mixer topology of the topologies . In some implementations the conference orchestration service uses the communication protocol interface to receive participant media from the communication platform e.g. from the call router . In some implementations participant media is media of a communication session of the communication platform . In some implementations the conference orchestration service uses the communication protocol interface to provide media of each participant of the conference to a respective mixer channel. In some implementations the communication protocol interface is a SIP interface the conference orchestration service uses the communication protocol interface to receive participant media and the conference orchestration service uses the communication protocol interface to provide media of each participant of the conference to a respective mixer channel.

In some implementations negotiating the media across the allocated mixers includes the conference orchestration service using the communication protocol interface to perform signaling handshaking between media resources of the conference e.g. participant media resources of the conference and mixers allocated to the conference as indicated by the mixer topology of the conference . In some implementations the signaling handshaking is performed in accordance with SIP. In some implementations the conference orchestration service establishes the mixer topology by sending each mixer of the topology a SIP INVITE message that specifies at least a corresponding mixer identifier and a channel identifier assigned to the corresponding participant as indicated by the mixer topology e.g. a topology of the mixer topologies . In some implementations the conference orchestration service establishes the mixer topology by sending each mixer of the topology a SIP INVITE message that specifies at least a corresponding conference participant mixer identifier and a channel identifier assigned to the corresponding participant as indicated by the mixer topology e.g. a topology of the mixer topologies .

In some implementations the conference orchestration service establishes the mixer topology by determining conference participants as described above for each participant determining the assigned mixer and channel as indicated by the mixer topology e.g. one of the topologies for the conference for each participant providing a SIP INVITE message to the assigned mixer. In some implementations the SIP INVITE message specifies the conference participant in a SIP From header specifies a mixer identifier of the mixer as identified by the mixer topology as a parameter to the SIP INVITE request and specifies a channel identifier of the channel as identified by the mixer topology in a custom SIP header e.g. a SIP X Header .

As an example for the conference of the mixer topology of the conference orchestration service routes media of participant P received at interface e.g. a SIP interface to the channel of the mixer e.g. by using SIP routes media of participant P received at interface to the channel of the mixer e.g. by using SIP routes media of participant P received at interface to the channel of the mixer e.g. by using SIP routes media of participant P received at interface to the channel of the mixer e.g. by using SIP routes media of participant P received at interface to the channel of the mixer e.g. by using SIP and routes media of participant P received at interface to the channel of the mixer e.g. by using SIP . The output of the mixer is bridged to the channel of the mixer the output of the mixer is bridged to the channel of the mixer and the bridging of the mixer outputs is performed as described above. The output of the mixer is the output of the mixer topology and therefore the output of the mixer is provided by the mixer to the conference orchestration service e.g. via SIP and the conference orchestration service provides the output of the mixer to each conference participant via respective communication sessions e.g. SIP communication sessions e.g. communication sessions of the call router .

The method of is performed at a conferencing system e.g. of constructed to operate scalable conferencing services the conferencing system including a conference orchestration service e.g. a conference state manager e.g. a mixer state manager e.g. and a set of distributed mixers e.g. and the method is performed responsive to a request for a new conference that is received via at least one of an application layer interface e.g. of the conferencing system and a signaling protocol communication interface e.g. of the conference orchestration service e.g. . The method includes determining participants of the conference and participant regions for each determined participant process S generating a mixer topology e.g. a mixer topology of by using the mixer state manager e.g. the mixer topology specifying an assignment of each determined participant to at least one input channel of a plurality of mixers of the set of distributed mixers e.g. the mixer state manager generating the mixer topology based on the determined participant regions and at least one regional association of a mixer of the set of distributed mixers process S and routing media of each determined participant to the assigned at least one input channel according to the generated mixer topology by using the conference orchestration service e.g. process S . The mixer state manager e.g. generates the topology responsive to an application layer request provided by the conference state manager e.g. the conference state manager provides the application layer request responsive to an application layer request provided by the conference orchestration service e.g. the routing is performed by the conference orchestration service in accordance with a signaling protocol and the conference orchestration service receives the generated mixer topology from the mixer state manager via the conference state manager.

In some implementations the generated mixer topology is stored by the mixer state manager. In some implementations the generated mixer topology is stored at the mixer state manager. In some implementations the generated mixer topology is stored at a storage medium e.g. of of the system .

In some implementations the system boo performs the processes S S. In some implementations the conference orchestration service of performs the process S. In some implementations the mixer state manager of performs the process S. In some implementations the conference orchestration service of performs the process S.

In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of . In some implementations the process S is similar to the process S of .

In some implementations the mixer state manager manages mixer state information for each mixer of the set of distributed mixers and the mixer state information specifies a regional association of at least one mixer of the set of distributed mixers.

In some implementations for each mixer managed by the mixer state manager the mixer state information indicates a state for each input channel of the mixer. The mixer state manager assigns each determined participant to at least one free input channel of a plurality of mixers of the set of distributed mixers and each free input channel is identified by the mixer state information.

In some implementations the conference state is managed by the conference state manager the conference state manger provides the conference state to the mixer state manager via the application layer request provided by the conference state manager and the mixer state manager generates the mixer topology by using the conference state.

In some implementations the mixer state manager determines the participant regions for each determined participant by using the conference state provided by the conference state manager. The mixer state manager determines regions for each mixer by using the mixer state managed by the mixer state manager. For at least one determined participant the mixer state manager determines a mixer located in a region that matches the participant region of the determined participant and the mixer state manager assigns the determined participant to an input channel of the mixer located in the matching region.

In some implementations the mixer state manager assigns each determined participant to at least one input channel based on respective participant priority values.

The bus interfaces with the processors A N the main memory e.g. a random access memory RAM a read only memory ROM a processor readable storage medium a display device a user input device and a network device .

In some implementations the system e.g. includes at least one of a central processing unit processor and a multi processor unit MPU .

The processors A N and the main memory form a processing unit . In some embodiments the processing unit includes one or more processors communicatively coupled to one or more of a RAM ROM and machine readable storage medium the one or more processors of the processing unit receive instructions stored by the one or more of a RAM ROM and machine readable storage medium via a bus and the one or more processors execute the received instructions. In some embodiments the processing unit is an ASIC Application Specific Integrated Circuit . In some embodiments the processing unit is a SoC System on Chip . In some embodiments the processing unit includes one or more of a conference management system a conference orchestration service a conference state manager a mixer state manager and a conference database and mixing resources.

The network adapter device provides one or more wired or wireless interfaces for exchanging data and commands between the system e.g. and other devices such as a mixer and a communication platform e.g. . Such wired and wireless interfaces include for example a universal serial bus USB interface Bluetooth interface Wi Fi interface Ethernet interface near field communication NFC interface and the like.

Machine executable instructions in software programs such as an operating system application programs and device drivers are loaded into the memory of the processing unit from the processor readable storage medium the ROM or any other storage location. During execution of these software programs the respective machine executable instructions are accessed by at least one of processors A N of the processing unit via the bus and then executed by at least one of processors A N. Data used by the software programs are also stored in the memory and such data is accessed by at least one of processors A N during execution of the machine executable instructions of the software programs. The processor readable storage medium is one of or a combination of two or more of a hard drive a flash drive a DVD a CD an optical disk a floppy disk a flash storage a solid state drive a ROM an EEPROM an electronic circuit a semiconductor memory device and the like. The processor readable storage medium includes machine executable instructions and related data for an operating system software programs device drivers mixing resources and the conference management system . The machine executable instructions and related data for the mixing resources include machine executable instructions and related data for one or more mixers e.g. a mixer of the distributed mixing resources of . The machine executable instructions and related data for the conference management system include machine executable instructions and related data for the conference orchestration service the conference state manager the mixer state manager and the conference database .

In some implementations the conference management system is implemented as a server device that is separate from server devices of the mixing resources.

The bus interfaces with the processors A N the main memory e.g. a random access memory RAM a read only memory ROM a processor readable storage medium a display device a user input device and a network device .

In some implementations the server device includes at least one of a central processing unit processor and a multi processor unit MPU .

The processors A N and the main memory form a processing unit . In some embodiments the processing unit includes one or more processors communicatively coupled to one or more of a RAM ROM and machine readable storage medium the one or more processors of the processing unit receive instructions stored by the one or more of a RAM ROM and machine readable storage medium via a bus and the one or more processors execute the received instructions. In some embodiments the processing unit is an ASIC Application Specific Integrated Circuit . In some embodiments the processing unit is a SoC System on Chip . In some embodiments the processing unit includes one or more mixers.

The network adapter device provides one or more wired or wireless interfaces for exchanging data and commands between the server device and other devices such as a server device of a conference management system e.g. . Such wired and wireless interfaces include for example a universal serial bus USB interface Bluetooth interface Wi Fi interface Ethernet interface near field communication NFC interface and the like.

Machine executable instructions in software programs such as an operating system application programs and device drivers are loaded into the memory of the processing unit from the processor readable storage medium the ROM or any other storage location. During execution of these software programs the respective machine executable instructions are accessed by at least one of processors A N of the processing unit via the bus and then executed by at least one of processors A N. Data used by the software programs are also stored in the memory and such data is accessed by at least one of processors A N during execution of the machine executable instructions of the software programs. The processor readable storage medium is one of or a combination of two or more of a hard drive a flash drive a DVD a CD an optical disk a floppy disk a flash storage a solid state drive a ROM an EEPROM an electronic circuit a semiconductor memory device and the like. The processor readable storage medium includes machine executable instructions and related data for an operating system software programs device drivers and the mixers 

The system and methods of the preferred embodiments and variations thereof can be embodied and or implemented at least in part as a machine configured to receive a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with the media and signaling components of a conferencing system. The computer readable medium can be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a general or application specific processor but any suitable dedicated hardware or hardware firmware combination device can alternatively or additionally execute the instructions.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

