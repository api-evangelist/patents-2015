---

title: Monitoring gateway systems and methods for openflow type networks
abstract: A network management gateway device, method, and software is disclosed which communicates and translates between more sophisticated digital data network monitoring devices and managers, such as SNMP managers, and managed network devices, such as OpenFlow packet switches, which often are not sophisticated enough to respond to SNMP or REST type monitoring methods. This gateway may communicate with managed devices in one or more of a variety of modes. The manager may communicate with the gateway directly, or be configured to communicate with the managed device while the communications are redirected to the gateway and processed by the gateway. In some embodiments, the gateway may use the OpenFlow protocol to communicate management data with an OpenFlow switch and to install a flow in the switch to redirect management traffic to the gateway. Other routers and switches may also be used to redirect network management traffic to the gateway as well.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09544182&OS=09544182&RS=09544182
owner: 
number: 09544182
owner_city: 
owner_country: 
publication_date: 20150219
---
This application claims the priority benefit of U.S. provisional patent application 61 942 000 Monitoring and Managing Communications Networks inventor Steve Waldbusser filed Feb. 19 2014 this application also claims the priority benefit of U.S. provisional patent application 62 118 433 also called Monitoring and Managing Communications Networks inventor Steve Waldbusser filed Feb. 19 2015 the entire contents of both applications are incorporated herein by reference.

Modern packet based digital communications networks are typically large complex and geographically distributed. Such networks need to be monitored and managed. To do this typically network management equipment and protocols are used which enable remote observation and control of the various types of other equipment e.g. computers servers routers and switches that may both make up the network or are attached to the network. Other network virtual assets such as applications virtual machines and virtual switches also need to be monitored and managed.

These monitoring and management equipment and protocols are typically used for various applications such as to find or prevent network faults understand or change network configuration account for network usage understand and ensure high network performance and to ensure network security. In particular Network Management Systems NMS s are usually the focal point of remote monitoring and management of these various physical and virtual network elements.

One problem that exists in such networks is that often a given managed element such as a packet switch or even a more complex device such as a server may not be compatible with the network management protocols that a NMS wishes to use or that the features supported by the element may be insufficient for the NMS s task. This problem is particularly acute with OpenFlow switches which to achieve speed have very limited computational capability and thus may either not support popular network management protocols such as SNMP at all or alternatively may only provide limited access to switch data through SNMP or related higher level network management protocols.

As mentioned above implementing various types of standard network management protocols with devices like OpenFlow switches is particularly difficult. Such switches may have very high switching capacity e.g. can often handle and process incoming network packets at the very high speeds or line rates thus generally avoiding being a network bottleneck . Such switches achieve such high speeds due to their specialized electronic circuitry but the design tradeoff is that they have a relatively small supervisory processor to handle management tasks like NMS requests configuration tasks and control plane activity.

OpenFlow switches are described in McKeown et. al. 38 Issue 2 April 2008 Pages 69 74. As of Oct. 14 20131.4.0 provided by the Open Networking Foundation defines the specification more precisely as of this date. Other work in this area includes Leong US patent publication 2013 0272135 and Kawai US patent publication 2013 0304915.

More specifically in OpenFlow switches for example a main goal of the switch is to perform packet switching at the same line speed as the incoming data packets which will often be coming in at very high speeds. To do this for OpenFlow devices the design decision was made that to achieve such high speeds the actual intelligence of the switch is greatly limited. The switch for example can be viewed in a very oversimplified manner as comprising a flow table type design that mainly comprises enough hardware functionality to compare the packet headers of incoming packets against a series of previously stored flow table entries and to dispatch an incoming packet to an outward bound port depending on the corresponding flow table instructions stored in the corresponding flow table instructions for that particular flow table entry. An OpenFlow switch can also do a few other functions such as recognize exception packets and forward them on to an OpenFlow controller for further analysis and action at a huge time penalty but the point is that for this type of device in order to achieve high speed the intelligence of the device such as intelligence useful to perform network diagnosis and monitoring is greatly limited.

Another problem that often exists with higher functionality network managed elements such as routers and servers is that even if that element s processing capability is in theory sophisticated enough to support network management protocols such as SNMP requests at a low speed or low volume in practice such devices may not have enough processing capacity to handle a higher volume of network management requests from one or more NMS s while still performing their routine functions in a timely manner. That is such devices may have to make an unhappy decision between either performing their basic network function or responding to network monitoring requests but can t do both functions well at the same time.

Further in this and other situations often the processor of a networked element may have other constraints such as a fixed speed that cannot be scaled up if conditions warrant.

Another problem that exists in the current state of the art is that many switches and servers exist in a multi tenant datacenter environment where they are shared by customers who each demand privacy. In order to provide customers with access to network management the network management protocol must provide robust authentication access control and privacy which may be too expensive to provide on a network switch especially with multiple customers accessing the data simultaneously. Further the data may need to be converted from a physical view to a virtual view that matches the customer s network service and this conversion might need the services of a general purpose server and higher level customer data. Finally security and stability requirements may dictate some separation between the customer s network management requests and the physical infrastructure.

In the past workers in the field have tried to solve protocol translation scalability and security problems in network management through the use of proxy agents or gateways. Such solutions sometimes solved the original problems but achieved limited adoption because they added complexity. In particular it imposed a significant computational and management burden on network managers to have to remember and use a different network address for their network management requests that were other than the real address of the device that they would use for other functions. Further if a proxy agent provided access to multiple managed devices little used and complex facilities like contexts and communities would have to be used to identify the managed device. Further still critical auto discovery and auto configuration processes designed to learn of the existence and configuration of network elements could not perform these tasks in the presence of proxy agents leaving important parts of the infrastructure unmanaged.

OpenFlow is an architecture that allows OpenFlow switch controllers to remotely control OpenFlow flow table driven switches. The OpenFlow architecture does not provide a way for Network Management Systems which primarily use SNMP to monitor and manage the OpenFlow switches with SNMP. Further it does not provide visibility into a number of pieces of information that managers need in order to efficiently manage OpenFlow networks.

Virtual services including virtual switches on virtual machines may be started or stopped or be moved to other physical locations possibly requiring changed in addressing. It can be difficult to manage such a service directly when such virtual services switches or other machine s address is changing or when it is intermittently reachable.

Network elements are often monitored by polling techniques in which the status of the network element is assessed whenever the network monitoring equipment issues a poll request. However the problem with such approaches is such polling methods can thus omit important information about conditions or events that have occurred between polls. Further there may be important information a given network element doesn t return via polling.

Thus again returning to our OpenFlow example when one attempts to use polling methods to monitor an OpenFlow switch using the prior art OpenFlow Protocol critical resource shortfalls in between polls may not be noted. Indeed in this situation there is a lot of other useful and important network monitoring information about the switch s interaction with its controller that also cannot be obtained using such prior art approaches.

In its various embodiments the present invention provides a network management gateway that can accomplish one or more of the following objects and advantages 

In some embodiments the invention may be a system or method of monitoring a status of a network configured to forward digital communications network packets.

By way of background the network and packets will be described in more detail. Here each network packet can be viewed in a simplified manner as comprising a packet header and packet payload and the network itself can be viewed as comprising a plurality of fast limited intelligence switches and controllers such as flow table controlled switches switch controllers along with at least one manager device which need not have limited intelligence. In some embodiments these flow table controlled switches and controllers may be OpenFlow switches or controllers or alternative types of flow table controlled switches and controllers. In general however the inventions disclosed herein can function with a wide variety of other types of limited intelligence or limited onboard processing capability switches and controllers as well.

Using flow table controlled switches as a particular embodiment in this case these flow table controlled switches will typically comprise a flow table controlled packet forwarding switch with a plurality of ports as well as a unique network switch address that the switch electronics are capable of recognizing. These switches are typically configured to perform network packet forwarding by a process of automatically comparing the packet header of incoming packets to the switch s flow table packet header filters. If the switch s circuits detect that a match is found the switch circuits are configured to automatically process this packet according to corresponding flow table instructions. However if a match is not found the switch circuits are configured to designate this packet as an exception packet and the switch circuit s then automatically forward this nonconforming packet to a switch controller according to the corresponding flow table packet non matching instructions. In this respect this particular switch can be said to be acting as a forwarding switch .

Here each switch controller will generally comprise a processor e.g. a more sophisticated processor in the computational sense often capable of running a more complete instruction set such as a MIPS ARM x86 PowerPC or other type instruction set as well as software configured to receive these exception packets and determine an action based on at least the headers of these exception packets. The switch controller will typically then transmit back to the particular switch that sent the exception packet originally e.g. the forwarding switch suitable flow table configuration commands that for example can update that particular forwarding switch s flow table filters and corresponding forwarding instructions. The update commands will allow that forwarding switch to subsequently recognize the header of the original exception packet and to forward the original exception packet and subsequent similar type packets with the same characteristics according to these updated forwarding instructions.

In one embodiment the invention itself operates by providing at least one monitoring gateway often referred to as simply a gateway comprising a processor e.g. often itself a more sophisticated processor in the computational sense often capable of running a more complete instruction set such as a MIPS ARM x86 PowerPC or other type instruction set memory and software. As will be discussed the invention comprises any of the gateway devices itself method of operating the gateway and also the software used to run the gateway electronics.

Here each gateway will preferably also have a unique network gateway address that is recognized by the gateway electronics. The gateway is configured to repeatedly receive monitoring data of a plurality of the previously described switches and to store at least some information pertaining to the monitoring data in the gateway s memory.

As will be described in more detail herein each monitoring gateway is generally further configured to recognize at least some network monitoring commands e.g. SNMP requests commands REST XML requests commands REST JSON requests commands and the like . The gateway will use its previously stored some information from its memory to respond to these network monitoring. Typically these responses will be responses that return information related to the status of the network as per that particular network monitoring request command. Typically each monitoring gateway is configured to respond to network information requests from at least one manager device e.g. an SNMP manager and to transmit response information related to the status of the network to this at least one manager device. These network status requests commands and responses to and from manager devices can flow to and from the switch and the monitoring gateway according to various paths which will be discussed in more detail shortly.

Nomenclature in this disclosure as well as in the disclosures of provisional application 61 942 000 the entire contents of which are incorporated herein by reference the term agent is occasionally used. Depending upon context the term agent may refer to network management software e.g. SNMP REST JSON often used to control a managed device. In other contexts the term agent can refer to a managed element or managed device such as a switch. In practice the managed devices will often be hardware that is controlled by the agent software so the distinction is not always important.

Note however that even where the term managed device is used this use is not intended to be limiting. In the broader context managed device can be viewed as also referring to software e.g. non transitory computer readable medium including program instructions for execution by one or more processors which may be implemented in the form of virtual entities such as software services and virtual machines. Similarly although the term switch switch finds many physical examples e.g. the hardware used to implement OpenFlow network packet switches this use is not intended to be limited to a specific type of network packet switch and indeed other physical devices or virtual entities which of course ultimately run on physical devices such as cloud servers can also be considered to be switches as well.

As previously discussed modern digital communications networks are built with networked computing equipment including switches routers servers and general purpose computers as well as virtual assets such as applications virtual machines and virtual switches. These elements in these networks may be managed using various types of management protocols such as SNMP and Netconf and also by other typically non management protocols such as SSH HTTP and the like. These protocols are used to transfer data to and from the managed elements to accomplish goals including those relating to fault configuration accounting performance and security. Any network element that transfers data to manage one or more network elements are referred to in below as managers e.g. and and entities to be managed referred to below as managed devices or managed elements e.g. . Often these managed devices are switches and in such cases the alternative term switch may also be used.

The invention s monitoring gateways e.g. may be viewed as being a system that provides at least monitoring services by acting as a manager for one or more managed devices e.g. such as switches which often may lack sufficient computational capability to respond to certain types of network monitoring requests and transfers data related to those managed devices switches to and from other managers e.g. typically prior art managers such as SNMP managers who wish to manage those managed devices.

As previously discussed in some embodiments the invention may be a method gateway or software for a gateway for providing at least one monitoring gateway comprising a processor memory and software. As previously discussed these monitoring gateways will have a unique network gateway address and will be configured to repeatedly receive monitoring data from a plurality of the previously discussed switches or other type managed device and to store at least some information pertaining to this monitoring data in the gateway s memory. These monitoring gateways will typically be further configured to recognize at least some network monitoring commands and to use this information to respond to these network monitoring commands with responses that return information related to the status of the network. Each monitoring gateway gateway will typically also be further configured to respond to network information requests from at least one manager device such as an SNMP manager and to transmit response information related to the status of the network to this at least one manager device.

Many such prior art manager devices are SNMP manager devices. Although many of the specific examples and embodiments discussed in this disclosure thus use various SNMP manager devices and various specific types SNMP requests e.g. some or all of the various SNMP requests and responses may be implemented as specific examples of the invention these specific examples are not intended to be limiting.

Although in the case of SNMP an ability to work with the complete set of SNMP commands is obviously desirable as a specific example of how the invention can operate we will focus on how the invention can handle some of the more tricky SNMP commands. Thus in these examples the previously discussed network monitoring commands can comprise at least the SNMP GetRequest or GetNextRequest network monitoring commands. However of course it will often be desirable to have the gateway respond to a full set of SNMP requests commands. Thus discussion of specific SNMP requests and commands is not intended to be limiting.

In this example which we will focus on in some detail the responses that return information related to the status of the network are of course SNMP responses and the previously discussed at least one manager device is at least one SNMP manager device. Thus in this example the network information requests comprise at least one SNMP GetRequest or GetNextRequest requests from at least one SNMP manager device. Further the at least one monitoring gateway is configured to respond to SNMP GetRequest or GetNextRequest requests from this least one SNMP manager device and will transmit SNMP formatted response information related to the status of the network to this at least one SNMP manager device.

A network manager device such as a SNMP manager device may initiate network monitoring requests by sending the appropriate request packets to various destinations including various switches or directly to the monitoring gateway. If the network monitoring request is sent directly to a switch the switch typically lacking much intelligence will have to forward the request to the appropriate monitoring gateway this may be preset in that switch s flow table for example . The monitoring gateway in turn can process this request and respond by for example either sending the appropriate response back to the originating network manager e.g. originating SNMP manager device or alternatively send the appropriate response back to the switch and the switch can in turn send the response back to the originating network manager. Other routes are also possible.

Thus for example at least one of the various unique switches with its unique network address can be configured often by appropriate flow table matching and instruction commands and often by the appropriate monitoring gateway to match SNMP request or other type network packets addressed to it and then to forward the SNMP network packets addressed to that switch to the least one monitoring gateway. This at least one monitoring gateway can in turn send back SNMP formatted response information as network packets with headers addressed to the at least one SNMP manager device back to the originating SNMP manager device. So here the switch bounces the network monitoring request over to the monitoring gateway which then responds directly.

As another alternative the monitoring gateway can be further configured to respond to SNMP GetRequest or GetNextRequest requests or other requests in any format that have been directly addressed to monitoring gateway from the at least one SNMP manager device. Here the monitoring gateway can transmit SNMP formatted response information or other type response information related to the status of the network as monitoring gateway generated SNMP formatted response information network packets that are directly addressed to the unique network address of the originating SNMP manager device s . Thus here there is no need for the switch to bounce SNMP requests over to the monitoring gateway instead the SNMP manager talks to the monitoring gateway directly.

The monitoring gateway typically will on occasion have to do a fair amount of internal processing to answer such network status requests. To assist in this processing in the case where OpenFlow type switches are being monitored the monitoring gateway will typically be configured to use an OpenFlow management information base MIB or other data storage format . This OpenFlow MIB for example can comprise data of properties that direct the monitoring gateway in how to respond to various SNMP commands e.g. SNMP GetRequest or GetNextRequest commands with appropriate SNMP responses that return information related to the status of the network. As an example an OpenFlow MIB is shown in provisional application 61 942 000 the entire contents of which are incorporated herein by reference. In the case where other types of devices are being monitored according to other types of monitoring protocols then alternative type MIB or other data storage formats may be used. Here for specificity the OpenFlow standard discussed herein will be considered to be according to the OpenFlow 1.0 specification or higher.

As previously discussed in some embodiments the flow table controlled packet forwarding switch may be hardware configured to perform line speed network packet forwarding by a process of automatically comparing incoming packet headers to flow table packet header filters. Such configurations are very fast e.g. able to handle billions of packets per second or higher but otherwise often have very limited processing capability.

In order to accumulate enough information to satisfy various types of network status requests the monitoring gateway will often need to monitor various aspects of switch or other managed device performance. In some embodiments using flow table type switches again such as OpenFlow switches as an example the flow table of at least one of the switches can be configured by the monitoring gateway or other device method to additionally forward some or all packets where no match is found to the monitoring gateway. Note that a packet where no match is found may thus be sent both to the controller such as the OpenFlow controller to decide what to do with the exception as well as to the invention s monitoring device for purposes of monitoring network performance . Of course in some embodiments the same device may act both as a controller and as the invention s monitoring device. The invention s monitoring gateway can then be used to record information in the monitoring gateways memory pertaining to the some or all these packets where the switch did not find a match. Here various types of information can be stored such as a count of the matching or non matching packets received on each switch port or virtual LAN counts addressed to or from various network or datalink addresses or counts of each of various protocol types and the like.

Again using a subset of SNMP commands as a specific example the monitoring gateway can be further configured to receive SNMP GetRequest or GetNextRequest requests either directly or indirectly addressed to it from at least one SNMP manager device. The monitoring gateway can then transmit SNMP formatted or other type format for non SNMP applications response information related to the status of the network as at least partially determined by results obtained from these previously discussed counts to the at least one SNMP manager device.

In another embodiment the monitoring gateway may operate by repeatedly receiving exchanged network data packets e.g. network packets that are exchanged between the switch controller and the flow table controlled switch and or a statistical summary of these exchanged network packets. The monitoring gateway can receive this information by various methods including commanding the switch s flow table to also copy these network data packets to the monitoring gateway or by receiving any summaries of this information as are within the capability of the switch to deliver according to the switch s standard construction. The monitoring gateway then stores this information in its memory.

In this embodiment again using some specific SNMP commands as a specific example the monitoring gateway is further configured to recognize at least some SNMP GetRequest or GetNextRequest commands. The gateway then uses information in its memory that pertains to the exchanged network data packets and or statistical summary of exchanged network data packets to respond to the SNMP GetRequest or GetNextRequest commands with SNMP responses that return information related to the status of the network.

In another embodiment the monitoring gateway may be further configured to inspect incoming network status requests such as SNMP GetRequest or GetNextRequest requests to determine which flow table controlled switch that request is associated with or directed to . The monitoring gateway can then use at least some information that the monitoring gateway has received from the flow table controlled switch associated with the request to respond to the SNMP GetRequest or GetNextRequest commands with SNMP responses that return information related to the status of the network.

In another embodiment the monitoring gateway may be configured so that when it receives an SNMP GetNextRequest command that references an SNMP object with an SNMP object type that references information related to the switches the gateway can determine the object type referenced by the SNMP GetNextRequest command and then perform steps such as determining if information related to all instances of that object type have been received into the monitoring gateway s memory and if not the monitoring gateway can perform whatever other operations are needed to further receive into its memory any additional information related to instances of that object type that have not been previously received into memory. Alternatively or additionally the monitoring gateway can receive information related to all instances of that object type into the memory and only fulfill that SNMP GetNextRequest command when all instances of the object type have been received into the gateway s memory.

In either case the monitoring gateway can then use the information related to all instances of that object type to determine which is the next instance associated with that SNMP GetNextRequest command. The gateway can then use this next instance and at least some information related to all instances of that object type to respond to that SNMP GetNextRequest command or equivalent command for non SNMP requests with an SNMP response that returns next instance information related to the status of the network.

For example referring to switch has a port table containing four ports with index numbers and . Gateway has downloaded only a portion of the table or has not recently downloaded the whole table so portions of the table that are stored in the gateway s memory are no longer fresh or reliable. When gateway receives an SNMP GetNext Packet requesting the next port after port the gateway will not be sure of the correct answer to the query until it has downloaded the entire table and knows it has filled in any missing holes in the sorted table.

The invention s monitoring gateways can be implemented in either non virtual e.g. as fixed devices or in a virtual configuration. Here it is useful to view the problem on a more general level.

At a more generalized level the invention s monitoring gateway may be viewed as a type of server and like all such modern servers the gateway may exist in either real or virtualized e.g. virtual elastic server format. One advantage of employing virtualized gateways is that in a situation where a given gateway may be subject to an unusually high number of network status monitoring requests standard virtual server techniques e.g. AWS Amazon Elastic Compute Cloud 2 EC2 Apache CloudStack Windows Azure and the like may be used to temporarily expand the number of monitoring gateways used to handle these requests and this number of virtual servers then reduced again once no longer needed.

If manager wishes to change some data or issue a command to managed device it may transfer the data or command to GW agent and then GW manager will transfer the data or command to managed device

If GW manager receives an event notification from managed device or detects a condition in data received from managed device it may send an event notification to manager

GW Agent may receive requests from or send events to many managers e.g. and GW manager may transmit data to or from many managed devices e.g. .

The protocol or protocols between the manager and GW agent may be the same or may be different than the protocol or protocols between the GW manager and managed device . Similarly the GW agent may provide stronger or weaker authentication access control and privacy services than managed device

If GW agent receives a request from manager it is possible that the data requested is not available from managed device or GW manager doesn t know how to make the proper request using any of the protocols supported by managed device or that the data is available but requires a transformation that the GW agent doesn t know how to perform. In those cases GW agent may return an error to manager

Typically gateway may be implemented in a variety of ways including directly on standard computer processors often an x86 MIPS ARM Power PC or more specialized processor as desired on dedicated network appliances or servers or on one or more virtual machines. In the latter case where the gateway function is being virtualized the implementation can scale dynamically based on the workload being experienced by the gateway. There are a variety of mechanisms for distributing the gateway amongst multiple physical or virtual machines including having multiple gateways each responsible for a different collection of managed devices e.g. . Alternately the gateway function itself may be distributed with the GW agent on a different machine or machines than the GW manager . Because the workload per managed device may be different between the GW agent and the GW manager the number of managed devices assigned per machine may be different and thus the collection of managed devices assigned to each may be orthogonal. For example GW agent may have 100 managed devices assigned per virtual instance and GW manager may have 200 managed devices assigned per virtual instance.

If the gateway is providing services for more than one managed device as it receives requests from managers it will need to determine which managed device the request is referring to since it cannot infer the managed device from the destination address the destination address will be of the gateway not of one of the managed devices . With SNMP the identity of the managed device can be found by looking up the community string or context in a table or by algorithmically decoding them if the managed device identity was encoded. Other protocols may specify the managed device directly. With still others the gateway may need to allocate a range of local ports or local network or datalink addresses and assign each one to one managed device. The gateway can then direct the request to the proper managed device based on one of those selectors.

Referring to another embodiment is shown. Here the gateway is the same entity marked elsewhere as and . The manager and managed device are the elements that wish to communicate and the gateway is providing services for that communication. The management channel is the network link represents the communications protocol the gateway uses above to transfer data to and from the managed device . As it starts its service the gateway may store its network address in the managed device using the management channel. In this embodiment the manager sends its management packets e.g. SNMP to managed device just as it would if it was communicating to the managed device without the services of the gateway. The managed device identifies a packet as a management packet handled by the gateway encapsulates the packet and sends it in a tunnel whose endpoint is the gateway at a preconfigured address. When the gateway receives the tunnel encapsulated packet it decapsulates the packet noting which tunnel it was received on. It then passes the packet to GW agent which knows which managed device the packet refers to by the destination address in the decapsulated packet. After the gateway has processed the packet and wishes to transmit data back to the manager in a response packet or packets the gateway will encapsulate those packets into the tunnel it was received on or selected based on the destination address of the packet. Alternately the gateway may send the packet back directly to the manager possibly spoofing the source address of the GW agent . If the packet was sent back to the managed device on the tunnel the managed device will decapsulate the packet and send it to the manager . Any tunneling protocol may be used including GRE VXLAN and L2TP as well as encapsulation into non tunneling protocols. In order to meet the objective of communicating to the gateway through the managed device it is necessary that the packets to the gateway be sent to the gateway address and also include the manager address and the managed device address and that the packets from the gateway to the managed device be sent to the managed device address and also include the manager address as the next hop address. One of ordinary skill in the art will recognize that there are many ways to achieve this including modification of the application protocol in use e.g. SNMP NetConf HTTP SSH .

When the managed device receives the packet from the manager it may inspect the packet and if it has the capability to respond directly it may do so using local managed device resources or otherwise to tunnel it to the gateway.

Referring to the OpenFlow embodiment is shown in more detail. The gateway is the same entity marked elsewhere as and and . The manager and managed device are the elements that wish to communicate and the gateway is providing services for that communication. The managed device is an element that implements the OpenFlow protocol. The management channel is an OpenFlow channel between the gateway and the managed device . When the gateway and managed device establish a control channel between them the gateway will install a flow over the control channel as in . This flow will be set to match IP packets to match all 32 bits of the IP Dst field with one of the switch s own IP addresses to match the UDP protocol and to match the UDP destination port of . In most embodiments all other fields will be wildcarded. This example is one way of matching SNMP packets sent to the switch but the parameters can easily be modified or additional flows added to match other communication protocols. The gateway will also begin periodically sending OpenFlow commands to the managed device requesting data from the switch such as OFPMP PORT STATS OFPMP FLOW OFPMP TABLE and OFPMP METER. As the managed device sends replies to these commands the gateway can store the data received so that it can be returned when requested by the manager . When the manager sends an SNMP or other protocol packet to the managed device the switch will follow the downloaded flow rule and encapsulate the packet into a packetIn message and send it to the gateway which is a controller. The gateway can decapsulate the packet and process it transferring information to or from the managed device . When the response packet is generated it is sent to the managed device in an OpenFlow packetOut message which decapsulates the packet and forwards it to the manager . The gateway can also log some or all of the data received and if the gateway notices interesting conditions in the data it can log them locally or remotely or send them in events to the manager . If the gateway receives requests from the manager to write data to the switch it can translate them into the appropriate OpenFlow commands and send them on the control channel.

Instead of a flow that sends packets to the controller i.e. the gateway in packetIn messages the gateway can add a flow that sends packets in a tunnel to the gateway and back. The gateway could configure the tunnel using OF Config or could rely on CLI configuration or some out of band method. One of ordinary skill in the art will recognize that there are other ways to create and configure the tunnel. This mechanism can have the advantage of using the fast path on the switch and not interrupting the supervisor processor.

The gateway can also establish an OF Config connection with the OpenFlow switch so that it can provide gateway services for OF Config information.

Another embodiment is shown in . In this embodiment a forwarding element e.g. a switch or router identifies a management packet from manager to managed device and encapsulates the packet and sends it in a tunnel to gateway where it is processed and can be returned to the manager in the tunnel. This embodiment uses many of the mechanisms discussed earlier.

In other embodiments the communications being redirected to the gateway is not management traffic and the gateway is providing services unrelated to a managed device.

Referring to while it s possible for the gateway to be implemented on the same general purpose processor or server as the switch controller and even to share the same control connection there are benefits to separating these functions. Since monitoring and management packets between the gateway and the switch may be less time sensitive than control packets between the switch and the controller it may be a benefit to have the monitoring packets on their own communications channel so that it is less likely that they could delay the control packets. Further implementing the gateway on a separate general purpose computer or server as the switch controller can help ensure that both functions perform well and scale well to large networks.

In some embodiments switches can be configured to so that the communications channel to the gateway can be established in what s referred to as active mode where the switch connects to the gateway or what s referred to as passive mode where the gateway connects to the switch . While the gateway of the present invention will work with switches in either mode there may be benefits to passive mode because less configuration is required on the switch and because it affords more flexibility in moving the gateway without needing to reconfigure all the switches with which it communicates. When the gateway is communicating with the switch using an OpenFlow protocol the gateway can request a role it will assume in the communications. This role will control how the switch will act when there are multiple entities communicating with it using the OpenFlow protocol. There may be benefits for the gateway to choose the OFPCR ROLE EQUAL role and not to choose either of the OFPCR ROLE MASTER or OFPCR ROLE SLAVE roles.

Referring back to a managed device may send to GW manager a stream of incremental updates to one or more datasets on the managed device to minimize the cost of keeping data up to date in the gateway. Further the managed device can keep records of conditions that have occurred in between polls by the GW manager and either make them available for polling or send them asynchronously e.g. as events . For example peak values of resource utilization or error conditions can be recorded and or sent as events.

Regarding a switch that is controlled by at least one switch controller it may be advantageous in some circumstances for the gateway to receive information from or about the switch without adding a new connection to the switch. To accomplish this the gateway needs the help of either a listener or an interceptor. Referring to controller is communicating switch . A listener or receives network packets that are part of that communication and sends those packets or a statistical summary of those packets to the gateway . The listener can be implemented on the switch as in listener or on the controller as in listener or in the network either wiretapping packets or on a network forwarding device as in listener . Again referring to controller wishes to communicate with switch . The controller is configured to communicate with interceptor and interceptor is configured to communicate with switch . Any network packets from controller intended for switch are copied by interceptor and sent to switch . Any network packets from switch intended for controller are copied by interceptor and sent to controller . The interceptor sends a copy of some or all network packets received or a statistical summary thereof to gateway . The interceptor can be configured to receive network packets from gateway and send them to the switch as if they had been sent from the controller . The interceptor can also be configured to receive instructions from gateway as to network packets that should be sent to switch again as if they had been sent from the controller . In either case the interceptor sends a copy of some or all network packets received in response or a statistical summary thereof to gateway and in most cases will not forward network packets received in response on to the controller . As with the listener or the interceptor can be implemented in various places on the network for example on a device somewhere on the network or on the controller the gateway or the switch

Additional embodiments of the invention are described in more detail in applicant s U.S. provisional application 62 118 433 Monitoring and Managing Communications Networks filed Feb. 19 2015 the entire contents of which are incorporated herein by reference.

In some embodiments regardless of if SNMP methods or alternative methods are employed at least some of the various switches may be configured e.g. by appropriate flow table header filter and associated instructions to recognize monitoring packets addressed to that switch. The switch may be further configured with instructions to forward these monitoring packets to at least one monitoring gateway. This at least one monitoring gateway can then be used to send response information as network packets with headers addressed to the at least one manager device.

As previously discussed another problem that often exists with higher functionality network managed elements such as routers and servers is that even if that element s processing capability is in theory sophisticated enough to support network management protocols such as SNMP requests at a low speed or low volume in practice such devices that may not have enough processing capacity to handle a higher volume of network management requests from one or more NMS s while still performing its routine functions in a timely manner. That is such devices may have to make an unhappy decision between either performing their basic network function or responding to network monitoring requests but can t do both functions well at the same time.

Although certain specific devices with limited computing capability such as OpenFlow switches have been used throughout this disclosure as specific examples it should be evident that the methods disclosed herein can also be used to reduce the burden of servicing an overlarge number of network monitoring requests on more capable or higher functionality network managed elements. Thus in a more generalized version of the invention these techniques can be used to help assist nearly any type of network element where the network functionality of the element is limited when the element it is being subjected to an overlarge number of network monitoring requests. This is because nearly any network managed element that is being overloaded by network management monitoring requests can divert or request diversion of these requests to the invention s monitoring gateways and thus reduce the impact of the overload.

While various embodiments have been described with reference to examples and specific details those skilled in the art will be able to make various modifications to the described embodiments without departing from the true spirit and scope. The terms and descriptions used herein are set forth by way of illustration only and are not meant as limitations. In particular although the methods have been described by examples steps of the methods maybe performed in different orders than illustrated or simultaneously. Those skilled in the art will recognize that these and other variations are possible within the spirit and scope of this description.

