---

title: Scanner and non-transitory storage medium storing instructions executable by the scanner
abstract: A scanner includes: a communication device communicable with an information processing device; and a controller. The controller is configured to cause the scanner to execute: a determination processing in which the scanner determines whether a reading request which is a request for reading a pseudo image file is received from the information processing device; a scan executing processing in which the scanner executes a scan processing when the reading request for reading the pseudo image file is received in the determination processing; and a scan-data writing processing in which the scanner writes scan data created in the scan executing processing, into the pseudo image file.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09462140&OS=09462140&RS=09462140
owner: Brother Kogyo Kabushiki Kaisha
number: 09462140
owner_city: Nagoya-shi, Aichi-ken
owner_country: JP
publication_date: 20150326
---
The present application claims priority from Japanese Patent Application No. 2014 065722 which was filed on Mar. 27 2014 the disclosure of which is herein incorporated by reference in its entirety.

The present invention relates to a scanner communicable with an information processing device and to a non transitory storage medium storing a plurality of instructions executable by a processor of the scanner.

In the case where an information processing device such as a PC Personal Computer acquires scan data the information processing device needs to call a driver of a scanner from an application program using an API Application Programming Interface to transmit a scan instruction to the scanner using the called driver. That is a user needs to install the scan driver on the PC in advance.

Accordingly an aspect of the disclosure relates to a technique for allowing an information processing device to acquire scan data from a scanner without using a driver.

In one aspect of the disclosure a scanner includes a communication device communicable with an information processing device and a controller configured to cause the scanner to execute a determination processing in which the scanner determines whether a reading request which is a request for reading a false image file is received from the information processing device a scan executing processing in which the scanner executes a scan processing when the reading request for reading the false image file is received in the determination processing and a scan data writing processing in which the scanner writes scan data created in the scan executing processing into the false image file.

In another aspect of the disclosure a scanner includes a communication device communicable with an information processing device a storage configured to store a file and a controller configured to cause the scanner to execute a reception determining processing in which the scanner determines whether a command for execution of reading of the file is received from the information processing device via the communication device a scan executing processing in which the scanner executes a scan processing when the scanner determines that the command is received in the reception determining processing and a scan data transmitting processing in which the scanner transmits scan data created in the scan executing processing to the information processing device via the communication device.

In another aspect of the disclosure a non transitory storage medium stores a plurality of instructions executable by a processor of a scanner. The scanner includes a communication device communicable with an information processing device. The plurality of instructions when executed by the processor cause the scanner to execute a determination processing in which the scanner determines whether a reading request which is a request for reading a false image file is received from the information processing device a scan executing processing in which the scanner executes a scan processing when the reading request for reading the false image file is received in the determination processing and a scan data writing processing in which the scanner writes scan data created in the scan executing processing into the false image file.

In another aspect of the disclosure a non transitory storage medium stores a plurality of instructions executable by a processor of a scanner. The scanner includes a communication device communicable with an information processing device and a storage configured to store a file. The plurality of instructions when executed by the processor cause the scanner to execute a reception determining processing in which the scanner determines whether a command for execution of reading of the file is received from the information processing device via the communication device a scan executing processing in which the scanner executes a scan processing when the scanner determines that the command is received in the reception determining processing and a scan data transmitting processing in which the scanner transmits scan data created in the scan executing processing to the information processing device via the communication device.

A configuration of the scanner will be explained. The scanner includes a CPU Central Processing Unit as one example of a controller and a processor a storage device a panel a button input device a reading device a network interface as one example of a communication device and a USB interface as another example of the communication device . These devices are communicable with each other via an input output port .

The panel has a display surface for displaying various kinds of functions of the scanner . The button input device includes keys for execution of the various functions of the scanner and may be provided as a touch panel superposed on the panel . The reading device creates image data by scanning a document placed on an ADF Automatic Document Feeder or a flat bed.

The network interface can communicate with external devices over the network and is connected to the PCs over the network . This configuration allows the scanner to transmit and receive various kinds of data to and from the PCs . It is noted that an SMB Server Message Block protocol is used in communication between the scanner and the PCs over the network .

Also a USB cable is connected to the USB interface and the USB interface is connected to the PC via the USB cable . This configuration allows the scanner to transmit and receive various kinds of data to and from the PC . The USB interface includes an interface of a storage class and an interface of a vendor class.

The CPU executes processings according to a scan program as one example of a plurality of instructions stored in the storage device . The scan program is a program for execution of the scan processing. Hereinafter the CPU that executes programs such as the scan program may be simply referred to as the name of the program. For example the wording the scan program executes may mean the CPU that executes the scan program executes .

It is noted that the storage device is constituted by a combination of a RAM Random Access Memory a ROM Read Only Memory a flash memory a HDD Hard Disk Drive a buffer provided for the CPU and other similar devices. The storage device has a data storage area as one example of a storage . The data storage area stores various kinds of data including image data created by the reading device and data required for execution of the scan program .

A configuration of the PC will be explained. The PC includes a CPU a storage device a display a keyboard a network interface and a USB interface . These devices are communicable with each other via a bus .

The display has a display surface for displaying various kinds of functions of the PC . The keyboard is provided with keys for execution of the various functions of the PC .

The network interface communicates with external devices over the network and is connected to the scanner over the network . This configuration allows the PC to transmit and receive various kinds of data to and from the scanner . It is noted that the SMB protocol is used in communication between the scanner and the PC over the network .

The USB cable is connected to the USB interface and the USB interface is connected to the scanner via the USB cable . This configuration allows the PC to transmit and receive various kinds of data to and from the scanner . It is noted that a USB storage class is used in the communication between the scanner and the PC via the USB cable .

The CPU executes processings according to an image processing application program stored in the storage device . The image processing application program is a program for processing image data. Hereinafter the CPU that executes programs such as the image processing application program may be simply referred to as the name of the program. For example the wording the image processing application program executes may mean the CPU that executes the image processing application program executes .

It is noted that the storage device is constituted by a combination of a RAM a ROM a flash memory a HDD a buffer provided for the CPU and other similar devices. The storage device has a data storage area as one example of a storage . The data storage area is an area for storing various kinds of data including image data acquired from the scanner and data required for execution of the image processing application program .

The PC is substantially similar in configuration to the PC but connected to the scanner over the network .

The image processing application program of the PC is configured to read image data and process the image data. This image processing application program does not have a function for calling API of a scanner driver or a function for directly controlling the scanner. Such a program is common in image uploaders and other similar devices. In the present embodiment a named pipe as one example of a false image file or a pseudo image file is used for causing the image processing application program to read scan image.

 3 When file opening is commanded with respect to the named pipe in a write blocking mode opening processing is delayed until another process performs reading with respect to the named pipe.

The scan program is installed on the scanner and the scanner uses the scan program to offer scan image to the image processing application program via the named pipe. The image processing application program uses the SMB protocol or the USB storage class to read the named pipe as the file like a normal image file to read the scan data. A file name of this named pipe is attached with an extension representative of image data such as JPG. An image format representative of the extension coincides with that of the scan data.

A user can perform various kinds of settings by operating the button input device of the scanner . One of the settings is a backup mode. In this mode the scan data utilizing the named pipe is stored into the data storage area of the scanner .

When setting of the setting values for the scan processing and setting for the backup mode are performed the scan program creates directories in the data storage area of the scanner and each set of setting values for the scan processing which are set in a setting mode are set to a corresponding one of the directories. Specifically for example two directories are created and color scanning and a setting value of a resolution of 200 200 dpi are set in a first directory and black and white scanning and a setting value of a resolution of 400 400 dpi are set in a second directory. In the case where there are a plurality of settings subordinate directories are created and the settings are assigned respectively to the subordinate directories. That is the scan settings are hierarchically managed using the directories.

The named pipe is then created for each created directory. Specifically according to the scan program the set setting values for the scan processing are read and the setting values for the scan processing are extracted for each directory. The named pipe is then created for each directory according to the setting values for the scan processing. It is noted that in the case where the backup mode is set in the setting mode the named pipe whose pipe name i.e. the name of the pipe contains information about a serial number is created and in the case where the backup mode is not set in the setting mode the named pipe whose pipe name does not contain information about a serial number is created. Upon creation of the named pipe the blocking mode is set for the created named pipe and an open processing is executed.

When the scanner is connected to the PC via the USB interface the PC requests the scanner to transmit a descriptor. In response the scanner transmits a descriptor indicating that the scanner has the storage class and the vendor class. Upon receiving the descriptor the PC recognizes that the scanner includes a storage device. As a result in the case where the OS installed in the PC is a Windows registered trademark for example the PC creates a new drive letter e.g. E . Also in the case where the scanner is connected to the PC via the network interface the PC recognizes based on a file sharing protocol such as the SMB protocol that a storage device is connected to the CPU . The PC recognizes that the directory and the named pipe are stored in a new recording apparatus recognized in this manner.

In the case where the named pipe is read by the image processing application program of the PC the setting values for the scan processing which are set for the named pipe are acquired according to the scan program . Then a scan processing is executed by the scan program based on the acquired setting values and scan data is created in the scan processing. The scan program writes the scan data which is created in the scan processing to the named pipe read by the image processing application program . Accordingly the scan data written in the named pipe is acquired using the image processing application program of the PC . That is the image processing application program of the PC can read the scan data created by the scanner with the same operation as performed in reading of a normal image file stored in the data storage area . This configuration allows the PC to acquire the scan data from the scanner without using any scanner driver. Also since no scanner driver is required the scanner can perform scanning without depending upon architecture of the PC i.e. a type of a CPU or a platform i.e. a type of an OS . It is noted that the PC may use any of the SMB protocol and the USB storage class to read the named pipe. That is the PC can read the named pipe over the network and via the USB cable .

When the scan data written in the named pipe is acquired by the PC the named pipe is switched to an inactive state in which the named pipe cannot be used. That is the named pipe is closed. The named pipe is then deleted from the data storage area . However after the named pipe being deleted another named pipe is created again so as to be in a usable state in the above described manner. In the case where the backup mode is set the scan data written in the pipe that has been deleted is stored into the data storage area under the same name as that of the pipe. It is noted that when a new named pipe is created the serial number is incremented. As a result the scan data remains under the same name as that of the named pipe used for reading.

The image processing application program of the PC has the function for calling the API of the scanner driver and can transmit a scan instruction to the scanner . Thus when having received a scan instruction from the PC the scanner executes a scan processing. In the case where the scanner is connected to the PC via the USB reading using the function for calling the API is performed via the interface of the vendor class. Also the scanner may execute a scan processing according to a user operation performed on the button input device of the scanner . Specifically an input waiting screen not shown is normally displayed on the panel of the scanner and the input waiting screen contains a scan processing execution button not shown. The scanner executes a scan processing in response to a user operation performed on the scan processing execution button.

As thus described the scanner can execute three types of scan processings namely a scan processing utilizing the named pipe a scan processing according to a scan instruction transmitted from the PC and a scan processing according to a button operation performed on the scanner . A plurality of processings of these three types of scan processings may be input and in this case a processing which is input first is executed first and a processing which is input later is in a waiting state.

Specifically while the scan processing utilizing the named pipe or the scan processing according to the scan instruction transmitted from the PC is being executed for example a BUSY screen not shown is displayed on the panel of the scanner instead of the input waiting screen. Since the scan processing is being executed information displayed on the BUSY screen includes a comment indicating that the scan processing according to the button operation cannot be executed. The scan processing execution button is not displayed on the BUSY screen. As a result the scan processing according to the button operation performed on the scanner is in the waiting state.

When a scan instruction is received from the PC while the scan processing utilizing the named pipe or the scan processing according to the button operation performed on the scanner is being executed for example the scanner transmits a BUSY status to the PC . As a result an error is displayed on a display of the PC . Thus a user of the PC recognizes that another user is using the scanner and waits for the scan processing.

While the scan processing according to the scan instruction transmitted from the PC or the scan processing according to the button operation performed on the scanner is being executed for example the read permissions for all the named pipes stored in the data storage area are disallowed. As a result the named pipe cannot be read and an error is displayed during a reading processing. Thus the user recognizes that another user is using the scanner and waits for the scan processing.

While one of the scan processing utilizing the named pipe the scan processing according to the scan instruction transmitted from the PC and the scan processing according to the button operation performed on the scanner is being executed start triggers for the other two processings may be input. For example while the scan processing according to the button operation performed on the scanner is being executed reception of the scan instruction from the PC and reading of the named pipe may be performed. In this case one of the scan processing utilizing the named pipe and the scan processing according to the scan instruction transmitted from the PC may be executed with a higher priority than the other according to a preset priority rule.

In this case the priority rule may be set as desired. For example the scan processing utilizing the named pipe in the case where the USB storage class is used in reading of the named pipe may be given a higher priority than the scan processing according to the scan instruction transmitted from the PC the scan processing utilizing the named pipe in the case where the SMB protocol is used in reading of the named pipe . Also the scan processing according to the button operation performed on the scanner may be given a higher priority than the scan processing utilizing the named pipe. A scan processing for which a start trigger has been input first may be given a higher priority between the scan processing utilizing the named pipe in the case where the SMB protocol is used in reading of the named pipe and the scan processing according to the scan instruction transmitted from the PC .

Each of the scan processing utilizing the named pipe the scan processing according to the scan instruction transmitted from the PC and the scan processing according to the button operation performed on the scanner is executed by the CPU of the scanner according to the scan program . There will be next explained with reference to flows of processings executed by the CPU according to the scan program . It is noted that a flow in the setting mode is digressed from the essence of the present invention and will not be explained.

The scan program is executed when the scanner is started up. When the scan program is executed the flow begins with S at which a directory corresponding to the scan settings is created in the data storage area of the scanner if the directory does not exist. In this processing the setting values for the scan processing which are set in the setting mode are set for each directory. For example in the case where the print settings include resolutions of 300 dpi and 600 dpi and color scanning and monochrome scanning as a scan mode directories are created as follows 

The CPU at S creates pipe monitoring processes corresponding to the lowest level of the above described directory S . The CPU at S determines whether all pipe monitoring processes each for the directories which is created at S and which is stored in the data storage area have been created or not. When all the pipe monitoring processes are not created S NO this flow returns to S. When all the pipe monitoring processes are created S YES the CPU at S creates a command monitoring process. The CPU at S creates a panel operation monitoring process and at S creates an exclusion monitoring and permission setting process. As a result of the processings described above the plurality of pipe monitoring processes the command monitoring process the panel operation monitoring process the exclusion monitoring and permission setting process are executed in parallel.

In each pipe monitoring process as illustrated in the CPU at S reads the setting values for the scan processing which are set for each directory. The CPU at S determines whether the backup mode is set in the setting mode or not. When the backup mode is not set S NO a named pipe having the fixed name is created at S in the corresponding directory. For example in the case where this pipe monitoring process is created corresponding to the directory RESO300 dpi color this named pipe the file name of which is fixed name is created in the directory RESO300 dpi color . When the backup mode is set S YES a named pipe whose pipe name contains information about a serial number is at S created in the directory.

When the named pipe is created the CPU at S executes a pipe open processing. In this processing a writing only mode and the blocking mode are designated. In the blocking mode associated processings are stopped until writing is possible. In the case where an open processing is commanded in this mode this open processing is switched to the blocking state i.e. a processing stopped state until the named pipe is read. When this open processing is finished in other words when reading of the named pipe is requested from an external device e.g. the image processing application program of the PC the pipe open processing is finished and this flow goes to S.

The CPU at S determines whether the current state is an excluding state or not. The excluding state is a state in which when a start trigger for the scan processing is input for example when reading of the named pipe is requested from the external device in this case execution of a scan processing in response to the start trigger is disallowed on condition that another scan processing has been executed. This excluding state is started at another Step.

When the current state is the excluding state S YES the CPU at S waits until the excluding state is finished. When the excluding state is finished this flow goes to S. Also when the current state is not the excluding state S NO this flow goes to S. The CPU at S starts an excluding state. The CPU at S executes a scan processing based on the setting values set in the directory storing the read named pipe. The CPU at S writes the scan data created in the scan processing into the named pipe.

The CPU at S determines whether a predetermined length of time has passed from the reading of the named pipe or not. When the predetermined length of time has not passed S NO the CPU at S determines whether all the scan processings are finished or not. When all the scan processings are not finished S NO this flow returns to S. When all the scan processings are finished S YES this flow goes to S. Also when the predetermined length of time has passed at S S YES this flow goes to S. In this case an incomplete image is read by the PC as an error and the image is normally determined as an invalid image and processed as an error by an application having read the image.

The CPU at S finishes the excluding state. The named pipe used for the scan processing is at S switched to the inactive state. That is the named pipe is closed. At S the closed named pipe is deleted from the directory. The CPU at S determines whether the backup mode is set or not. When the backup mode is set S YES the CPU at S stores the scan data under the same name as that of the deleted named pipe. The CPU at S increments the serial number by one and this flow returns to S.

In the command monitoring process as illustrated in the CPU at S determines whether a command such as a scan instruction has been input from the external device such as the PC or not. When the command is not input S NO the CPU repeats the processing at S. When the command is input S YES the CPU at S determines whether the current state is the excluding state or not. When the current state is the excluding state S YES the CPU at S transmits the BUSY status to the external device having transmitted the command and this flow returns to S.

When the current state is not the excluding state S NO the CPU at S starts an excluding state. The CPU at S executes a scan processing based on the command. The CPU at S transmits scan data created in the scan processing to the external device having transmitted the command. The CPU at S finishes the excluding state and this flow returns to S.

In the panel operation monitoring process as illustrated in the CPU at S determines whether the current state is the excluding state or not. When the current state is the excluding state S YES the CPU at S controls the panel of the scanner to display the BUSY screen and this flow returns to S.

When the current state is not the excluding state S NO the CPU at S controls the panel of the scanner to display the input waiting screen. The CPU at S determines whether the scan processing execution button has been operated on the input waiting screen or not. When the scan processing execution button is operated S YES the CPU at S starts an excluding state. The CPU at S executes the scan processing. The CPU at S transmits the scan data created in the scan processing to an external device registered in advance. The CPU at S finishes the excluding state and this flow returns to S. It is noted that also when the scan processing execution button is not operated at S S NO this flow returns to S.

In the exclusion monitoring and permission setting process as illustrated in the CPU at S waits for switching of the exclusion state. The CPU at S determines whether the current state is the excluding state or not as a result of the switching of the exclusion state. When the current state is the excluding state S YES the CPU at S disallows the read permission for the named pipe and this flow returns to S. It is noted that in the case where the excluding state is started at S in other words in the case where the excluding state is started by reading of the pipe reading of the pipe that is currently read is not disallowed in this pipe reading disallowing processing at S. When the current state is not the excluding state S NO the CPU at S allows the read permission for the named pipe and this flow returns to S.

It is noted that the processing executed by the CPU at S is one example of a determination processing. The processing executed by the CPU at S is one example of a scan executing processing. The processing executed by the CPU at S is one example of a scan data writing processing. The processings executed by the CPU at S and S are one example of a false image file creating processing. The processing executed by the CPU at S is one example of a false image file closing processing. The processing executed by the CPU at S is one example of a restricting processing. The processing executed by the CPU at S is one example of a canceling processing.

While the named pipe is created in the data storage area of the scanner in the above described embodiment the named pipe may be created in the data storage area of the PC . Specifically authentication of the SMB protocol is performed between the scanner and the PC . In the case where this authentication has succeeded the scanner acquires a permission for accessing the PC and determines based on the permission for accessing the PC whether various kinds of data can be written into the data storage area of the PC or not. When the various kinds of data can be written into the data storage area the scanner creates a named pipe in the data storage area of the PC . It is noted that in the case where the authentication of the SMB protocol has not succeeded between the scanner and the PC or in the case where various kinds of data cannot be written into the data storage area an error screen is displayed on the panel of the scanner .

When the named pipe is created in the data storage area of the PC the pipe open processing is executed as in the first embodiment. When reading of the named pipe is requested from the image processing application program of the PC the pipe open processing is finished and the scanner executes a scan processing. Scan data created in the scan processing is written using the SMB protocol into the named pipe created in the data storage area of the PC . As thus described the same effects as obtained in the first embodiment can be obtained by creating the named pipe in the data storage area of the PC .

There will be next explained with reference to a flow of processings executed by the CPU according to the scan program to execute the processings in the above described second embodiment. It is noted that the flow which will be explained below is a pipe monitoring process which is executed instead of the pipe monitoring process illustrated in . It is noted that the present pipe monitoring process is executed in the state in which the backup mode is set.

In the present pipe monitoring process as illustrated in the CPU at S reads setting values for a scan processing which are set for each directory. At S the authentication of the SMB protocol is performed between the scanner and the PC . The CPU at S determines whether the authentication of the SMB protocol has succeeded or not. When the authentication of the SMB protocol has succeeded S YES the scanner at S acquires a permission for accessing the PC .

Based on the acquired permission the CPU at S determines whether various kinds of data can be written into the data storage area of the PC or not. When the various kinds of data can be written into the data storage area of the PC S YES a named pipe whose pipe name contains information about a serial number is at S created in the directory of the data storage area .

When the named pipe is created the CPU at S determines whether the current state is the excluding state or not. When the current state is the excluding state S YES the CPU at S waits until the excluding state is finished. When the excluding state is finished this flow goes to S. Also when the current state is not the excluding state S NO this flow goes to S. The CPU at S executes a pipe open processing. The CPU then executes processings at S and subsequent steps but these processings are the same as the respective processings at S S S and S in the pipe monitoring process in the first embodiment and an explanation of which is dispensed with.

It is noted that when the authentication of the SMB protocol has not succeeded at S S NO or when various kinds of data cannot be written into the data storage area of the PC at S S NO the CPU at S controls the panel of the scanner to display an error screen and this flow returns to S.

It is noted that the processing executed by the CPU at S is another example of the determination processing. The processing executed by the CPU at S is another example of the scan executing processing. The processing executed by the CPU at S is another example of the scan data writing processing. The processing executed by the CPU at S is another example of the false image file creating processing. The processing executed by the CPU at S is another example of the false image file closing processing.

In the present embodiment a named pipe which is assumed not to be used by the user can be deleted. For example in the case where an error having occurred in the scanner inhibits execution of a particular scan processing a directory set for the particular scan processing is searched and a named pipe stored in the searched directory is deleted. Specifically in the case where the ADF is failed and a scan processing cannot be executed for a document placed on the ADF the CPU searches a directory set for a scan processing for a document placed on the ADF and deletes a named pipe stored in the searched directory. A text file in which an error message has been written is created in the directory. As a result in the case where reading is performed from the PC to the directory by the user for scanning for example the user finds the text file in the directory instead of the pipe as the false image file. The error message contains a comment indicating that the scan processing using the ADF cannot be performed due to the failure in the ADF and thereby the user of the PC recognizes that the scan processing using the ADF cannot be performed.

In the case where the error is cleared and thereby the particular scan processing can be restarted the directory set for the particular scan processing is searched and the text file in which the error message has been written is deleted from the searched directory. A named pipe is then created again in the directory. Specifically in the case where the failed ADF is recovered the directory set for the scan processing for the document placed on the ADF is searched and the text file stored in the searched directory is deleted. A named pipe is then created again in the directory. As a result the scan processing for the document placed on the ADF can be executed in the scan processing utilizing the named pipe.

Not only in the case where an error has occurred but also in the case where the scan processing utilizing the named pipe is being executed named pipes other than the named pipe for which the scan processing is to be executed are also deleted. A text file in which a BUSY message has been written is created in a directory in which the deleted named pipe had been stored. The BUSY message contains a comment indicating that a new scan processing cannot be accepted because the scan processing is being executed. Having viewed the BUSY message the user of the PC recognizes that the scan processing cannot be executed at this time.

When the scan processing is finished the named pipe which is deleted before is created again. Also the text file in the directory for storing the named pipe created again is deleted. As a result the scan processing utilizing the named pipe can be executed again.

There will be next explained with reference to a flow of processings executed by the CPU according to the scan program to execute the processings in the above described third embodiment. It is noted that the flow which will be explained below is a scanner monitoring process and can be created after e.g. the processing at S in the flow illustrated in . In the scanner monitoring process as illustrated in the CPU at S determines whether an error has occurred in the scanner or not.

When an error has occurred S YES the CPU at S searches a directory set for setting values relating to the error. The CPU at S deletes a named pipe stored in the searched directory. The CPU at S creates text file in which an error message has been written in the directory which had stored the deleted named pipe and this flow returns to S.

When an error has not occurred at S S NO the CPU at S determines whether the error has been cleared or not. When the error is cleared S YES the CPU at S searches the directory set for the setting values relating to the cleared error. The CPU at S deletes the text file stored in the searched directory. The CPU at S creates the named pipe again in the searched directory and this flow returns to S.

When the error is not cleared at S S NO the CPU at S determines whether the scan processing utilizing the named pipe is being executed or not. When the scan processing is being executed S YES the CPU at S deletes all the named pipes other than the named pipe corresponding to the scan processing being executed. The CPU at S creates a text file in which a BUSY message is written in the directory that had stored the deleted named pipe and this flow returns to S.

When the scan processing is not being executed at S S NO the CPU at S determines whether the scan processing is completed or not. When the scan processing is completed S YES the CPU at S creates the named pipe again in a directory in which no error message is written. The CPU at S deletes the text files containing the BUSY messages from all the directories and this flow returns to S.

It is noted that the processing executed by the CPU at S is one example of a state acquiring processing. The processing executed by the CPU at S is one example of a pseudo image file deleting processing. In the above described embodiment causes e.g. an error and BUSY of hindrance to scanning are not detected at the same time but may be detected at the same time. In this case in the case where the directory has already stored the text file in which the error message has been written a message for another cause newly detected is additionally written into the text file. In this case where the cause is cleared the CPU deletes only the error message relating to the cleared cause. In the case where all the error messages are deleted the CPU deletes the text file and creates a named pipe again in the directory.

In the above described embodiments the CPU executes the scan processing utilizing the named pipe i.e. the pseudo image file provided virtually. However the CPU may monitor a processing command provided for the file system and change processings as needed. In the case where the scanner and the PC are connected to each other using USB the file is processed using a command of the storage class in most cases. In connection over the network the file is processed using a command according to the SMB protocol. The CPU monitors these commands and when the CPU determines that a request for reading the file is received the CPU transmits a file of a read image as a response. Specifically an empty image file hereinafter may be referred to as scan activation file is created in advance in a directory stored in the data storage area of the scanner . This scan activation file is attached with an extension representative of image data such as JPG. An image format representative of the extension coincides with that of the scan data. In the case where the scan activation file is read a scan processing is executed. It is noted that determination of whether the scan activation file has been read or not is performed not based on whether the scan activation file has actually been read or not that is whether the scan activation file has been accessed or not but based on a command used when reading the scan activation file. That is the CPU monitors a command input to the scanner and determines whether the input command is for the scan activation file or not. When the input command is for the scan activation file the CPU determines whether a content of the command is reading of the file or not. When the content of the command is the reading of the file the CPU determines that the scan activation file is to be read.

When the scan activation file is to be read the scanner executes a scan processing. A file based on the scan data created in the scan processing is then transmitted to an external device having transmitted the command as a file for which the reading processing is executed. As thus described the same effects as obtained in the first embodiment can be obtained by using a normal file instead of the named pipe.

There will be next explained with reference to a flow of processings executed by the CPU according to the scan program to execute the processings in the above described fourth embodiment. It is noted that the flow which will be explained below is a file monitoring process which is created in the flow in instead of the pipe monitoring process. This flow is for explaining a concept and does not coincide with the actual command of the USB storage class or the SMB protocol.

In the file monitoring process as illustrated in this flow begins with S at which the CPU waits for input of a command of the SMB protocol or the USB storage class for a file stored in the scanner . The CPU at S determines whether the input command is for the scan activation file or not. When the command is for the scan activation file S YES the CPU at S determines whether the content of the command is reading of the file or not. When the content of the command is the reading of the file S YES the CPU at S starts an excluding state.

The CPU at S determines whether the scan activation file contains scan data or not. This file is an empty image file as an initial value but in the case where this function has already been used this file may store an image created in the previous scanning. When the scan activation file contains scan data S YES the CPU at S deletes the scan data and this flow goes to S. When the scan activation file contains no scan data S YES this flow goes to S at which the CPU executes a scan processing.

The CPU at S creates scan data in the scan processing and stores the created scan data as the scan activation file. The CPU at S transmits the scan data to an external device having transmitted the command as a response to the file reading processing. The CPU at finishes the excluding state and this flow returns to S.

When the command is not for the scan activation file at S S NO or when the content of the command is not the reading of the file at S S NO the CPU at S executes a normal processing based on the command and this flow returns to S.

It is noted that the processings executed by the CPU at S and S are one example of a reception determining processing. The processing executed by the CPU at S is another example of the scan executing processing. The processing executed by the CPU at S is one example of a scan data transmitting processing.

While the embodiments have been described above it is to be understood that the disclosure is not limited to the details of the illustrated embodiments but may be embodied with various changes and modifications which may occur to those skilled in the art without departing from the spirit and scope of the disclosure. Specifically the scan data is acquired in the case where the named pipe is read by the execution of the image processing application program by the PC in the above described embodiment for example. However the CPU can acquire the scan data by reading of the named pipe during execution of a program such as a document creating program and a print processing program.

In the above described embodiment the excluding state is started in the case where the scanner has received the scan instruction from the PC when the scan processing is executed according to the scan instruction transmitted from the PC . However this communication system may be configured such that when the scanner driver is executed in the PC the PC transmits a predetermined signal to the scanner and when having received the predetermined signal the scanner starts the excluding state. That is the scanner may start the excluding state by execution of the scanner driver in the PC .

In the above described embodiments the processings illustrated in are executed by the CPU . These processings do not need to be executed by the CPU and may be executed by an ASIC or another or other similar logical integrated circuits and may be executed by cooperation of the CPU the ASIC and the logical integrated circuit for example.

