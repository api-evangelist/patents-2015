---

title: Token-based security for remote resources
abstract: Systems and methods of token-based protection for remote resources are disclosed. For example, a method may include receiving, at a second computing device, a configuration message from a first computing device. The configuration message includes information to configure a resource at the second computing device. For example, the resource may be a cloud transcoder. The method also includes generating, at the second computing device, a short token that enables the first computing device to access the resource. For example, the short token may be used to receive a long token that can be used to send application programming interface (API) requests to the cloud transcoder.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09135412&OS=09135412&RS=09135412
owner: WOWZA MEDIA SYSTEMS, LLC
number: 09135412
owner_city: Golden
owner_country: US
publication_date: 20150224
---
The popularity of the Internet coupled with the increasing capabilities of personal mobile electronic devices has provided consumers with the ability to enjoy multimedia content almost anytime and anywhere. For example live e.g. sports events and video on demand VOD content e.g. television shows and movies can be streamed via the Internet to personal electronic devices e.g. computers mobile phones and Internet enabled televisions .

Cloud computing is emerging as a viable alternative to local computing. For example instead of purchasing computer hardware and software for a local database system video transcoding system etc. an enterprise may instead lease processing and storage resources from a cloud service provider. The cost of leasing cloud resources may be based on how much data is processed using the cloud resources how often and or for how long the cloud resources are used how many devices access the cloud resources etc. To control costs an enterprise may desire to restrict access to cloud resources and other remote resources that the enterprise will be billed for.

Systems and methods of token based security for remote assets such as cloud resources are disclosed. A remote server e.g. a cloud based server may include one or more assets to be accessed by a local server. The remote server may generate a short token e.g. a six to eight character alphanumeric code upon configuration of the one or more asset s and the short token may be displayed to a user e.g. on a graphical user interface GUI . When the user inputs the short token into at the local server the local server may use the short token to initiate a connection to the remote server. The short token may be a short lived single use token that is easy for the user to remember. The remote server may verify the short token and may provide a long token to the local server. For example the long token may be a 32 or 64 character token that provides improved security as compared to the short token.

The local server may use the long token to communicate with the remote server. For example the remote server may support an application programming interface API . To request the remote server to perform specific operations the local server may send a request in accordance with the API where the request includes the long token. For example each API request may be a hypertext transfer protocol HTTP secure HTTPS communication that includes the long token. The present application may provide a two phase token based authorization process for accessing remote computing resources e.g. a cloud transcoder . Use of the described authorization process may enable an enterprise or individual to control who has access to the remote computing resources providing the enterprise or individual increased control of the costs incurred during the use of such resources.

The first computing device includes a video processing module and a memory . The first computing device is also configured to display e.g. at a display device coupled to the first computing device a configuration interface and an access interface . The second computing device includes a transcoder a configuration module a token generation module and a token validation module . It should be noted that in alternative embodiments the second computing device may include resources other than a transcoder such as content delivery network CDN resources and or video streaming player resources as illustrative non limiting examples. The second computing device may support receipt and processing of requests that are formatted in accordance with an application programming interface API . In an illustrative embodiment the API is a representational state transfer REST API. One or more components of the computing devices may correspond to hardware software e.g. instructions executed by one or more processors or a combination thereof.

The video processing module may be configured to generate an encoded video e.g. streaming media content . The encoded video may correspond to a live stream or a video on demand VOD stream as further described with reference to . The video processing module may include one or more encoders not shown one or more decoders not shown one or more transcoders not shown or any combination thereof. The encoders may encode data that is to be transmitted by the first computing device . For example the encoders may encode video to generate the encoded video . The transcoders may be configured to perform bitrate conversion encoder decoder CODEC conversion frame size conversion etc. Depending on a format of a received stream a playback format supported by a requesting device and or a transcoding parameter in use a transcoding operation performed by the transcoders may trigger a decoding operation by the decoders and or a re encoding operation by the encoders. In a particular embodiment the video processing module enables the first computing device to process data e.g. video data in accordance with multiple coding technologies and protocols.

The configuration interface may enable a user of the first computing device to configure a remote resource such as a resource of the second computing device such as the transcoder . For example a user may input particular transcoder settings using the configuration interface . In an illustrative embodiment the configuration interface is generated by the configuration module and sent to the first computing device where the configuration interface is displayed in a web browser. Data input by the user into the configuration interface may be sent back to the configuration module at the second computing device for use in provisioning and configuring the transcoder . Operations that may be performed when provisioning and configuring the transcoder may include but are not limited to allocating reserving processor and or memory resources at the second computing device e.g. in a computing cloud for execution of a software transcoder instance establishing connection endpoints e.g. HTTP connection endpoints for the transcoder instance etc.

To enable access control for the transcoder the token generation module at the second computing device may generate a short token . In a particular embodiment the short token is formatted so that it is easy for a human to remember. The short token may also be easily input at devices having a limited user input interface such as a joystick or other keyboard less input device. One example of such user input interfaces is an alphanumeric soft keyboard displayed by a set top box or other computing device when alphanumeric input is requested e.g. where the user uses up down left right navigation buttons to select the alphanumeric characters . For example the short token may be a six to eight character alphanumeric code. The short token may be displayed within the configuration interface . In a particular embodiment the short token is a connection code that enables communication with the transcoder . It will be appreciated however that because the short token is easy to remember the short token may enable a user to more easily configure a computing device e.g. the first computing device to access the transcoder . However the relatively small length of the short token may make the short token easier to generate in a brute force attempt to use the transcoder without authorization. To reduce the chances of misuse the short token may be configured to expire within a particular time period after generation and or after a single use. As a non limiting example the short token may expire twenty four hours after being generated.

To use the short token a user may input the short token into a token input field of the access interface . For example the access interface may be a GUI that enables the user to set up a connection between the first computing device and the transcoder so that the first computing device can send commands and or data to the transcoder . As an illustrative non limiting example the video processing module may generate the encoded video as a high quality e.g. high bitrate and or high definition HD video stream . To support streaming of the encoded video to devices having different bandwidths screen resolutions and processing capabilities the first computing device may send the encoded video to one or more transcoders e.g. the transcoder where the transcoders generate different bitrate and or resolution versions of the encoded video . The transcoders may also generate versions of the encoded video that are compatible with different video streaming protocols.

When the user enters the short token into the token input field the short token may be sent to the second computing device . The token validation module may validate the short token . If the received short token is invalid e.g. not recognized expired already used and or scope mismatch the second computing device may provide an error message to the first computing device . Alternatively instead of providing a separate error message the second computing device may include the error information in a response payload of a response to the API request . Conversely if the short token is valid the token generation module may generate a long token . Alternatively the long token may have been generated at the same time as the short token . The long token may be an alphanumeric code e.g. a 32 character 64 character or longer alphanumeric code that is more difficult to guess or generate in a brute force attack. In some examples the long token is generated using cryptographic or other security operations. In a particular embodiment the long token may be a hash of information to further validate the long token . In this embodiment an unauthorized user may be able to guess or find a long token but the long token would nonetheless be determined to be invalid e.g. due to a scope mismatch . To illustrate the long token may be a hash of may be generated using and or may be associated with information regarding an scope of use for the long token where the scope identifies a specific resource a specific user a specific operation a specific timeframe of use and or other scope information. When an unauthorized user attempts to use the long token even though the long token is recognized the long token may be determined to be invalid because the long token is being used in a different scope. The long token may replace the short token for use in communicating with the transcoder . For example after the short token is initially used by the first computing device to connect to the second computing device the long token may be provided to the first computing device for use in all subsequent attempts to control the transcoder . For example the first computing device may include the long token in one or more requests that are supported by the API and that can be used to control operation of the transcoder and or enable retrieval of status information associated with the transcoder . In a particular embodiment upon receiving the long token the first computing device stores the long token in the memory .

During operation the user may set up the transcoder by inputting the transcoder settings into the configuration interface . The transcoder settings may include one or more of a transcoder instance name an input and or output video frame width an input and or output video frame height a domain name a stream uniform resource locator URL a stream name an application name a username password an input and or output bitrate an input and or output streaming protocol a maximum number of processors allowed for the transcoder a maximum amount of memory usage allowed for the transcoder a number of users or devices permitted to access the transcoder etc. The transcoder settings may be transmitted to the second computing device in a configuration setup message .

Upon receiving the configuration setup message the second computing device may configure the transcoder based on the transcoder settings . The second computing device may also send the short token to the first computing device as a connection code .

To access the transcoder the user may input the connection code into the token input field of the access interface . In an alternative embodiment the connection code may be input into a command line or into a configuration file such as an extensible markup language XML file. The user may have a particular time period e.g. twenty four hours to correctly input the connection code into the token input field before the connection code expires. If the connection code expires the user may request the second computing device to generate a new connection code. Regenerating another connection code may not change the long token but may instead pair a new short token with the long token .

After the connection code is entered the first computing device may send the connection code to the second computing device in a verification message . In a particular embodiment the verification message may be a hypertext transfer protocol secure HTTPS message supported by the API that includes the connection code in a short token field or argument. In an illustrative example the verification message is a POST command that provides the second computing device the connection code and instructs the second computing device to return the long token if the token validation module determines that the connection code is valid e.g. matches the short token has not expired and has not previously been used . In a particular embodiment the verification message may include 

If the connection code is invalid the second computing device may send an error message to the first computing device in response to which the first computing device may prompt the user to reenter the connection code into the token input field . Alternatively if the connection code is valid the second computing device may respond to the verification message with a confirmation message that includes the long token . For example the long token may be a HTTP response payload of the above POST command 

The long token may enable the first computing device to reconfigure the transcoder to set up publishing end points and to perform other actions. To illustrate after receiving the long token via the confirmation message the user may enter or select operations e.g. in a command field to be performed by the transcoder where each such operation results in transmitting an API request . For example the API requests may be HTTPS GET commands HTTPS PUT commands HTTPS POST commands etc. Each of the API requests may include the long token as part of a request URL and or as part of a request payload. The long token may be valid for the life of the transcoder . In a particular embodiment each of the API requests also includes an API key as part of an HTTPS header where the API key enables use of the API . The API key may therefore be specific to a particular enterprise customer or vendor whereas the short token and the long token may be specific to the particular instance of the cloud transcoder . In a particular embodiment different API keys may be issued for sandbox e.g. testing and production access.

As a first illustrative non limiting example a first GET command may be used to retrieve characteristics of the transcoder and information used to connect to the transcoder and publish a stream 

The second computing device may validate the first GET command by verifying that the long token included in the first GET command exists and that the transcoder associated with the long token belongs to an active authorized user. The response payload of the first GET command may include connection information characteristics and publishing details for the transcoder 

As another illustrative non limiting example a second GET command may be used to receive status information regarding the transcoder 

To validate the second GET command the second computing device may verify that the transcoder corresponding to the long token exists. Upon determining that the second GET command is valid the second computing device may return a status of the transcoder . The status may indicate whether the transcoder has started has stopped is in the process of starting is in the process of resetting etc. In a particular embodiment the status is included in a response payload of the second GET command 

As another illustrative non limiting example a first POST command may be used to start the transcoder via a start API endpoint 

If the first POST command is valid e.g. if the transcoder associated with the long token exists the transcoder may start transcoding operations and generate output video stream s . When successful a response payload of the first POST command may be 

As another illustrative non limiting example a second POST command may be used to stop the transcoder via a stop API endpoint 

If the second POST command is valid e.g. if the transcoder associated with the long token exists the transcoder may stop transcoding operations and cease generating output video stream s . When successful a response payload of the second POST command may be 

As another illustrative non limiting example a third POST command may be used to reset the transcoder via a reset API endpoint 

If the third POST command is valid e.g. if the transcoder associated with the long token exists operation at the transcoder may be reset to an initial default state. When successful a response payload of the third POST command may be 

In a particular embodiment a PUT command may be used instead of a POST command. For example a PUT command may be used to access the start stop and reset API endpoints . In a particular embodiment endpoints supported by the API e.g. endpoints corresponding to the verification message and the API requests return a HTTP 20X status code where X 1 2 3 4 5 or 6 if valid successful and error information in a response payload if invalid unsuccessful.

The system of may thus provide token based security for access to remote computing resources such as the cloud transcoder . In particular the system of combines the ease of use associated with the short token with the increased resistance to brute force attacks provided by the long token .

Although the first computing device is described above as a server computing device e.g. local streaming engine and the second computing device is described above as a cloud based server it should be noted that the described token based security methodology may also be used in alternative configurations and use cases. For example in other embodiments the first computing device may be a media player configured to playback a media stream or a capture device configured to capture a media stream. Alternatively or in addition the second computing device may be a local streaming engine or media server. The described systems and methods may thus be used to secure access to cloud based resources as well as local computing resources.

It should also be noted that in alternative embodiments more fewer and or different functions described with reference to as being performed by the second computing device may instead be performed by an external server. As a non limiting example in some embodiments the token generation module may be executed by the external server but the token validation module may be executed by the second computing device or vice versa. Further the token based protection mechanism described herein may be independent of a protocol of a media stream sent to a transcoder or produced by a transcoder. That is token based security may be protocol agnostic and the same API may be used to control the transcoder regardless of the encoding and transport mechanisms used to send a media stream to the transcoder or to receive a media stream from the transcoder . Thus in a particular embodiment the described techniques may be used for various media streaming protocols including but not limited to real time messaging protocol RTMP and variants thereof real time streaming protocol RTSP hypertext transfer protocol HTTP HTTP live streaming HLS HTTP dynamic streaming HDS smooth streaming and motion picture experts group MPEG dynamic adaptive streaming over HTTP MPEG DASH .

Referring to a particular illustrative embodiment of an interface operable to configure a cloud transcoder instance is shown. In a particular embodiment the interface may correspond to the configuration interface of .

In the example of the interface includes a start stream button configured to initiate sending a stream to the cloud transcoder. The interface is organized into multiple tabs and in an overview tab is highlighted to indicate that the overview tab has been selected by a user. The overview tab includes a stream preview section . In the example of the live stream has not yet been started so the stream preview section displays a Not Started message. The overview tab further includes a status section that displays status information associated with a source stream the cloud transcoder instance and or stream delivery. Examples of such status information may include but is not limited to an inbound bitrate an outbound bitrate actual and or configured CPU usage frame size and total unique users e.g. stream viewers .

The interface further includes a connection code . In an illustrative embodiment the connection code may be generated by the token generation module of as described with reference to the short token of . In the example embodiment of the connection code is 501f41 i.e. a six character alphanumeric code . As described with reference to a user may input the connection code to access the cloud transcoder instance associated with the interface . The connection code may expire within a particular time period e.g. 24 hours after generation or after a single use. After expiration the connection code may no longer be displayed to the user via the interface . Instead the interface may be used to generate a new connection code e.g. via the video source tab .

Although not shown in the interface may enable a user to select various options associated with a cloud transcoder instance. For example a user may use the interface to select a cloud service provider a geographical location region for the cloud transcoder instance virtual machine parameters e.g. operating system number of virtual CPUs amount of random access memory RAM amount of disk e.g. solid state memory etc. monitoring options network subnet options software license keys security settings e.g. which protocols internet protocol IP addresses and ports are opened logging options cloud billing options and alerts etc.

In a particular embodiment the interface can be accessed in a web browser by using an internet URL or IP address of the cloud computer executing the cloud transcoder instance. As an illustrative non limiting example if the IP address of the cloud computer is 54.200.220.235 then the interface may be accessed using a specific port e.g. port 8088 by a user navigating a web browser to 54.200.220.235 8088.

The interface of may thus enable a user to configure a cloud transcoder instance view status information regarding the cloud transcoder instance and generate view a connection code e.g. short token that can be used to communicate with the cloud transcoder instance. The connection code may be easy for the user remember may have a short time to live TTL and may be single use to reduce the likelihood of a brute force attack. For example as described with reference to the connection code may be replaced with a longer token that is used during subsequent communication with the cloud transcoder instance.

A first method includes receiving at a second computing device a configuration message from a first computing device at . The configuration message may include information to configure a resource at the second computing device. For example referring to the configuration interface of the first computing device may transmit the transcoder settings to the second computing device using the configuration setup message . Upon receiving the configuration setup message the second computing device may configure the transcoder based on the transcoder settings .

Advancing to a short token may be generated e.g. after configuration of the transcoder or other resource . For example referring to the token generation module may generate the short token and optionally the long token . The short token may be displayed at the configuration interface as the connection code . The short token may enable the first computing device to access the transcoder as described with reference to .

A second method includes sending a configuration message from a first computing device to a second computing device at . The configuration message includes information to configure a resource e.g. a transcoder at the second computing device. For example referring to the first computing device may transmit the configuration setup message to the second computing device where the message includes the transcoder settings .

Continuing to a short token may be received where the short token is generated at the second computing device and enables the first computing device to access the resource. For example referring to the short token may be generated by the token generation module and displayed at the configuration interface as the connection code . The short token may enable the first computing device to access the transcoder .

The short token may be provided to the second computing device to access the resource and to receive a long token generated by the second computing device at . For example referring to to access the transcoder a user may input the connection code e.g. the short token into the token input field of the access interface . In a particular embodiment the user may have a particular time period e.g. twenty four hours to correctly input the connection code into the token input field before the connection code expires. If the connection code expires the user may regenerate a new connection code via the configuration interface . The first computing device send the code entered into the token input field the second computing device as part of the verification message . The token validation module at the second computing device may validate the connection code and if the connection code is valid the second computing device may send the first computing device the confirmation message including the long token . The first computing device may store the long token in the memory for subsequent use e.g. for inclusion in the API requests to enable the user to use the API control the transcoder retrieve status information associated with the transcoder etc. . The methods of may thus enable users to gain access to remote resources or assets such as a cloud transcoder instance by use of a short token and a long token.

The computing device may include one or more processors and various components that are executable by the processor s . The computing device may correspond to or include software application s that perform media serving or processing hardware systems e.g. servers that support or perform media serving and processing or any combination thereof. Thus various operations described with reference to the computing device or components thereof may be implemented using hardware software e.g. instructions executable by the processor s or any combination thereof.

The computing device may include one or more network interfaces . For example the network interface s may include input interface s and output interface s that are configured to receive data and to send data respectively. In a particular embodiment the network interface s may be wired and or wireless interfaces that enable the computing device to communicate data via a network such as the Internet. For example the network interface s may include an Ethernet interface a wireless interface compatible with an Institute of Electrical and Electronics Engineers IEEE 802.11 e.g. Wi Fi protocol or other wired or wireless interfaces.

The network interface s may be configured to receive one or more media streams such as an illustrative live media stream from a capture source e.g. a camera or a computing device that includes or is coupled to the capture source . In an illustrative embodiment the capture source may include or be coupled to the first computing device of . The live media stream may include audio data video data text data closed captioning CC data and or subtitle data. The network interface s may also be configured to transmit data to the one or more playback devices e.g. a smartphone a tablet computer a laptop computer a desktop computer a set top box a television a portable media player a game console etc. . In the embodiment of the playback devices include a desktop laptop computing device a television TV set top box a smartphone and a tablet computer . The network interface s may further be configured to transmit data to the one or more other servers e.g. a media server a stream relay server a server of a content distribution network e.g. an edge server etc. . In the embodiment of the other servers include a media server stream relay server and a server of a content distribution network CDN . In a particular embodiment data transmitted to the playback devices and to the servers includes video streams. The video streams may be associated with the same encoding format and transmission protocol or may be associated with different encoding formats and transmission protocols. In a particular embodiment generating the video streams includes performing video decoding encoding transcoding and or transmuxing operations at the computing device e.g. to modify a video encoding format an audio encoding format a bitrate an aspect ratio packaging etc. relative to the incoming media stream . In a transmuxing operation encoded audio and video may be repackaged without modifying the encoded audio and video.

The computing device may include various components configured to perform stream processing functions. For example the computing device may include one or more video processing components such as encoder s decoder s and or transcoder s each of which may be implemented using hardware software or both. In a particular embodiment the transcoder s may correspond to the transcoder of . For example the transcoder s may be executed by cloud based virtual machines. The transcoder s may be configured to perform encoding decoding bitrate conversion CODEC conversion frame size conversion etc. Depending on a format of a received stream a playback format supported by a requesting device and or transcoding parameters in use a transcoding operation performed by the transcoder s may trigger a decoding operation and or a re encoding operation. In a particular embodiment parameters used by the transcoder s are stored in one or more transcoding templates at the computing device . The transcoder s may thus enable the computing device to process data in accordance with multiple coding technologies and protocols.

For example the computing device may support video encoding types including but not limited to H.264 on2 VP based encoding on2 is a registered trademark of Google Inc. of Mountain View Calif. Sorenson Spark Sorenson Spark is a registered trademark of Sorenson Media Inc. of Salt Lake City Utah Screen video Screen video 2 motion picture experts group MPEG 2 MPEG 2 and MPEG 4 Part 2. The computing device may support audio encoding types including but not limited to advanced audio coding AAC AAC low complexity AAC LC AAC high efficiency HE AAC G.711 MPEG Audio Layer 3 MP3 Speex Nellymoser Asao and AC 3.

The computing device may support communication e.g. adaptive streaming and non adaptive streaming protocols including but not limited to hypertext transfer protocol HTTP live streaming HLS HTTP dynamic streaming HDS smooth streaming and MPEG dynamic adaptive streaming over HTTP MPEG DASH also known as international organization for standardization ISO international electrotechnical commission IEC 23009 1 . The computing device may also support real time messaging protocol RTMP and variants thereof real time streaming protocol RTSP real time transport protocol RTP and MPEG 2 transport stream MPEG TS . Additional audio formats video formats coder decoders CODECs and or protocols may also be supported.

The computing device may include one or more data storage devices e.g. random access memory RAM disk based storage etc. . The data storage device s may store stream data e.g. frames of a live video stream files closed caption data images e.g. to be overlaid on top of a video stream and other data. In a particular embodiment the data storage device s store a video on demand VOD item . The VOD item may include audio data video data text data closed captioning CC data and or subtitle data. For example the VOD item may be a movie or a television show. Alternately the VOD item may be stored remote from the computing device and may be accessible by the computing device via a network e.g. the Internet .

The computing device may also include a token based asset protection module . In an illustrative embodiment the token based asset protection module includes functions as described with reference to the token generation module of and or the token validation module of . In a particular embodiment the computing device may support adaptive streaming. For example the computing device may be configured to generate an adaptive streaming manifest. The manifest may include information describing adaptive bitrate renditions that are available for adaptive streaming. To initiate an adaptive streaming session a destination device e.g. one of the playback devices may request the manifest. Upon receiving the manifest the destination device may determine which of the available renditions should be requested from the computing device . For example the destination device may make such a determination based on buffering processing capability at the destination device and or network conditions e.g. bandwidth being experienced by the destination device.

Upon determining which rendition should be requested the destination device may transmit a request to the computing device . The request may specify a particular portion e.g. portion X of the requested rendition. The particular portion may be specified using start end frame numbers start end times a portion number identifier etc. Depending on the adaptive streaming protocol in use the requested portion may correspond to a chunk of a rendition and or a group of pictures GOP . A chunk may refer to a fixed e.g. ten seconds or variable length duration of a stream rendition. A group of pictures may refer to a collection of video frames that includes one or more intra coded frames I frames and one or more additional frames that include difference information relative to the one or more I frames e.g. P frame and or B frames . If there are no problems with receipt and playback of the requested portion the destination device may request a subsequent portion e.g. portion X 1 of the same rendition. However if playback and or network conditions become worse the destination device may switch to a lower bitrate rendition by requesting subsequent portions of the lower bitrate rendition. Conversely if playback and or network conditions improve the destination device may switch to a higher bitrate rendition. The computing device may generate key frame aligned portions for the adaptive streaming renditions so that switching to a lower bitrate or higher bitrate rendition appears seamless e.g. does not result in noticeable visual glitches or dropped frames .

During operation the computing device may send a connection code to a computing device such as a computing device associated with the capture source one of the playback devices or one of the servers . The connection code may be a relatively short alphanumeric token generated by the token based asset protection module and usable to communicate with one of the transcoder s . In a particular embodiment the connection code may correspond to the connection code the short token and or the connection code .

Upon receiving the connection code a user may input the connection code into a designated field to generate a verification message that is transmitted to the computing device . In a particular embodiment the verification message may correspond to the verification message of . The token based asset protection module may verify whether the code entered by the user and included in the verification message matches the previously communicated connection code. If so the computing device may send a confirmation message to the user s computing device where the confirmation message includes a long token e.g. a longer more secure token that is usable to send API requests supported by an API at the computing device . In a particular embodiment the confirmation message may correspond to the confirmation message the long token may correspond to the long token and the API requests may correspond to the API requests .

It should be noted that the orders of steps described with reference to are to be considered illustrative not limiting. In alternate embodiments the order of steps may be different. Further one or more steps may be optional and or replaced by other steps. In addition one or more steps may be consolidated. In accordance with various embodiments of the present disclosure one or more methods functions and modules described herein may be implemented by software programs executable by a computer system. Further implementations can include distributed processing component object distributed processing and or parallel processing.

Particular embodiments can be implemented using a computer system executing a set of instructions that cause the computer system to perform any one or more of the methods or computer based functions disclosed herein. A computer system may include a laptop computer a desktop computer a server computer a mobile phone a tablet computer a set top box a media player one or more other computing devices or any combination thereof. The computer system may be connected e.g. using a network to other computer systems or peripheral devices. For example the computer system or components thereof can include or be included within any one or more of the first computing device of the second computing device of the computing device of the desktop laptop computing device of the TV set top box of the smartphone of the tablet computer of the media server stream relay server of a server e.g. edge server of the CDN of or any combination thereof.

In a networked deployment the computer system may operate in the capacity of a server or as a client user computer in a server client user network environment or as a peer computer system in a peer to peer or distributed network environment. The term system can include any collection of systems or sub systems that individually or jointly execute a set or multiple sets of instructions to perform one or more computer functions.

In a particular embodiment the instructions can be embodied in a computer readable storage device or a processor readable storage device. The terms computer readable storage device and processor readable storage device include a single storage device or multiple storage devices such as a centralized or distributed database and or associated caches and servers that store one or more sets of instructions. The terms computer readable storage device and processor readable storage device also include any device that is capable of storing a set of instructions for execution by a processor or that cause a computer system to perform any one or more of the methods or operations disclosed herein. For example a computer readable or processor readable storage device may include random access memory RAM flash memory read only memory ROM programmable read only memory PROM erasable programmable read only memory EPROM electrically erasable programmable read only memory EEPROM registers a hard disk a removable disk a disc based memory e.g. compact disc read only memory CD ROM a solid state memory or any other form of storage device. A computer readable or processor readable storage device is not a signal.

As used herein a live stream may differ from a video on demand VOD stream. A VOD stream originates from or corresponds to content that is available in its entirety at a stream source when a packet of the VOD stream is sent. For example a VOD stream may correspond to a movie or television show that is stored at a storage device. A live stream corresponds to content that is not available in its entirety when a packet of the live stream is sent. For example a live stream may be used to transmit audio and or video content corresponding to an event as the event is being captured e.g. in real time or near real time . Examples of such events may include but are not limited to in progress sporting events musical performances video conferences and webcam feeds. It should be noted that a live stream may be delayed with respect to the event being captured e.g. in accordance with government or industry regulations such as delay regulations enforced by the Federal Communications Commission FCC . In addition to such live feeds the described systems and methods may also be used in conjunction with live linear television TV streams. A live linear TV stream may correspond to a VOD asset being rebroadcast as a live feed. It should also be noted that although certain embodiments may be described herein with reference to video on demand not all of the described techniques may require video content or data. Certain embodiments may also be used on demand content that does not include video e.g. audio on demand radio or music streams .

In a particular embodiment a method includes receiving at a second computing device a configuration message from a first computing device. The configuration message includes information to configure a resource e.g. a transcoder at the second computing device. The method also includes generating at the second computing device a short token that enables the first computing device to access the resource.

In another particular embodiment an apparatus includes a processor and a memory storing instructions that are executable by the processor to perform operations. The operations include receiving a configuration message from a first computing device. The configuration message includes information to configure a resource at a second computing device. The operations also include generating a short token that enables the first computing device to access the transcoder.

In another particular embodiment a non transitory computer readable medium includes instructions that when executed by a processor cause the processor to perform operations. The operations include receiving at a second computing device a configuration message from a first computing device. The configuration message includes information to configure a resource at the second computing device. The operations also include generating a short token that enables the first computing device to access the transcoder.

The illustrations of the embodiments described herein are intended to provide a general understanding of the structure of the various embodiments. The illustrations are not intended to serve as a complete description of all of the elements and features of apparatus and systems that utilize the structures or methods described herein. Many other embodiments may be apparent to those of skill in the art upon reviewing the disclosure. Other embodiments may be utilized and derived from the disclosure such that structural and logical substitutions and changes may be made without departing from the scope of the disclosure. Accordingly the disclosure and the figures are to be regarded as illustrative rather than restrictive.

Although specific embodiments have been illustrated and described herein it should be appreciated that any subsequent arrangement designed to achieve the same or similar purpose may be substituted for the specific embodiments shown. This disclosure is intended to cover any and all subsequent adaptations or variations of various embodiments. Combinations of the above embodiments and other embodiments not specifically described herein will be apparent to those of skill in the art upon reviewing the description.

The Abstract is submitted with the understanding that it will not be used to interpret or limit the scope or meaning of the claims. In addition in the foregoing Detailed Description various features may be grouped together or described in a single embodiment for the purpose of streamlining the disclosure. This disclosure is not to be interpreted as reflecting an intention that the claimed embodiments require more features than are expressly recited in each claim. Rather as the following claims reflect inventive subject matter may be directed to less than all of the features of any of the disclosed embodiments.

The above disclosed subject matter is to be considered illustrative and not restrictive and the appended claims are intended to cover all such modifications enhancements and other embodiments which fall within the scope of the present disclosure. Thus to the maximum extent allowed by law the scope of the present disclosure is to be determined by the broadest permissible interpretation of the following claims and their equivalents and shall not be restricted or limited by the foregoing detailed description.

