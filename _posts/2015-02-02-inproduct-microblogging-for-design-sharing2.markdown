---

title: In-product micro-blogging for design sharing
abstract: One embodiment of the present invention sets forth a technique for generating a status update message. The method involves defining one or more status update criteria and monitoring user activity in a software application for the one or more status update criteria. The method further involves determining, based on the user activity, that the one or more status update criteria have been met and generating, via a processing unit, a status update message. The status update message includes multimedia content related to a project associated with the software application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09577912&OS=09577912&RS=09577912
owner: AUTODESK, INC.
number: 09577912
owner_city: San Rafael
owner_country: US
publication_date: 20150202
---
This application is a continuation of U.S. application Ser. No. 13 650 070 filed Oct. 11 2012 which claims benefit of U.S. Provisional Patent Application Ser. No. 61 546 995 filed Oct. 13 2011 which is hereby incorporated herein by reference in its entirety.

The present invention generally relates to computer software and more specifically to an approach for in product micro blogging for design sharing.

A wide variety of software applications are currently available to end users including computer aided design CAD applications computer graphics applications animation applications word processing applications and computer programming applications among others. Many of these software applications allow an end user to interact with the software application via a graphical end user interface GUI . Conventional GUIs often provide the end user with access to a set of tools that can be used to perform various operations within a workspace generated by the software application. For example a CAD application could provide a set of drawing tools that could be used to create complex designs within a drawing workspace generated by the CAD application. In such a case each tool in the set of tools would be represented within the GUI with an icon that the end user could select in order to use the tool.

Despite advances in application designs that allow end users to more easily operate complex applications learning how to use such applications can still be problematic. More complex applications for example like the CAD application described above often include thousands of commands or functions from which to choose and many ways for an end user to combine these functions into workflows. Consequently with unfamiliar aspects of complex applications even expert end users may require assistance.

In an effort to share knowledge and experiences related to using different software applications end users sometimes post their designs and related instructional materials on websites such as discussion forums or blogs. Such websites attempt to provide guidance to other users regarding how to use a particular application tool or simply function to update others on the progress of a specific project on which another user is working. While such technologies enable users to distribute designs and instructional materials to a wide audience these technologies have several limitations. For example forum and blogging related websites and applications are typically external to the software application from which a user wishes to share content. Consequently a user must interrupt his or her workflow to manually prepare content to be shared which can be a laborious task. Due to the loss in productivity associated with sharing content many users who would otherwise be willing to provide exemplary designs and guidance to others may choose not to do so. Moreover users who do choose to share content may provide infrequent updates. For instance tutorials and discussion forum threads are typically posted only after a project or large discreet aspects of a project are complete.

As the foregoing illustrates there is a need in the art for a more effective way for users to share application content and instructional information with other users.

One embodiment of the present invention sets forth a method for generating a status update message. The method involves defining one or more status update criteria and monitoring user activity in a software application for the one or more status update criteria. The method further involves determining based on the user activity that the one or more status update criteria have been met and generating via a processing unit a status update message. The status update message includes multimedia content related to a project associated with the software application.

Further embodiments provide a non transitory computer readable medium and a computing device to carry out the method set forth above.

Advantageously the disclosed technique enables users to more efficiently provide detailed project updates and related multimedia content without significantly disrupting project workflow.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention.

Once the status update engine determines that one or more status update criteria have been met the status update engine generates a status message which includes for example a textual description of the user s project hyperlinks multimedia content and or a command log. The status update engine then transmits the status message to the server . The server is configured to accumulate status messages from each client device and store the status messages in one or more databases. The server is further configured to search the database s in response to a query submitted by a client device and transmit one or more status messages responsive to the query to the client device .

The client device may be any type of electronic device that enables a user to connect to e.g. via the Internet a local area network LAN an ad hoc network etc. and communicate with one or more other users. Exemplary electronic devices include without limitation desktop computing devices portable or hand held computing devices laptops tablets smartphones mobile phones personal digital assistants PDAs etc. In one embodiment at least one client device may be configured to provide the functionality of the server thereby eliminating the necessity of a separate and dedicated server . In such an embodiment the status message database that resides in the server as described below in conjunction with may instead reside within one or more client devices and the different client devices of may communicate with and transmit status messages directly to each other for example via a peer to peer protocol.

The status message generated by the status update engine may include for example a textual description of the user s project hyperlinks metadata and or multimedia content. The textual description may include comments prepared by the user describing the project on which he or she is working or the textual description may be automatically generated by the software application and may include project information properties statistics etc. The textual description may further include one or more hash tags which indicate the topic or relevance of the status message. For example the hash tag may indicate the project with which the status message is associated. Hyperlinks included in the status message may reference multimedia content such as application screenshots images videos audio project files e.g. CAD drawing files command logs etc. Additionally multimedia content may be provided in the status message itself. For instance an image or video may be embedded in the status message such that a user who views the message does not need to follow a hyperlink to an external platform website or database.

A combination of time based and command based status update criteria may be used to improve the quality of status messages and decrease the incidence of duplicate or redundant updates. For example although the use of time based criteria in which the status update engine generates a status message at periodic time intervals e.g. 1 minute 5 minutes 1 hours 2 hours etc. is appropriate when a user is continuously working on and updating a project the use of such criteria may generate redundant status messages when the user is idle and is not actively updating the project. Consequently time based criteria may be combined with command based criteria to provide a better indicator as to when a project has been significantly updated and thus when a status message should be generated. In other words the status update engine may generate a status message only after both the time based and command based criteria have been satisfied.

In one example a status message may be generated when 1 10 minutes has elapsed since a previous update and 2 the user has issued the SAVE command. Because users typically issue the SAVE command after a significant amount of work has been performed this particular combination of time based and command based criteria may be a good indicator as to when a status message should be generated. In another example a status message may be generated when 1 1 hour has elapsed since the previous update and 2 the user has issued a threshold number of commands or types of commands. Further any time interval and command based criteria which may indicate that a user has performed a significant amount of work may be used.

In order to prevent the status update engine from providing status updates too frequently prior to transmitting the status message to the server the status update engine may determine whether a status update rate has been exceeded. For example in the exemplary embodiment described herein status update messages are transmitted to a social networking platform where the status messages can be viewed by the user s peers. However many social networking platforms e.g. the TWITTER micro blogging platform accept only a certain number of updates from a given user during a given time period. Accordingly prior to transmitting a status message to the server the status update engine may determine whether a status update rate has been exceeded. If the status update rate has been exceeded the status update engine transmits the status messages to a status message queue where the status messages are stored until the user s update frequency drops below the permitted status update rate. When the user s update frequency is below the status update rate the status update engine transmits the status messages through the network to the server where the status messages are stored in one or more of the databases . In addition status messages may be stored in the status message queue when the client device is offline or otherwise unable to communicate with the server . Once the client device returns online or otherwise establishes a connection with the server the status messages stored in the status message queue are transmitted to the server and stored in one or more of the databases .

Although shows the status update engine as a separate software module it is also contemplated that the status update engine may be integrated into the software application or offered as a software add on or plug in for the application . When configured as a separate software module the status update engine may be capable of communicating with and receiving information from a variety of different software applications .

As also shown the server includes without limitation a central processing unit CPU one or more input output I O devices and a memory . The memory is configured to store a user database a status message database a multimedia database and a search engine . The CPU is configured to execute the search engine which receives a search query from the status update engine on a client device and searches one or more of the databases for relevant information. A search query may include for example a particular user project hash tag type of command type of project type of multimedia content update timestamp and or contextual information associated with a user s project and or workflow. Once the search engine locates one or more status messages responsive to the search query the search engine transmits the status message s to the status update engine .

The status update engine processes status messages received from the server to determine for example the user and or project with which the status messages are associated the type of project the types of commands etc. The status messages are then sorted based on these or similar criteria and presented in a categorized timeline or other visualized fashion to the user of the client device enabling the user to view the progress of a particular project or user as described in further detail with respect to .

As described above with respect to the message text may include project related information prepared by the user or automatically generated by the software application and or one or more hash tags indicating the topic or relevance of the status message. Further each of the hyperlinks may reference addresses within the server or each of the hyperlinks may reference addresses outside of the server . For instance the image hyperlink may reference any networked image database or server from which a user can download an image file. Similarly the drawing and log file hyperlinks may reference any networked databases or servers from which a user can download drawing and log files. Hyperlinks included in a status message may be prepared with a uniform resource locator URL shortener so that the size of the status message is reduced or to prevent the length of the status message from exceeding a given character limit. Further in order to keep track of the relationships between status messages and the multimedia content with which they are associated a unique key may be assigned to each status message and this unique key may be stored in each multimedia file associated with the status message e.g. stored in the filename of each multimedia file .

Although the exemplary status message illustrated in includes only text and hyperlinks it is contemplated that each status message itself may include an image drawing file log file multimedia content contextual information or the like such that a user does not have to follow a hyperlink to view or acquire relevant information. Additionally any other type of information relevant to the status of a user s project or the status of a software application also may be included in a status message .

In an exemplary embodiment the status update engine may leverage an existing micro blogging platform and user community such as the TWITTER micro blogging platform. In this embodiment the status messages generated by the status update engine may include tweets which are transmitted to the TWITTER platform via a web based application programming interface API . Each status message may include one or more hash tags indicating the user project application etc. with which the status message is associated. Other users on the TWITTER platform may then choose to subscribe to or follow the status messages associated with a particular user project or application. As an example a status message associated with the AUTOCAD software application distributed by AUTODESK may include the pj acd hash tag. Accordingly when configured to display project updates associated with the AUTOCAD software package the status update engine may display status messages including the pj acd hash tag. Moreover upon receiving a status message with a particular hash tag the status update engine may verify the accessibility and integrity of data or multimedia content contained in the status message or referenced by one or more hyperlinks. Once the status update engine determines that the status message and the content associated therewith are in a valid format the status update engine may download and display the content of the status message as described in further detail with respect to .

When first executing the application and the status update engine a user may create a user account or a user account may be automatically created for the user. The user account credentials may then be saved and automatically loaded each time the user executes the application and status update engine .

As shown in the GUI allows a user to select from a variety of commands for modifying a document. The GUI also allows the user to select from a variety of functions in order to post status updates as well as view and search for projects and users. For example the project function enables a user to view a listing of projects and a view status message listing associated with each project . In one embodiment a project is defined as one or more messages which provide updates for the same project file. For example in the exemplary embodiment described with respect to a CAD application a project is one or more messages which provide updates for the same design file. A user icon indicating one or more users with which the project is associated and a project preview may be displayed for each project in the listing of projects . A status icon indicating that a project is currently being updated and or that the project creator is currently offering a real time stream e.g. a live video stream of the project also may be displayed for each project . The project preview may include a thumbnail of a project screenshot or the project preview may be based on a project file associated with the project. For example the status update engine may retrieve an image or drawing file from the image hyperlink or drawing file hyperlink associated with a status message and generate a project preview from the image or drawing file. Additionally the listing of projects may specify whether there are any new or unread status messages associated with each project .

Once a user selects a particular project from the listing of projects the status messages associated with the project are displayed in the status message listing . Each status message shown in the message listing may include a timestamp indicating when the status message was generated or transmitted. In the exemplary embodiment illustrated in project has been selected and status messages associated with the project are displayed in the status message listing . Each status message displayed in the status message listing may include for example message text relevant commands and or multimedia content . The message text may include project related information one or more hash tags indicating the topic or relevance of the status message and or hyperlinks which reference other textual or multimedia content related to a project . The project preview relevant commands and the multimedia content may be associated with one or more hyperlinks provided in the status message .

The relevant commands may indicate which commands were issued by the user when preparing the project . Several implementations of the relevant commands are contemplated. In one implementation the relevant commands indicate which commands were most frequently executed when preparing the project or which commands were most frequently executed since the previous status update. In another implementation the relevant commands indicate which commands were issued in preparing the project and have not previously been issued by the user who is viewing the status message . In this implementation the relevant commands may enable a user to learn more about commands with which he or she is not familiar. In yet another implementation the relevant commands are specified by the creator of the project and may indicate for example which commands the project creator considered to be most relevant or useful in preparing the project . Alternatively the relevant commands may correspond to commands which the user who is viewing the status message s flagged as relevant or useful for example with respect to a particular project or with respect to a plurality of projects being followed by the user.

The multimedia content may include icons which a user can select to download or display additional multimedia content associated with the project or status message . The multimedia content may include content provided by a status message for example images screenshots project files and the like which allow the user to view aspects of the project in further detail. When selected the multimedia content may be displayed in the application GUI as shown in . Additionally the multimedia content may include a command log containing a history of commands issued in preparing the project detailed project properties and or application settings used during the preparation of the project . In an exemplary embodiment the listing of projects indicates when the creator of a particular project is currently working on and providing status updates for the project . For example an icon may be displayed over the project thumbnail when the creator is currently providing updates. When a project is currently being updated the multimedia content may further include an icon which a user can select to view a live stream or video broadcast of the creator s work for example via a video broadcast client e.g. the LiveStream web service . While viewing a live stream users may be able to communicate in real time with the project creator by commenting on or post questions regarding the project .

In the exemplary embodiment once a project file or screenshot is selected from the multimedia content the project is displayed in the GUI . The user is then given an option to specify content based criteria by selecting one or more regions of the project. After specifying the content based criteria the user is notified e.g. by receiving a status message or notification whenever the selected region s of the project are modified by the project creator. For example a user may select a particular region of interest in a CAD design by drawing a circle box cube sphere volume outline etc. around a region of the CAD design. Thereafter the user may receive a status message whenever the project creator transmits a status message which indicates that the region of interest has been modified in the CAD application. Further the region s of interest may include one or more two dimensional areas and or one or more three dimensional volumes.

The search function enables a user to search for other users and projects to follow. Searches can be performed by specifying a keyword and or by specifying application related criteria. For example a user may perform a search for a project in which specific commands have been used. In response the search function window may display projects or status messages which specify those command s or which include command logs indicating that those command s have been performed. Further search results may be updated in real time or substantially real time to include new projects users or status messages which meet the search criteria. From the search function window a user can select one or more projects or users to follow.

The post function allows the user to compose and or transmit status messages . The post function may include a listing of status messages which have been automatically or semi automatically generated by the status update engine based on one or more time based or command based criteria but which have not yet been transmitted to the server . The user may review the listing of generated status messages and decide whether to transmit modify or delete each status message . For example the user may modify the text of a status message and or determine what type s of data or multimedia content to attach to each status message . By default a timestamp and a screenshot of the project taken at the time indicated in the timestamp may be included in each generated status message .

In one embodiment when composing a new status message the user is presented with a dialog box which prompts the user to enter a short description of the project . The user is further presented with options to attach multiple data formats for example project screenshots the project file itself or a log including project history e.g. command history . The dialog box may include different methods by which the user can quickly and easily include a screenshot. For example one method may enable the user to draw a box around an area of the screen for which the user wishes to create a screenshot. Other methods may include options to include only certain application windows in a screenshot e.g. the design window command toolbars etc. in order to avoid sharing sensitive or confidential information with other users.

The following function displays information related to the users and or projects to which the user of the application has subscribed. For instance when a first user of application selects a second user to follow the following function may display each of the second user s projects allowing the first user to select which projects he or she would like to follow. The following function further allows the first user to unsubscribe from users or projects to which he or she has been subscribed.

As shown a method begins at step where one or more status update criteria are defined and provided to the status update engine . The status update criteria may be defined by the user or generated by the status update engine . As discussed above the status update criteria may include time based and or command based criteria. At step status update engine monitors the application activity of the user for the one or more status update criteria. At step the status update engine determines whether the status update criteria have been met. If the status update criteria have not been met the method returns to step and the status update engine continues to monitor the application activity of the user. If the status update criteria have been met the status update engine generates a status message at step .

Next at step the status update engine determines whether a status update rate has exceeded a threshold value. For example the threshold value may be defined as an approximate rate above which a micro blogging platform e.g. TWITTER to which the status messages are sent will reject the messages or otherwise restrict access to the micro blogging account. If the status update rate has exceeded the threshold value the status message is stored in the status message queue at step . The method then returns to step and determines whether the status update rate continues to exceed the threshold value. If the status update rate does not exceed the threshold value the status message is transmitted to the server . The server may be associated with a social networking service messaging service micro blogging service or the like at step . Although three exemplary network services have been provided it is contemplated that the status message may be transmitted to any network service which enables users to communicate and share multimedia information. Further transmission of the status message may take place by any means of communication such as over a network e.g. the Internet a local area network LAN etc. or through a peer to peer or ad hoc connection.

As discussed above in conjunction with one or more of the client devices may perform the functions of the server thereby eliminating the need for a separate and dedicated server . In such an embodiment the status message may be transmitted from a first client device to a second client device which is acting as a server and which includes a database e.g. and or and or search engine . In yet another embodiment the status update engine the databases and or the search engine may be implemented in a cloud computing type of configuration. In such a configuration the client devices may act as terminal devices and the server may execute both the status update engine and the search engine . One or more status update engines may monitor the application activity of one or more users and transmit the resulting status messages to the databases which may reside on the same server as the status update engine or on a different server than the status update engine .

In sum a status update engine monitors a user s application activity and determines whether one or more status update criteria have been satisfied. Once the status update criteria have been satisfied the status update engine generates a status message which includes application information such as for example hyperlinks multimedia content a screenshot and or a command log. The status update engine then transmits the status message to a status message queue or to a database in the server wherein the status message can be viewed by other users.

One advantage of the techniques described herein is that the user of an application is able to provide project updates to peers simply by defining time based or event based criteria which when met by the application trigger the automatic creation of a status message. Status messages may include for example multimedia content such as images video command lists hyperlinks and or project files. Further by lowering the transaction costs associated with drafting and submitting status messages the user can provide project updates to other users without interrupting his or her workflow.

One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored.

The invention has been described above with reference to specific embodiments. Persons of ordinary skill in the art however will understand that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims. The foregoing description and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense.

