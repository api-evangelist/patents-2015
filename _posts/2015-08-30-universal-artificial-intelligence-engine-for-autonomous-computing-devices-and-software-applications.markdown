---

title: Universal artificial intelligence engine for autonomous computing devices and software applications
abstract: Aspects of the disclosure generally relate to computing devices and may be generally directed to devices, systems, methods, and/or applications for learning the operation of a computing device or software application, storing this knowledge in a knowledgebase, neural network, or other repository, and enabling autonomous operation of the computing device or software application with partial, minimal, or no user input.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09443192&OS=09443192&RS=09443192
owner: 
number: 09443192
owner_city: 
owner_country: 
publication_date: 20150830
---
The disclosure generally relates to computing devices. The disclosure includes devices apparatuses systems and related methods for providing advanced learning anticipating automation and or other functionalities to computing devices and or software applications.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

Computing devices and software applications operating thereon have become essential in many areas of people s lives. Computing devices and or software applications have been built for purposes that range from web browsing word processing gaming and others to vehicle automation factory automation robot control and others. Operating a computing device and or software application commonly requires a user to manually direct the flow of execution to accomplish desired results. Depending on the user interface these directions may be conveyed to the computing device and or software application through simple actions such as selecting items in a graphical user interface or through complex and lengthy computer instructions. As such operating a computing device and or software application to gain its benefits is often a time consuming task itself. Also operating a complex computing device and or software application may only be reserved for expensive and well trained computer operators thereby also incurring additional cost.

In some aspects the disclosure relates to a system for autonomous application operating. The system may operate on one or more computing devices. In some embodiments the system comprises a computing device including a processor circuit that is coupled to a memory unit. The system may further include an application running on the processor circuit for performing operations on the computing device. The system may further include an interface configured to receive a first instruction set and a second instruction set the interface further configured to receive a new instruction set wherein the first the second and the new instruction sets are executed by the processor circuit and are part of the application for performing operations on the computing device. The system may further include a knowledgebase configured to store at least one portion of the first instruction set and at least one portion of the second instruction set the knowledgebase comprising a plurality of portions of instruction sets. The system may further include a decision making unit configured to compare at least one portion of the new instruction set with at least one portion of the first instruction set from the knowledgebase and determine that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase. The processor may be caused to execute the second instruction set from the knowledgebase.

In certain embodiments the application includes at least one of a software application an executable program a web browser a word processing application an operating system a media application a global positioning system application a game application a robot control application a database application a software hardcoded on a chip or a software hardcoded on a hardware element.

In some embodiments the first instruction set may be followed by the second instruction set. In further embodiments the first instruction set includes a comparative instruction set whose portions can be used for comparisons with portions of the new instruction set. In further embodiments the second instruction set includes an anticipatory instruction set that can be used for anticipation of an instruction set subsequent to the new instruction set.

In certain embodiments each of the first the second and the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto. In further embodiments each of the first the second and the new instruction set includes a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments each of the first the second and the new instruction set includes one or more code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments each of the first the second and the new instruction set includes an absolute or a relative instruction set.

In some embodiments the receiving the first the second and the new instruction sets includes obtaining the first the second and the new instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from the processor circuit as the processor circuit executes them. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from at least one of the application the memory unit the processor circuit the computing device a virtual machine a runtime engine a hard drive a storage device a peripheral device a network connected device or an user. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets used for operating an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application or an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the processor circuit the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an element used in running the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of an user input. In further embodiments the receiving the first the second and the new instruction sets includes at least one of a manual an automatic a dynamic or a just in time JIT tracing profiling or instrumentation of the application. In further embodiments the receiving the first the second and the new instruction sets includes utilizing at least one of a .NET tool a .NET application programming interface API a Java tool a Java API a logging tool or an independent tool for receiving the application s instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes utilizing an assembly language. In further embodiments the receiving the first the second and the new instruction sets includes a branch tracing or a simulation tracing.

In certain embodiments the interface may be further configured to receive at least one extra information associated with the first instruction set at least one extra information associated with the second instruction set and at least one extra information associated with the new instruction set. The at least one extra information may include one or more of contextual information time information geo spatial information environmental information situational information observed information computed information pre computed information analyzed information or inferred information. The at least one extra information may include one or more of an information on an instruction set an information on the application an information on an object of the application an information on the computing device or an information on an user. The at least one extra information may include one or more of a time stamp an user specific information a group specific information a version of the application a type of the application a type of the computing device or a type of an user. The at least one extra information may include one or more of a text property a text formatting a preceding text or a subsequent text. The at least one extra information may include one or more of a location a direction a type a speed or a posture of an object of the application. The at least one extra information may include one or more of a relationship a distance or an allegiance of an object of the application relative to another object of the application. The at least one extra information may include an information on an object of the application within an area of interest. In some embodiments the receiving the at least one extra information includes associating an importance with an extra information. In further embodiments the knowledgebase may be further configured to store the at least one extra information.

In some embodiments the interface may be further configured to modify the application. The modifying the application may include redirecting the application s execution to one or more alternate instruction sets the alternate instruction sets comprising an anticipatory instruction set. The modifying the application may include redirecting the application s execution to the second instruction set. The modifying the application may include causing the processor circuit to execute the second instruction set instead of or prior to an instruction set that would have followed the new instruction set. The modifying the application may include modifying one or more instruction sets of the application. The modifying the application may include modifying at least one of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code or a machine code. The modifying the application may include modifying at least one of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. The modifying the application may include modifying instruction sets used for operating an object of the application. The modifying the application may include modifying at least one of an element of the processor circuit an element of the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an user input used in running the application. The modifying the application may include modifying the application at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. The modifying the application may include modifying one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. The modifying the application may include a manual an automatic a dynamic or a just in time JIT instrumentation of the application. The modifying the application may include utilizing one or more of a .NET tool a .NET application programming interface API a Java tool a Java API an operating system tool or an independent tool for modifying the application. The modifying the application may include utilizing at least one of a dynamic an interpreted or a scripting programming language. The modifying the application may include utilizing at least one of a dynamic code a dynamic class loading or a reflection. The modifying the application may include utilizing an assembly language. The modifying the application may include utilizing at least one of a metaprogramming a self modifying code or an application modification tool. The modifying the application may include utilizing at least one of just in time JIT compiling JIT interpretation JIT translation dynamic recompiling or binary rewriting. The modifying the application may include utilizing at least one of a dynamic expression creation a dynamic expression execution a dynamic function creation or a dynamic function execution. The modifying the application may include adding or inserting additional code into the application code. The modifying the application may include at least one of modifying removing rewriting or overwriting the application code. The modifying the application may include at least one of branching redirecting extending or hot swapping the application code. The branching or redirecting the application code may include inserting at least one of a branch a jump a trampoline a trap or a system for redirecting the application execution. In some embodiments the interface may be part of operating on or coupled with the processor circuit.

In certain embodiments the first instruction set includes a comparative instruction set whose stored portions can be used for comparisons with portions of the new instruction set and the second instruction set includes an anticipatory instruction set whose stored portions can be used for anticipation of an instruction set subsequent to the new instruction set. In further embodiments a portion of the first the second or the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto. In further embodiments the knowledgebase includes one or more data structures objects files tables databases database management systems memory structures or repositories. In further embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set includes storing the at least one portion of the first instruction set followed by the at least one portion of the second instruction set. In further embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set includes storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into a knowledge cell. The knowledge cell may include a knowledge cell stored in the knowledgebase the knowledgebase comprising one or more knowledge cells.

In some embodiments the knowledgebase includes a remote or a global knowledgebase operating on a remote computing device. In further embodiments the knowledgebase includes one or more user specific or group specific knowledgebases. In further embodiments the knowledgebase includes an artificial intelligence system for knowledge structuring storing or representation. The artificial intelligence system for knowledge structuring storing or representation may include at least one of a deep learning system a supervised learning system an unsupervised learning system a neural network a search based system an optimization based system a logic based system a fuzzy logic based system a tree based system a graph based system a hierarchical system a symbolic system a sub symbolic system an evolutionary system a genetic system a multi agent system a deterministic system a probabilistic system or a statistical system. In further embodiments the knowledgebase includes a user s knowledge style or methodology of operating the application or an object of the application.

In certain embodiments the plurality of portions of instruction sets in the knowledgebase include portions of instruction sets received from a plurality of memory units processor circuits computing devices virtual machines runtime engines hard drives storage devices peripheral devices network connected devices or users via a plurality of interfaces. In further embodiments the knowledgebase may be further configured to store at least one extra information associated with the first instruction set and at least one extra information associated with the second instruction set. The at least one extra information associated with the first instruction set may be stored together with the at least one portion of the first instruction set and the at least one extra information associated with the second instruction set may be stored together with the at least one portion of the second instruction set. In further embodiments the knowledgebase may be further configured to store an importance associated with the first instruction set and an importance associated with the second instruction set. In some embodiments the knowledgebase may be part of operating on or coupled with the processor circuit.

In certain embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing at least one portion of the new instruction set with at least one portion of comparative instruction sets from the knowledgebase the comparative instruction sets comprising the first instruction set. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions of their respective instruction sets as separate strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions of their respective instruction sets as combined strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions comprising numeric values as numbers. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions factoring in an importance of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions factoring in semantically equivalent variations of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions factoring in a rating of one or more of the instruction sets. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing an order of a portion of the new instruction set with an order of a portion of an instruction set from the knowledgebase. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing at least one portion of the new instruction set with at least one portion of instruction sets from a knowledge cell the knowledge cell stored in the knowledgebase. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase may be part of a substantial similarity comparison of the new instruction set with the instruction sets from the knowledgebase. The substantial similarity comparison may include a comparison strictness function for adjusting a strictness of the comparison.

In certain embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes finding a match between all but a threshold number of portions of the new instruction set and all but a threshold number of portions of the first instruction set from the knowledgebase. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes finding a match between at least one portion of the new instruction set and at least one portion of the first instruction set from the knowledgebase. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes finding a match between important portions of the new instruction set and important portions of the first instruction set from the knowledgebase. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes determining that there is a substantial similarity between at least one portion of the new instruction set and at least one portion of the first instruction set from the knowledgebase.

In some embodiments the decision making unit may be further configured to compare at least one extra information associated with the new instruction set with at least one extra information associated with the first instruction set from the knowledgebase. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase may include finding a match between all but a threshold number of extra information associated with the new instruction set and all but a threshold number of extra information associated with the first instruction set from the knowledgebase. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase may include finding a match between at least one extra information associated with the new instruction set and at least one extra information associated with the first instruction set from the knowledgebase.

In certain embodiments the decision making unit may be further configured to anticipate the second instruction set. The anticipating the second instruction set may include finding the at least one portion of the first instruction set followed by the at least one portion of the second instruction set in the knowledgebase. The anticipating the second instruction set may include finding a knowledge cell comprising the at least one portion of the first instruction set followed by the at least one portion of the second instruction set. The anticipating the second instruction set may include inferring that the second instruction set is an instruction set to be executed following the new instruction set. The anticipating the second instruction set includes causing the processor circuit to execute the second instruction set prior to an instruction set that would have followed the new instruction set.

In some embodiments the decision making unit may be further configured to generate a comparison accuracy index the comparison accuracy index indicating a similarity between the new instruction set and the first instruction set from the knowledgebase. In further embodiments the decision making unit may be further configured to analyze a contextual information the contextual information including at least one of information about the first the second or the new instruction set information about the application or an object of the application information about the computing device or information useful in the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase. In certain embodiments the decision making unit may be part of operating on or coupled with the processor circuit.

In some embodiments the executing the second instruction set from the knowledgebase includes performing an operation defined by the second instruction set from the knowledgebase. An operation defined by the second instruction set from the knowledgebase may include at least one of an operation of a forms based application an operation of a web browser an operation of an operating system an operation of a word processing application an operation of a media application an operation of a global positioning system GPS application an operation of a game application an operation of a robot control application or an operation of a database application. In further embodiments the executing the second instruction set from the knowledgebase includes executing the second instruction set from the knowledgebase in response to the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase. In further embodiments the executing the second instruction set from the knowledgebase includes implementing a user s knowledge style or methodology of operating the application or an object of the application the user s knowledge style or methodology of operating the application or an object of the application represented by the instructions sets stored in the knowledgebase. In further embodiments the executing the second instruction set from the knowledgebase includes executing a modified second instruction set from the knowledgebase. In further embodiments the executing the second instruction set from the knowledgebase includes executing an external application or process.

In some embodiments the system further comprises a command disassembler configured to disassemble the first the second and the new instruction sets into their portions. The disassembling the first the second and the new instruction sets into their portions may include identifying at least one of a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit of the first the second and the new instruction sets as a portion. The disassembling the first the second and the new instruction sets into their portions may include identifying types of the first the second and the new instruction sets. The disassembling the first the second and the new instruction sets into their portions may include associating an importance with a portion of the first the second and the new instruction sets. The command disassembler may be part of operating on or coupled with the processor circuit.

In further embodiments the system further comprises a modifier configured to modify the second instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit from the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one extra information associated with the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with a contextual information a time information a geo spatial information an environmental information a situational information an observed information a computed information a pre computed information an analyzed information or an inferred information. The modifying the second instruction set may include replacing at least one portion of the second instruction set with information derived from projecting a path a movement a trajectory or a pattern in portions of one or more of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with semantically equivalent variations of at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing the second instruction set with an instruction set generated by a non UAIE system or process. In some embodiments the modifier may be part of operating on or coupled with the processor circuit.

In certain embodiments the system further comprises a display configured to display the second instruction set as an option to be selected modified or canceled by a user. The displaying the second instruction set as an option to be selected modified or canceled by a user may include displaying a comparison accuracy indicating a similarity between the new instruction set and the first instruction set from the knowledgebase. The second instruction set may include a previously modified second instruction set.

In some embodiments the system further comprises a rating system configured to rate the executed second instruction set. The rating the executed second instruction set may include displaying the executed second instruction set along with one or more rating values as options to be selected by a user. The rating the executed second instruction set may include automatically rating the executed second instruction set. The rating the executed second instruction set may include associating a rating value with the executed second instruction set and storing the rating value in the knowledgebase. The executed second instruction set may include a previously modified second instruction set. In further embodiments the rating system may be part of operating on or coupled with the processor circuit.

In certain embodiments the system further comprises a cancelation system configured to cancel the execution of the executed second instruction set. The canceling the execution of the executed second instruction set may include displaying the executed second instruction set as an option to be selected for cancelation by a user. The canceling the execution of the executed second instruction set may include associating a cancelation with the executed second instruction set and storing the cancelation in the knowledgebase. The canceling the execution of the executed second instruction set may include restoring the computing device to a prior state. The restoring the computing device to a prior state may include saving the state of the computing device prior to executing the second instruction set. The executed second instruction set may include a previously modified second instruction set. In further embodiments the cancelation system may be part of operating on or coupled with the processor circuit.

In some embodiments the system further comprises a command assembler configured to assemble the second instruction set from its portions. In further embodiments the command assembler may be part of operating on or coupled with the processor circuit.

In certain embodiments the system further comprises a knowledge structuring unit configured to create a knowledge cell the knowledge cell comprising the at least one portion of the first instruction set and the at least one portion of the second instruction set. The at least one portion of the first instruction set may be followed by the at least one portion of the second instruction set. In further embodiments the knowledge structuring unit may be further configured to cause a storing of the knowledge cell into knowledgebase the knowledgebase comprising one or more knowledge cells. In further embodiments the knowledge cell comprises at least one portion of one or more comparative instruction sets the one or more comparative instruction sets including one or more least recently executed instruction sets from a plurality of recently executed instruction sets. The one or more comparative instruction sets may include the first instruction set. In further embodiments the knowledge cell comprises at least one portion of one or more anticipatory instruction sets the one or more anticipatory instruction sets including one or more most recently executed instruction sets from a plurality of recently executed instruction sets. The one or more anticipatory instruction sets may include the second instruction set. The knowledge cell may include a user s knowledge style or methodology of operating the application or an object of the application. In further embodiments the knowledge structuring unit may be part of operating on or coupled with the processor circuit.

In some embodiments the system further comprises an universal artificial intelligence engine UAIE for autonomous application operating. In further embodiments the UAIE comprises at least one of the interface the knowledgebase the decision making unit a command disassembler a collection of recently executed instruction sets a knowledge structuring unit a modifier a command assembler a rating system or a cancelation system. In further embodiments the autonomous application operating includes a partially or a fully autonomous application operating. The partially autonomous application operating may include executing the second instruction set or a modified second instruction set responsive to a confirmation by a user. The fully autonomous application operating may include executing the second instruction set or a modified second instruction set without a confirmation. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by the UAIE. The one or more instruction sets generated by the UAIE may include the second instruction set or a modified second instruction set. The one or more instruction sets generated by the UAIE may include one or more instruction sets for operating the application or an object of the application. The one or more instruction sets generated by the UAIE may include one or more instruction sets stored in the knowledgebase. In further embodiments the autonomous application operating includes automatic or auto pilot operating. The automatic or auto pilot operating may include executing one or more instruction sets generated by the UAIE. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by a non UAIE system or process.

In certain embodiments the UAIE includes an UAIE that operates independently from the computing device. In further embodiments the UAIE includes an UAIE attachable to the computing device. In further embodiments the UAIE includes an UAIE built into the computing device. In further embodiments the UAIE includes an UAIE that operates independently from the application. In further embodiments the UAIE includes an UAIE attachable to the application. In further embodiments the UAIE includes an UAIE built into the application. In further embodiments the UAIE includes an UAIE provided as a feature of the computing device s operating system. In further embodiments the application includes an application running on the computing device and the UAIE includes an UAIE running on a remote computing device. In further embodiments the UAIE includes an UAIE running on the computing device and the application includes an application running on a remote computing device. In further embodiments the UAIE includes a remote or a global UAIE operating on a remote computing device. In further embodiments the UAIE may be configured to load one or more instruction sets into the knowledgebase. In further embodiments the UAIE may be configured to load one or more knowledge cells into the knowledgebase. In further embodiments the UAIE may be configured to load one or more knowledgebases into the UAIE. In further embodiments the UAIE may be configured to take control from share control with or release control to the application or an object of the application. In further embodiments the UAIE may be configured to learn a user s knowledge style or methodology of operating the application or an object of the application. The learning a user s knowledge style or methodology of operating the application or an object of the application may include storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the knowledgebase. In further embodiments the UAIE may be part of operating on or coupled with the processor circuit.

In some aspects the disclosure relates to a non transitory computer storage medium having a computer program stored thereon the program comprising instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising receiving a first instruction set and a second instruction set wherein the first and the second instruction sets are executed by a processor circuit and are part of an application for performing operations on a computing device. The operations may further include storing at least one portion of the first instruction set and at least one portion of the second instruction set into a knowledgebase the knowledgebase comprising a plurality of portions of instruction sets. The operations may further include receiving a new instruction set wherein the new instruction set is executed by the processor circuit and is part of the application for performing operations on the computing device. The operations may further include comparing at least one portion of the new instruction set with at least one portion of the first instruction set from the knowledgebase. The operations may further include determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase. The operations may further include causing the processor circuit to execute the second instruction set from the knowledgebase.

In some aspects the disclosure relates to a method comprising a receiving by a processor circuit via an interface a first instruction set and a second instruction set wherein the first and the second instruction sets are executed by the processor circuit and are part of an application for performing operations on a computing device. The method may further include b storing at least one portion of the first instruction set and at least one portion of the second instruction set into a knowledgebase the knowledgebase comprising a plurality of portions of instruction sets the storing of b caused by the processor circuit. The method may further include c receiving by the processor circuit via the interface a new instruction set wherein the new instruction set is executed by the processor circuit and is part of the application for performing operations on the computing device The method may further include d comparing at least one portion of the new instruction set with at least one portion of the first instruction set from the knowledgebase the comparing of d performed by the processor circuit. The method may further include e determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase the determining of e performed by the processor circuit. The method may further include executing the second instruction set from the knowledgebase by the processor circuit.

The operations or steps of the non transitory computer storage medium and or the method may be performed by any of the elements of the above described system as applicable. The non transitory computer storage medium and or the method may include any of the operations steps and embodiments of the above described system as applicable as well as the following embodiments.

In certain embodiments the application includes at least one of a software application an executable program a web browser a word processing application an operating system a media application a global positioning system application a game application a robot control application a database application a software hardcoded on a chip or a software hardcoded on a hardware element.

In some embodiments the first instruction set may be followed by the second instruction set. In further embodiments the first instruction set includes a comparative instruction set whose portions can be used for comparisons with portions of the new instruction set. In further embodiments the second instruction set includes an anticipatory instruction set that can be used for anticipation of an instruction set subsequent to the new instruction set.

In some embodiments the first the second and the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto. In further embodiments each of the first the second and the new instruction set includes a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments each of the first the second and the new instruction set includes one or more code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments each of the first the second and the new instruction set includes an absolute or a relative instruction set.

In certain embodiments the receiving the first the second and the new instruction sets includes obtaining the first the second and the new instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from the processor circuit as the processor circuit executes them. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from at least one of the application the memory unit the processor circuit the computing device a virtual machine a runtime engine a hard drive a storage device a peripheral device a network connected device or an user. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets used for operating an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application or an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the processor circuit the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an element used in running the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of an user input. In further embodiments the receiving the first the second and the new instruction sets includes at least one of a manual an automatic a dynamic or a just in time JIT tracing profiling or instrumentation of the application. In further embodiments the receiving the first the second and the new instruction sets includes utilizing at least one of a .NET tool a .NET application programming interface API a Java tool a Java API a logging tool or an independent tool for receiving the application s instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes utilizing an assembly language. In further embodiments the receiving the first the second and the new instruction sets includes a branch tracing or a simulation tracing.

In certain embodiments the non transitory computer storage medium and or the method further comprise receiving at least one extra information associated with the first instruction set at least one extra information associated with the second instruction set and at least one extra information associated with the new instruction set. The at least one extra information may include one or more of contextual information time information geo spatial information environmental information situational information observed information computed information pre computed information analyzed information or inferred information. The at least one extra information may include one or more of an information on an instruction set an information on the application an information on an object of the application an information on the computing device or an information on an user. The at least one extra information may include one or more of a time stamp an user specific information a group specific information a version of the application a type of the application a type of the computing device or a type of an user. The at least one extra information may include one or more of a text property a text formatting a preceding text or a subsequent text. The at least one extra information may include one or more of a location a direction a type a speed or a posture of an object of the application. The at least one extra information may include one or more of a relationship a distance or an allegiance of an object of the application relative to another object of the application. The at least one extra information may include an information on an object of the application within an area of interest. In further embodiments the receiving the at least one extra information includes associating an importance with an extra information. In certain embodiments the non transitory computer storage medium and or the method further comprise storing the at least one extra information into the knowledgebase.

In some embodiments the non transitory computer storage medium and or the method further comprise modifying the application. The modifying the application may include redirecting the application s execution to one or more alternate instruction sets the alternate instruction sets comprising an anticipatory instruction set. The modifying the application may include redirecting the application s execution to the second instruction set. The modifying the application may include causing the processor circuit to execute the second instruction set instead of or prior to an instruction set that would have followed the new instruction set. The modifying the application may include modifying one or more instruction sets of the application. The modifying the application may include modifying at least one of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code or a machine code. The modifying the application may include modifying at least one of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. The modifying the application may include modifying instruction sets used for operating an object of the application. The modifying the application may include modifying at least one of an element of the processor circuit an element of the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an user input used in running the application. The modifying the application may include modifying the application at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. The modifying the application may include modifying one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. The modifying the application may include a manual an automatic a dynamic or a just in time JIT instrumentation of the application. The modifying the application may include utilizing one or more of a .NET tool a .NET application programming interface API a Java tool a Java API an operating system tool or an independent tool for modifying the application. The modifying the application may include utilizing at least one of a dynamic an interpreted or a scripting programming language. The modifying the application may include utilizing at least one of a dynamic code a dynamic class loading or a reflection. The modifying the application may include utilizing an assembly language. The modifying the application may include utilizing at least one of a metaprogramming a self modifying code or an application modification tool. The modifying the application may include utilizing at least one of just in time JIT compiling JIT interpretation JIT translation dynamic recompiling or binary rewriting. The modifying the application may include utilizing at least one of a dynamic expression creation a dynamic expression execution a dynamic function creation or a dynamic function execution. The modifying the application may include adding or inserting additional code into the application code. The modifying the application may include at least one of modifying removing rewriting or overwriting the application code. The modifying the application may include at least one of branching redirecting extending or hot swapping the application code. The branching or redirecting the application code may include inserting at least one of a branch a jump a trampoline a trap or a system for redirecting the application execution. In further embodiments the modifying the application may be performed by the processor circuit.

In some embodiments the first instruction set includes a comparative instruction set whose stored portions can be used for comparisons with portions of the new instruction set and the second instruction set includes an anticipatory instruction set whose stored portions can be used for anticipation of an instruction set subsequent to the new instruction set. In further embodiments a portion of the first the second or the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto. In further embodiments the knowledgebase includes one or more data structures objects files tables databases database management systems memory structures or repositories.

In certain embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set includes storing the at least one portion of the first instruction set followed by the at least one portion of the second instruction set. In further embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set includes storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into a knowledge cell. The knowledge cell may include a knowledge cell stored in the knowledgebase the knowledgebase comprising one or more knowledge cells.

In some embodiments the knowledgebase includes a remote or a global knowledgebase operating on a remote computing device. In further embodiments the knowledgebase includes one or more user specific or group specific knowledgebases. In further embodiments the knowledgebase includes an artificial intelligence system for knowledge structuring storing or representation. The artificial intelligence system for knowledge structuring storing or representation may include at least one of a deep learning system a supervised learning system an unsupervised learning system a neural network a search based system an optimization based system a logic based system a fuzzy logic based system a tree based system a graph based system a hierarchical system a symbolic system a sub symbolic system an evolutionary system a genetic system a multi agent system a deterministic system a probabilistic system or a statistical system. In further embodiments the knowledgebase includes a user s knowledge style or methodology of operating the application or an object of the application. In further embodiments the plurality of portions of instruction sets in the knowledgebase include portions of instruction sets received from a plurality of memory units processor circuits computing devices virtual machines runtime engines hard drives storage devices peripheral devices network connected devices or users via a plurality of interfaces.

In certain embodiments the non transitory computer storage medium and or the method further comprise storing at least one extra information associated with the first instruction set and at least one extra information associated with the second instruction set into the knowledgebase. The at least one extra information associated with the first instruction set may be stored together with the at least one portion of the first instruction set and the at least one extra information associated with the second instruction set may be stored together with the at least one portion of the second instruction set.

In some embodiments the non transitory computer storage medium and or the method further comprise storing an importance associated with the first instruction set and an importance associated with the second instruction set into the knowledgebase.

In certain embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing at least one portion of the new instruction set with at least one portion of comparative instruction sets from the knowledgebase the comparative instruction sets comprising the first instruction set. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions of their respective instruction sets as separate strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions of their respective instruction sets as combined strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions comprising numeric values as numbers. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions factoring in an importance of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions factoring in semantically equivalent variations of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing the portions factoring in a rating of one or more of the instruction sets. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing an order of a portion of the new instruction set with an order of a portion of an instruction set from the knowledgebase. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase includes comparing at least one portion of the new instruction set with at least one portion of instruction sets from a knowledge cell the knowledge cell stored in the knowledgebase. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase may be part of a substantial similarity comparison of the new instruction set with the instruction sets from the knowledgebase. The substantial similarity comparison may include a comparison strictness function for adjusting a strictness of the comparison.

In certain embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes finding a match between all but a threshold number of portions of the new instruction set and all but a threshold number of portions of the first instruction set from the knowledgebase. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes finding a match between at least one portion of the new instruction set and at least one portion of the first instruction set from the knowledgebase. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes finding a match between important portions of the new instruction set and important portions of the first instruction set from the knowledgebase. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase includes determining that there is a substantial similarity between at least one portion of the new instruction set and at least one portion of the first instruction set from the knowledgebase.

In certain embodiments the non transitory computer storage medium and or the method further comprise comparing at least one extra information associated with the new instruction set with at least one extra information associated with the first instruction set from the knowledgebase. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase may include finding a match between all but a threshold number of extra information associated with the new instruction set and all but a threshold number of extra information associated with the first instruction set from the knowledgebase. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase may include finding a match between at least one extra information associated with the new instruction set and at least one extra information associated with the first instruction set from the knowledgebase.

In some embodiments the non transitory computer storage medium and or the method further comprise anticipating the second instruction set. The anticipating the second instruction set may include finding the at least one portion of the first instruction set followed by the at least one portion of the second instruction set in the knowledgebase. The anticipating the second instruction set may include finding a knowledge cell comprising the at least one portion of the first instruction set followed by the at least one portion of the second instruction set. The anticipating the second instruction set may include inferring that the second instruction set is an instruction set to be executed following the new instruction set. The anticipating the second instruction set may include causing the processor circuit to execute the second instruction set prior to an instruction set that would have followed the new instruction set. In further embodiments the anticipating the second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise generating a comparison accuracy index the comparison accuracy index indicating a similarity between the new instruction set and the first instruction set from the knowledgebase.

In certain embodiments the non transitory computer storage medium and or the method further comprise analyzing a contextual information the contextual information including at least one of information about the first the second or the new instruction set information about the application or an object of the application information about the computing device or information useful in the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the knowledgebase.

In some embodiments the executing the second instruction set from the knowledgebase includes performing an operation defined by the second instruction set from the knowledgebase. An operation defined by the second instruction set from the knowledgebase may include at least one of an operation of a forms based application an operation of a web browser an operation of an operating system an operation of a word processing application an operation of a media application an operation of a global positioning system GPS application an operation of a game application an operation of a robot control application or an operation of a database application. In further embodiments the executing the second instruction set from the knowledgebase includes executing the second instruction set from the knowledgebase in response to the determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase. In further embodiments the executing the second instruction set from the knowledgebase includes implementing a user s knowledge style or methodology of operating the application or an object of the application the user s knowledge style or methodology of operating the application or an object of the application represented by the instructions sets stored in the knowledgebase. In further embodiments the executing the second instruction set from the knowledgebase includes executing a modified second instruction set from the knowledgebase. In further embodiments the executing the second instruction set from the knowledgebase includes executing an external application or process.

In certain embodiments the non transitory computer storage medium and or the method further comprise disassembling the first the second and the new instruction sets into their portions. The disassembling the first the second and the new instruction sets into their portions may include identifying at least one of a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit of the first the second and the new instruction sets as a portion. The disassembling the first the second and the new instruction sets into their portions may include identifying types of the first the second and the new instruction sets. The disassembling the first the second and the new instruction sets into their portions may include associating an importance with a portion of the first the second and the new instruction sets. The disassembling the first the second and the new instruction sets into their portions may be performed by the processor circuit.

In some embodiments the non transitory computer storage medium and or the method further comprise modifying the second instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit from the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one extra information associated with the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with a contextual information a time information a geo spatial information an environmental information a situational information an observed information a computed information a pre computed information an analyzed information or an inferred information. The modifying the second instruction set may include replacing at least one portion of the second instruction set with information derived from projecting a path a movement a trajectory or a pattern in portions of one or more of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with semantically equivalent variations of at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing the second instruction set with an instruction set generated by a non UAIE system or process. The modifying the second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise displaying the second instruction set as an option to be selected modified or canceled by a user. The displaying the second instruction set as an option to be selected modified or canceled by a user may include displaying a comparison accuracy indicating a similarity between the new instruction set and the first instruction set from the knowledgebase. The second instruction set may include a previously modified second instruction set.

In certain embodiments the non transitory computer storage medium and or the method further comprise rating the executed second instruction set. The rating the executed second instruction set may include displaying the executed second instruction set along with one or more rating values as options to be selected by a user. The rating the executed second instruction set may include automatically rating the executed second instruction set. The rating the executed second instruction set may include associating a rating value with the executed second instruction set and storing the rating value in the knowledgebase. The executed second instruction set may include a previously modified second instruction set. The rating the executed second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise canceling the execution of the executed second instruction set. The canceling the execution of the executed second instruction set may include displaying the executed second instruction set as an option to be selected for cancelation by a user. The canceling the execution of the executed second instruction set may include associating a cancelation with the executed second instruction set and storing the cancelation in the knowledgebase. The canceling the execution of the executed second instruction set may include restoring the computing device to a prior state. The restoring the computing device to a prior state may include saving the state of the computing device prior to executing the second instruction set. The executed second instruction set may include a previously modified second instruction set. The canceling the execution of the executed second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise assembling the second instruction set from its portions. The assembling the second instruction set from its portions may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise creating a knowledge cell the knowledge cell comprising the at least one portion of the first instruction set and the at least one portion of the second instruction set. The at least one portion of the first instruction set may be followed by the at least one portion of the second instruction set. In some embodiments the non transitory computer storage medium and or the method further comprise storing the knowledge cell into knowledgebase the knowledgebase comprising one or more knowledge cells. In further embodiments the knowledge cell comprises at least one portion of one or more comparative instruction sets the one or more comparative instruction sets including one or more least recently executed instruction sets from a plurality of recently executed instruction sets. The one or more comparative instruction sets may include the first instruction set. In further embodiments the knowledge cell comprises at least one portion of one or more anticipatory instruction sets the one or more anticipatory instruction sets including one or more most recently executed instruction sets from a plurality of recently executed instruction sets. The one or more anticipatory instruction sets may include the second instruction set. In further embodiments the knowledge cell includes a user s knowledge style or methodology of operating the application or an object of the application. The creating the knowledge cell may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise an autonomous operating of the application caused by an universal artificial intelligence engine UAIE . In further embodiments the UAIE comprises at least one of the interface the knowledgebase a decision making unit a command disassembler a collection of recently executed instruction sets a knowledge structuring unit a modifier a command assembler a rating system or a cancelation system. In further embodiments the autonomous application operating includes a partially or a fully autonomous application operating. The partially autonomous application operating may include executing the second instruction set or a modified second instruction set responsive to a confirmation by a user. The fully autonomous application operating may include executing the second instruction set or a modified second instruction set without a confirmation. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by the UAIE. The one or more instruction sets generated by the UAIE may include the second instruction set or a modified second instruction set. The one or more instruction sets generated by the UAIE may include one or more instruction sets for operating the application or an object of the application. The one or more instruction sets generated by the UAIE may include one or more instruction sets stored in the knowledgebase. In further embodiments the autonomous application operating includes automatic or auto pilot operating. The automatic or auto pilot operating may include executing one or more instruction sets generated by the UAIE. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by a non UAIE system or process.

In some embodiments the UAIE includes an UAIE that operates independently from the computing device. In further embodiments the UAIE includes an UAIE attachable to the computing device. In further embodiments the UAIE includes an UAIE built into the computing device. In further embodiments the UAIE includes an UAIE that operates independently from the application. In further embodiments the UAIE includes an UAIE attachable to the application. In further embodiments the UAIE includes an UAIE built into the application. In further embodiments the UAIE includes an UAIE provided as a feature of the computing device s operating system. In further embodiments the application includes an application running on the computing device and the UAIE includes an UAIE running on a remote computing device. In further embodiments the UAIE includes an UAIE running on the computing device and the application includes an application running on a remote computing device. In further embodiments the UAIE includes a remote or a global UAIE operating on a remote computing device.

In certain embodiments the non transitory computer storage medium and or the method further comprise loading one or more instruction sets into the knowledgebase by UAIE. In some embodiments the non transitory computer storage medium and or the method further comprise loading one or more knowledge cells into the knowledgebase by UAIE. In certain embodiments the non transitory computer storage medium and or the method further comprise loading one or more knowledgebases into the UAIE. In some embodiments the non transitory computer storage medium and or the method further comprise taking control from sharing control with or releasing control to the application or an object of the application the taking sharing or releasing control performed by the UAIE. In certain embodiments the non transitory computer storage medium and or the method further comprise learning a user s knowledge style or methodology of operating the application or an object of the application by the UAIE. The learning a user s knowledge style or methodology of operating the application or an object of the application may include storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the knowledgebase. The operation of the UAIE may be performed by the processor circuit.

In some aspects the disclosure relates to a system for learning an application s operations. The system may operate on one or more computing devices. In some embodiments the system comprises a computing device including a processor circuit that is coupled to a memory unit. The system may further include an application running on the processor circuit for performing operations on the computing device. The system may further include an interface configured to receive a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of the application for performing operations on the computing device. The system may further include a knowledgebase configured to store portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative instruction sets include the least recently executed instruction sets of the plurality of recently executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of recently executed instruction sets.

In some embodiments the interface may be further configured to receive at least one extra information associated with the plurality of recently executed instruction sets. The knowledgebase may be further configured to store the at least one extra information associated with the comparative instruction sets and store the at least one extra information associated with the anticipatory instruction sets. The knowledgebase may be further configured to store the at least one extra information associated with the comparative instruction sets together with the portions of the comparative instruction sets and store the at least one extra information associated with the anticipatory instruction sets together with the portions of the anticipatory instruction sets.

In certain embodiments the storing portions of comparative instruction sets and portions of anticipatory instruction sets includes storing portions of comparative instruction sets followed by portions of anticipatory instruction sets. In further embodiments the comparative instruction sets include one or more comparative instruction sets and the anticipatory instruction sets include one or more anticipatory instruction sets. In further embodiments the comparative instruction sets include instruction sets whose portions can be used for comparisons with portions of new instruction sets and the anticipatory instruction sets include instruction sets whose portions can be used for anticipation of instruction sets subsequent to the new instruction sets. In further embodiments the storing portions of comparative instruction sets and portions of anticipatory instruction sets includes storing portions of comparative instruction sets and portions of anticipatory instruction sets into a knowledge cell. The knowledge cell includes a knowledge cell stored in the knowledgebase the knowledgebase comprising one or more knowledge cells.

In some aspects the disclosure relates to a non transitory computer storage medium having a computer program stored thereon the program comprising instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising receiving a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of an application for performing operations on a computing device. The operations may further include storing portions of comparative instruction sets and portions of anticipatory instruction sets into a knowledgebase the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative instruction sets include the least recently executed instruction sets of the plurality of recently executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of recently executed instruction sets.

In some aspects the disclosure relates to a method comprising a receiving by a processor circuit via an interface a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of an application for performing operations on a computing device. The method may further include b storing portions of comparative instruction sets and portions of anticipatory instruction sets into a knowledgebase the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative instruction sets include the least recently executed instruction sets of the plurality of recently executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of recently executed instruction sets the storing of b caused by the processor circuit.

The operations or steps of the non transitory computer storage medium and or the method may be performed by any of the elements of the above described system as applicable. The non transitory computer storage medium and or the method may include any of the operations steps and embodiments of the above described system as applicable as well as the following embodiments.

In certain embodiments the non transitory computer storage medium and or the method further comprise receiving by the processor circuit via the interface at least one extra information associated with the plurality of recently executed instruction sets. In some embodiments the non transitory computer storage medium and or the method further comprise storing the at least one extra information associated with the comparative instruction sets and storing the at least one extra information associated with the anticipatory instruction sets. In certain embodiments the non transitory computer storage medium and or the method further comprise storing the at least one extra information associated with the comparative instruction sets together with the portions of the comparative instruction sets and storing the at least one extra information associated with the anticipatory instruction sets together with the portions of the anticipatory instruction sets.

In some embodiments the storing portions of comparative instruction sets and portions of anticipatory instruction sets includes storing portions of comparative instruction sets followed by portions of anticipatory instruction sets. In further embodiments the comparative instruction sets include one or more comparative instruction sets and the anticipatory instruction sets include one or more anticipatory instruction sets. In further embodiments the comparative instruction sets include instruction sets whose portions can be used for comparisons with portions of new instruction sets and the anticipatory instruction sets include instruction sets whose portions can be used for anticipation of instruction sets subsequent to the new instruction sets. In further embodiments the storing portions of comparative instruction sets and portions of anticipatory instruction sets into the knowledgebase includes storing portions of comparative instruction sets and portions of anticipatory instruction sets into a knowledge cell The knowledge cell may include a knowledge cell stored in the knowledgebase the knowledgebase comprising one or more knowledge cells.

In some aspects the disclosure relates to a system for anticipating an application s operations. The system may operate on one or more computing devices. In some embodiments the system comprises a computing device including a processor circuit that is coupled to a memory unit. The system may further include an application running on the processor circuit for performing operations on the computing device. The system may further include a knowledgebase that stores portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets are part of the application for performing operations on the computing device. The system may further include an interface configured to receive new instruction sets wherein the new instruction sets are part of the application for performing operations on the computing device. The system may further include a decision making unit configured to compare portions of the new instruction sets with portions of the comparative instruction sets in the knowledgebase determine that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase and anticipate one or more anticipatory instruction sets in the knowledgebase.

In some embodiments the comparative instruction sets include the least recently executed instruction sets of a plurality of previously executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of previously executed instruction sets the plurality of previously executed instruction sets comprise instruction sets executed immediately prior to and including an instruction set executed at a past time point. In further embodiments the portions of comparative instruction sets and portions of anticipatory instruction sets stored in the knowledgebase include the portions of comparative instruction sets followed by the portions of anticipatory instruction sets. In further embodiments the knowledgebase further stores at least one extra information associated with the comparative instruction sets and at least one extra information associated with the anticipatory instruction sets.

In some embodiments the system may be further configured to receive at least one extra information associated with the new instruction sets.

In certain embodiments the determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase includes finding a match between all but a threshold number of portions of the one or more new instruction sets and all but a threshold number of portions of the one or more comparative instruction sets. In further embodiments the determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase includes finding a match between at least one portion of the one or more new instruction sets and at least one portion of the one or more comparative instruction sets.

In some embodiments the decision making unit may be further configured to compare at least one extra information associated with the new instruction sets with at least one extra information associated with the comparative instruction sets in the knowledgebase. The determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase may include finding a match between all but a threshold number of extra information associated with the one or more new instruction sets and all but a threshold number of extra information associated with the one or more comparative instruction sets. The determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase may include finding a match between the at least one extra information associated with the one or more new instruction sets and the at least one extra information associated with the one or more comparative instruction sets.

In certain embodiments the anticipating the one or more anticipatory instruction sets includes finding one or more comparative instruction sets followed by the one or more anticipatory instruction sets in the knowledgebase. In further embodiments the processor circuit may be caused to execute the one or more anticipatory instruction sets from the knowledgebase. In further embodiments the portions of the comparative instruction sets and the portions of the anticipatory instruction sets may be stored in one or more knowledge cells.

In some aspects the disclosure relates to a non transitory computer storage medium having a computer program stored thereon the program comprising instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising accessing a knowledgebase that stores portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets are part of an application for performing operations on a computing device. The operations may further include receiving new instruction sets wherein the new instruction sets are part of the application for performing operations on the computing device. The operations may further include comparing portions of the new instruction sets with portions of the comparative instruction sets in the knowledgebase. The operations may further include determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase. The operations may further include anticipating one or more anticipatory instruction sets in the knowledgebase.

In some aspects the disclosure relates to a method comprising a accessing a knowledgebase that stores portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets are part of an application for performing operations on a computing device the accessing of a performed by a processor circuit. The method may further include b receiving new instruction sets wherein the new instruction sets are part of the application for performing operations on the computing device the receiving of b performed by the processor circuit. The method may further include c comparing portions of the new instruction sets with portions of the comparative instruction sets in the knowledgebase the comparing of c performed by the processor circuit. The method may further include d determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase the determining of d performed by the processor circuit. The method may further include e anticipating one or more anticipatory instruction sets in the knowledgebase the anticipating of e performed by the processor circuit.

The operations or steps of the non transitory computer storage medium and or the method may be performed by any of the elements of the above described system as applicable. The non transitory computer storage medium and or the method may include any of the operations steps and embodiments of the above described system as applicable as well as the following embodiments.

In some embodiments the comparative instruction sets include the least recently executed instruction sets of a plurality of previously executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of previously executed instruction sets the plurality of previously executed instruction sets comprise instruction sets executed immediately prior to and including an instruction set executed at a past time point. In further embodiments the portions of comparative instruction sets and portions of anticipatory instruction sets stored in the knowledgebase include the portions of comparative instruction sets followed by the portions of anticipatory instruction sets. In further embodiments the knowledgebase further stores at least one extra information associated with the comparative instruction sets and at least one extra information associated with the anticipatory instruction sets.

In certain embodiments the non transitory computer storage medium and or the method further comprise receiving at least one extra information associated with the new instruction sets the receiving performed by the processor circuit.

In some embodiments the determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase includes finding a match between all but a threshold number of portions of the one or more new instruction sets and all but a threshold number of portions of the one or more comparative instruction sets. In further embodiments the determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase includes finding a match between at least one portion of the one or more new instruction sets and at least one portion of the one or more comparative instruction sets.

In certain embodiments the non transitory computer storage medium and or the method further comprise comparing at least one extra information associated with the new instruction sets with at least one extra information associated with the comparative instruction sets in the knowledgebase the comparing performed by the processor circuit. The determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase may include finding a match between all but a threshold number of extra information associated with the one or more new instruction sets and all but threshold number of extra information associated with the one or more comparative instruction sets. The determining that there is substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase may include finding a match between the at least one extra information associated with the one or more new instruction sets and the at least one extra information associated with the one or more comparative instruction sets.

In further embodiments the anticipating the one or more anticipatory instruction sets includes finding one or more comparative instruction sets followed by the one or more anticipatory instruction sets in the knowledgebase.

In certain embodiments the non transitory computer storage medium and or the method further comprise executing the one or more anticipatory instruction sets by the processor circuit.

In further embodiments the portions of the comparative instruction sets and the portions of the anticipatory instruction sets may be stored in one or more knowledge cells.

In some aspects the disclosure relates to a system for autonomous application operating. The system may operate on one or more computing devices. In some embodiments the system comprises a computing device including a processor circuit that is coupled to a memory unit. The system may further include an application running on the processor circuit for performing operations on the computing device. The system may further include an interface configured to receive a first instruction set and a second instruction set the interface further configured to receive a new instruction set wherein the first the second and the new instruction sets are executed by the processor circuit and are part of the application for performing operations on the computing device. The system may further include a neural network configured to store at least one portion of the first instruction set and at least one portion of the second instruction set the neural network comprising a plurality of portions of instruction sets. The system may further include a decision making unit configured to compare at least one portion of the new instruction set with at least one portion of the first instruction set from the neural network and determine that there is a substantial similarity between the new instruction set and the first instruction set from the neural network The processor circuit may be caused to execute the second instruction set from the neural network.

In certain embodiments the application includes at least one of a software application an executable program a web browser a word processing application an operating system a media application a global positioning system application a game application a robot control application a database application a software hardcoded on a chip or a software hardcoded on a hardware element.

In some embodiments the first instruction set may be followed by the second instruction set. In further embodiments the first instruction set includes a comparative instruction set whose portions can be used for comparisons with portions of the new instruction set. In further embodiments the second instruction set includes an anticipatory instruction set that can be used for anticipation of an instruction set subsequent to the new instruction set.

In certain embodiments each of the first the second and the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto. In further embodiments each of the first the second and the new instruction set includes a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments each of the first the second and the new instruction set includes one or more code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments each of the first the second and the new instruction set includes an absolute or a relative instruction set.

In some embodiments the receiving the first the second and the new instruction sets includes obtaining the first the second and the new instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from the processor circuit as the processor circuit executes them. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from at least one of the application the memory unit the processor circuit the computing device a virtual machine a runtime engine a hard drive a storage device a peripheral device a network connected device or an user. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets used for operating an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application or an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the processor circuit the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an element used in running the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of an user input. In further embodiments the receiving the first the second and the new instruction sets includes at least one of a manual an automatic a dynamic or a just in time JIT tracing profiling or instrumentation of the application. In further embodiments the receiving the first the second and the new instruction sets includes utilizing at least one of a .NET tool a .NET application programming interface API a Java tool a Java API a logging tool or an independent tool for receiving the application s instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes utilizing an assembly language. In further embodiments the receiving the first the second and the new instruction sets includes a branch tracing or a simulation tracing.

In some embodiments the interface may be further configured to receive at least one extra information associated with the first instruction set at least one extra information associated with the second instruction set and at least one extra information associated with the new instruction set. The at least one extra information may include one or more of contextual information time information geo spatial information environmental information situational information observed information computed information pre computed information analyzed information or inferred information. The at least one extra information include one or more of an information on an instruction set an information on the application an information on an object of the application an information on the computing device or an information on an user. The at least one extra information may include one or more of a time stamp an user specific information a group specific information a version of the application a type of the application a type of the computing device or a type of an user. The at least one extra information may include one or more of a text property a text formatting a preceding text or a subsequent text. The at least one extra information may include one or more of a location a direction a type a speed or a posture of an object of the application. The at least one extra information may include one or more of a relationship a distance or an allegiance of an object of the application relative to another object of the application. The at least one extra information may include an information on an object of the application within an area of interest. The receiving the at least one extra information may include associating an importance with an extra information. The neural network may be further configured to store the at least one extra information.

In certain embodiments the interface may be further configured to modify the application. The modifying the application may include redirecting the application s execution to one or more alternate instruction sets the alternate instruction sets comprising an anticipatory instruction set. The modifying the application may include redirecting the application s execution to the second instruction set. The modifying the application may include causing the processor circuit to execute the second instruction set instead of or prior to an instruction set that would have followed the new instruction set. The modifying the application may include modifying one or more instruction sets of the application. The modifying the application may include modifying at least one of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code or a machine code. The modifying the application may include modifying at least one of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. The modifying the application may include modifying instruction sets used for operating an object of the application. The modifying the application may include modifying at least one of an element of the processor circuit an element of the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an user input used in running the application. The modifying the application may include modifying the application at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. The modifying the application may include modifying one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. The modifying the application may include a manual an automatic a dynamic or a just in time JIT instrumentation of the application. The modifying the application may include utilizing one or more of a .NET tool a .NET application programming interface API a Java tool a Java API an operating system tool or an independent tool for modifying the application. The modifying the application may include utilizing at least one of a dynamic an interpreted or a scripting programming language. The modifying the application may include utilizing at least one of a dynamic code a dynamic class loading or a reflection. The modifying the application may include utilizing an assembly language. The modifying the application may include utilizing at least one of a metaprogramming a self modifying code or an application modification tool. The modifying the application may include utilizing at least one of just in time JIT compiling JIT interpretation JIT translation dynamic recompiling or binary rewriting. The modifying the application may include utilizing at least one of a dynamic expression creation a dynamic expression execution a dynamic function creation or a dynamic function execution. The modifying the application may include adding or inserting additional code into the application code. The modifying the application may include at least one of modifying removing rewriting or overwriting the application code. The modifying the application may include at least one of branching redirecting extending or hot swapping the application code. The branching or redirecting the application code may include inserting at least one of a branch a jump a trampoline a trap or a system for redirecting the application execution. In further embodiments the interface may be part of operating on or coupled with the processor circuit.

In certain embodiments the first instruction set includes a comparative instruction set whose stored portions can be used for comparisons with portions of the new instruction set and the second instruction set includes an anticipatory instruction set whose stored portions can be used for anticipation of an instruction set subsequent to the new instruction set. In further embodiments a portion of the first the second or the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto.

In some embodiments the neural network includes a plurality of nodes interconnected by one or more connections. A node may include one or more instruction sets portions of an instruction set data structures objects or data. A connection may include an occurrence count and weight. The occurrence count may comprise the number of observations that an instruction set included in one node was followed by an instruction set included in another node. The occurrence count may comprise the number of observations that an instruction set included in one node was preceded by an instruction set included in another node. The weight may include the number of occurrences of one connection originating from a node divided by a sum of occurrences of all connections originating from the node. The weight may include the number of occurrences of one connection pointing to a node divided by a sum of occurrences of all connections pointing to the node. The neural network may include at least one layer each layer comprising one or more nodes.

In certain embodiments the neural network includes one or more comparative layers and one or more anticipatory layers. The storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network may include storing the at least one portion of the first instruction set into a node of a comparative layer of the neural network and the at least one portion of the second instruction set into a node of an anticipatory layer of the neural network. The comparative layer may be followed the anticipatory layer. One or more nodes of successive layers may be interconnected by connections. The one or more comparative layers may include one or more nodes comprising at least one portion of one or more least recently executed instruction sets from a plurality of recently executed instruction sets. The one or more anticipatory layers may include one or more nodes comprising at least one portion of one or more most recently executed instruction sets from a plurality of recently executed instruction sets.

In some embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set includes storing the at least one portion of the first instruction set followed by the at least one portion of the second instruction set.

In certain embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network includes storing the at least one portion of the first instruction set into a first node of the neural network and the at least one portion of the second instruction set into a second node of the neural network. The first node and the second node may be connected by a connection. The first node may be part of a first layer of the neural network and the second node may be part of a second layer of the neural network. The first layer may be followed by the second layer. The first layer may include a comparative layer and the second layer includes an anticipatory layer.

In some embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network includes applying the at least one portion of the first instruction set and the at least one portion of the second instruction set onto the neural network.

In certain embodiments the neural network includes a remote or a global neural network operating on a remote computing device. In further embodiments the neural network includes one or more user specific or group specific neural networks. In further embodiments the neural network includes an artificial intelligence system for knowledge structuring storing or representation. The artificial intelligence system for knowledge structuring storing or representation may include at least one of a deep learning system a supervised learning system an unsupervised learning system a feed forward neural network a back propagating neural network a recurrent neural network a convolutional neural network a custom neural network a search based system an optimization based system a logic based system a fuzzy logic based system a tree based system a graph based system a hierarchical system a symbolic system a sub symbolic system an evolutionary system a genetic system a multi agent system a deterministic system a probabilistic system or a statistical system. In further embodiments the neural network includes a user s knowledge style or methodology of operating the application or an object of the application. In further embodiments the plurality of portions of instruction sets in the neural network include portions of instruction sets received from a plurality of memory units processor circuits computing devices virtual machines runtime engines hard drives storage devices peripheral devices network connected devices or users via a plurality of interfaces.

In some embodiments the neural network may be further configured to store at least one extra information associated with the first instruction set and at least one extra information associated with the second instruction set. The at least one extra information associated with the first instruction set may be stored in a same node of the neural network as the at least one portion of the first instruction set and the at least one extra information associated with the second instruction set may be stored in a same node of the neural network as the at least one portion of the second instruction set.

In certain embodiments the neural network may be further configured to store an importance associated with the first instruction set and an importance associated with the second instruction set. In further embodiments the neural network may be part of operating on or coupled with the processor circuit.

In some embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network may be part of comparing at least one portion of the new instruction set with at least one portion of instruction sets stored in nodes of one or more comparative layers of the neural network. The instruction sets stored in nodes of one or more comparative layers of the neural network may include the first instruction set. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions of their respective instruction sets as separate strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions of their respective instruction sets as combined strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions comprising numeric values as numbers. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions factoring in an importance of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions factoring in semantically equivalent variations of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions factoring in a rating of one or more of the instruction sets. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing an order of a portion of the new instruction set with an order of a portion of an instruction set from the neural network. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network may be part of a substantial similarity comparison of the new instruction set with the instruction sets from the neural network. The substantial similarity comparison may include a comparison strictness function for adjusting a strictness of the comparison.

In some embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes finding a match between all but a threshold number of portions of the new instruction set and all but a threshold number of portions of the first instruction set from the neural network. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes finding a match between at least one portion of the new instruction set and at least one portion of the first instruction set from the neural network. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes finding a match between important portions of the new instruction set and important portions of the first instruction set from the neural network. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes determining that there is a substantial similarity between at least one portion of the new instruction set and at least one portion of the first instruction set from the neural network.

In certain embodiments the decision making unit may be further configured to compare at least one extra information associated with the new instruction set with at least one extra information associated with the first instruction set from the neural network. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network may include finding a match between all but a threshold number of extra information associated with the new instruction set and all but a threshold number of extra information associated with the first instruction set from the neural network. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network may include finding a match between at least one extra information associated with the new instruction set and at least one extra information associated with the first instruction set from the neural network.

In some embodiments the decision making unit may be further configured to anticipate the second instruction set. The anticipating the second instruction set may include finding a node of the neural network comprising at least one portion of the first instruction set and a node of the neural network comprising at least one portion of the second instruction set the nodes comprising the at least one portion of the first and the second instruction sets connected by a highest weight connection. The anticipating the second instruction set may include selecting a path of nodes of the neural network the nodes connected by one or more connections and including a node comprising at least one portion of the first instruction set followed by a node comprising at least one portion of the second instruction set. The anticipating the second instruction set may include inferring that the second instruction set is an instruction set to be executed following the new instruction set. The anticipating the second instruction set may include causing the processor circuit to execute the second instruction set prior to an instruction set that would have followed the new instruction set.

In certain embodiments the decision making unit may be further configured to generate a comparison accuracy index the comparison accuracy index indicating a similarity between the new instruction set and the first instruction set from the neural network.

In some embodiments the decision making unit may be further configured to analyze a contextual information the contextual information including at least one of information about the first the second or the new instruction set information about the application or an object of the application information about the computing device or information useful in the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network. In further embodiments the decision making unit may be part of operating on or coupled with the processor circuit.

In certain embodiments the executing the second instruction set from the neural network includes performing an operation defined by the second instruction set from the neural network. An operation defined by the second instruction set from the neural network may include at least one of an operation of a forms based application an operation of a web browser an operation of an operating system an operation of a word processing application an operation of a media application an operation of a global positioning system GPS application an operation of a game application an operation of a robot control application or an operation of a database application. In further embodiments the executing the second instruction set from the neural network includes executing the second instruction set from the neural network in response to the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network. In further embodiments the executing the second instruction set from the neural network includes implementing a user s knowledge style or methodology of operating the application or an object of the application the user s knowledge style or methodology of operating the application or an object of the application represented by the instructions sets stored in the neural network. In further embodiments the executing the second instruction set from the neural network includes executing a modified second instruction set from the neural network. In further embodiments the executing the second instruction set from the neural network includes executing an external application or process.

In some embodiments the system further comprises a command disassembler configured to disassemble the first the second and the new instruction sets into their portions. The disassembling the first the second and the new instruction sets into their portions may include identifying at least one of a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit of the first the second and the new instruction sets as a portion. The disassembling the first the second and the new instruction sets into their portions may include identifying types of the first the second and the new instruction sets. The disassembling the first the second and the new instruction sets into their portions may include associating an importance with a portion of the first the second and the new instruction sets. In further embodiments the command disassembler may be part of operating on or coupled with the processor circuit.

In certain embodiments the system further comprises a modifier configured to modify the second instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one of a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit from the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one extra information associated with the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with a contextual information a time information a geo spatial information an environmental information a situational information an observed information a computed information a pre computed information an analyzed information or an inferred information. The modifying the second instruction set may include replacing at least one portion of the second instruction set with information derived from projecting a path a movement a trajectory or a pattern in portions of one or more of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with semantically equivalent variations of at least one portion of the first the new or an another instruction set The modifying the second instruction set may include replacing the second instruction set with an instruction set generated by a non UAIE system or process. In further embodiments the modifier may be part of operating on or coupled with the processor circuit.

In some embodiments the system further comprises a display configured to display the second instruction set as an option to be selected modified or canceled by a user. The displaying the second instruction set as an option to be selected modified or canceled by a user may include displaying a comparison accuracy indicating a similarity between the new instruction set and the first instruction set from the neural network. The second instruction set may include a previously modified second instruction set.

In certain embodiments the system further comprises a rating system configured to rate the executed second instruction set. The rating the executed second instruction set may include displaying the executed second instruction set along with one or more rating values as options to be selected by a user. The rating the executed second instruction set may include automatically rating the executed second instruction set. The rating the executed second instruction set may include associating a rating value with the executed second instruction set and storing the rating value in the neural network. The executed second instruction set may include a previously modified second instruction set. In further embodiments the rating system may be part of operating on or coupled with the processor circuit.

In some embodiments the system further comprises a cancelation system configured to cancel the execution of the executed second instruction set. The canceling the execution of the executed second instruction set may include displaying the executed second instruction set as an option to be selected for cancelation by a user. The canceling the execution of the executed second instruction set may include associating a cancelation with the executed second instruction set and storing the cancelation in the neural network. The canceling the execution of the executed second instruction set may include restoring the computing device to a prior state. The restoring the computing device to a prior state may include saving the state of the computing device prior to executing the second instruction set. The executed second instruction set may include a previously modified second instruction set. In further embodiments the cancelation system may be part of operating on or coupled with the processor circuit.

In certain embodiments the system further comprises a command assembler configured to assemble the second instruction set from its portions. In further embodiments the command assembler may be part of operating on or coupled with the processor circuit.

In some embodiments the system further comprises a knowledge structuring unit configured to cause the storing of the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network. In further embodiments the knowledge structuring unit may be part of operating on or coupled with the processor circuit.

In certain embodiments the system further comprises an universal artificial intelligence engine UAIE for autonomous application operating. The UAIE may comprise at least one of the interface the neural network the decision making unit a command disassembler a collection of recently executed instruction sets a knowledge structuring unit a modifier a command assembler a rating system or a cancelation system. In further embodiments the autonomous application operating includes a partially or a fully autonomous application operating. The partially autonomous application operating may include executing the second instruction set or a modified second instruction set responsive to a confirmation by a user. The fully autonomous application operating may include executing the second instruction set or a modified second instruction set without a confirmation. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by the UAIE. The one or more instruction sets generated by the UAIE may include the second instruction set or a modified second instruction set. The one or more instruction sets generated by the UAIE may include one or more instruction sets for operating the application or an object of the application. The one or more instruction sets generated by the UAIE may include one or more instruction sets stored in the neural network. In further embodiments the autonomous application operating includes automatic or auto pilot operating. The automatic or auto pilot operating may include executing one or more instruction sets generated by the UAIE. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by a non UAIE system or process.

In some embodiments the UAIE includes an UAIE that operates independently from the computing device. In further embodiments the UAIE includes an UAIE attachable to the computing device. In further embodiments the UAIE includes an UAIE built into the computing device. In further embodiments the UAIE includes an UAIE that operates independently from the application. In further embodiments the UAIE includes an UAIE attachable to the application. In further embodiments the UAIE includes an UAIE built into the application. In further embodiments the UAIE includes an UAIE provided as a feature of the computing device s operating system. In further embodiments the application includes an application running on the computing device and the UAIE includes an UAIE running on a remote computing device. In further embodiments the UAIE includes an UAIE running on the computing device and the application includes an application running on a remote computing device. In further embodiments the UAIE includes a remote or a global UAIE operating on a remote computing device. In further embodiments the UAIE may be configured to load one or more instruction sets into the neural network. In further embodiments the UAIE may be configured to load one or more neural networks into the UAIE. In further embodiments the UAIE may be configured to take control from share control with or release control to the application or an object of the application. In further embodiments the UAIE may be configured to learn a user s knowledge style or methodology of operating the application or an object of the application. The learning a user s knowledge style or methodology of operating the application or an object of the application may include storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network. In further embodiments the UAIE may be part of operating on or coupled with the processor circuit.

In some aspects the disclosure relates to a non transitory computer storage medium having a computer program stored thereon the program comprising instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising receiving a first instruction set and a second instruction set wherein the first and the second instruction sets are executed by a processor circuit and are part of an application for performing operations on a computing device. The operations may further include storing at least one portion of the first instruction set and at least one portion of the second instruction set into a neural network the neural network comprising a plurality of portions of instruction sets. The operations may further include receiving a new instruction set wherein the new instruction set is executed by the processor circuit and is part of the application for performing operations on the computing device. The operations may further include comparing at least one portion of the new instruction set with at least one portion of the first instruction set from the neural network. The operations may further include determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network. The operations may further include causing the processor circuit to execute the second instruction set from the neural network.

In some aspects the disclosure relates to a method comprising a receiving by a processor circuit via an interface a first instruction set and a second instruction set wherein the first and the second instruction sets are executed by the processor circuit and are part of an application for performing operations on a computing device. The method may further include b storing at least one portion of the first instruction set and at least one portion of the second instruction set into a neural network the neural network comprising a plurality of portions of instruction sets the storing of b caused by the processor circuit. The method may further include c receiving by the processor circuit via the interface a new instruction set wherein the new instruction set is executed by the processor circuit and is part of the application for performing operations on the computing device. The method may further include d comparing at least one portion of the new instruction set with at least one portion of the first instruction set from the neural network the comparing of d performed by the processor circuit. The method may further include e determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network the determining of e performed by the processor circuit. The method may further include executing the second instruction set from the neural network by the processor circuit.

The operations or steps of the non transitory computer storage medium and or the method may be performed by any of the elements of the above described system as applicable. The non transitory computer storage medium and or the method may include any of the operations steps and embodiments of the above described system as applicable as well as the following embodiments.

In some embodiments the application includes at least one of a software application an executable program a web browser a word processing application an operating system a media application a global positioning system application a game application a robot control application a database application a software hardcoded on a chip or a software hardcoded on a hardware element.

In certain embodiments the first instruction set may be followed by the second instruction set. In further embodiments the first instruction set includes a comparative instruction set whose portions can be used for comparisons with portions of the new instruction set. In further embodiments the second instruction set includes an anticipatory instruction set that can be used for anticipation of an instruction set subsequent to the new instruction set.

In some embodiments each of the first the second and the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto. In further embodiments each of the first the second and the new instruction set includes a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments each of the first the second and the new instruction set includes one or more code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments each of the first the second and the new instruction set includes an absolute or a relative instruction set.

In certain embodiments the receiving the first the second and the new instruction sets includes obtaining the first the second and the new instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from the processor circuit as the processor circuit executes them. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets from at least one of the application the memory unit the processor circuit the computing device a virtual machine a runtime engine a hard drive a storage device a peripheral device a network connected device or an user. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes receiving the first the second and the new instruction sets used for operating an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code a structured query language SQL code or a machine code. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the application or an object of the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of the processor circuit the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an element used in running the application. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. In further embodiments the receiving the first the second and the new instruction sets includes at least one of tracing profiling or instrumentation of an user input. In further embodiments the receiving the first the second and the new instruction sets includes at least one of a manual an automatic a dynamic or a just in time JIT tracing profiling or instrumentation of the application. In further embodiments the receiving the first the second and the new instruction sets includes utilizing at least one of a .NET tool a .NET application programming interface API a Java tool a Java API a logging tool or an independent tool for receiving the application s instruction sets. In further embodiments the receiving the first the second and the new instruction sets includes utilizing an assembly language. In further embodiments the receiving the first the second and the new instruction sets includes a branch tracing or a simulation tracing.

In certain embodiments the non transitory computer storage medium and or the method further comprise receiving at least one extra information associated with the first instruction set at least one extra information associated with the second instruction set and at least one extra information associated with the new instruction set. The at least one extra information may include one or more of contextual information time information geo spatial information environmental information situational information observed information computed information pre computed information analyzed information or inferred information. The at least one extra information may include one or more of an information on an instruction set an information on the application an information on an object of the application an information on the computing device or an information on an user. The at least one extra information may include one or more of a time stamp an user specific information a group specific information a version of the application a type of the application a type of the computing device or a type of an user. The at least one extra information may include one or more of a text property a text formatting a preceding text or a subsequent text. The at least one extra information may include one or more of a location a direction a type a speed or a posture of an object of the application. The at least one extra information may include one or more of a relationship a distance or an allegiance of an object of the application relative to another object of the application. The at least one extra information may include an information on an object of the application within an area of interest. The receiving the at least one extra information may include associating an importance with an extra information. In further embodiments the non transitory computer storage medium and or the method further comprise storing the at least one extra information into the neural network.

In some embodiments the non transitory computer storage medium and or the method further comprise modifying the application. The modifying the application may include redirecting the application s execution to one or more alternate instruction sets the alternate instruction sets comprising an anticipatory instruction set. The modifying the application may include redirecting the application s execution to the second instruction set. The modifying the application may include causing the processor circuit to execute the second instruction set instead of or prior to an instruction set that would have followed the new instruction set. The modifying the application may include modifying one or more instruction sets of the application. The modifying the application may include modifying at least one of the application s a source code a bytecode an intermediate code a compiled code an interpreted code a translated code a runtime code an assembly code or a machine code. The modifying the application may include modifying at least one of the memory unit a register of the processor circuit a storage or a repository where the application s instruction sets may be stored. The modifying the application may include modifying instruction sets used for operating an object of the application. The modifying the application may include modifying at least one of an element of the processor circuit an element of the computing device a virtual machine a runtime engine an operating system an execution stack a program counter or an user input used in running the application. The modifying the application may include modifying the application at a source code write time a compile time an interpretation time a translation time a linking time a loading time or a runtime. The modifying the application may include modifying one or more of the application s code segments lines of code statements instructions functions routines subroutines or basic blocks. The modifying the application may include a manual an automatic a dynamic or a just in time JIT instrumentation of the application. The modifying the application may include utilizing one or more of a .NET tool a .NET application programming interface API a Java tool a Java API an operating system tool or an independent tool for modifying the application. The modifying the application may include utilizing at least one of a dynamic an interpreted or a scripting programming language. The modifying the application may include utilizing at least one of a dynamic code a dynamic class loading or a reflection. The modifying the application may include utilizing an assembly language. The modifying the application may include utilizing at least one of a metaprogramming a self modifying code or an application modification tool. The modifying the application may include utilizing at least one of just in time JIT compiling JIT interpretation JIT translation dynamic recompiling or binary rewriting. The modifying the application may include utilizing at least one of a dynamic expression creation a dynamic expression execution a dynamic function creation or a dynamic function execution. The modifying the application may include adding or inserting additional code into the application code. The modifying the application may include at least one of modifying removing rewriting or overwriting the application code. The modifying the application may include at least one of branching redirecting extending or hot swapping the application code. The branching or redirecting the application code may include inserting at least one of a branch a jump a trampoline a trap or a system for redirecting the application execution. The modifying the application may be performed by the processor circuit.

In some embodiments the first instruction set includes a comparative instruction set whose stored portions can be used for comparisons with portions of the new instruction set and the second instruction set includes an anticipatory instruction set whose stored portions can be used for anticipation of an instruction set subsequent to the new instruction set. In further embodiments a portion of the first the second or the new instruction set includes one or more commands keywords symbols instructions operators variables values objects functions parameters characters digits or references thereto.

In certain embodiments the neural network includes a plurality of nodes interconnected by one or more connections. A node may include one or more instruction sets portions of an instruction set data structures objects or data. A connection may include an occurrence count and weight. The occurrence count may comprise the number of observations that an instruction set included in one node was followed by an instruction set included in another node. The occurrence count may comprise the number of observations that an instruction set included in one node was preceded by an instruction set included in another node. The weight may include the number of occurrences of one connection originating from a node divided by a sum of occurrences of all connections originating from the node. The weight may include the number of occurrences of one connection pointing to a node divided by a sum of occurrences of all connections pointing to the node. The neural network may include at least one layer each layer comprising one or more nodes.

In some embodiments the neural network includes one or more comparative layers and one or more anticipatory layers. The storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network may include storing the at least one portion of the first instruction set into a node of a comparative layer of the neural network and the at least one portion of the second instruction set into a node of an anticipatory layer of the neural network. The comparative layer may be followed the anticipatory layer. One or more nodes of successive layers may be interconnected by connections. The one or more comparative layers may include one or more nodes comprising at least one portion of one or more least recently executed instruction sets from a plurality of recently executed instruction sets. The one or more anticipatory layers may include one or more nodes comprising at least one portion of one or more most recently executed instruction sets from a plurality of recently executed instruction sets.

In certain embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set may include storing the at least one portion of the first instruction set followed by the at least one portion of the second instruction set.

In some embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network includes storing the at least one portion of the first instruction set into a first node of the neural network and the at least one portion of the second instruction set into a second node of the neural network. The first node and the second node may be connected by a connection. The first node may be part of a first layer of the neural network and the second node may be part of a second layer of the neural network. The first layer may be followed by the second layer. The first layer may include a comparative layer and the second layer may include an anticipatory layer.

In certain embodiments the storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network includes applying the at least one portion of the first instruction set and the at least one portion of the second instruction set onto the neural network.

In some embodiments the neural network includes a remote or a global neural network operating on a remote computing device. In further embodiments the neural network includes one or more user specific or group specific neural networks. In further embodiments the neural network includes an artificial intelligence system for knowledge structuring storing or representation. The artificial intelligence system for knowledge structuring storing or representation may include at least one of a deep learning system a supervised learning system an unsupervised learning system a feed forward neural network a back propagating neural network a recurrent neural network a convolutional neural network a custom neural network a search based system an optimization based system a logic based system a fuzzy logic based system a tree based system a graph based system a hierarchical system a symbolic system a sub symbolic system an evolutionary system a genetic system a multi agent system a deterministic system a probabilistic system or a statistical system. In further embodiments the neural network includes a user s knowledge style or methodology of operating the application or an object of the application. In further embodiments the plurality of portions of instruction sets in the neural network include portions of instruction sets received from a plurality of memory units processor circuits computing devices virtual machines runtime engines hard drives storage devices peripheral devices network connected devices or users via a plurality of interfaces.

In certain embodiments the non transitory computer storage medium and or the method further comprise storing at least one extra information associated with the first instruction set and at least one extra information associated with the second instruction set into the neural network. The at least one extra information associated with the first instruction set may be stored in a same node of the neural network as the at least one portion of the first instruction set and the at least one extra information associated with the second instruction set may be stored in a same node of the neural network as the at least one portion of the second instruction set.

In certain embodiments the non transitory computer storage medium and or the method further comprise storing an importance associated with the first instruction set and an importance associated with the second instruction set into the neural network.

In some embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network may be part of comparing at least one portion of the new instruction set with at least one portion of instruction sets stored in nodes of one or more comparative layers of the neural network. The instruction sets stored in nodes of one or more comparative layers of the neural network may include the first instruction set. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions of their respective instruction sets as separate strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions of their respective instruction sets as combined strings of characters. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions comprising numeric values as numbers. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions factoring in an importance of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions factoring in semantically equivalent variations of one or more of the portions. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing the portions factoring in a rating of one or more of the instruction sets. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network includes comparing an order of a portion of the new instruction set with an order of a portion of an instruction set from the neural network. In further embodiments the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network may be part of a substantial similarity comparison of the new instruction set with the instruction sets from the neural network. The substantial similarity comparison may include a comparison strictness function for adjusting a strictness of the comparison.

In certain embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes finding a match between all but a threshold number of portions of the new instruction set and all but a threshold number of portions of the first instruction set from the neural network. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes finding a match between at least one portion of the new instruction set and at least one portion of the first instruction set from the neural network. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes finding a match between important portions of the new instruction set and important portions of the first instruction set from the neural network. In further embodiments the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network includes determining that there is a substantial similarity between at least one portion of the new instruction set and at least one portion of the first instruction set from the neural network.

In certain embodiments the non transitory computer storage medium and or the method further comprise comparing at least one extra information associated with the new instruction set with at least one extra information associated with the first instruction set from the neural network. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network may include finding a match between all but a threshold number of extra information associated with the new instruction set and all but a threshold number of extra information associated with the first instruction set from the neural network. The determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network may include finding a match between at least one extra information associated with the new instruction set and at least one extra information associated with the first instruction set from the neural network.

In some embodiments the non transitory computer storage medium and or the method further comprise anticipating the second instruction set. The anticipating the second instruction set may include finding a node of the neural network comprising at least one portion of the first instruction set and a node of the neural network comprising at least one portion of the second instruction set the nodes comprising the at least one portion of the first and the second instruction sets connected by a highest weight connection. The anticipating the second instruction set may include selecting a path of nodes of the neural network the nodes connected by one or more connections and including a node comprising at least one portion of the first instruction set followed by a node comprising at least one portion of the second instruction set. The anticipating the second instruction set may include inferring that the second instruction set is an instruction set to be executed following the new instruction set. The anticipating the second instruction set may include causing the processor circuit to execute the second instruction set prior to an instruction set that would have followed the new instruction set. The anticipating the second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise generating a comparison accuracy index the comparison accuracy index indicating a similarity between the new instruction set and the first instruction set from the neural network.

In some embodiments the non transitory computer storage medium and or the method further comprise analyzing a contextual information the contextual information including at least one of information about the first the second or the new instruction set information about the application or an object of the application information about the computing device or information useful in the comparing the at least one portion of the new instruction set with the at least one portion of the first instruction set from the neural network.

In certain embodiments the executing the second instruction set from the neural network includes performing an operation defined by the second instruction set from the neural network. An operation defined by the second instruction set from the neural network may include at least one of an operation of a forms based application an operation of a web browser an operation of an operating system an operation of a word processing application an operation of a media application an operation of a global positioning system GPS application an operation of a game application an operation of a robot control application or an operation of a database application. In further embodiments the executing the second instruction set from the neural network includes executing the second instruction set from the neural network in response to the determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network. In further embodiments the executing the second instruction set from the neural network includes implementing a user s knowledge style or methodology of operating the application or an object of the application the user s knowledge style or methodology of operating the application or an object of the application represented by the instructions sets stored in the neural network. In further embodiments the executing the second instruction set from the neural network includes executing a modified second instruction set from the neural network. In further embodiments the executing the second instruction set from the neural network includes executing an external application or process.

In certain embodiments the non transitory computer storage medium and or the method further comprise disassembling the first the second and the new instruction sets into their portions. The disassembling the first the second and the new instruction sets into their portions may include identifying at least one of a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit of the first the second and the new instruction sets as a portion. The disassembling the first the second and the new instruction sets into their portions may include identifying types of the first the second and the new instruction sets. The disassembling the first the second and the new instruction sets into their portions may include associating an importance with a portion of the first the second and the new instruction sets. The disassembling the first the second and the new instruction sets into their portions may be performed by the processor circuit.

In some embodiments the non transitory computer storage medium and or the method further comprise modifying the second instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one of a command a keyword a symbol an instruction an operator a variable a value an object a function a parameter a character or a digit from the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with at least one extra information associated with the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with a contextual information a time information a geo spatial information an environmental information a situational information an observed information a computed information a pre computed information an analyzed information or an inferred information. The modifying the second instruction set may include replacing at least one portion of the second instruction set with information derived from projecting a path a movement a trajectory or a pattern in portions of one or more of the first the new or an another instruction set. The modifying the second instruction set may include replacing at least one portion of the second instruction set with semantically equivalent variations of at least one portion of the first the new or an another instruction set. The modifying the second instruction set may include replacing the second instruction set with an instruction set generated by a non UAIE system or process. The modifying the second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise displaying the second instruction set as an option to be selected modified or canceled by a user. The displaying the second instruction set as an option to be selected modified or canceled by a user may include displaying a comparison accuracy indicating a similarity between the new instruction set and the first instruction set from the neural network. The second instruction set may include a previously modified second instruction set.

In some embodiments the non transitory computer storage medium and or the method further comprise rating the executed second instruction set. The rating the executed second instruction set may include displaying the executed second instruction set along with one or more rating values as options to be selected by a user. The rating the executed second instruction set may include automatically rating the executed second instruction set. The rating the executed second instruction set may include associating a rating value with the executed second instruction set and storing the rating value in the neural network. The executed second instruction set may include a previously modified second instruction set. The rating the executed second instruction set may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise canceling the execution of the executed second instruction set. The canceling the execution of the executed second instruction set may include displaying the executed second instruction set as an option to be selected for cancelation by a user. The canceling the execution of the executed second instruction set may include associating a cancelation with the executed second instruction set and storing the cancelation in the neural network. The canceling the execution of the executed second instruction set may include restoring the computing device to a prior state. The restoring the computing device to a prior state may include saving the state of the computing device prior to executing the second instruction set. The executed second instruction set may include a previously modified second instruction set. The canceling the execution of the executed second instruction set may be performed by the processor circuit.

In some embodiments the non transitory computer storage medium and or the method further comprise assembling the second instruction set from its portions. The assembling the second instruction set from its portions may be performed by the processor circuit.

In certain embodiments the non transitory computer storage medium and or the method further comprise an autonomous operating of the application caused by an universal artificial intelligence engine UAIE . The UAIE may comprise at least one of the interface the neural network the decision making unit a command disassembler a collection of recently executed instruction sets a knowledge structuring unit a modifier a command assembler a rating system or a cancelation system. In further embodiments the autonomous application operating includes a partially or a fully autonomous application operating. The partially autonomous application operating may include executing the second instruction set or a modified second instruction set responsive to a confirmation by a user. The fully autonomous application operating may include executing the second instruction set or a modified second instruction set without a confirmation. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by the UAIE. The one or more instruction sets generated by the UAIE may include the second instruction set or a modified second instruction set. The one or more instruction sets generated by the UAIE may include one or more instruction sets for operating the application or an object of the application. The one or more instruction sets generated by the UAIE may include one or more instruction sets stored in the neural network. In further embodiments the autonomous application operating includes automatic or auto pilot operating. The automatic or auto pilot operating may include executing one or more instruction sets generated by the UAIE. In further embodiments the autonomous application operating includes executing one or more instruction sets generated by a non UAIE system or process.

In further embodiments the UAIE includes an UAIE that operates independently from the computing device. In further embodiments the UAIE includes an UAIE attachable to the computing device. In further embodiments the UAIE includes an UAIE built into the computing device. In further embodiments the UAIE includes an UAIE that operates independently from the application. In further embodiments the UAIE includes an UAIE attachable to the application. In further embodiments the UAIE includes an UAIE built into the application. In further embodiments the UAIE includes an UAIE provided as a feature of the computing device s operating system. In further embodiments the application includes an application running on the computing device and the UAIE includes an UAIE running on a remote computing device. In further embodiments the UAIE includes an UAIE running on the computing device and the application includes an application running on a remote computing device. In further embodiments the UAIE includes a remote or a global UAIE operating on a remote computing device.

In some embodiments the non transitory computer storage medium and or the method further comprise loading one or more instruction sets into the neural network. In certain embodiments the non transitory computer storage medium and or the method further comprise loading one or more neural networks into the UAIE. In some embodiments the non transitory computer storage medium and or the method further comprise taking control from sharing control with or releasing control to the application or an object of the application the taking sharing or releasing control performed by the UAIE. In certain embodiments the non transitory computer storage medium and or the method further comprise learning a user s knowledge style or methodology of operating the application or an object of the application. The learning a user s knowledge style or methodology of operating the application or an object of the application may include storing the at least one portion of the first instruction set and the at least one portion of the second instruction set into the neural network. The operation of the UAIE may be performed by the processor circuit.

In some aspects the disclosure relates to a system for learning an application s operations. The system may operate on one or more computing devices. In some embodiments the system comprises a computing device including a processor circuit that is coupled to a memory unit. The system may further include an application running on the processor circuit for performing operations on the computing device. The system may further include an interface configured to receive a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of the application for performing operations on the computing device. The system may further include a neural network configured to store portions of the least recently executed instruction sets of the plurality of recently executed instruction sets into nodes of comparative layers of the neural network and store portions of the most recently executed instruction sets of the plurality of recently executed instruction sets into nodes of anticipatory layers of the neural network.

In some embodiments the interface may be further configured to receive at least one extra information associated with the plurality of recently executed instruction sets. The neural network may be further configured to store the at least one extra information associated with the least recently executed instruction sets into the nodes of comparative layers of the neural network and store the at least one extra information associated with the most recently executed instruction sets into the nodes of anticipatory layers of the neural network. The neural network may be further configured to store the at least one extra information associated with the least recently executed instruction sets into the nodes comprising the portions of the least recently executed instruction sets and and wherein the neural network may be further configured to store the at least one extra information associated with the most recently executed instruction sets into the nodes comprising the portions of the most recently executed instruction sets.

In certain embodiments the least recently executed instruction sets of the plurality of recently executed instruction sets include instruction sets whose portions can be used for comparisons with portions of new instruction sets and the most recently executed instruction sets of the plurality of recently executed instruction sets include instruction sets whose portions can be used for anticipation of instruction sets subsequent to the new instruction sets. In further embodiments the least recently executed instruction sets of the plurality of recently executed instruction sets include one or more instruction sets and the most recently executed instruction sets of the plurality of recently executed instruction sets include one or more instruction sets. In further embodiments the comparative layers include one or more comparative layers and the anticipatory layers include one or more anticipatory layers. In further embodiments the comparative layers may be followed by anticipatory layers. In further embodiments one or more nodes of successive layers may be interconnected by connections.

In some aspects the disclosure relates to a non transitory computer storage medium having a computer program stored thereon the program comprising instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising receiving a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of an application for performing operations on a computing device. The operations may further include storing portions of the least recently executed instruction sets of the plurality of recently executed instruction sets into nodes of comparative layers of a neural network. The operations may further include storing portions of the most recently executed instruction sets of the plurality of recently executed instruction sets into nodes of anticipatory layers of the neural network.

In some aspects the disclosure relates to a method comprising a receiving by a processor circuit via an interface a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of an application for performing operations on a computing device. The method may further include b storing portions of the least recently executed instruction sets of the plurality of recently executed instruction sets into nodes of comparative layers of a neural network the storing of b caused by the processor circuit. The method may further include c storing portions of the most recently executed instruction sets of the plurality of recently executed instruction sets into nodes of anticipatory layers of the neural network the storing of c caused by the processor circuit.

The operations or steps of the non transitory computer storage medium and or the method may be performed by any of the elements of the above described system as applicable. The non transitory computer storage medium and or the method may include any of the operations steps and embodiments of the above described system as applicable as well as the following embodiments.

In certain embodiments the non transitory computer storage medium and or the method further comprise receiving by the processor circuit via the interface at least one extra information associated with the plurality of recently executed instruction sets. In further embodiments the non transitory computer storage medium and or the method further comprise storing the at least one extra information associated with the least recently executed instruction sets into the nodes of comparative layers of the neural network and storing the at least one extra information associated with the most recently executed instruction sets into the nodes of anticipatory layers of the neural network. In further embodiments the non transitory computer storage medium and or the method further comprise storing the at least one extra information associated with the least recently executed instruction sets into the nodes comprising the portions of the least recently executed instruction sets and storing the at least one extra information associated with the most recently executed instruction sets into the nodes comprising the portions of the most recently executed instruction sets.

In further embodiments the least recently executed instruction sets of the plurality of recently executed instruction sets include instruction sets whose portions can be used for comparisons with portions of new instruction sets and the most recently executed instruction sets of the plurality of recently executed instruction sets include instruction sets whose portions can be used for anticipation of instruction sets subsequent to the new instruction sets. In further embodiments the least recently executed instruction sets of the plurality of recently executed instruction sets include one or more instruction sets and the most recently executed instruction sets of the plurality of recently executed instruction sets include one or more instruction sets. In further embodiments the comparative layers include one or more comparative layers and the anticipatory layers include one or more anticipatory layers. In further embodiments the comparative layers may be followed by anticipatory layers. In further embodiments one or more nodes of successive layers may be interconnected by connections.

In some aspects the disclosure relates to a system for anticipating an application s operations. The system may operate on one or more computing devices. In some embodiments the system comprises a computing device including a processor circuit that is coupled to a memory unit. The system may further include an application running on the processor circuit for performing operations on the computing device. The system may further include a neural network that stores portions of comparative instruction sets and portions of anticipatory instruction sets the neural network comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets are part of the application for performing operations on the computing device. The system may further include an interface configured to receive new instruction sets the new instruction sets are part of the application for performing operations on the computing device. The system may further include a decision making unit configured to compare portions of the new instruction sets with the portions of the comparative instruction sets in the neural network determine that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network and anticipate one or more anticipatory instruction sets in the neural network.

In some embodiments the comparative instruction sets include the least recently executed instruction sets of a plurality of previously executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of previously executed instruction sets the plurality of previously executed instruction sets comprise instruction sets executed immediately prior to and including an instruction set executed at a past time. In further embodiments the portions of comparative instruction sets may be stored into nodes of comparative layers of the neural network and the portions of anticipatory instruction sets may be stored into nodes of anticipatory layers of the neural network. The comparative layers may be followed by anticipatory layers. In further embodiments the neural network further stores at least one extra information associated with the comparative instruction sets and at least one extra information associated with the anticipatory instruction sets.

In certain embodiments the interface may be further configured to receive at least one extra information associated with the new instruction sets.

In some embodiments the determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network includes finding a match between all but a threshold number of portions of the one or more new instruction sets and all but a threshold number of portions of the one or more comparative instruction sets. In further embodiments the determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network includes finding a match between at least one portion of the one or more new instruction sets and at least one portion of the one or more comparative instruction sets. In further embodiments the decision making unit may be further configured to compare at least one extra information associated with the new instruction sets with at least one extra information associated with the comparative instruction sets in the neural network. The determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network may include finding a match between all but a threshold number of extra information associated with the one or more new instruction sets and all but a threshold number of extra information associated with the one or more comparative instruction sets. The determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network may include finding a match between the at least one extra information associated with the one or more new instruction sets and the at least one extra information associated with the one or more comparative instruction sets.

In certain embodiments the portions of the comparative instruction sets may be stored in nodes of comparative layers of the neural network and the portions of the anticipatory instruction sets may be stored in nodes of anticipatory layers of the neural network. The anticipating the one or more anticipatory instruction sets in the neural network may include selecting a path of nodes through comparative layers of the neural network followed by a path of nodes through anticipatory layers of the neural network the nodes in successive comparative and successive anticipatory layers connected by one or more connections. In further embodiments the processor circuit is caused to execute the one or more anticipatory instruction sets from the neural network.

In some aspects the disclosure relates to a non transitory computer storage medium having a computer program stored thereon the program comprising instructions that when executed by one or more computing devices cause the one or more computing devices to perform operations comprising accessing a neural network that stores portions of comparative instruction sets and portions of anticipatory instruction sets the neural network comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets are part of an application for performing operations on a computing device. The operations may further include receiving new instruction sets wherein the new instruction sets are part of the application for performing operations on the computing device. The operations may further include comparing portions of the new instruction sets with the portions of the comparative instruction sets in the neural network. The operations may further include determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network. The operations may further include anticipating one or more anticipatory instruction sets in the neural network.

In some aspects the disclosure relates to a method comprising a accessing a neural network that stores portions of comparative instruction sets and portions of anticipatory instruction sets the neural network comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets are part of an application for performing operations on a computing device the accessing of a performed by a processor circuit. The method may further include b receiving new instruction sets wherein the new instruction sets are part of the application for performing operations on the computing device the receiving of b performed by the processor circuit. The method may further include c comparing portions of the new instruction sets with the portions of the comparative instruction sets in the neural network the comparing of c performed by the processor circuit. The method may further include d determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network the determining of d performed by the processor circuit. The method may further include e anticipating one or more anticipatory instruction sets in the neural network the anticipating of e performed by the processor circuit.

The operations or steps of the non transitory computer storage medium and or the method may be performed by any of the elements of the above described system as applicable. The non transitory computer storage medium and or the method may include any of the operations steps and embodiments of the above described system as applicable as well as the following embodiments.

In some embodiments the comparative instruction sets include the least recently executed instruction sets of a plurality of previously executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of previously executed instruction sets the plurality of previously executed instruction sets comprise instruction sets executed immediately prior to and including an instruction set executed at a past time. In further embodiments the portions of comparative instruction sets may be stored into nodes of comparative layers of the neural network and the portions of anticipatory instruction sets may be stored into nodes of anticipatory layers of the neural network. The comparative layers may be followed by anticipatory layers. In further embodiments the neural network further stores at least one extra information associated with the comparative instruction sets and at least one extra information associated with the anticipatory instruction sets.

In certain embodiments the non transitory computer storage medium and or the method further comprise receiving at least one extra information associated with the new instruction sets the receiving performed by the processor circuit.

In some embodiments the determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network includes finding a match between all but a threshold number of portions of the one or more new instruction sets and all but a threshold number of portions of the one or more comparative instruction sets. In further embodiments the determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network includes finding a match between at least one portion of the one or more new instruction sets and at least one portion of the one or more comparative instruction sets.

In certain embodiments the non transitory computer storage medium and or the method further comprise comparing at least one extra information associated with the new instruction sets with at least one extra information associated with the comparative instruction sets in the neural network the comparing performed by the processor circuit. The determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network may include finding a match between all but a threshold number of extra information associated with the one or more new instruction sets and all but a threshold number of extra information associated with the one or more comparative instruction sets. The determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network may include finding a match between the at least one extra information associated with the one or more new instruction sets and the at least one extra information associated with the one or more comparative instruction sets.

In some embodiments the portions of the comparative instruction sets may be stored in nodes of comparative layers of the neural network and the portions of the anticipatory instruction sets may be stored in nodes of anticipatory layers of the neural network. The anticipating the one or more anticipatory instruction sets in the neural network may include selecting a path of nodes through comparative layers of the neural network followed by a path of nodes through anticipatory layers of the neural network the nodes in successive comparative and successive anticipatory layers connected by one or more connections.

In certain embodiments the non transitory computer storage medium and or the method further comprise executing the one or more anticipatory instruction sets by the processor circuit.

In some aspects the disclosure relates to a method comprising a receiving by a first processor circuit via an interface a first instruction set and a second instruction set wherein the first and the second instruction sets are executed by a second processor circuit and are part of an application for performing operations on a computing device. The method may further include b storing at least one portion of the first instruction set and at least one portion of the second instruction set into a knowledgebase the knowledgebase comprising a plurality of portions of instruction sets the storing of b caused by the first processor circuit. The method may further include c receiving by the first processor circuit via the interface a new instruction set wherein the new instruction set is executed by the second processor circuit and is part of the application for performing operations on the computing device. The method may further include d comparing at least one portion of the new instruction set with at least one portion of the first instruction set from the knowledgebase the comparing of d performed by the first processor circuit. The method may further include e determining that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase the determining of e performed by the first processor circuit. The method may further include f executing the second instruction set from the knowledgebase by the second processor circuit.

The operations or steps of the method may be performed by any of the elements of the above described systems as applicable. The method may include any of the operations steps and embodiments of the above described systems as applicable.

In some aspects the disclosure relates to a method comprising method comprising a receiving by a first processor circuit via an interface a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed by a second processor circuit immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of an application for performing operations on a computing device. The method may further include b storing portions of comparative instruction sets and portions of anticipatory instruction sets into a knowledgebase the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative instruction sets include the least recently executed instruction sets of the plurality of recently executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of recently executed instruction sets the storing of b caused by the first processor circuit.

The operations or steps of the method may be performed by any of the elements of the above described systems as applicable. The method may include any of the operations steps and embodiments of the above described systems as applicable.

In some aspects the disclosure relates to a method comprising method comprising a accessing a knowledgebase that stores portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets were executed by a second processor circuit and are part of an application for performing operations on a computing device the accessing of a performed by a first processor circuit. The method may further include b receiving new instruction sets wherein the new instruction sets are executed by the second processor circuit and are part of the application for performing operations on the computing device the receiving of b performed by the first processor circuit. The method may further include c comparing portions of the new instruction sets with portions of the comparative instruction sets in the knowledgebase the comparing of c performed by the first processor circuit. The method may further include d determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase the determining of d performed by the first processor circuit. The method may further include e anticipating one or more anticipatory instruction sets in the knowledgebase the anticipating of e performed by the first processor circuit.

The operations or steps of the method may be performed by any of the elements of the above described systems as applicable. The method may include any of the operations steps and embodiments of the above described systems as applicable.

In some aspects the disclosure relates to a method comprising method comprising a receiving by a first processor circuit via an interface a first instruction set and a second instruction set wherein the first and the second instruction sets are executed by a second processor circuit and are part of an application for performing operations on a computing device. The method may further include b storing at least one portion of the first instruction set and at least one portion of the second instruction set into a neural network the neural network comprising a plurality of portions of instruction sets the storing of b caused by the first processor circuit. The method may further include c receiving by the first processor circuit via the interface a new instruction set wherein the new instruction set is executed by the second processor circuit and is part of the application for performing operations on the computing device. The method may further include d comparing at least one portion of the new instruction set with at least one portion of the first instruction set from the neural network the comparing of d performed by the first processor circuit. The method may further include e determining that there is a substantial similarity between the new instruction set and the first instruction set from the neural network the determining of e performed by the first processor circuit. The method may further include f executing the second instruction set from the neural network by the second processor circuit.

The operations or steps of the method may be performed by any of the elements of the above described systems as applicable. The method may include any of the operations steps and embodiments of the above described systems as applicable.

In some aspects the disclosure relates to a method comprising method comprising a receiving by a first processor circuit via an interface a plurality of recently executed instruction sets the plurality of recently executed instruction sets comprise instruction sets executed by a second processor circuit immediately prior to and including a currently executed instruction set wherein the plurality of recently executed instruction sets are part of an application for performing operations on a computing device. The method may further include b storing portions of the least recently executed instruction sets of the plurality of recently executed instruction sets into nodes of comparative layers of a neural network the storing of b caused by the first processor circuit. The method may further include c storing portions of the most recently executed instruction sets of the plurality of recently executed instruction sets into nodes of anticipatory layers of the neural network the storing of c caused by the first processor circuit.

The operations or steps of the method may be performed by any of the elements of the above described systems as applicable. The method may include any of the operations steps and embodiments of the above described systems as applicable.

In some aspects the disclosure relates to a method comprising method comprising a accessing a neural network that stores portions of comparative instruction sets and portions of anticipatory instruction sets the neural network comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative and the anticipatory instruction sets were executed by a second processor circuit and are part of an application for performing operations on a computing device the accessing of a performed by a first processor circuit. The method may further include b receiving new instruction sets wherein the new instruction sets are executed by the second processor circuit and are part of the application for performing operations on the computing device the receiving of b performed by the first processor circuit. The method may further include c comparing portions of the new instruction sets with the portions of the comparative instruction sets in the neural network the comparing of c performed by the first processor circuit. The method may further include d determining that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network the determining of d performed by the first processor circuit. The method may further include e anticipating one or more anticipatory instruction sets in the neural network the anticipating of e performed by the first processor circuit.

The operations or steps of the method may be performed by any of the elements of the above described systems as applicable. The method may include any of the operations steps and embodiments of the above described systems as applicable.

Other features and advantages of the disclosure will become apparent from the following description including the claims and drawings.

Like reference numerals in different figures indicate like elements. Horizontal or vertical . . . or other such indicia may be used to indicate additional instances of the same type of element. n m n m n m or other such letters or indicia represent integers or other sequential numbers that follow the sequence where they are indicated. It should be noted that n m and or other such letters or indicia may represent different numbers in different elements even where the elements are depicted in the same figure. In general n m and or other such letters or indicia follow the immediate sequence and or context where they are indicated. Any of these or other such indicia may be used interchangeably according to the context and space available. The drawings are not necessarily to scale with emphasis instead being placed upon illustrating the embodiments principles and concepts of the disclosure. A line or arrow between any of the disclosed elements comprises an interface that enables the coupling connection and or interaction between the elements.

The disclosed universal artificial intelligence engine for computing devices and software applications comprises systems apparatuses methods features functionalities and or applications for learning the operation of a computing device or software application and storing this knowledge in a knowledgebase neural network or other repository. Then using this stored knowledge the engine enables autonomous operation of the computing device or software application with partial minimal or no user input. The disclosed universal artificial intelligence engine for computing devices and software applications any of its elements any of its embodiments or a combination thereof are generally referred to as UAIE UAIE UAIE application or as other similar name or reference.

Referring now to an embodiment is illustrated of Computing Device also referred to simply as computing device or other similar name or reference etc. that can provide processing capabilities used in some embodiments of the forthcoming disclosure. Later described devices and systems in combination with processing capabilities of Computing Device enable universal artificial intelligence functionalities for computing devices and software applications. Various embodiments of the disclosed devices apparatuses systems and or methods include hardware functions logic programs and or a combination thereof that may be provided or implemented on any type or form of computing or other device such as a mobile device a computer a computing capable telephone a server a cloud device a gaming device a television device a digital camera a GPS receiver a media player an embedded device a supercomputer or any other type or form of computing or other device capable of performing the operations described herein.

In some designs Computing Device comprises hardware processing techniques or capabilities programs or a combination thereof. Computing device includes a central processing unit which may also be referred to as main processor . Main processor includes one or more memory ports and or one or more input output ports also referred to as I O ports such as I O ports A and B. Main processor may be special or general purpose. Computing Device may further include a memory also referred to as main memory which can be connected to the remainder of the components of Computing Device via bus . Memory can be connected to main processor via memory port . Computing Device may also include display device such as a monitor projector glasses and or other display device. Computing Device may also include Human machine Interface such as a keyboard a pointing device a mouse a touchscreen a joystick and or other input device that can be connected with the remainder of the Computing Device components via I O control . In some implementations Human machine Interface can be directly connected with bus or specific components of Computing Device . Computing Device may include additional optional elements such as one or more input output devices . Main processor may include or be interfaced with cache memory . Storage may include memory which provides an operating system also referred to as OS additional software operating on OS and or data space in which additional data or information can be stored. Alternative memory device can be connected to the remaining components of Computing Device via bus . Network interface can also be connected with bus and be used to communicate with external computing devices via a network. Some or all described elements of Computing Device can be directly or operatively connected or coupled with each other or with other additional elements as depicted in or using any other connection means known in art in alternate implementations.

Main processor includes any logic circuitry that can respond to and process instructions fetched from main memory unit or other element. Main processor may also include any combination of hardware and or processing techniques or capabilities for implementing and executing logic functions or programs. Main processor may include a single core or a multi core processor. Main processor includes the functionality for loading operating system and operating any software thereon. In some embodiments main processor can be provided in a microprocessing or a processing unit such as for example Snapdragon processor produced by Qualcomm Inc. processor by Intel Corporation of Mountain View Calif. processor manufactured by Motorola Corporation of Schaumburg Ill. processor manufactured by Transmeta Corporation of Santa Clara Calif. the RS 6000 processor processor manufactured by International Business Machines of White Plains N.Y. processor manufactured by Advanced Micro Devices of Sunnyvale Calif. or any computing unit for performing similar functions. In other embodiments main processor can be provided in a graphics processor unit GPU visual processor unit VPU or other highly parallel processing unit or circuit such as for example nVidia GeForce line of GPUs AMD Radeon line of GPUs and or others. Such GPUs or other highly parallel processing units may provide superior performance in processing operations on later described neural networks. Computing Device may be based on one or more of these or any other processors capable of operating as described herein whether on a mobile or embedded device or a more conventional machine.

Memory includes one or more memory chips capable of storing data and allowing any storage location to be accessed by microprocessor such as Static random access memory SRAM Flash memory Burst SRAM or SynchBurst SRAM BSRAM Dynamic random access memory DRAM Fast Page Mode DRAM FPM DRAM Enhanced DRAM EDRAM Extended Data Output RAM EDO RAM Extended Data Output DRAM EDO DRAM Burst Extended Data Output DRAM BEDO DRAM Enhanced DRAM EDRAM synchronous DRAM SDRAM JEDEC SRAM PC100 SDRAM Double Data Rate SDRAM DDR SDRAM Enhanced SDRAM ESDRAM SyncLink DRAM SLDRAM Direct Rambus DRAM DRDRAM or Ferroelectric RAM FRAM . Memory may be based on any of the above described memory chips or any other available memory chips capable of operating as described herein. In some embodiments main processor can communicate with memory via a system bus . In other embodiments main processor can communicate directly with main memory via a memory port .

Main processor can communicate directly with cache memory via a connection means such as a secondary bus which may also sometimes be referred to as a backside bus. In some embodiments main processor can communicate with cache memory using the system bus . Memory I O device and or other components of Computing Device can be connected with any other components via similar secondary bus depending on design. Cache memory however may typically have a faster response time than main memory and can include a type of memory which is considered faster than main memory such as for example SRAM BSRAM or EDRAM. Cache memory includes any structure such as multilevel caches for example. In some embodiments main processor can communicate with one or more I O devices via a system bus . Various busses can be used to connect main processor to any of the I O devices such as a VESA VL bus an ISA bus an EISA bus a MicroChannel Architecture MCA bus a PCI bus a PCI X bus a PCI Express bus or a NuBus. In some embodiments main processor can communicate directly with I O device via HyperTransport Rapid I O or InfiniBand. In further embodiments local busses and direct communication may be mixed. For example main processor can communicate with an I O device using a local interconnect bus while communicating with another I O device directly. Similar configurations can be used for any other components described herein.

Computing Device may further include alternative memory such as a SD memory slot a USB memory stick an optical drive such as a CD ROM drive a CD R RW drive a DVD ROM drive or a BlueRay disc a hard drive and or any other device comprising non volatile memory suitable for storing data or installing application programs. Computing device may further include a storage device comprising any type or form of non volatile memory for storing an operating system OS such as any type or form of Windows OS Mac OS Unix OS Linux OS Android OS iPhone OS mobile version of Windows OS an embedded OS or any other OS that can operate on Computing Device . Computing Device may also include software and or data space for storing additional data or information. In some embodiments alternative memory can be used as or similar to storage device . Additionally OS and or software can be run from a bootable medium such as for example a flash drive a micro SD card a bootable CD for GNU Linux that is available as a GNU Linux distribution from knoppix.net and or other bootable medium.

Software also referred to as program computer program application software application script code etc. comprises instructions that can provide functionality when executed by processor . Software can be implemented in a high level procedural or object oriented programming language or in a low level machine or assembly language. Any language used can be a compiled interpreted or otherwise translated language. Software can be deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing system. Software does not necessarily correspond to a file in a file system. A program can be stored in a portion of a file that can hold other programs or data in a single file dedicated to the program or in multiple files i.e. files that store one or more modules sub programs or portions of code etc. . Software can be deployed on one computer or on multiple computers i.e. cloud distributed or parallel computing etc. or at one site or distributed across multiple sites interconnected by a network. In some designs Software comprises one or more Software Applications later described and these terms may be used interchangeably herein.

Network interface can be utilized for interfacing Computing Device with other devices via a network through a variety of connections including standard telephone lines wired or wireless connections LAN or WAN links i.e. 802.11 T1 T3 56 kb X.25 etc. broadband connections i.e. ISDN Frame Relay ATM etc. or a combination thereof. Examples of networks include the Internet an intranet an extranet a local area network LAN a wide area network WAN a personal area network PAN a home area network HAN a campus area network CAN a metropolitan area network MAN a global area network GAN a storage area network SAN virtual network a virtual private network VPN Bluetooth network a wireless network a wireless LAN a radio network a HomePNA a power line communication network a G.hn network an optical fiber network an Ethernet network an active networking network a client server network a peer to peer network a bus network a star network a ring network a mesh network a star bus network a tree network a hierarchical topology network and or other networks known in art. Network interface may include a built in network adapter network interface card PCMCIA network card card bus network adapter wireless network adapter Bluetooth network adapter WiFi network adapter USB network adapter modem and or any other device suitable for interfacing Computing Device with any type of network capable of communication and or operations described herein.

Still referring to I O devices may be present in various shapes or forms in Computing Device . Examples of I O device capable of input include a joystick a keyboard a mouse a trackpad a trackpoint a touchscreen a trackball a microphone a drawing tablet a glove a tactile input device a video camera and or other input device. Examples of I O device capable of output include a video display a touchscreen a projector a glasses a speaker a tactile output device and or other output device. Examples of I O device capable of input and output include a disk drive an optical storage device a modem a network card and or other input output device. I O device can be interfaced with processor via an I O port for example. I O device can also be controlled by I O control in some implementations. I O control may control one or more I O devices such as Human machine Interface i.e. keyboard pointing device touchscreen joystick mouse optical pen etc. . I O control enables any type or form of a detecting device such as a video camera or microphone to be interfaced with other components of Computing Device . Furthermore I O device may also provide storage such as or similar to storage and or alternative memory such as or similar to alternative memory in some implementations. For example Computing Device may receive handheld USB storage device such as USB flash drive line of devices manufactured by Twintech Industry Inc. of Los Alamitos Calif.

An output interface such as a graphical user interface an acoustical output interface a tactile output interface any device driver i.e. audio video or other driver and or other output interface or system can be utilized to process output from Computing Device elements for conveyance on an output device such as Display . In some aspects Display or other output device itself may include an output interface for processing output from Computing Device elements. Further an input interface such as a keyboard listener a keypad listener a touchscreen listener a mouse listener a trackball listener any device driver i.e. audio video keyboard mouse touchscreen or other driver a speech recognizer a video interpreter and or other input interface or system can be utilized to process input from Human machine Interface or other input device for use by Computing Device elements. In some aspects Human machine interface or other input device itself may include an input interface for processing input for use by Computing Device elements.

Computing Device may include or be connected to multiple display devices . Display devices can each be of the same or different type or form. Computing Device and or its elements comprise any type or form of suitable hardware programs or a combination thereof to support enable or provide for the connection and use of multiple display devices or multiple detection devices. In one example Computing Device includes any type or form of video adapter video card driver and or library to interface communicate connect or otherwise use display devices . In some aspects a video adapter may include multiple connectors to interface to multiple display devices . In other aspects Computing Device includes multiple video adapters with each video adapter connected to one or more display devices . In some embodiments any portion of Computing Device s operating system can be configured for using multiple displays . In other embodiments one or more display devices may be provided by one or more other computing devices such as remote computing devices connected to Computing Device via a network. In some aspects main processor can use an Advanced Graphics Port AGP to communicate with one or more display devices .

In some embodiments I O device can be a bridge between system bus and an external communication bus such as a USB bus an Apple Desktop Bus an RS 232 serial connection a SCSI bus a FireWire bus a FireWire 800 bus an Ethernet bus an AppleTalk bus a Gigabit Ethernet bus an Asynchronous Transfer Mode bus a HIPPI bus a Super HIPPI bus a SerialPlus bus a SCI LAMP bus a FibreChannel bus a Serial Attached small computer system interface bus and or other bus.

Computing Device can operate under the control of an operating system which may support Computing Device s basic functions interface with and manage hardware resources interface with and manage peripherals provide common services for application programs schedule tasks and or perform other functionalities. A modern operating system enables features and functionalities such as a high resolution display graphical user interface GUI touchscreen cellular network connectivity i.e. mobile operating system etc. Bluetooth connectivity WiFi connectivity global positioning system GPS capabilities mobile navigation microphone speaker still picture camera video camera voice recorder speech recognition music player video player near field communication personal digital assistant PDA and or other features functionalities or applications. For example Computing Device can use any conventional operating system any embedded operating system any real time operating system any open source operating system any video gaming operating system any proprietary operating system any online operating system any operating system for mobile computing devices or any other operating system capable of running on Computing Device and performing operations described herein. Typical operating systems include Windows XP Windows 7 Windows 8 etc. manufactured by Microsoft Corporation of Redmond Wash. Mac OS iPhone OS etc. manufactured by Apple Computer of Cupertino Calif. OS 2 manufactured by International Business Machines of Armonk N.Y. Linux a freely available operating system distributed by Caldera Corp. of Salt Lake City Utah or any type or form of a Unix operating system among others. Similarly any operating systems such as the ones for Android devices can be utilized just as those of Microsoft or Apple.

Computing Device can be implemented as or be part of various different model architectures such as web services distributed computing grid computing cloud computing and or other architectures or environments. For example in addition to the traditional desktop server or mobile operating system architectures a cloud based operating system can be utilized to provide the structure on which embodiments of the disclosure can be implemented. Other aspects of Computing Device can also be implemented in the cloud without departing from the spirit and scope of the disclosure. For example memory storage processing and or other elements can be hosted in the cloud. In some embodiments Computing Device can be implemented on multiple devices. For example a portion of Computing Device can be implemented on a mobile device and another portion can be implemented on wearable electronics.

Computing Device can be or include any mobile device a mobile phone a smartphone i.e. iPhone Windows phone Blackberry Android phone etc. a tablet a personal digital assistant PDA wearable electronics implantable electronics or another mobile device capable of implementing the functionalities described herein. In other embodiments Computing Device can be or include an embedded device which can be any device or system with a dedicated function within another device or system. Embedded systems range from the simplest ones dedicated to one task with no user interface to complex ones with advanced user interface that may resemble modern desktop computer systems. Simple embedded devices can use buttons light emitting diodes LEDs graphic or character LCDs with a simple menu system. More sophisticated devices can use a graphical screen with touch sensing or screen edge buttons where the meaning of the buttons changes with the screen. Examples of devices comprising an embedded device include a mobile telephone a personal digital assistant PDA a gaming device a media player a digital still or video camera a pager a television device a set top box a personal navigation device a global positioning system GPS receiver a portable storage device i.e. a USB flash drive etc. a digital watch a DVD player a printer a microwave oven a washing machine a dishwasher a gateway a router a hub an automobile entertainment system an automobile navigation system a refrigerator a washing machine a factory automation device an assembly line device a factory floor monitoring device a thermostat an automobile a factory controller a telephone a network bridge and or other devices. An embedded device can operate under control of an operating system for embedded devices such as MicroC OS II QNX VxWorks eCos TinyOS Windows Embedded Embedded Linux and or other embedded device operating systems.

Computing Device may include any combination of processors operating systems input output devices and or other elements to implement the device s purpose. In one example Computing Device comprises a Snapdragon by Qualcomm. Inc. or Tegra processors by nVidia or any other mobile device processor or a microprocessor for a similar application. Computing Device can be operated under the control of the Android OS iPhone OS Palm OS or any other operating system for a similar purpose. Computing Device may also include a stylus input device as well as a five way navigator device. In another example Computing Device comprises a Wii video game console released by Nintendo Co. operating an es operating system. I O devices may include a video camera or an infrared camera for recording or tracking movements of a player or a participant of a Wii video game. Other I O devices may include a joystick a keyboard or an RF wireless remote control device. Similarly Computing Device can be tailored to any workstation mobile or desktop computer laptop or notebook computer smartphone device or tablet server handheld computer gaming device embedded device or any other computer or computing product or other type or form of computing or telecommunication device that has sufficient processor power and memory capacity to perform the functionalities described herein.

Various implementations of the disclosed devices apparatuses systems and or methods can be realized in digital electronic circuitry integrated circuitry specially designed application specific integrated circuits ASICs field programmable gate arrays FPGAs computer hardware firmware programs virtual machines and or combinations thereof including their structural logical and or physical equivalents.

The disclosed devices apparatuses systems and or methods may include clients and servers. A client and server are generally remote from each other and typically interact through a network. The relationship of a client and server may arise by virtue of computer programs running on the respective computers and having a client server relationship to each other.

The disclosed devices apparatuses systems and or methods can be implemented in a computing system that includes a back end component a middleware component a front end component or any combination thereof. The components of the system can be interconnected by any form or medium of digital data communication such as for example a network.

Computing Device may include or be interfaced with a computer program product comprising instructions or logic encoded on a computer readable medium that when performed in a computing device programs a processor to perform the operations and or functionalities disclosed herein. For example a computer program can be provided or encoded on a computer readable medium such as an optical medium i.e. DVD ROM etc. flash drive hard drive any memory or other medium such as firmware or microcode in one or more ROM RAM or PROM chips. Computer program can be installed onto a computing device to cause the computing device to perform the operations and or functionalities disclosed herein. As used in this disclosure machine readable medium computer readable medium or other such terms may refer to any computer program product apparatus and or device for providing instructions and or data to a programmable processor. As such machine readable medium includes any medium that can send or receive machine instructions as a machine readable signal. The term machine readable signal may refer to any signal used for providing instructions and or data to a programmable processor. Examples of a machine readable medium include a volatile and or non volatile medium a removable and or non removable medium a communication medium a storage medium and or other medium. A communication medium for example can transmit computer readable instructions and or data in a modulated data signal such as a carrier wave or other transport technique and may include any other form of information delivery medium known in art. A non transitory machine readable medium comprises all machine readable media except for a transitory propagating signal.

Any of the described files can reside in any repository accessible by an embodiment of the disclosed devices apparatuses systems and or methods. In each instance where a specific file or file type is mentioned other files file types or formats can be substituted.

Where a reference to a data structure is used herein it should be understood that any variety of data structures can be used such as for example array list linked list doubly linked list queue tree heap graph map grid matrix multi dimensional matrix table database database management system DBMS file neural network and or any other type or form of a data structure including a custom one. A data structure may include one or more fields or data fields that are part of or associated with the data structure. A field or data field may include a data an object a data structure and or any other element or a reference pointer thereto. A data structure can be stored in one or more memories files or other repositories. A data structure and or any elements thereof when stored in a memory file or other repository may be stored in a different arrangement than the arrangement of the data structure and or any elements thereof. For example a sequence of instruction sets or other elements herein can be stored in an arrangement other than a sequence in a memory file or other repository.

Where a reference to a repository is used herein it should be understood that a repository may be or include one or more files or file systems one or more storage locations or structures one or more storage systems one or more data structures or objects one or more memory locations or structures and or other storage memory or data arrangements.

Where a reference to an interface is used herein it should be understood that the interface comprises any hardware device system program method and or combination thereof that enable direct or operative coupling connection and or interaction of the elements between which the interface is indicated. A line or arrow shown in the figures between any of the depicted elements comprises such interface. Examples of an interface include a direct connection an operative connection a wired connection i.e. wire cable etc. a wireless connection a device a network a bus a circuit a firmware a driver a bridge a program a combination thereof and or others.

Where a reference to an element coupled or connected to a processor is used herein it should be understood that the element may be part of or operating on the processor. Also one of ordinary skill in art will understand that an element coupled or connected to another element may include the element in communication or any other interactive relationship with the other element. Furthermore an element coupled or connected to another element can be coupled or connected to any other element in alternate implementations. Terms coupled connected interfaced or other such terms may be used interchangeably herein.

Where a mention of a function method routine subroutine or other such procedure is used herein it should be understood that the function method routine subroutine or other such procedure comprises a call reference or pointer to the function method routine subroutine or other such procedure.

Where a mention of data object data structure item element or thing is used herein it should be understood that the data object data structure item element or thing comprises a reference or pointer to the data object data structure item element or thing.

The term operating or operation when used casually can refer to processing executing or other such actions and vice versa. Therefore the terms operating operation processing executing or other such actions may be used interchangeably herein.

The term collection of elements can refer to plurality of elements without implying that the collection is an element itself.

Referring to an embodiment of UAIE implemented on Computing Device is illustrated. UAIE comprises interconnected Acquisition and Modification Interface and Artificial intelligence Unit . UAIE is coupled with Software Application Memory and Storage . Display and Human machine interface are also provided in Computing Device as shown. Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments.

UAIE comprises any hardware programs or a combination thereof. UAIE comprises the functionality for learning the operation of a computing device or Software Application . UAIE comprises the functionality for storing this knowledge in a knowledgebase neural network or other repository. UAIE comprises the functionality for anticipating a computing device s or Software Application s operations. UAIE comprises the functionality for enabling autonomous operation of a computing device or Software Application with partial minimal or no user input. UAIE comprises the functionality for interfacing with or attaching to a computing device or Software Application . UAIE comprises the functionality for obtaining instructions data and or other information used implemented and or executed by a computing device or Software Application . UAIE also comprises other functionalities disclosed herein. In some embodiments UAIE can be implemented in a device i.e. microchip circuitry electronic device computing device special or general purpose processor etc. or system that comprises i.e. hard coded internally stored etc. or is provided with i.e. externally stored etc. instructions for implementing UAIE functionalities. As such UAIE and or any of its elements comprise the processing memory storage and or other features and embodiments of Processor and or other elements of Computing Device . Such device or system can operate on its own be embedded in another device or system work in combination with other devices or systems or be available in any other configuration. In other embodiments UAIE can be implemented as a computer program and executed by one or more Processors as previously described. As such UAIE and or any of its elements can be implemented in one or more modules or units of a single or multiple computer programs. In yet other embodiments UAIE may be included in Alternative Memory that provides instructions for implementing UAIE functionalities to one or more Processors . In further embodiments UAIE can be implemented as network web distributed cloud or other such application accessed on one or more remote computing devices via Network Interface such remote computing devices including processing capabilities and instructions for implementing UAIE functionalities. In some aspects UAIE may be attached to or interfaced with any computing device or software application UAIE may be included as a feature of an operating system running on a computing device UAIE may be built i.e. hard coded etc. into any computing device or software application and or UAIE may be available in any other configuration to provide its functionalities.

In one example UAIE can be interfaced or connected with one or more registers later described of Processor thereby enabling UAIE to read and change the registers to implement UAIE functionalities. In another example UAIE can be installed as a separate computer program that attaches to or interfaces with inspects and or modifies another computer program or application to implement UAIE functionalities.

In a further example the teaching presented by the disclosure can be implemented in a device or system for autonomous application operating. The device or system may include a processor coupled to a memory unit. The device or system may further include an application running on the processor for performing operations on a computing device. The device or system may further include an interface for receiving a first instruction set and a second instruction set the interface further configured to receive a new instruction set wherein the first the second and the new instruction sets are executed by the processor and are part of the application for performing operations on the computing device. The device or system may further include a knowledgebase neural network or other repository configured to store at least one portion of the first instruction set and at least one portion of the second instruction set the knowledgebase neural network or other repository comprising a plurality of portions of instruction sets. The device or system may further include a decision making unit configured to compare at least one portion of the new instruction set with at least one portion of the first instruction set from the knowledgebase neural network or other repository. The decision making unit may also be configured to determine that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase neural network or other repository. The processor may then be caused to execute the second instruction set from the knowledgebase neural network or other repository. Any of the operations of the described elements can be performed repeatedly and or in different orders in alternate embodiments. Specifically in this example Processor can be implemented as a device or processing circuit that receives Software Application s instructions data and or other information from Memory . Processor may use implement or execute Software Application s instructions data and or other information. Software Application may receive User s operating instructions via Human machine Interface or another input device perform corresponding operations and produce results that can be presented via Display or another output device. Acquisition and Modification Interface can also be implemented as a device or processor that receives or obtains Software Application s instructions data and or other information used implemented and or executed by Processor . Artificial intelligence Unit can also be implemented as a device or processor that comprises Knowledgebase later described or Neural Network later described Decision making Unit later described and or other elements. Acquisition and Modification Interface may provide Software Application s instructions data and or other information to Artificial Intelligence Unit . Artificial Intelligence Unit may learn the operation of Software Application by storing the knowledge of its operation into Knowledgebase Neural Network or other repository. Decision making Unit may then anticipate or determine Software Application s instructions data and or other information most likely to be used implemented or executed in the future. Acquisition and Modification Interface may modify Software Application or cause Processor to implement or execute the anticipated instructions data and or other information thereby enabling autonomous operation of a computing device or Software Application with partial minimal or no user input. Acquisition and Modification interface or its functionalities Artificial intelligence Unit or its functionalities and or other disclosed elements can be implemented as separate or integrated hardware components or processors they can be implemented as a single program or objects modules functions of one or more programs operating on Processor they can be provided in other suitable configurations or a combination thereof in alternate embodiments. In some designs Artificial Intelligence Unit comprises some or all of the functionalities of other disclosed elements such as Acquisition and Modification Interface in which case the elements whose functionalities are integrated with Artificial Intelligence Unit can be omitted. The device or system for autonomous application operating can also include any actions or operations of any of the disclosed methods such as methods and all later described .

In a further example UDMI can be implemented as a Java Micro Edition ME Java Standard Edition SE or other Java Edition also referred to as Java or Java platform application or program. Java ME is generally designed for mobile and embedded devices that provides a robust and flexible environment for application programs including flexible user interfaces robust security built in network protocols powerful application programming interfaces database or DBMS connectivity and interfacing functionalities file manipulation capabilities support for networked and offline applications and or other features or functionalities. Application programs based on Java ME can be portable across many devices yet leverage each device s native capabilities. The feature rich Java SE is generally designed for traditional computing devices but more mobile and embedded devices continue to support it. Java SE supports the feature sets of most smartphones and a broad range of high end connected devices while still fitting within their resource constraints. Java platforms include one or more basic application programming interfaces APIs and virtual machine features comprising a runtime environment for application programs such as some embodiments of UDMI. Java platforms provide a wide range of user level functionalities that can be implemented in application programs such as an Internet browser displaying text and graphics playing and recording audio content displaying and recording visual content communicating with another computing device and or other functionalities. In one example UDMI can be implemented as a Xlet within a Java platform. A Xlet may include a Java applet or application configured to execute on a mobile embedded and or other computing device. UDMI is programming language platform and operating system independent. Programming languages that can be used in addition to Java include C C Cobol Python Java Script Tcl Visual Basic Pascal VB Script Perl PHP Ruby and or other programming languages capable of implementing the functionalities described herein.

Software Application also referred to as application software program script or other such reference comprises the functionality for performing operations on Computing Device and or other functionalities. As Software Application provides functionality or operations on Computing Device and Computing Device executes Software Application to gain the functionality or operations the two may be used interchangeably herein in some contexts. Software Application comprises a collection of instructions i.e. instruction sets etc. which upon implementation or execution by processor may cause Computing Device to perform operations or tasks for which Software Application is designed. Instructions or instruction sets may include source code byte code compiled interpreted or otherwise translated code machine or object code and or other code. Software Application can be delivered in various forms such as for example executable files libraries scripts plugins addons applets interfaces console applications web applications application service provider ASP type applications operating systems and or other forms. The disclosed devices apparatuses systems and or methods are independent of the type of programming language platform or compiler interpreter or other translator used to implement Software Application . The following is a very simple example of Software Application created in Java programming language.

In some embodiments Software Application can be an abstraction layer in a computing system and as such Software Application can interact or interface with other layers. For example Software Application can be an abstraction layer that includes user interface and performs desired user operations database or DBMS can be another layer that stores data needed in Software Application and or other abstraction layers can perform other tasks in the overall computing system. In this type of layered architecture Software Application may interact or interface with the underlying database or DBMS and or other abstraction layers which themselves can implement artificial intelligence techniques described herein. Software Application may be one of the applications stored in Software and it includes all features functionalities and embodiments of Software .

User also referred to simply as user etc. comprises a human user or non human user. A non human User includes any device system program and or other mechanism for controlling or manipulating Software Application and or other disclosed elements. User may issue an operating instruction to Software Application responsive to which Software Application s internal instructions or instruction sets may be executed to perform a desired operation on Computing Device . User s operating instructions comprise any user inputted data i.e. values text symbols etc. directions i.e. move right move up move forward copy an item click on a link etc. instructions i.e. manually inputted instructions etc. and or other data information instructions operations and or inputs. The term operating instruction when used casually may refer to an instruction i.e. instruction set etc. to be executed in Software Application and User can issue both an operating instruction to Software Application as well as an instruction to be executed in Software Application . Therefore the terms operating instruction and instruction may be used interchangeably herein in some contexts. A non human User can utilize more suitable interfaces instead of or in addition to Human machine Interface and Display for controlling Software Application and or other disclosed elements. Examples of such interfaces include application programming interface API bridge i.e. bridge between applications or devices etc. driver socket direct or operative connection handle and or other interfaces.

Referring to an embodiment is illustrated with typical elements or steps that lead to Software Application s execution on Computing Device . Source Code can be written in a high level programming language i.e. Java C etc. a low level programming language i.e. assembly language etc. or machine language. In some embodiments Compiler Interpreter or Other Translator is utilized to convert source code directly into machine code. In further embodiments Linker is utilized to link any libraries packages objects or other needed elements with Software Application . In yet some embodiments Loader is utilized to load Software Application including any linked libraries packages objects or other needed elements into Memory . In memory Machine Code can then be executed by Processor . In memory Machine Code may include binary values forming processor instructions i.e. instruction sets etc. that can change computer state. For example an instruction or instruction set can perform a computation change a value stored in a particular storage location cause something to appear on a display of the computer system and or perform other operations. Additional elements or steps such as virtual machine bytecode compiler interpreter or other translator pre processor and or other elements can be included or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate implementations of Software Application s creation and or execution. In one example source code may be compiled interpreted or otherwise translated into bytecode that a virtual machine or other system can convert into machine code. In another example source code may be compiled interpreted or otherwise translated into any intermediary code such as assembly or other code that assembler compiler interpreter translator or other system can convert into machine code.

Software Application comprises instructions or instruction sets which when processed or executed by Processor can cause Computing Device to perform corresponding operations as previously described. When the disclosed UAIE functionalities are applied on Computing Device or Software Application Computing Device or Software Application may become autonomous computing device or software application collectively or separately referred to as autonomous application as per context . Therefore autonomous application comprises Computing Device and or Software Application along with UAIE or UAIE functionalities. UAIE may take control from share control with or release control to Computing Device and or Software Application or its objects to implement autonomous application operation. In some aspects autonomous application comprises anticipatory instructions i.e. instruction sets etc. that user did not issue or cause to be executed. Such anticipatory instructions i.e. instruction sets etc. include instructions that user may want or is likely to issue or cause to be executed. Anticipatory instructions or instruction sets can be generated by UAIE or any of its elements. As such an autonomous application may include some or all original instructions i.e. instruction sets etc. of Software Application and or any anticipatory instructions i.e. instruction sets etc. generated by UAIE. Therefore autonomous application operating may include executing some or all original instructions or instruction sets of Software Application and or any anticipatory instructions or instruction sets generated by UAIE. In some embodiments UAIE can overwrite or rewrite the original instructions i.e. instruction sets etc. of Software Application with UAIE generated instructions i.e. instruction sets etc. . In other embodiments UAIE can insert or embed UAIE generated instructions i.e. instruction sets etc. among the original instructions i.e. instruction sets etc. of Software Application . In further embodiments UAIE can branch redirect or jump to UAIE generated instructions i.e. instruction sets etc. from the original instructions i.e. instruction sets etc. of Software Application .

In some embodiments autonomous application operating can be implemented with partial minimal or no user input. In an example involving autonomous application operating with partial user input a user can issue or cause to be executed one or more instructions or instruction sets and UAIE may anticipate subsequent one or more instructions or instruction sets. In an example involving autonomous application operating with minimal user input a user can issue or cause to be executed a portion of an instruction i.e. instruction sets etc. and UAIE may anticipate the rest of the instruction i.e. instruction sets etc. along with any subsequent instructions or instruction sets. In an example involving autonomous application operating with no user input UAIE may anticipate any instructions i.e. instruction sets etc. based on the disclosed UAIE functionalities. In other embodiments autonomous application operating comprises determining by UAIE a next instruction i.e. instruction set etc. to be executed prior to the user issuing or causing to be executed the next instruction i.e. instruction set etc. . In further embodiments autonomous application operating comprises determining by UAIE a next instruction i.e. instruction set etc. to be executed prior to the system receiving the next instruction i.e. instruction set etc. . In yet further embodiments autonomous application operating includes a partially or fully autonomous operating. In an example involving partially autonomous application operating a user confirms UAIE generated instructions or instruction sets prior to their execution. In an example involving fully autonomous application operating UAIE generated instructions i.e. instruction sets etc. are executed without user or other system confirmation. In further embodiments autonomous application operating comprises generating by UAIE and executing by a processor instructions i.e. instruction sets etc. related to or associated with an object a data structure a repository a thread or a function of the application. In yet other embodiments autonomous application operating comprises generating instructions i.e. instruction sets etc. by a non UAIE system or process and executing the instructions i.e. instruction sets etc. by a processor.

Referring to an embodiment of Acquisition and Modification interface is illustrated. Acquisition and Modification interface comprises the functionality for interfacing between Artificial Intelligence Unit and Software Application or Computing Device elements and or other functionalities. Acquisition and Modification Interface comprises the functionality for attaching Artificial Intelligence Unit to Software Application or Computing Device elements. Additionally Acquisition and Modification Interface comprises the functionality to direct or control the flow of instructions data and or other information among the elements of UAIE and Software Application or Computing Device elements. In some aspects Acquisition and Modification Interface includes Instruction Acquisition Unit and Application Modification Unit . Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments.

Instruction Acquisition Unit comprises the functionality for obtaining or receiving Software Application s instructions i.e. instruction sets etc. data and or other information and or other functionalities. Instruction Acquisition Unit comprises the functionality for obtaining Software Application s instructions i.e. instruction sets etc. data and or other information during Software Application s execution i.e. runtime . An instruction may include any computer command instruction set operation statement or other instruction used in an application. Therefore the terms instruction command instruction set operation statement or other such terms may be used interchangeably herein. Data may include user inputs variables parameters values and or other data used in an application. Other information may include objects data structures contextual information and or other information used in an application. Instruction Acquisition Unit also comprises the functionality for attaching to or interfacing with Software Application and or Computing Device elements. In one example Instruction Acquisition Unit comprises the functionality to access and or read runtime engine environment virtual machine operating system compiler just in time JIT compiler interpreter translator execution stack program counter memory processor registers files objects data structures and or other computing system elements. In another example Instruction Acquisition Unit comprises the functionality to access and or read functions methods procedures routines subroutines and or other elements of an application. In a further example Instruction Acquisition Unit comprises the functionality to access and or read source code bytecode compiled interpreted or otherwise translated code machine code and or other code. In a further example Instruction Acquisition Unit comprises the functionality to access and or read values variables parameters and or other data or information. Instruction Acquisition Unit also comprises the functionality for transmitting the obtained instructions data and or other information to Artificial Intelligence Unit . As such Instruction Acquisition Unit provides input into Artificial Intelligence Unit for knowledge structuring decision making anticipating and or other functionalities later in the process.

In some embodiments UAIE can be selective in learning Software Application s instructions data and or other information to those implemented utilized or related to a specific object data structure repository thread function and or other specific element. In one example Instruction Acquisition Unit can obtain Software Application s instructions data and or other information implemented utilized or related to a certain object in an object oriented Software Application . In another example Instruction Acquisition Unit can obtain moves behaviors and or other actions implemented utilized or related to a player s character or avatar in a computer game application. In a further example Instruction Acquisition Unit can obtain user s clicks implemented utilized or related to mouse click event handler in a web browser application. In a further example Instruction Acquisition Unit can obtain instructions data and or other information implemented utilized or related to a specific document in a word processing application. In a further example Instruction Acquisition Unit can obtain database instructions data and or other information implemented utilized or related to a specific database in a database management system DBMS application.

Instruction Acquisition Unit can employ various techniques for attaching to and or obtaining Software Application s instructions data and or other information. In one example Instruction Acquisition Unit can attach to and or obtain Software Application s instructions data and or other information through tracing or profiling or other techniques. Tracing or profiling is used in software design as a technique of outputting an application s instructions data and or other information during the application s execution runtime . Tracing or profiling may include adding trace code i.e. instrumentation etc. to an application and or outputting trace information to a specific target. The outputted trace information i.e. Software Application s instructions data and or other information etc. can then be provided to or recorded into a file a table a database a DBMS a data structure a repository an application and or other system or target that may receive such trace information. As such Instruction Acquisition Unit can utilize tracing or profiling to obtain Software Application s instructions data and or other information and provide them as input into Artificial Intelligence Unit that may structure them into knowledge for future autonomous operation of Software Application . In some aspects instrumentation can be performed in source code bytecode compiled interpreted or otherwise translated code machine code and or other code. In other aspects instrumentation can be performed in various elements of a computing system such as memory virtual machine runtime engine environment operating system compiler interpreter translator processor registers execution stack program counter and or other elements. In yet other aspects instrumentation can be performed in various abstraction layers of a computing system such as in software layer i.e. Software Application etc. in virtual machine if VM is used in operating system in processor and or in other layers or areas that may exist in a particular computing system implementation. In yet other aspects instrumentation can be performed at various time periods in an application s execution such as source code write time compile time interpretation time translation time linking time loading time runtime and or other time periods. In yet other aspects instrumentation and therefore knowledge structuring can be performed at various granularities or code segments such as some or all lines of code some or all statements some or all instructions i.e. instruction sets etc. some or all basic blocks some or all functions routines subroutines and or some or all other code segments.

In some embodiments Software Application can be automatically instrumented. In one example Instruction Acquisition Unit can access Software Application s source code bytecode or machine code and select instrumentation points of interest. Selecting instrumentation points may include finding portions of the source code bytecode or machine code corresponding to function calls function entries function exits object creations object destructions event handler calls new lines i.e. to instrument all lines of code etc. thread creations throws and or other portions of code. Instrumentation code can then be inserted at the instrumentation points of interest to output Software Application s instructions data and or other information. The instrumented Software Application may then be executed at which time the inserted instrumentation code is executed to perform its functionalities. In response to executing instrumentation code Software Application s instructions data and or other information may be received by Instruction Acquisition Unit and provided to Artificial Intelligence Unit . In some aspects Software Application s source code bytecode or machine code can be dynamically instrumented. For example instrumentation code can be dynamically inserted into Software Application at runtime. Any instrumentation may also include additional instrumentation code to enable disable reset or otherwise manage or control specific instrumentation code.

In other embodiments Software Application can be manually instrumented. In one example a programmer can instrument a function call by placing an instrumenting instruction immediately after the function call as in the following example.

In another example an instrumenting instruction can be placed immediately before the function call or at the beginning end or anywhere within the function itself. A programmer may instrument all function calls or only function calls of interest. In yet another example a programmer can instrument all lines of code within Software Application or only code lines of interest. Instrumenting all lines of code may provide the most detail about the operation of Software Application . In yet another example a programmer can instrument other elements or operations utilized or implemented within Software Application such as objects and or any of their functions or operations event handlers and or any of their functions or operations memory and or any of its functions or operations i.e. allocation etc. threads and or any of their functions or operations and or other such elements or operations. Similar instrumentation as in preceding examples can be performed automatically or dynamically as previously described. In some embodiments where manual code instrumentation is utilized Instruction Acquisition Unit can optionally be omitted and Software Application s instructions data and or other information may be transmitted directly to Artificial Intelligence Unit .

One of ordinary skill in art will understand that while all possible variations of the techniques to obtain Software Application s instructions data and or other information are too voluminous to list all of these techniques are within the scope of this disclosure in various implementations. Various computing systems and or platforms may provide native tools for application tracing or profiling or other techniques. Also independent software vendors may provide portable tools with similar functionalities that can be utilized across different computing systems and or platforms. These native and portable tools may provide a wide range of functionalities to obtain runtime and other information on a software application such as outputting custom text messages logging application or system errors and warnings outputting objects or data structures outputting binary data tracing function routine subroutine invocations following and outputting variable values outputting thread or process behaviors performing live application monitoring via network or pipes outputting call or other stacks outputting processor registers providing runtime memory access and or other capabilities. In some aspects obtaining an application s instructions data and or other information comprises introspection which includes the ability to examine the type or properties of an object at runtime.

In one example attaching to and or obtaining an application s instructions data and or other information can be implemented through the .NET platform s native tools for application tracing or profiling such as System.Diagnostics.Trace System.Diagnostics.Debug and System.Diagnostics.TraceSource classes for tracing execution flow and System.Diagnostics.Process System.Diagnostics.EventLog and System.Diagnostics.PerformanceCounter classes for profiling code accessing local and remote processes starting and stopping system processes and interacting with Windows event logs etc. For example a set of trace switches can be created that output an application s information. The switches can be configured using the .config file. For a Web application this may typically be Web.config file associated with the project. In a Windows application this file may typically be named applicationName.exe.config. Trace code can be added to the application code automatically or manually as previously described. Appropriate listener can be created where the trace output is received. Trace code may output trace messages to a specific target such as a file a log a database a DBMS an object a data structure and or other repository or system. Instruction Acquisition Unit or Artificial intelligence Unit can then read or obtain the trace information from these targets. In some aspects trace code may output trace messages directly to instruction Acquisition Unit . In other aspects trace code may output trace messages directly to Artificial Intelligence Unit . In the case of outputting trace messages to Instruction Acquisition Unit or directly to Artificial Intelligence Unit custom listeners can be built to accommodate these specific targets. Other platforms tools and or techniques can provide equivalent or similar functionalities as the above described ones.

In another example attaching to and or obtaining an application s instructions data and or other information can be implemented through the .NET platform s Profiling API that can be used to create a custom profiler application for tracing monitoring interfacing with and or managing a profiled application. The Profiling API provides an interface that includes methods to notify the profiler of events in the profiled application. The Profiling API may also provide an interface to enable the profiler to call back into the profiled application to obtain information about the state of the profiled application. The Profiling API may further provide call stack profiling functionalities. Call stack also referred to as execution stack control stack runtime stack machine stack the stack etc. includes a data structure that can store information about active subroutines of a computer program. The Profiling API may provide a stack snapshot method which enables a trace of the stack at a particular point in time. The Profiling API may also provide a shadow stack method which tracks the call stack at every instant. A shadow stack can obtain function arguments return values and information about generic instantiations. A function such as FunctionEnter can be utilized to notify the profiler that control is being passed to a function and can provide information about the stack frame and function arguments. A function such as FunctionLeave can be utilized to notify the profiler that a function is about to return to the caller and can provide information about the stack frame and function return value. An alternative to call stack profiling includes call stack sampling in which the profiler can periodically examine the stack. The method at the top of the stack may be assumed to have been running since the last examination and can be outputted as a trace message. In some aspects the Profiling API enables the profiler to change the in memory code stream for a routine before it is just in time JIT compiled where the profiler can dynamically add instrumentation code to all or particular routines of interest. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example attaching to and or obtaining an application s instructions data and or other information can be implemented through Java platform s APIs for application tracing or profiling such as Java Virtual Machine Profiling Interface JVMPI Java Virtual Machine Tool interface JVMTI and or other APIs or tools. These APIs can be used for instrumentation of an application for notification of Java Virtual Machine VM events and or other functionalities. One of the profiling techniques that can be utilized includes bytecode instrumentation. The profiler can insert bytecodes into all or some of the classes. In application execution profiling for example these bytecodes may include methodEntry and methodExit calls. In memory profiling for example the bytecodes may be inserted after each new or after each constructor. In some aspects insertion of instrumentation bytecode can be performed either by a post compiler or a custom class loader. An alternative to bytecode instrumentation includes monitoring events generated by the JVMPI or JVMTI interfaces. Both APIs can generate events for method entry exit object allocation and or other events. In some aspects JVMTI can be utilized for dynamic bytecode instrumentation where insertion of instrumentation bytecodes is performed at runtime. The profiler may insert the necessary instrumentation when a selected class is invoked in an application. This can be accomplished using the JVMTI s redefineClasses method for example. This approach also enables changing of the level of profiling as the application is running. If needed these changes can be made adaptively without restarting the application. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example attaching to and or obtaining an application s instructions data and or other information can be implemented through JVMTI s programming interface that enables creation of software agents that can monitor and control a Java application. An agent may use the functionality of the interface to register for notification of events as they occur in the application and to query and control the application. A JVMTI agent may use JVMTI functions to extract information from a Java application. A JVMTI agent can be utilized to obtain an application s runtime information such as method calls memory allocation CPU utilization lock contention and or other information. JVMTI may include functions to obtain information about variables fields methods classes and or other information. JVMTI may also provide notification for numerous events such as method entry and exit exception field access and modification thread start and end and or other events. Examples of JVMTI built in methods include GetMethodName to obtain the name of an invoked method GetThreadInfo to obtain information for a specific thread GetClassSignature to obtain information about the class of an object GetStackTrace to obtain information about the stack including information about stack frames and or other methods. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example attaching to and or obtaining an application s instructions data and or other information can be implemented through java.lang.Runtime class that provides an interface for application tracing or profiling. Examples of methods provided in java.lang.Runtime that can be used to obtain an application s instructions data and or other information include tracemethodcalls traceinstructions and or other methods. These methods prompt the Java Virtual Machine to output trace information for a method or instruction in the virtual machine as it is executed. The destination of trace output may be system dependent and include a file a listener and or other destinations where instruction Acquisition Unit Artificial Intelligence Unit and or other disclosed elements can access needed information. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In addition to tracing or profiling tools native to their respective computing systems and or platforms many independent tools exist that provide tracing or profiling functionalities on more than one computing system and or platform. Examples of these tools include Pin DynamoRIO KernInst DynInst Kprobes OpenPAT DTrace SystemTap and or others.

In a further example attaching to and or obtaining an application s instructions data and or other information can be implemented through logging tools of the platform and or operating system on which an application runs. Logging tools may include nearly full feature sets of the tracing or profiling tools previously described. In one example Visual Basic enables logging of runtime messages through its Microsoft.VisualBasic.Logging namespace that provides a log listener where the log listener may direct logging output to a file and or other target. In another example Java enables logging through its java.util.logging class. In some aspects obtaining an application s instructions data and or other information can be implemented through logging capabilities of the operating system on which an application runs. For example Windows NT features centralized log service that applications and operating system components can utilize to report their events including any messages. Windows NT provides functionalities for system application security and or other logging. An application log may include events logged by applications. Windows NT for example may include support for defining an event source i.e. application that created the event etc. . Windows Vista for example supports a structured XML log format and designated log types to allow applications to more precisely log events and to help interpret the events. Examples of different types of event logs include administrative operational analytic debug and or other log types including any of their subcategories. Examples of event attributes that can be utilized include eventID level task opcode keywords and or other event attributes. Windows wevtutil tool enables access to events their structures registered event publishers and or their configuration even before the events are fired. Wevtutil supports capabilities such as retrieval of the names of all logs on a computing device retrieval of configuration information for a specific log retrieval of event publishers on a computing device reading events from an event log from a log file or using a structured query exporting events from an event log from a log file or using a structured query to a specific target and or other capabilities. Operating system logs can be utilized solely if they contain sufficient information on an application s instructions data and or other information. Alternatively operating system logs can be utilized in combination with another source of information i.e. trace information call stack processor registers memory etc. to reconstruct the application s instructions data and or other information needed for Artificial Intelligence Unit and or other disclosed functionalities. In addition to logging capabilities native to their respective platforms and or operating systems many independent tools exist that provide logging on different platforms and or operating systems. Examples of these tools include Log4j Logback SmartInspect NLog log4net Microsoft Enterprise Library ObjectGuy Framework and or others. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In some aspects attaching to and or obtaining an application s instructions data and or other information can be implemented through tracing or profiling the operating system on which an application runs. As in tracing or profiling an application one of the techniques that can be utilized includes adding instrumentation code to the operating system s source code before kernel compilation or recompilation. This type of instrumentation may involve defining or finding locations in the operating system s source code where instrumentation code is inserted. Kernel instrumentation can also be performed without the need for kernel recompilation or rebooting. In some aspects instrumentation code can be added at locations of interest through binary rewriting of compiled kernel code. In other aspects kernel instrumentation can be performed dynamically where instrumentation code is added and or removed where needed at runtime. Dynamic instrumentation may overwrite kernel code with a branch and or trap instruction that redirects execution to instrumentation code or instrumentation routine. In yet other aspects kernel instrumentation can be performed using just in time JIT dynamic instrumentation where execution may be redirected to a copy of kernel s code segment that includes instrumentation code. This type of instrumentation may include a JIT compiler and creation of a copy of the original code segment having instrumentation code or calls to instrumentation routines embedded into the original code segment. Instrumentation of the operating system may enable total system visibility including visibility into an application s behavior by enabling generation of low level trace information. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In some aspects attaching to and or obtaining an application s instructions data and or other information can be implemented through tracing or profiling the processor on which an application runs. For example some Intel processors provide Intel Processor Trace i.e. Intel PT etc. a low level tracing feature that enables recording executed instructions and or other data or information of one or more applications. Intel PT is facilitated by the Processor Trace Decoder Library along with its related tools. Intel PT is a low overhead execution tracing feature that records information about application execution on each hardware thread using dedicated hardware facilities. The recorded execution trace information is collected in data packets that can be buffered internally before being sent to a memory subsystem or any element or system in general i.e. Instruction Acquisition Unit Artificial Intelligence Unit etc. . Intel PT also enables navigating the recorded execution trace information via reverse stepping commands. Intel PT can be included in an operating system s core files and provided as a feature of the operating system. Intel PT can trace globally some or all applications running on an operating system. Instruction Acquisition Unit or Artificial Intelligence Unit can read or obtain the recorded execution trace information from Intel PT for implementation of UAIE functionalities. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example attaching to and or obtaining an application s instructions data and or other information can be implemented through branch tracing or profiling. Branch tracing may include an abbreviated instruction trace in which only the successful branch instructions are traced or recorded. Branch tracing can be implemented through utilizing dedicated processor commands for example. Executed branches may be saved into special branch trace store area of memory. With the availability and reference to a compiler listing of the application together with a branch trace information a full path of executed instructions can be reconstructed if needed. The full path can also be reconstructed with a memory dump containing the program storage and a branch trace information. In some aspects branch tracing can be utilized for pre learning or automated learning of an application s instructions data and or other information where a number of application simulations i.e. simulations of likely common operations etc. are performed. As such UAIE may learn the application s operation automatically saving the time that would be needed to learn the application s operation from a user. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example attaching to and or obtaining an application s instructions data and or other information can be implemented through assembly language. Assembly language is a low level programming language for a computer or other programmable device in which there is a strong correlation between the language and the architecture s machine instructions. Syntax addressing modes operands and or other elements of an assembly language instruction may translate directly into numeric i.e. binary etc. representations of that particular instruction. Because of this direct relationship with the architecture s machine instructions assembly language can be a powerful tool for tracing or profiling an application s execution in processor registers memory and or other computing device components. For example using assembly language memory locations of a loaded application can be accessed instrumented and or otherwise manipulated. In some aspects assembly language can be used to rewrite or overwrite original in memory instructions of an application with instrumentation instructions. In other aspects assembly language can be used to redirect application s execution to instrumentation routine subroutine or other code segment elsewhere in memory by inserting a jump or trampoline into the application s in memory code by redirecting program counter or by other techniques. Some operating systems may implement protection from changes to applications loaded into memory. Operating system processor or other low level commands such as Linux mprotect command or similar commands in other operating systems may be used to unprotect the protected locations in memory before the change. In yet other aspects assembly language can be used to obtain an application s instructions data and or other information through accessing and or reading instruction register program counter other processor registers memory locations and or other components of the computing system In yet other aspects high level programming languages may call or execute an external assembly language program to facilitate obtaining an application s instructions data and or other information as previously described. In yet other aspects relatively low level programming languages such as C may allow embedding assembly language directly in their source code such as for example using asm keyword of C. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example it may be sufficient to obtain user or other inputs variables parameters and or other data in some procedural simple object oriented or other applications to implement Instruction Acquisition Unit Acquisition and Modification Interface and or other functionalities. For example a simple procedural application executes a sequence of instructions until the end of the program. During its execution the application may receive user or other input store the input in a variable and perform calculations using the variable to reach a result. The value of the variable can be obtained or traced. In another example a more complex procedural application comprises a function that itself includes a sequence of instructions. The application may execute a main sequence of instructions with a branch to the function. During its execution the application may receive user or other input store the input in a variable and pass the variable as a parameter to the function. The function may perform calculations using the parameter and return a value that the rest of the application can use to reach a result. The value of the variable parameter passed to the function and or return value can be obtained or traced. Values of user or other inputs variables parameters and or other items of interest can be obtained through previously described instrumentation and or other techniques. The values of user or other inputs variables parameters and or other items can be used for knowledge structuring and anticipating of autonomous operation of the application later described. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

Referring to in yet another example attaching to and or obtaining an application s instructions data and or other information can be implemented through tracing profiling or sampling of instructions or data in processor registers memory or other computing device components. Such tracing profiling or sampling can be implemented in software combination of hardware and software or purely hardware system. For example Instruction Register may be part of Processor or processor s control unit etc. and it stores an instruction currently being executed or decoded. In some processors Program Counter also referred to as instruction pointer instruction address register instruction counter or part of instruction sequencer can be incremented after fetching an instruction and it holds or points to the memory address of a next instruction to be executed. In a processor where the incrementation precedes the fetch Program Counter points to the current instruction being executed. In the instruction cycle an instruction may be loaded into Instruction Register after Processor fetches it from location in Memory pointed to by Program Counter . Instruction Register holds the instruction while it is decoded by Instruction Decoder prepared and executed. In some aspects data i.e. operands etc. needed for instruction execution can be loaded from Memory into a register within Register Array . In other aspects the data can be loaded directly into Arithmetic Logic Unit . As instructions pass through Instruction Register during application execution they can be transmitted to UAIE as shown in . As such UAIE may then learn the operation of the software application store this knowledge in a knowledgebase and enable autonomous operation of the software application with partial minimal or no user input. Examples of the steps in execution of a machine instruction include decoding the opcode i.e. portion of a machine instruction that specifies the operation to be performed determining where the operands are located depending on architecture operands may be in registers the stack memory I O ports etc. retrieving the operands allocating processor resources to execute the instruction needed in some types of processors performing the operation indicated by the instruction saving the results of execution and or other execution steps. Examples of the types of machine instructions that can be utilized include arithmetic data handling logical program control as well as special and or other instruction types. In addition to the ones described or shown examples of other computing device or processor components that can be used during an instruction cycle include memory address register MAR that can hold the address of a memory block to be read from or written to memory data register MDR that can hold data fetched from memory or data waiting to be stored in memory data registers that can hold numeric values characters small bit arrays or other data address registers that can hold addresses used by instructions that indirectly access memory general purpose registers GPRs that can store both data and addresses conditional registers that can hold truth values often used to determine whether some instruction should or should not be executed floating point registers FPRs that can store floating point numbers constant registers that can hold read only values such as zero one or pi special purpose registers SPRs such as status register program counter or stack pointer that can hold information on program state machine specific registers that can store data and settings related to a particular processor Register Array that may include an array of any number of processor registers Arithmetic Logic Unit that may perform arithmetic and logic operations control unit that may direct processor s operation and or other circuits or components.

One of ordinary skill in art will recognize that depicts one of many implementations of a processor or computing device components and that various other components can be utilized in addition to or in combination with the ones shown or described or some components can be excluded in alternate implementations. Also various types of connections can be implemented among processor registers and or other processor or computing device components including busses direct connections operative connections and or other connections. Processor or computing device components may be connected or interlinked differently in alternate implementations. Any of the described or other connections can be implemented among any processor or computing device components and UAIE. In one example the connection between Instruction Register and UAIE may include any number of connections such as for example a dedicated connection for each bit of instruction Register i.e. 32 connections for a 32 bit instruction Register etc. . In some aspects dedicated hardware may be built per the disclosed specification to perform tracing profiling or sampling of processor registers or any computing device components with marginal or no impact to computing overhead.

Other additional techniques or elements can be utilized as needed for obtaining an application s instructions data and or other information or some of the disclosed techniques or elements can be excluded or a combination thereof can be utilized in alternate embodiments.

Referring to Artificial Intelligence Unit comprises the functionality for learning one or more Software Application s previously i.e. recently etc. executed instructions i.e. instruction sets etc. or operations and or other functionalities. Artificial Intelligence Unit comprises the functionality for anticipating one or more Software Application s future instructions i.e. instruction sets etc. or operations. Artificial Intelligence Unit also comprises the functionality for determining one or more instructions i.e. instruction sets etc. operations or sequences thereof which Software Application may implement autonomously with partial minimal or no user input. Artificial Intelligence Unit also comprises the functionality for identifying a particular number of instructions i.e. instruction sets etc. operations or sequences thereof to be presented to User as options to be selected which the system has determined User may want to execute. The number of instructions i.e. instruction sets etc. operations or sequences thereof to be executed implemented or presented may vary based on the determinations of Artificial Intelligence Unit or it may alternatively be predetermined.

In some embodiments Artificial Intelligence Unit includes interconnected Command Disassembler Operation List Knowledge Structuring Unit Knowledgebase Decision making Unit Confirmation Unit and Command Assembler . Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments.

Referring to Command Disassembler comprises the functionality for disassembling Instruction Set also referred to as instruction operation command and or other such reference etc. into its instruction Set Portions also referred to as Inst Set Por etc. or subsets of Instruction Set and or other functionalities.

Instruction Set includes one or more commands keywords symbols i.e. parentheses brackets commas semicolons etc. instructions operators i.e. etc. variables values objects i.e. file handle network connection game player etc. data structures i.e. table database user defined data structure etc. functions i.e. Function1 FIRST MIN SQRT etc. parameters references thereto and or other components for performing an operation on Computing Device . In some aspects each component of Instruction Set can be captured in an Instruction Set Portion . In other aspects Command Disassembler can be very detailed in its disassembling of Instruction Set where each character digit symbol and or other detailed element may be captured in an Instruction Set Portion . Instruction Set can be implemented in a high level programming language such as Java or C a low level language such as assembly or machine language an intermediate language or construct such as bytecode and or any other language or construct.

When an Instruction Set is processed by Command Disassembler the Instruction Set is divided or split into one or more Instruction Set Portions that can be stored in Operation . An Instruction Set disassembled into its Instruction Set Portions and or stored in Operation becomes more convenient to compare to other Instruction Sets or Operations . Operation comprises the functionality for storing Instruction Set Portions of a particular Instruction Set Extra Info related to or associated with the Instruction Set and or other information. Operation may be or include any data structure i.e. array list linked list doubly linked list queue matrix table file etc. comprising one or more data fields that can store Instruction Set Portions Extra Info and or other information. Therefore an instruction Set corresponds to a particular Operation identified by that instruction Set and vice versa. Also the Instruction Set may be referred to as the Operation and vice versa as this Operation is a representation and or logical equivalent of this particular Instruction Set . Therefore Instruction Set and Operation may be used interchangeably herein.

In some embodiments Command Disassembler comprises the functionality for identifying or recognizing specific commands keywords symbols instructions operators variables values objects data structures functions parameters references thereto and or other components of Instruction Set . In some aspects the commands keywords symbols instructions operators variables values objects data structures functions parameters references thereto and or other components may be provided in a lexicon containing all possible or most used commands keywords symbols instructions operators variables values objects data structures functions parameters references thereto and or other components specific to the programming language used and or specific to Software Application . The lexicon can be stored or organized in any data structure i.e. a list array table database etc. object and or other repository. In some embodiments the lexicon may be predefined and change as the components used within Software Application change. For example in response to changing the name of a variable within Software Application s source code the variable s name may be updated in the lexicon so Command Disassembler would recognize the updated variable name as an Instruction Set Portion in its next run. In other embodiments the lexicon can be created on fly by obtaining commands keywords symbols instructions operators variables values objects data structures functions parameters references thereto and or other components used in Software Application when needed. For example components i.e. table names report names column names relations etc. of a database application or DBMS may be obtained from data dictionary or other metadata repository of the database. The on fly created lexicon may also include commands keywords symbols instructions operators variables values objects data structures functions parameters references thereto and or other components used in Software Application s programming language. For example components i.e. commands operators built in functions etc. of a programming language can be obtained from the programming language s reference index instruction set listing and or other listing that may be available from the programming language manufacturer from a public web site and or from other source.

The function or reference thereto clickButton is Instruction Set Portion of Instruction Set and therefore it may be extracted and stored in a data field of Operation . The next Instruction Set Portion that may be extracted and stored includes the symbol representing the start of the function s parameters. The next instruction Set Portion that may be extracted and stored includes the parameter rightPane indicating the pane in which the button to be clicked on is located. The next Instruction Set Portion that may be extracted and stored includes the symbol representing parameter divider. The next instruction Set Portion that may be extracted and stored includes the parameter 412 indicating the X coordinate of the button to be clicked. The next instruction Set Portion that may be extracted and stored includes the symbol representing parameter divider. The next Instruction Set Portion that may be extracted and stored includes the parameter 377 indicating the Y coordinate of the button to be clicked. The next Instruction Set Portion that may be extracted and stored includes the symbol representing the end of the function s parameters. Other Instruction Set Portions not shown in this particular example can be utilized in alternate embodiments. Various types of Instruction Sets may include different Instruction Set Portions stored in Operation . For example a function may include function name parameters and or other components whereas a FOR loop may include keyword FOR and its associated counting variable i.e. i etc. operators i.e. etc. counter i.e. i i i 3 i 107 etc. and or other components.

In another embodiment shown in Instruction Set includes structured query language SQL . In a further embodiment shown in Instruction Set includes bytecode i.e. Java bytecode Python bytecode CLR bytecode etc. . In a further embodiment shown in Instruction Set includes assembly code. In a further embodiment shown in Instruction Set includes machine code. In each of the above described or other embodiments Command Disassembler may extract or disassemble instruction Set Portions from the Instruction Set . Command Disassembler may identify or recognize specific commands keywords symbols instructions operators variables values objects data structures functions parameters references thereto and or other components of SQL bytecode assembly code machine code any programming language or other code or language included in the Instruction Set as previously described.

In addition to Instruction Set s Instruction Set Portions extra information or Extra Info can be stored in Operation . Acquisition and Modification Interface or any of its elements Command Disassembler and or any other element can obtain or receive Extra info which can then be stored in Operation . Examples of Extra Info that can be stored in Operation include time stamp or other time information user specific information group user information version of Software Application the type of Software Application i.e. web browser computer game word processing database CAD CAM software etc. the type of computing device executing Software Application the type of user novice moderate skilled expert and or other information. Any extra contextual and or other information may be stored in Extra Info . Extra Info can be utilized to provide additional or as much information as possible for best anticipation of future operations of Software Application . In one example time stamp or any time information stored in Extra Info may be useful for anticipation of future operations related to a specific time period. In another example in which Software Application is a computer game application Extra info includes the type of Software Application being a computer game the type of computing device being based on an AMD x86 microprocessor the type of graphics chip being NVIDIA GeForce GTX 660 the type of player being novice and or other information. In a further example Extra Info includes geo spatial information about the player s character avatar and or objects around the player s character avatar. Extra Info may include player s avatar s coordinates within the game and player s avatar s direction of movement. Extra Info may further include the types i.e. enemy player friend player rock forest pond building etc. and or coordinates of objects and or other players and their directions of movement. Such Extra Info can provide geo spatial and situational awareness and or capabilities to the disclosed devices apparatuses systems and or methods.

In some embodiments observed information can be stored in Extra Info . In one example an object s location i.e. player s avatar s coordinates etc. in a computer game application can be stored in Extra Info . In another example formatting of words written prior to the currently written word in a word processing application can be stored in Extra Info . In other embodiments computed information can be stored in Extra Info . UAIE may include computational functionalities to create Extra info by performing calculations using observed and or other information. In one example an object s distance bearing i.e. angle or direction of movement etc. speed and or other information may be calculated or estimated from the object s coordinates in a computer game application by utilizing Pythagorean theorem Euclidean distance formula trigonometry and or other theorems formulas or disciplines.

In some aspects different Extra Info may be stored for different types of Software Application . In one example types and coordinates of objects surrounding user s avatar in a first shooter flight simulation or other similar computer game or context reliant application may be stored in Extra Info . In another example locations and arrangements of top line elements in a tetris like or other similar computer game or context reliant application may be stored in Extra Info . In a further example formatting of characters or words around a pasted section of text in a word processing application may be stored in Extra Info . Which information is stored in Extra Info can be set by User or UAIE administrator determined by UAIE automatically or acquired from an outside source or repository. In one example UAIE enables User to set which information is stored in Extra Info . In another example UAIE may determine which information is stored in Extra Info by analyzing the type of application or types of instructions performed by analyzing the construct of the application i.e. 2D or 3D construct multiple players or users construct etc. and or by performing other context analysis. In a further example a database or other repository identifying which information is of interest to be stored in Extra Info for specific types or specific applications can be utilized.

In some embodiments extra information or Extra Info may include or be referred to as contextual information and contextual information may include or be referred to as extra information or Extra Info . Therefore these terms may be used interchangeably herein.

In some aspects Command Disassembler can structure or store Instruction Set Portions Extra Info and or other information into any data structure or object i.e. other than Operation such as for example array list linked list doubly linked list queue sequence tree heap graph map grid matrix multi dimensional matrix table database hierarchical data structure file neural network and or any other type or form of a data structure or object.

Referring to Operation Instruction Set List also referred to as Operation List or Instruction Set List etc. comprises the functionality for storing one or more Operations and or their corresponding Instruction Sets and or other functionalities. Operation List may include any data structure i.e. array list linked list matrix table etc. that can store one or more Operations and or their corresponding Instruction Sets .

In some embodiments Operation List receives Operations or Instruction Sets from Command Disassembler and stores a number of Operations or Instruction Sets that were most recently also referred to simply as recently etc. used or executed in Software Application . The number of Operations or Instruction Sets most recently used or executed may vary depending on the embodiments. In one example anywhere between 1 and 10000 most recently used or executed Operations or Instruction Sets can be stored. In another example the number of stored Operations or Instruction Sets may be between 2 and 10 such as for example 2 5 6 or 9. In yet another example the number of Operations or Instruction Sets may be between 10 and 50 such as for example 12 15 20 30 40 or 50. In yet another example the number of Operations or Instruction Sets stored may be between 50 and 200 such as for example 50 70 80 100 130 180 or 200. In yet another example the number of Operations or Instruction Sets stored may be between 200 and 10000 such as for example 500 1000 3000 5000 8000 or 10000. The number of most recently used or executed Operations or Instruction Sets stored can be even greater than 10000 as one of ordinary skill in art would recognize that the number of stored Operations or Instruction Sets may be any number that can be stored in any memory or storage described herein.

In some embodiments in which five recently used or executed Operations or Instruction Sets are stored in Operation List Operations or Instruction Sets may be identified such that the current Operation or Instruction Set is identified as Operation n the most recent Operation or Instruction Set prior to the current is identified as Operation n 1 and so on until the least recent Operation or Instruction Set being stored is labeled as Operation n 4. Each time Operation List receives another new Operation or Instruction Set from Command Disassembler it may erase the least recent Operation or Instruction Set such as Operation n 4 and insert current Operation or Instruction Set received as Operation n. Naturally all the most recently used or executed Operations or Instruction Sets that are stored in this list or queue may be shifted by one count further towards Operation n 4. This way the system can maintain a queue of most recently used or executed Operations or Instruction Sets . In some aspects such Operation List or queue may be associated with or related to a particular time point. For example Operation List associated with the present time point may be referred to as a current Operation List or as another suitable name or reference. In another example when referenced from a time point i.e. past or future time point etc. other than the present time point Operation List may be referred to as a then current Operation List or simply as a current Operation List where the time point with which Operation List is associated is implied from context. In a further example a past Operation List i.e. Operation List stored in a Knowledge Cell Operation List stored in Knowledgebase Operation List stored in Neural Network any past Operation List etc. may be referred to as a previous Operation List or as previously used or executed Operations or Instruction Sets . Any other suitable name or reference can be utilized for Operation List associated with or related to various time points. Although Operation List may often refer to recently or most recently used or executed Operations or Instruction Sets Operation List may generally refer to any collection of Operations or Instruction Sets used or executed at any time point depending on context.

In some aspects the processor a virtual machine and or other processing element of Computing Device may include a repository of stored executed or simulated i.e. simulated execution etc. application s instructions i.e. Operations or Instruction Sets etc. data and or other information. In such instances Operation List may be or include the entire or a subset of such repository. Any subset of such repository can be utilized in as Operation List not only a recent or the most recent subset. In one example the entire or a subset of instructions i.e. Operations or Instruction Sets etc. data and or other information in such repository can be transferred to Operation List . In another example the entire or a subset of such repository itself can serve as Operation List in which case Operation List as a separate element can be omitted. In such instances the later described knowledge structuring storing and or other operations involving Operation List can utilize the entire or a subset of a repository comprising executed or simulated i.e. simulated execution etc. application s instructions i.e. Operations or Instruction Sets etc. data and or other information.

In certain aspects Operation List comprises one or more recently used or executed Operations or Instruction Sets that User issued or caused to be executed. In other aspects Operation List comprises one or more recently used or executed Operations or Instruction Sets that UAIE anticipated and or caused to be executed as later described. As such UAIE anticipated generated Operations or Instruction Sets can be inputted into UAIE as any other User initiated Operation or Instruction Set thereby enabling UAIE to learn its own previously anticipated generated Operations or Instruction Sets in addition to User initiated Operations or instruction Sets . In yet some aspects UAIE can be configured or reach such level of autonomy to be able to anticipate all Software Application s Operations or Instruction Sets autonomously with no input from User in which case Operation List would include only recently used or executed Operations or Instruction Sets that were anticipated generated by UAIE. As such UAIE may learn its own previously anticipated generated Operations or Instruction Sets .

Referring to Knowledge Structuring Unit comprises the functionality for structuring knowledge of Software Application s operations and or other functionalities. Knowledge Structuring Unit comprises the functionality for structuring knowledge of used or executed Operations or Instruction Sets . Knowledge Structuring Unit comprises the functionality for structuring the stored sequence i.e. Operation List of used or executed Operations or Instruction Sets into usable knowledge for future anticipating of Operations or Instruction Sets . Knowledge Structuring Unit comprises the functionality to produce any variations of Operations or Instruction Sets that may ever be used in Software Application .

In some embodiments Knowledge Structuring Unit receives current Operation List and creates Knowledge Cell by copying Operations or Instruction Sets from Operation List into the Knowledge Cell . For example Knowledge Structuring Unit may copy Operation n from Operation List into Operation n 2 of Knowledge Cell by copying Operation n 1 from Operation List into Operation n 1 of Knowledge Cell by copying Operation n 2 from Operation List into Operation n of Knowledge Cell and so forth. Knowledge Cell comprises the functionality for storing Software Application s instructions i.e. Instruction Sets or Operations etc. and or other functionalities. Knowledge Cell comprises the functionality for storing Software Application s used or executed Operations or Instruction Sets . Knowledge Cell comprises the functionality for storing a sequence of Software Application s used or executed Operations or Instruction Sets . Knowledge Cell may include any data structure i.e. array list linked list matrix table etc. that can store Software Application s Operations or Instruction Sets . In some aspects Operation n Operation n 1 and Operation n 2 in a Knowledge Cell can later be used for comparison with the then Software Application s recent i.e. including current etc. operations and Operation n 1 and Operation n 2 can later be used for anticipation of Software Application s future or subsequent operations for example. Therefore Operations or Instruction Sets with an order number greater than n may be anticipatory and the rest of the Operations or Instruction Sets may be comparative although this particular split can differ in alternate embodiments. Any number of comparative and any number of anticipatory Operations or Instruction Sets can be included in a Knowledge Cell and any number of Knowledge Cells can be used in UAIE. In some designs a long Knowledge Cell can be used in which case comparisons of Operations or Instruction Sets may be performed in a traversing pattern as explained below. Also as indicated by the up and down vertical dotted arrows the copying of Operation n from Operation List into Knowledge Cell can start at any Operation n m through Operation n m of the Knowledge Cell . This way the number of comparative and anticipatory Operations or Instruction Sets may differ and it can be determined by a user by UAIE administrator or automatically by the system. In one example Knowledge Cell includes only one anticipatory Operation or Instruction Set in the case where copying of the Operation List into Knowledge Cell starts with copying Operation n of the Operation List into Operation n 1 of the Knowledge Cell . In another example Knowledge Cell includes four anticipatory Operations or Instruction Sets in the case where the copying of the Operation List into the Knowledge Cell starts with copying Operation n of the Operation List into Operation n 4 of the Knowledge Cell . It should be noted that n m and or other such letters or indicia may be different numbers in different elements even where the elements are depicted in the same figure. In general n m and or other such letters or indicia may follow the immediate sequence and or context where they are indicated. Therefore an Operation from Operation List having a same letter or indicia as Operation from Knowledge Cell may be a different Operation . In one example Operation n from Operation List may be different than Operation n from Knowledge Cell . In another example Operation n 2 from Operation List may be different than Operation n 2 from Knowledge Cell .

In some aspects since an Operation List may be associated with or related to a particular time point as previously described a Knowledge Cell created using such Operation List may also be associated with or related to that time point. Therefore a Knowledge Cell may include recently used or executed Operations or Instruction Sets associated with or related to a particular time point. For example one Knowledge Cell can store recently used or executed Operations or Instruction Sets at time t1 another Knowledge Cell can store recently used or executed Operations or Instruction Sets at time t2 a further Knowledge Cell can store recently used or executed Operations or Instruction Sets at time t3 and so on. The time points may be consecutive but such consecutive order is not required and any other order can be utilized in alternate embodiments. Further a time point with which a Knowledge Cell is associated or related can be stored in the Knowledge Cell and utilized later if needed.

In certain aspects Knowledge Structuring Unit can utilize any subset of Operations or Instruction Sets from Operation List in the knowledge structuring process i.e. Knowledge Cell creation etc. not only the most recent Operations or Instruction Sets from Operation List or the entire Operation List . In one example Knowledge Structuring Unit can utilize a subset of Operations or Instruction Sets close to or in the middle of Operation List . In another example Knowledge Structuring Unit can utilize a subset of Operations or instruction Sets close to or at the end of Operation List . Knowledge Structuring Unit can utilize a subset of Operations or Instruction Sets anywhere in Operation List .

In some embodiments Knowledge Structuring Unit can structure or store Operations or Instruction Sets into any data structure or object i.e. other than Knowledge Cell such as for example array list linked list doubly linked list queue sequence tree heap graph map grid matrix multi dimensional matrix table database neural network hierarchical data structure file and or any other type or form of a data structure or object.

Referring to Knowledgebase comprises the functionality for storing Operations or Instruction Sets and or other functionalities. Knowledgebase comprises the functionality for storing Operations or Instruction Sets structured into one or more Knowledge Cells . Knowledgebase comprises the functionality for storing Knowledge Cells and or Operations or Instruction Sets in a particular order to enable easier access and usage of stored data. Knowledgebase comprises the functionality for managing modifying and or providing Knowledge Cells and or Operations or Instruction Sets as necessary. Knowledgebase comprises the functionality to store and manage all the Knowledge Cells and or Operations or Instruction Sets that were used or executed by any users in the past. Knowledgebase can store any variations of Knowledge Cells and or Operations or Instruction Sets that may ever be used by a user.

In an embodiment shown in Knowledgebase includes one or more Knowledge Cells each of which comprises one or more Operations or Instruction Sets . In some aspects Knowledgebase includes a table although one or more tables databases files or other data structures can be used. For example in the case of a single table being used as Knowledgebase a Knowledge Cell can be stored within the table where each Operation or Instruction Set of the Knowledge Cell is a record with a common Knowledge Cell Identifier ID that signifies its association with its parent Knowledge Cell . Each record within the table may include data fields storing instruction Set Portions and Extra Info of the corresponding Operation or Instruction Set . Later in the process a call to the table to read all records with a specific Knowledge Cell ID may reconstruct the Knowledge Cell . In other embodiments Knowledgebase includes an entire database management system DBMS dedicated to Knowledgebase functionalities. In further embodiments Knowledgebase includes a neural network later described . Knowledgebase may include any data structure or repository to implement its functionalities.

In some designs Operations or Instruction Sets can be stored directly within Knowledgebase without using Knowledge Cell as the intermediary data structure. As such Operations or Instruction Sets can be stored in one or more sequences i.e. lists arrays tables etc. within Knowledgebase . Substantial Similarity Comparisons later described can be performed by traversing the one or more sequences of Operations or Instruction Sets to find a match. In one example Knowledgebase includes all used or executed Operations or Instruction Sets in a single long sequence i.e. list array table etc. . In another example Knowledgebase includes used or executed Operations or Instruction Sets in a plurality of long sequences such as daily weekly monthly yearly or other periodic i.e. monthly tables monthly lists monthly arrays etc. or other sequences. In the case of any long sequence Substantial Similarity Comparisons may compare Operations or Instruction Sets of a current Operation List with subsequences of a long sequence in Knowledgebase in incremental or other traversing pattern. The incremental traversing pattern may start from one of the ends of the single long sequence in Knowledgebase and move the comparison subsequence up or down the list one incremental Operation or Instruction Set at a time. Other traversing patterns or methods can be employed such as starting from the middle of the sequence and subdividing the resulting sub sequences in a recursive pattern or any other traversing pattern or method. Parallel processors such as a plurality of Processors can be utilized for processing subsequences simultaneously.

In some aspects Substantial Similarity Comparison later described can be utilized to compare a newly structured Knowledge Cell i.e. produced by Knowledge Structuring Unit etc. with Knowledge Cells in the Knowledgebase to find a substantially similar Knowledge Cell . If a substantially similar Knowledge Cell is found storing the newly structured Knowledge Cell in Knowledgebase can optionally be omitted. For example if a Knowledge Cell in Knowledgebase is found to be nearly identical or substantially similar i.e. with a high degree of similarity etc. to a compared newly structured Knowledge Cell storing the newly structured Knowledge Cell in Knowledgebase may not add much or any additional knowledge to the Knowledgebase . Therefore storing it can be omitted to save storage resources and limit the number of Knowledge Cells that may later need to be processed or compared. Any of the features functionalities and embodiments of Substantial Similarity Comparison Importance Index later described Comparison Accuracy Index later described and or other disclosed elements can be utilized to facilitate determination whether to store a newly structured Knowledge Cell into Knowledgebase .

In some embodiments Operations or Instruction Sets and or their portions can be compiled interpreted or otherwise translated into machine code bytecode or other code to be readily available for execution when needed. The machine code bytecode or other code may be associated with the original Operations or Instruction Sets and or their portions and stored in Knowledgebase . In one example Operations or Instruction Sets and or their portions machine code can be readily executable by a processor when needed. In another example Operations or Instruction Sets and or their portions bytecode can be readily executable by a virtual machine when needed. In some aspects compiler just in time JIT compiler interpreter or other translator can be implemented to perform the compilation interpretation or other translation. In one example Operations or Instruction Sets and or their portions compiled interpreted or otherwise translated code can be utilized in Substantial Similarity Comparisons later described .

Referring to Decision making Unit comprises the functionality for anticipating Software Application s future operations i.e. Operations or Instruction Sets and or other functionalities. Decision making Unit comprises functions rules and or logic to determine which Operation or Instruction Set is most suitable or likely to be used or executed next. Similarly Decision making Unit comprises the functionality to determine which Operation or Instruction Set is second most suitable or likely to be used or executed which Operation or Instruction Set is third most suitable or likely to be used or executed and so on. Furthermore Decision making Unit comprises the functionality to determine a sequence or order in which Operations or Instruction Sets are most likely to be used or executed.

In some embodiments Decision making Unit may anticipate Software Application s future operations i.e. future Operations or Instruction Sets by performing Substantial Similarity Comparisons between current Operation List and Knowledge Cells stored in Knowledgebase . Substantial Similarity Comparisons can be performed one Knowledge Cell at a time by traversing one long knowledge cell as previously described by traversing one or more trees of knowledge cells by traversing one or more hierarchies of knowledge cells or by utilizing other methods or data structures depending on design and or data structures used.

Substantial Similarity Comparison comprises the functionality for comparing or matching Operations or Instruction Sets and or other functionalities. Substantial Similarity Comparison comprises the functionality for comparing or matching Operations or Instruction Sets from Operation List with Operations or instruction Sets stored in Knowledgebase Neural Network later described or other repository. Substantial Similarity Comparison comprises the functionality for comparing or matching Operations or Instruction Sets from Operation List with Operations or Instruction Sets from Knowledge Cells . In some aspects comparing or matching may include comparing Operations or instruction Sets from Operation List with corresponding comparative Operations or Instruction Sets from Knowledge Cells . Substantial Similarity Comparison may include functions rules and or logic for performing matching or comparisons and for determining that while a perfect match is not found a substantially similar match has been found. As such Substantial Similarity Comparison comprises the functionality for determining substantial similarity or substantial similarity match also referred to as match in some contexts etc. between individually compared Operations or Instruction Sets . Substantial Similarity Comparison also comprises the functionality for determining substantial similarity or substantial similarity match also referred to as match in some contexts etc. between collections of Operations or Instruction Sets . In some aspects Substantial Similarity Comparison may determine substantial similarity or substantial similarity match between an Operation List and a Knowledge Cell based on substantial similarity between one or more Operations or Instruction Sets from the Operation List and the Knowledge Cell .

In some embodiments such as the one illustrated in Substantial Similarity Comparison includes comparing a number of most recently used or executed Operations or instruction Sets i.e. Operation n Operation n 1 Operation n 2 etc. from Operation List with corresponding comparative Operations or Instruction Sets from Knowledge Cells in Knowledgebase . If a substantially similar pattern of most recently used or executed Operations or Instruction Sets i.e. Operation n Operation n 1 Operation n 2 etc. from Operation List is found in comparative Operations or Instruction Sets from a Knowledge Cell subsequent Operations or Instruction Sets can be anticipated in the anticipatory Operations or Instruction Sets i.e. Operation n 1 Operation n 2 etc. from the Knowledge Cell . Any number of Operations or instruction Sets can be compared in alternate embodiments of Substantial Similarity Comparisons .

Substantial Similarity Comparison may include a Comparison Strictness Function . Although illustrates each Substantial Similarity Comparison including its own Comparison Strictness Function Comparison Strictness Function may be a single function in connection with Decision making Unit servicing multitude Substantial Similarity Comparisons . Comparison Strictness Function comprises the functionality for determining or defining strictness criteria or rules for finding a substantial similarity match between Operations or Instruction Sets and or other functionalities. Comparison Strictness Function comprises the functionality for determining or defining strictness criteria or rules for finding a substantial similarity match between Operations or Instruction Sets in Operation List and Operations or Instruction Sets in Knowledgebase Neural Network later described or other repository. Comparison Strictness Function comprises the functionality for determining or defining strictness criteria or rules for finding a substantial similarity match between Operations or Instruction Sets in Operation List and Operations or Instruction Sets in Knowledge Cells . Comparison Strictness Function may therefore define appropriately strict rules for finding or determining substantial similarity between the compared Operations or Instruction Sets . In some aspects if the rules are too strict Substantial Similarity Comparisons may not find a matching Knowledge Cell . On the other hand if the rules are too lenient Substantial Similarity Comparisons may find too many matching Knowledge Cells and anticipate inaccurate Software Application s future operations i.e. future Operations or Instruction Sets . Comparison Strictness Function may therefore include the functionality for setting and resetting the strictness of rules for finding or determining substantial similarity between the compared Operations or Instruction Sets thereby fine tuning Substantial Similarity Comparisons so that the rules for finding a match are not too strict nor too lenient.

Appropriately strict rules for substantial similarity can be defined based on the type of Software Application experience testing inquiry analysis synthesis or other techniques. As such strictness rules of Comparison Strictness Function can be set by a user by UAIE administrator or automatically by the system based on such experience knowledge and or input. In some embodiments substantial similarity can be achieved when most of the Instruction Set Portions and or Extra Info of the most recently used or executed Operations or Instruction Sets i.e. Operation n Operation n 1 and Operation n 2 etc. from Operation List match or substantially match the Instruction Set Portions and or Extra Info of the corresponding i.e. comparative Operations or Instruction Sets from Knowledge Cell . Alternatively total equivalence is found when all Instruction Set Portions and or Extra Info of the most recently used or executed Operations or Instruction Sets from Operation List match the Instruction Set Portions and or Extra Info of all corresponding i.e. comparative Operations or Instruction Sets from Knowledge Cell . In other embodiments when a total equivalence match is not found Substantial Similarity Comparison can omit less important Instruction Set Portions and or Extra Info from the comparison. Importance of an Instruction Set Portion and or Extra info may be indicated by Importance index later described or other importance ranking technique. In one example some or all instruction Set Portions and or Extra Info containing values operators or other components can be omitted from Substantial Similarity Comparison . In another example some or all Extra Info can be omitted from Substantial Similarity Comparison . In yet another example i.e. context reliant applications etc. some or all Instruction Set Portions can be omitted from Substantial Similarity Comparison .

Comparison Strictness Function comprises the functionality to automatically adjust its level of strictness for finding or determining a substantial similarity match between the compared Operations or Instruction Sets . Depending on design various levels of strictness can be used. In some embodiments Comparison Strictness Function may set the rules for substantial similarity match to include perfect matches between the compared Operations or Instruction Sets . If such a match is not found Comparison Strictness Function can decrease the strictness level. In some aspects in response to decreasing the strictness level Comparison Strictness Function may set the strictness of the rules for substantial similarity match in terms of a total equivalence with respect to command or other portions of the Operation or Instruction Set only thereby tolerating mismatches in variable and or object names for example. Comparison Strictness Function can choose to relax the rules in response to determining that no total equivalence match had been found. For example substantial similarity is achieved when a match is found in terms of a correct operation but for a different object than the one presently operated on. In such instances upon presenting if user confirmation is enabled the user with the substantial similarity match i.e. substantially similar knowledge cell UAIE may give the user an anticipatory Operation or Instruction Set from the matched Knowledge Cell thereby allowing the user to change object names into the ones desired still saving the user work on inputting the commands. In further embodiments Comparison Strictness Function may upon determining that a perfect match is not found allow for matching all but one of the Operations or Instruction Sets from Operation List or Knowledge Cell . In further embodiments Comparison Strictness Function may set the rules to find a match with all but two or more Operations or Instruction Sets from Operation List or Knowledge Cell .

All the aforementioned settings of strictness of substantial similarity can be set or reset by Comparison Strictness Function in response to another strictness level determination. For example Comparison Strictness Function may adjust strictness level for identifying or determining a substantial similarity match for an Operation or Instruction Set whose instruction Set Portions corresponding to command words are a total match with Instruction Set Portions of the compared Operation or Instruction Set while tolerating mismatches in variable names object names and or other components. Such an adjustment in strictness can be done by Comparison Strictness Function in response to determining that a total equivalence match for an entire Operation or Instruction Set is not found. Similarly Comparison Strictness Function may adjust the strictness level for identifying or determining a substantial similarity match for an Operation or Instruction Set whose Instruction Set Portions match all but one Instruction Set Portion of the compared Operation or Instruction Set . Also Comparison Strictness Function may adjust the strictness level for identifying or determining a substantial similarity match for an Operation or Instruction Set whose instruction Set Portions match all but two or more Instruction Set Portions of the compared Operation or Instruction Set . Such an adjustment in strictness can be done by Comparison Strictness Function in response to determining that not a sufficient number of matches had been found using a higher strictness level.

Comparison Strictness Function can therefore increase or decrease the strictness of the rules for finding or determining a substantial similarity match depending on whether or not perfect matches i.e. perfect equivalents between the compared Operations or Instruction Sets had been found. As such Comparison Strictness Function can utilize two thresholds an upper and lower thresholds to define the strictness of the rules used for determining a substantial similarity match. The upper threshold may correspond to the number of substantial similarity matches that are too high to be presented if user confirmation is enabled to the user i.e. too many matching results too vague suggestions . Alternatively the lower threshold may correspond to the strictness level that results in too few results to be presented if user confirmation is enabled to the user for example. Comparison Strictness Function can make any combination of the aforementioned adjustments to achieve that the number of substantial similarity matches between the compared Operations or Instruction Sets falls between the upper and lower thresholds. As such Comparison Strictness Function can keep adjusting the strictness rules for finding the substantially similar match until both thresholds are satisfied thereby adjusting the results until the best set of results is found.

In some designs Comparison Strictness Function can adjust the strictness level by choosing the number of Operations or Instruction Sets that it will use to find a substantial similarity match. For example as first three Operations or Instruction Sets are used or executed Comparison Strictness Function may run these three Operations or Instruction Sets against Knowledge Cells in Knowledgebase . If Substantial Similarity Comparison provides a number of matching results i.e. total equivalences that is above a particular threshold Comparison Strictness Function can decide to increase the strictness of the rules to decrease the number of results. In response Substantial Similarity Comparison can then decide to wait for a fourth Operation or Instruction Set to be used or executed thereby allowing Substantial Similarity Comparison to use the fourth Operation or Instruction Set in addition to the earlier three to find a smaller number of matching results. Once the fourth Operation or Instruction Set is used or executed Substantial Similarity Comparison can use all four Operations or Instruction Sets to find a match. If the number of matching results i.e. total equivalences is sufficiently small the system may present if user confirmation is enabled the user with these results. If however the number of matching results is still too high Comparison Strictness Function may determine to further increase the strictness by requiring additional Operations or Instruction Sets to be used or executed and thereby further narrow the search results before presenting if user confirmation is enabled the user with the suggested results. In some embodiments the additional Operations or Instruction Sets may include an incomplete Operation or Instruction Set such as first one or more Instruction Set Portions i.e. as user is inputting them etc. . In other embodiments the additional Operations or Instruction Sets may include a portion of Operation or Instruction Set such as one or more characters digits symbols and or other items i.e. as user is inputting them etc. .

In some embodiments to increase comparison accuracy Substantial Similarity Comparison can use Extra Info i.e. time stamp contextual information etc. and or other information for finding or determining a match between Operations or Instruction Sets from Operation List and the corresponding i.e. comparative Operations or Instruction Sets from Knowledge Cells . Concerning time stamp for example user may perform some Software Application s operations i.e. checking email scanning for viruses etc. periodically such as during a specific time of day week month year or other time period. Substantial Similarity Comparison can utilize time stamp in the comparisons to determine a match in the case of time sensitive Operations or instruction Sets .

In further embodiments another technique for increasing comparison accuracy of Substantial Similarity Comparison and or adjusting strictness level of Comparison Strictness Function includes semantic analysis. For example an Operation or Instruction Set from Operation List may contain an object called Customers. Instead of or in addition to searching for the exact name match in the corresponding i.e. comparative Operation or Instruction Set from Knowledge Cells Substantial Similarity Comparison can employ semantic analysis and attempt to match Cust Cst Cstm Cstmr Cstmrs or other semantically equivalent variations of the object name with a meaning Customers. In addition to object names Semantic analysis can be utilized with any differing field or segment i.e. Instruction Set Portion Extra Info etc. of an Operation or Instruction Set with potentially same meaning such as various operators with same meanings various values with same meanings various keywords with same meanings etc. In one example semantic analysis can be implemented using a thesaurus or dictionary. In another example semantic analysis can be implemented using a table where each row comprises semantically equivalent variations of an Instruction Set Portion and or Extra Info .

Referring to and some embodiments of Importance Index are illustrated. Importance Index comprises the functionality for storing importance of the element to or with which the index is assigned or associated. Importance index comprises the functionality for storing importance of Instruction Set Portion or Extra Info to or with which the index is assigned or associated as shown in . Importance Index comprises the functionality for storing importance of Operation or Instruction Set to or with which the index is assigned or associated as shown in . Importance Index comprises the functionality for storing importance of Knowledge Cell to or with which the index is assigned or associated. Importance Index on a scale from 0 to 10 can be utilized for example. Any other range can also be utilized as Importance Index . In some aspects Importance Index can be used for adjusting strictness level and or comparison accuracy of Substantial Similarity Comparison . In one example a higher Importance Index can be assigned to Instruction Set Portions comprising commands functions parameters and or objects. In another example a higher Importance Index can be assigned to Extra Info comprising time stamps computed information and or other contextual information. In a further example a higher Importance Index can be assigned to front most Instruction Set Portions of an Instruction Set or Operation . In a further example a higher Importance Index can be assigned to the most recently used or executed Operations or Instruction Sets in an Operation List . In a further example a higher Importance Index can be assigned to the most recently used or executed comparative Operations or Instruction Sets in a Knowledge Cell . Any Importance Index can be assigned to or associated with any Instruction Set Portion Extra Info Operation or Instruction Set and or other element. Assignment of Importance Indexes can be implemented using a table not shown where one column comprises elements and another column comprises their Importance Indexes . For example one column of a table may include Instruction Set Portions and or Extra Info or types of Instruction Set Portions and or Extra info and another column may include their Importance Indexes . Importance Indexes of various Instruction Set Portions and or Extra Info can be defined based on the type of Software Application experience testing inquiry analysis synthesis or other techniques. As such Importance Index of various Instruction Set Portions and or Extra Info can be set by a user by UAIE administrator or automatically by the system. In some aspects Importance Indexes can be assigned to or associated with instruction Set Portions and or Extra Info by Command Disassembler . Importance Indexes can be stored in various arrangements. In one example Importance Index pertaining to an Instruction Set Portion or Extra Info can be stored in a data field of Operation or instruction Set the data field associated with the instruction Set Portion or Extra Info . In another example Importance Index pertaining to an Operation or Instruction Set can be stored in Extra Info or any data field of the Operation or Instruction Set . In a further example Importance Index pertaining to a Knowledge Cell can be stored in a data field of the Knowledge Cell . In a further example Importance Index can be associated with an Instruction Set Portion Extra Info Operation or Instruction Set Knowledge Cell or other element and stored somewhere else such as in a separate repository.

Referring to and some embodiments of Comparison Accuracy Index also referred to as Comp Acc Index are illustrated. Comparison Accuracy Index comprises the functionality for storing a measure of how well an element to or with which the index is assigned or associated is matched with another element. Comparison Accuracy Index comprises the functionality for storing a measure of how well a Knowledge Cell such as for example Substantially Similar Knowledge Cell later described to or with which the index is assigned or associated is matched with Operation List as shown in . Comparison Accuracy Index comprises the functionality for storing a measure of how well an Operation or Instruction Set to or with which the index is assigned or associated is matched with another Operation or Instruction Set as shown in . Comparison Accuracy Index comprises the functionality for storing a measure of how well an Instruction Set Portion and or Extra Info to or with which the index is assigned or associated is matched with another Instruction Set Portion and or Extra Info . Comparison Accuracy Index comprises the functionality for storing a measure of how well a Knowledge Cell to or with which the index is assigned or associated is matched with another Knowledge Cell . Comparison Accuracy Index on a scale from 0 to 10 can be utilized for example. Any other range can also be utilized as Comparison Accuracy Index . In some designs Comparison Accuracy Index can be determined during Substantial Similarity Comparison based on how well matched are the compared Operations or Instruction Sets . In one example Comparison Accuracy Index can be determined for an Operation or Instruction Set based on a ratio percentage of matched instruction Set Portions and or Extra Info relative to the number of all Instruction Set Portions and or Extra Info in the Operation or Instruction Set . Specifically Comparison Accuracy Index of 10 is determined if all Instruction Set Portions and or Extra Info match. Similarly Comparison Accuracy Index of 8.2 is determined if 82 of Instruction Set Portions and or Extra Info match. In another example importance as indicated by Importance index or other importance ranking technique of one or more Instruction Set Portion and or Extra Info may be included in the calculation of a weighted Comparison Accuracy Index . Any other formula or technique can be utilized to determine or calculate Comparison Accuracy Index . Comparison Accuracy Index can be stored in various arrangements. In one example Comparison Accuracy Index pertaining to a Substantially Similar Knowledge Cell or any Knowledge Cell can be stored in a data field of the Substantially Similar Knowledge Cell or any Knowledge Cell . In another example Comparison Accuracy index pertaining to an Operation or Instruction Set can be stored in Extra Info or any data field of the Operation or Instruction Set . In a further example Comparison Accuracy Index can be associated with a Knowledge Cell Operation or Instruction Set or other element and stored somewhere else such as in a separate repository. Comparison Accuracy Index can be used for various purposes. In one example Comparison Accuracy Index can be presented to a user in User Confirmation to help streamline the confirmation process if user confirmation is enabled . In another example Comparison Accuracy Index can be used to autonomously execute anticipatory Operations or Instruction Sets without user confirmation if the index is sufficiently high i.e. 9 or 10 on a 0 10 scale etc. . In a further example Comparison Accuracy index s indication of how well matched are Operations or Instruction Sets from Operation List and a Knowledge Cell in Substantial Similarity Comparison can be used to determine how many anticipatory Operations or Instruction Sets from the Knowledge Cell may be anticipated. For instance if a perfect or strong substantial similarity match is found between Operations or Instruction Sets from Operation List and a Knowledge Cell i.e. Substantially Similar Knowledge Cell etc. the system may decide to anticipate all anticipatory Operations or Instruction Sets from the Knowledge Cell . Conversely if a weak substantial similarity match is found the system may decide to anticipate only one or a few anticipatory Operations or Instruction Sets from the Knowledge Cell . Any other number of anticipatory Operations or Instruction Sets can be anticipated in between the two ends of the spectrum depending on Comparison Accuracy Index . Comparison Accuracy Index can be used for any other purpose.

Referring to Decision making Unit in some embodiments Decision making Unit comprises the functionality for analyzing context in which Instruction Sets or Operations have been performed and or other functionalities. In other embodiments Decision making Unit comprises computational functionalities for creating or analyzing computed information. Computed information can be created or analyzed by performing computations using Instruction Set Portions Extra Info contextual information time information geo spatial information environmental information situational information observed information other computed information pre computed information analyzed information inferred information and or other information. In further embodiments Decision making Unit comprises the functionality to create or analyze inferred information. Inferred information can be created or analyzed by drawing an inference from Instruction Set Portions Extra Info contextual information time information geo spatial information environmental information situational information observed information computed information pre computed information analyzed information other inferred information and or other information. These functionalities can be utilized in some implementations of Substantial Similarity Comparisons to find the most accurate substantially similar knowledge cell for particular types of Software Applications such as context reliant applications i.e. certain computer games etc. . In one example Decision making Unit may analyze a Knowledge Cell that represents movements of a user s character i.e. avatar etc. in a computer game. Decision making Unit can infer that in a situation where a specific object i.e. opponent character building forest rock etc. was near user s character i.e. avatar etc. had moved toward the object. The inference that user s character had moved toward the object can be drawn by computing that the distance between the user s character and the object decreased. The computations can be performed using coordinates of user s character coordinates of the object i.e. opponent character building forest rock etc. and or other attributes properties Extra Info location information or other information. The computations or estimations can be performed using Pythagorean theorem Euclidean distance formula trigonometry and or other theorems formulas or disciplines as applicable. In other examples user s character s bearing speed and or other attributes properties or other information can similarly be computed. In some aspects computed contextual or other information i.e. distance bearing speed etc. can be stored in Extra info of an Operation or Instruction Set in a Knowledge Cell or in another repository to be used later in the process i.e. in Confirmation Unit Context Interpreter etc. . Decision making Unit may include some or all the features and embodiments of Confirmation Unit and or Context interpreter described later.

Referring to Confirmation Unit comprises the functionality for confirming editing i.e modifying etc. evaluating i.e. rating etc. and or canceling anticipatory Operations or Instruction Sets i.e. anticipated Software Application s instructions or operations etc. and or other functionalities. Confirmation Unit comprises the functionality for analyzing or interpreting context in which Instruction Sets or Operations may have been performed. Confirmation Unit comprises the functionality for modifying anticipatory Operations or Instruction Sets i.e. anticipated Software Application s instructions or operations based on context analysis or interpretation. Confirmation Unit may include some or all features functionalities and embodiments of Decision making Unit as applicable.

Confirmation Unit comprises Substantially Similar Knowledge Cell Context Interpreter Operation Modifier User Confirmation and Operation List . Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments. In some aspects Substantially Similar Knowledge Cell is a Knowledge Cell whose comparative Operations or Instruction Sets are found or determined to be substantially similar to the most recently used or executed Operations or Instruction Sets from Operation List . Substantially Similar Knowledge Cell may therefore be a result of or output from Decision making Unit Substantial Similarity Comparison and or other related elements or steps.

In some embodiments Confirmation Unit can serve as a means of confirming anticipatory Operations or Instruction Sets . For example UAIE may determine most likely anticipatory Operations or Instruction Sets and provide them to User for confirmation. User may be provided with an interface i.e. graphical user interface selectable list of anticipatory Operations or Instruction Sets etc. to approve or confirm execution of the anticipatory Operations or instruction Sets . In other embodiments Confirmation Unit can serve as a means of editing or modifying anticipatory Operations or Instruction Sets . For example UAIE may determine most likely anticipatory Operations or Instruction Sets and provide them to User for editing. User may be provided with an interface i.e. graphical user interface etc. to edit the anticipatory Operations or instruction Sets before their execution. In further embodiments Confirmation Unit can serve as a means of evaluating or rating anticipatory Operations or Instruction Sets if they matched the indented operation of User . For example UAIE may determine most likely anticipatory Operations or Instruction Sets and autonomously execute them. User may be provided with an interface i.e. graphical user interface etc. to rate i.e. on a scale from 0 to 10 etc. how well UAIE predicted anticipatory Operations or Instruction Sets . Similar to the previously described Comparison Accuracy Index a rating can be stored in the rated anticipatory Operation or Instruction Set in Extra info of the rated anticipatory Operation or Instruction Set in the rated Substantially Similar Knowledge Cell or any Knowledge Cell and or in other repository for improvement of future decision making or matching. In some aspects rating can be automatic and based on a particular function or method that rates how well the anticipatory Operations or Instruction Sets matched the desired operation. In one example a rating function or method can assign a higher rating to anticipatory Operations or Instruction Sets that were least modified in the confirmation process. In another example a rating function or method can assign a higher rating to anticipatory Operations or Instruction Sets that were canceled least number of times by User . Any other automatic rating function or method can be utilized. In yet other embodiments Confirmation Unit can serve as a means of canceling anticipatory Operations or Instruction Sets if they did not match the indented operation of User . For example UAIE may determine most likely anticipatory Operations or Instruction Sets and autonomously execute them. UAIE may save the state of Software Application i.e. save its variables data structures objects location of its current instruction and or other necessary elements in files databases environmental variables data structures objects etc. before executing anticipatory Operations or Instruction Sets . User may be provided with an interface i.e. selectable list of prior executed anticipatory Operations or Instruction Sets etc. to cancel one or more of the prior executed anticipatory Operations or Instruction Sets and restore Software Application or Computing Device to a prior state. Similar to the previously described rating a cancelation can be stored in the canceled anticipatory Operation or Instruction Set in Extra info of the canceled anticipatory Operation or Instruction Set in a canceled Substantially Similar Knowledge Cell or any Knowledge Cell and or in other repository for improvement of future decision making or matching.

Context Interpreter comprises the functionality for analyzing or interpreting a context in which Operations or Instruction Sets were performed and or other functionalities. Context Interpreter comprises the functionality for analyzing or interpreting a context in which Operations or Instruction Sets from Operation List and or Knowledge Cells were performed. In some embodiments context includes any information related to an Operation or Instruction Set such as its type time i.e. time stamp etc. of its execution and or other contextual information. In other embodiments context includes any information related to Software Application and or Computing Device such as type of Software Application i.e. web browser game word processing database CAD CAM software etc. type of Computing Device executing Software Application version of Software Application type of User novice moderate skilled expert user specific information group user information and or other contextual information. In other embodiments context includes any component of Instruction Set not captured as an Instruction Set Portion any Instruction Set Portion or component thereof that is not used in Substantial Similarity Comparison and or any information about Operation or Instruction Set that may be useful in anticipating Software Application s future operations i.e. anticipatory Operations or Instruction Sets . In general context or contextual information may include any Instruction Set Portion Extra Info time information geo spatial information environmental information situational information observed information computed information pre computed information analyzed information inferred information and or other information. Contextual information can be stored in Extra Info of an Operation in Knowledge Cell in Knowledgebase and or in other data structure or repository. In some aspects Context interpreter performs an extra analysis step and it attempts to capture information steps and or elements that may have been omitted by Command Disassembler Knowledge Structuring Unit Decision making Unit Substantial Similarity Comparison and or by other elements or steps.

In some embodiments Context Interpreter comprises the functionality for obtaining observable information such as reading time from system clock reading user or group information from operating system s user or group account files reading type or version of Software Application from Software Application s system files reading type of Computing Device from operating system s files obtaining coordinates or other attributes of an object from an application s work files or runtime engine and or obtaining other observable information. In other embodiments Context Interpreter comprises the functionality for reading or extracting values or ranges of values from Instruction Set Portions and or Extra info of an Operation or Instruction Set and or reading or extracting values or ranges of values from other elements. In other embodiments Context Interpreter comprises the functionality for drawing inferences such as whether value of a variable or parameter is increasing or decreasing in consecutive Operations or Instruction Sets whether an object is approaching or retreating from another object whether an object is moving in a direction of another object and or drawing other inferences. Any of the previously described features functionalities and embodiments related to inference making can be used in Context interpreter . In further embodiments Context Interpreter comprises computational functionalities to create or analyze computed information such as computing an object s distance bearing direction speed and or other attributes properties or information. Any of the previously described features functionalities and embodiments related to computed information can be used in Context Interpreter . In further embodiments Context Interpreter comprises semantic analysis functionalities such as utilizing semantically equivalent variations of an object s name to find a match and or utilizing semantically equivalent variations of other elements. Any of the previously described features functionalities and embodiments related to semantic analysis can be used in Context Interpreter . Context Interpreter comprises the functionality for performing any other context analysis or interpretation.

In some aspects Context Interpreter includes Operation Modifier also referred to as automatic operation modifier etc. . Operation Modifier comprises the functionality for modifying an Operation or Instruction Set . Operation Modifier comprises the functionality for modifying an Operation or Instruction Set i.e. anticipatory Operation or Instruction Set etc. by replacing one or more Instruction Set Portions and or Extra Info of the Operation or Instruction Set . Operation Modifier comprises the functionality for modifying an Operation or Instruction Set i.e. anticipatory Operation or Instruction Set etc. based on context analysis or interpretation observation inferences drawn computation and or other functionalities of Context Interpreter Decision making Unit and or other elements. Operation Modifier comprises the functionality for modifying an Operation or Instruction Set i.e. anticipatory Operation or Instruction Set etc. based on any technique function or method such as for example function for projecting computing or estimating a path movement or trajectory of any objects or other items in Software Application . Operation Modifier comprises the functionality for modifying one or more Operations or Instruction Sets of Substantially Similar Knowledge Cell or any Knowledge Cell .

In one example of a computer game application Substantially Similar Knowledge Cell includes Operations or instruction Sets that store movements of a user s character i.e. avatar etc. in instruction Set Portions and that store any contextual information i.e. nearby objects nearby object s coordinates nearby object types etc. in Extra Info . The instruction Set Portions may include portions of a function i.e. moveAvatar Xcoord Ycoord . . . etc. used to implement movements of user s character. Context Interpreter Decision making Unit or other element with context interpreting functionalities can infer that user s character moved north toward a specific object i.e. opponent character building forest rock etc. for example based on the coordinates of the movement function stored in Instruction Set Portions and coordinates of nearby objects stored in Extra Info . The inference that user s character moved toward the object can be drawn from a determination that the distance between the user s character and the object decreased. If user s character encounters a situation that includes a similar object i.e. opponent character building forest rock etc. east of user s character for example Operation Modifier can then modify or replace Instruction Set Portions representing movement coordinates of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell thereby causing movement of user s character east toward the object regardless of where those coordinates pointed before the modification. Any inferences can be drawn related to any other information such as distance bearing direction speed and or other attributes properties or information.

In another example Context Interpreter Decision making Unit or other element with context interpreting functionalities can project a path movement or trajectory of user s character or other object based on a computed or estimated formula of the user s character s or other object s prior movement coordinates. In some aspects user s character s and or other object s prior movement coordinates can be read or extracted from Instruction Set Portions and or Extra Info of comparative Operations or instruction Sets of Substantially Similar Knowledge Cell . A mathematical or computational technique function or method can then be applied to compute or estimate the formula that best fits or describes the coordinates. Examples of the mathematical or computational techniques functions or methods for computing or estimating the formula include best fit trend curve fitting linear least squares non linear least squares and or other techniques functions or methods. Examples of formulas for a path movement or trajectory include any linear i.e. flat angular diagonal etc. non linear i.e. curved circular elliptical rectangular triangular zig zag etc. or other formula. Subsequent movement coordinates can then be calculated using the formula. Operation Modifier can then modify or replace Instruction Set Portions representing movement coordinates of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell thereby causing movement of the user s character or other object on the projected path movement or trajectory. Similar techniques functions or methods can be utilized for projecting a series or sequence of values. For example user may input a series or sequence of values such as 4 5 6 into an input object i.e. text box cell etc. of an object oriented or forms based Software Application . A mathematical or computational technique function or method can then be applied to compute or estimate the formula that best fits or describes the series or sequence. Context interpreter Decision making Unit or other element with context interpreting functionalities can project subsequent values i.e. 7 8 9 . . . etc. in the series or sequence using the formula. Operation Modifier can then modify or replace Instruction Set Portions representing the input values of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell thereby causing autonomous input of values of the projected series or sequence. Any series or sequence can similarly be projected examples of which include 1 2 3 . . . 2 3 5 . . . 14 16 18 . . . 32 42 52 . . . 93 103 113 . . . 257 307 357 . . . 10 20 30 . . . 100 200 300 . . . 1000 2000 3000 . . . and or others.

In a further example Context Interpreter Decision making Unit or other elements with context interpreting functionalities can read or extract values or ranges of values from Instruction Set Portions and or Extra Info of one or more Operations or Instruction Sets . The one or more Operations or Instruction Sets can be stored in Operation List Substantially Similar Knowledge Cell or any Knowledge Cell or other data structure or repository. Operation Modifier can then modify or replace Instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell with the extracted values thereby configuring anticipatory Operations or Instruction Sets to execute with same values or ranges of values as in previously used or implemented Operations or Instruction Sets . Similarly Context Interpreter Decision making Unit or other elements with context interpreting functionalities can read or extract object names from Instruction Set Portions and or Extra Info of one or more Operations or Instruction Sets . Operation Modifier can then modify or replace Instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell with the extracted object names thereby configuring anticipatory Operations or Instruction Sets to execute with same object names as in previously used or implemented Operations or Instruction Sets . Any other numeric or non numeric values or ranges thereof can be similarly extracted and utilized.

In a further example Context Interpreter Decision making Unit or other elements with context interpreting functionalities can perform semantic analysis to determine that a semantically equivalent variation of an Instruction Set Portion and or Extra Info is utilized in an Operation or Instruction Set . Semantic analysis can be implemented using thesaurus or dictionary or a table comprising semantically equivalent variations of Instruction Set Portions and or Extra Info as previously described. Operation Modifier can then modify or replace instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell with the correct semantically equivalent variation of the instruction Set Portions thereby configuring anticipatory Operations or Instruction Sets to execute with same variation of the Instruction Set Portions as in previously used or implemented Operations or Instruction Sets . For instance object name customer and cstmr referring to the same object can be used in different Operations or Instruction Sets thereby needing semantic analysis to equate the two object names.

In a further example Context Interpreter Decision making Unit or other elements with context interpreting functionalities can obtain observable information such as system time coordinates or other attributes of an object user or group specific information type or version of Software Application type of Computing Device and or other observable information as previously described. Operation Modifier can be configured to modify or replace instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell differently for different observable information. In one instance Operation Modifier may modify or replace Instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell differently for different users or groups of users. Specifically in this instance Operation Modifier may modify or replace Instruction Set Portions representing movement of user s character or other object in anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell to cause slower movement of the user s character or other object for novice users or groups of users in a computer game application. In another instance Operation Modifier may modify or replace Instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell differently for different times of day month year or other time period. Specifically in this instance Operation Modifier may modify or replace instruction Set Portions representing temperature values in anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell to allow lower temperature in a building during the night in an energy management application. In a further instance Operation Modifier may modify or replace Instruction Set Portions of anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell differently for different Computing Devices Computing Device configurations i.e. different displays different display settings different I O devices different processors etc. versions of Software Application and or other considerations. Specifically in this instance Operation Modifier may modify or replace Instruction Set Portions representing movement of user s character or other object in anticipatory Operations or Instruction Sets of Substantially Similar Knowledge Cell to cause the movement of the user s character or other object to appear correctly on smaller screens in a computer game application.

Any combinations of the disclosed and or other features functionalities and embodiments of Operation Modifier can be utilized in alternate implementations.

In some embodiments Comparison Accuracy index s or other comparison ranking technique s indication of how well matched are Operations or instruction Sets from Operation List and a Knowledge Cell in Substantial Similarity Comparison can be used to determine how much anticipatory Operations or Instruction Sets from the Knowledge Cell should be modified. For instance if a perfect or strong substantial similarity match is found between Operations or instruction Sets from Operation List and a Knowledge Cell i.e. Substantially Similar Knowledge Cell etc. anticipatory Operations or Instruction Sets from the Knowledge Cell may not need to be modified at all. Conversely if a weak substantial similarity match is found anticipatory Operations or Instruction Sets from the Knowledge Cell may need to be modified substantially. Any amount of modification can be implemented in between the two ends of the spectrum. If modification is needed Operations or Instruction Sets from Substantially Similar Knowledge Cell or other Knowledge Cell can be modified using any of the previously described or other techniques such as inferring projecting computing inserting extracted values performing semantic analysis inserting obtained observable information and or others. In some aspects after the initial modification Operations or Instruction Sets from Operation List can be re compared i.e. by Substantial Similarity Comparison etc. with the modified Operations or Instruction Sets from Substantially Similar Knowledge Cell to find whether a better substantial similarity is found. This process can be performed iteratively until Operations or Instruction Sets from Substantially Similar Knowledge Cell are modified for optimal substantial similarity with Operations or Instruction Sets from Operation List . Such optimally modified Operations or Instruction Sets from Substantially Similar Knowledge Cell may include optimal or optimally modified anticipatory Operations or instruction Sets .

User Confirmation comprises the functionality for enabling a user to confirm and or edit anticipatory Operations or Instruction Sets and or other functionalities. In some aspects User Confirmation comprises the functionality for automating user confirmation if comparison accuracy information i.e. Comparison Accuracy Index etc. is available as previously described. In one example if one or more comparative Operations or Instruction Sets from Substantially Similar Knowledge Cell were found to be a perfect or highly accurate match anticipatory Operations or Instruction Sets can be autonomously executed without asking user to confirm them. Conversely if one or more comparative Operations or Instruction Sets from Substantially Similar Knowledge Cell were found to be less than a highly accurate match anticipatory Operations or Instruction Sets can be presented to user for confirmation and or editing including presenting comparison accuracy information i.e. Comparison Accuracy Index etc. for user s consideration. In some aspects depending on the type of Software Application and or other factors User Confirmation and or other elements of Confirmation Unit can optionally be disabled or omitted in order to provide an uninterrupted operation of Software Application . For example a form based application may be suitable for implementing the user confirmation step whereas a game may be less suitable for implementing such interrupting step due to the real time nature of game playing execution.

Referring to Command Assembler comprises the functionality for assembling an instruction Set and or other functionalities. Command Assembler comprises the functionality for assembling an Instruction Set from Instruction Set Portions stored in Operation . Command Assembler may in effect perform a reverse action relative to Command Disassembler . In some aspects Instruction Set can be passed directly to Operation List without being disassembled in which case Command Disassembler and or any if its elements may be omitted from the overall system. In such implementations Operation List Knowledge Cells Knowledgebase Neural Network later described and or data structures or repositories may include original Instruction Sets instead of disassembled Operations . As such Substantial Similarity Comparisons can be performed either directly i.e. letter for letter word for word etc. between Instruction Sets or indirectly by performing extraction or disassembling of Instruction Set Portions in the comparison step. If Operations are not used and no assembly of various Instruction Set Portions is needed Command Assembler may simply verify that an Instruction Set is ready for use or execution or Command Assembler may be omitted.

In some embodiments instead of or in addition to executing anticipatory Operations or Instruction Sets UAIE or any disclosed element can trigger an external application or process. The external application or process may be an application or process of a system within which Software Application or UAIE operates or with which Software Application or UAIE is connected i.e. over a network etc. . For example UAIE can be used or embedded within a smartphone including a digital camera where UAIE may learn that user often posts a captured photo on an Internet s photo sharing service such as flickr.com tinypic.com imgur.com postimage.org photobucket.com and or other photo sharing service. UAIE can trigger an Internet photo sharing application or process in response to user s capturing a digital photograph through the digital camera s photo capturing software i.e. digital camera s Software Application .

In other embodiments UAIE can attach to and learn operations of more than one or even all applications on a computing device simultaneously. Acquisition and Modification Interface can obtain instructions i.e. Instruction Sets or Operations etc. of any application through tracing or profiling and or other previously described techniques. Instructions i.e. Instruction Sets or Operations etc. of any application obtained by Acquisition and Modification Interface may be learned and later autonomously implemented as previously described. In some aspects all instructions i.e. Instruction Sets or Operations etc. of more than one application may be learned in the order in which the instructions occurred. In other aspects all instructions i.e. Instruction Sets or Operations etc. of a primary application may be learned where instructions of additional applications may be learned only if they are significantly related to the primary application. In one example a user may often save a text file and email it to someone i.e. emailing work to his her boss etc. . UAIE can learn text file saving instructions i.e. Instruction Sets or Operations etc. of the word processing application and or contextual information i.e. Extra Info etc. such as file name or portions thereof. UAIE can also learn text file emailing instructions i.e. Instruction Sets or Operations etc. of the email application and or contextual information i.e. Extra Info etc. such as email address to which the text file was sent. When user saves a text file with similar name in the future UAIE can implement text file emailing autonomously. In another example a user may often receive calls on his her smartphone from phone numbers that user does not recognize i.e. phone number not in user s contacts etc. and before answering the call user may seek information about the phone number on a phone number lookup website i.e. callercenter.com numberguru.com etc. through smartphone s web browser. UAIE can learn call receiving instructions i.e. Instruction Sets or Operations etc. of the telephonic application and or contextual information i.e. Extra Info etc. such as phone number or portions thereof. UAIE can also learn phone number lookup instructions i.e. Instruction Sets or Operations etc. of the web browser and or contextual information i.e. Extra Info etc. such as the web site that was used to lookup information about the phone number. When user receives a call from a phone number that user does not recognize in the future UAIE can implement information lookup on the phone number through a web browser autonomously to help user decide whether to answer the call.

In further embodiments UAIE can be configured to run automatically and or perform Software Application operations completely autonomously. For example UAIE and or any disclosed element may periodically i.e. daily weekly monthly yearly etc. automatically run to analyze i.e. through Substantial Similarity Comparison or other process etc. time stamps of some or all Operations or Instruction Sets in Knowledgebase Neural Network later described or other data structure or repository to determine which Operations or Instruction Sets have been used or executed in particular time periods. If repetitive Operations or Instruction Sets are found in specific time periods they can be executed automatically regardless of whether Software Application is running and or without User s confirmation. In some aspects automatic execution can be conditional for example upon how accurate or confident the substantial similarity match is as indicated by Comparison Accuracy Index or other comparison accuracy ranking technique. Other determinations in addition to analyzing the time stamp can be performed in alternate embodiments.

In further embodiments UAIE can implement or execute anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. from a Substantially Similar Knowledge Cell prior to during or after execution of instructions from another Substantially Similar Knowledge Cell . For example as anticipatory Operations or Instruction Sets from one Substantially Similar Knowledge Cell are executed UAIE may find another Substantially Similar Knowledge Cell that is a better fit from that point on. Anticipatory Operations or Instruction Set from the newly found Substantially Similar Knowledge Cell can then be executed.

Referring to in some aspects instead of or in addition to information stored in Extra Info UAIE may include additional information either within Knowledgebase within additional knowledgebases or within any other element of the overall system. This additional information can assist Substantial Similarity Comparison and or other elements or process steps in performance of their respective functions i.e. more accurately anticipate Software Application s future operations etc. . For example UAIE may include additional knowledgebases such as User Specific Information Group Specific Information and or other additional knowledgebases. These additional knowledgebases can be directly or operatively coupled with Knowledgebase and or with any other elements of the system as needed.

User Specific Information or User Specific Info comprises the functionality for storing information pertaining to a specific user and or other functionalities. There may be plurality of User Specific Infos on the system one for each user. User Specific Info may include information on the most prevalent Operations or Instruction Sets the user may be using information on objects on which the user may have most often performed operations information on types of Operations or Instruction Sets the user most often performs information on the sequence of Operations or Instruction Sets which the user may perform or have performed most often and more. User Specific Info may further include the information along with a time stamp for each Operation or Instruction Set which the user has performed in the past thereby allowing the system to determine which Operations or Instruction Sets the user has most recently been using and which Operations or Instruction Sets the user has not used in a while.

Group Specific Information or Group Specific Info comprises the functionality for storing information pertaining to a group of users and or other functionalities. The group of users may be a group having a particular access level to Software Application such as for example group of administrators group of general users group of managers group of guests and more. Each group can be given a different access level and different level of control over the system. There may be plurality of or Group Specific Infos on the system one for each group of users. Group Specific Info may include the information on the most prevalent Operations or Instruction Sets the users of the group may be using information on objects on which the users of the group may have most often performed operations information on types of operations the users of the group most often perform information on the sequence of Operations or Instruction Sets which the users of the group may perform or have perform most often and more. Group Specific Info may further include the information along with a time stamp for each Operation or Instruction Set which the users of the group have performed in the past thereby allowing the system to determine which Operations or Instruction Sets the users of the group have most recently been using and which Operations or Instruction Sets the user have not used in a while.

Referring now to Acquisition and Modification Interface Application Modification Unit may be an element of Acquisition and Modification Interface as previously described. Application Modification Unit comprises the functionality for modifying execution and or functionality of Software Application and or other functionalities. Application Modification Unit comprises the functionality for modifying execution and or functionality of Software Application during Software Application s execution i.e. runtime etc. . Application Modification Unit comprises the functionality for modifying execution and or functionality of Software Application based on UAIE functionalities. Application Modification Unit comprises the functionality for modifying execution and or functionality of Software Application based on Artificial Intelligence Unit s anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. . Application Modification Unit may include any functionality to access create delete modify and or perform other manipulations on source code bytecode compiled interpreted or otherwise translated code machine code and or other code. Application Modification Unit may include any functionality to access modify and or perform other manipulations on runtime engine environment virtual machine operating system compiler just in time JIT compiler interpreter translator execution stack program counter memory processor registers files repositories objects data structures variables parameters functions methods procedures routines subroutines and or other computing system elements.

Various techniques can be utilized to modify execution and or functionality of Software Application depending on embodiments. One of ordinary skill in art will understand that while all these techniques are too voluminous to list all of these techniques are within the scope of this disclosure in various implementations of the functionalities described herein. Various platforms and or computing systems may provide native tools for modifying execution and or functionality of an application. Independent software vendors may provide tools with similar functionalities that can be utilized across different platforms. These tools enable a wide range of techniques or capabilities for modifying execution and or functionality of an application such as for example self modifying code capabilities dynamic code capabilities branching code rewriting code overwriting instrumentation hot swapping and or other capabilities. Additionally previously described tools and or techniques can be utilized for modification of execution and or functionality of an application. Code instrumentation for example may involve inserting additional code overwriting or rewriting existing code and or branching to a separate segment of code i.e. function routine subroutine method etc. as previously described. For example code instrumentation may include the following 

In the above sample code instrumented call to Application Modification Unit s function i.e. modifyApplication etc. can be placed after the web page loading function i.e. loadPage etc. of an application such as web browser for example. Similar call to application modifying function can be placed after or before some or all functions routines subroutines some or all lines of code some or all statements some or all instructions or instruction sets some or all basic blocks and or some or all other code segments of web browser or other application. One or more application modifying function calls can be placed anywhere in the application s code and can be executed at any points in the application s execution. The application modifying function i.e. modifyApplication etc. may include UAIE determined anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. that can modify the application i.e. web browser in this example etc. to which UAIE is attached. In some embodiments previously described obtaining Software Application s instructions data and or other information as well as modifying execution and or functionality of Software Application can be implemented in a single function that performs both tasks i.e. traceAndModifyApplication etc. . In some aspects modifying execution and or functionality of an application may include adding modifying removing rewriting or overwriting application code in memory at runtime. In other aspects modifying execution and or functionality of an application may include reflection which comprises ability to examine and modify the structure and behavior of an application or object at runtime.

In one example modifying execution and or functionality of an application can be implemented through utilizing metaprogramming techniques which include applications that can self modify or that can create modify and or manipulate other applications. Self modifying code dynamic code reflection and or other techniques can be used to facilitate metaprogramming. In some aspects metaprogramming is facilitated through a programming language s ability to access and manipulate the internals of the runtime engine directly or via an API. In other aspects metaprogramming is facilitated through dynamic execution of expressions i.e. anticipatory instructions from Artificial Intelligence Unit etc. that can be created and or executed at runtime. In yet other aspects metaprogramming is facilitated through application modification tools which can perform any modification on an application regardless of whether the application s programming language enables any metaprogramming capabilities. Some operating systems may protect an application loaded into memory by restricting access to the loaded application. This protection mechanism can be circumvented by utilizing operating system s processor s and or other low level computing device component s features or commands to unprotect the loaded application. For example a self modifying application may need to modify the in memory image of itself. To do so the application can obtain the in memory address of its code. The application may then change the operating system s or platform s protection on this memory range allowing it to modify the code i.e. insert anticipatory instructions from Artificial Intelligence Unit etc. . Linux mprotect command can be used to change protection i.e. unprotect etc. for a region of memory for example. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through native capabilities of dynamic interpreted and or scripting programming languages and or platforms. Most of these languages and or platforms can perform functionalities at runtime that static programming languages may perform during compilation. Dynamic interpreted and or scripting languages provide native functionalities such as self modification of code dynamic code extending the application adding new code extending objects and definitions modifying the type system and or other functionalities that can modify an application s execution and or functionality at runtime. Examples of dynamic interpreted and or scripting languages include Lisp Perl PHP JavaScript Ruby Python Smalltalk Tcl VBScript and or others. Similar functionalities can also be provided in languages such as Java C and or others using reflection. Reflection includes the ability of an application to examine and modify the structure and behavior of the application at runtime. For example JavaScript can modify its own code as it runs by utilizing Function object constructor as follows 

Sample code above causes a new function object to be created with the specified arguments and body. The body and or arguments of the new function object may include anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial intelligence Unit . The new function can be invoked as any other function in the original code. In another example JavaScript can utilize eval method that accepts a string of JavaScript statements i.e. anticipatory instructions from Artificial Intelligence Unit etc. and execute them as if they were within the original code. An example of how eval method can be used to implement the disclosed functionalities includes the following JavaScript code 

In a further example modifying execution and or functionality of an application can be implemented through dynamic code dynamic class loading reflection and or other native functionalities of a programming language or platform. In static applications or static programming a class can be defined and or loaded at compile time Conversely in dynamic applications or dynamic programming a class can be loaded into a running environment at runtime. For example Java Runtime Environment JRE may not require that all classes be loaded at compile time and class loading can occur when a class is first referenced at runtime. Dynamic class loading enables inclusion or injection of on demand software components and or functionalities at runtime. System provided or custom class loaders may enable loading of classes into the running environment. Custom class loaders can be defined to enable custom functionalities such as for example specifying a remote location from which a class is loaded. In addition to dynamic loading of a pre defined class a class can also be created at runtime. In some aspects a class source code can be created at runtime. A compiler such as javac com.sun.tools.javac.Main javax.tools javax.tools.JavaCompiler and or other packages can then be utilized to compile the source code. Javac com.sun.tools.javac.Main javax.tools javax.tools.JavaCompiler and or other packages may include an interface to invoke Java compiler from within running applications. A Java compiler may accept source code in a file string object i.e. Java String StringBuffer CharSequence etc. and or other source and may generate bytecode i.e. class file etc. conforming to Java Virtual Machine specification. Once compiled a class loader can then load the compiled class into the running environment. In other aspects a tool such as Javaassist i.e. Java programming assistant can be utilized to enable an application to create or modify a class at runtime. Javassist may include a Java library that provides functionalities to create and or manipulate Java bytecode of an application and provides reflection capabilities. Javassist may provide source level and bytecode level APIs. Using the source level API a class can be created and or modified using only source code which Javassist may compile seamlessly on the fly. Javassist source level API can therefore be used without knowledge of Java bytecode specification. Bytecode level API enables creating and or editing a class bytecode directly. In yet other aspects similar functionalities to the above described ones may be provided in tools such as Apache Commons BCEL Byte Code Engineering Library ObjectWeb ASM CGLIB Byte Code Generation Library and or others. Once a dynamic code or class is created and loaded reflection in high level programming languages such as Java and or others can be used to manipulate or change the runtime behavior of an application. Examples of reflective programming languages and or platforms include Java JavaScript Smalltalk Lisp Python .NET Common Language Runtime CLR Tcl Ruby Perl PHP Scheme PL SQL and or others. Reflection can be used in an application to access examine modify and or manipulate a loaded class and or its elements. Reflection in Java can be implemented by utilizing a reflection API such as java.lang.Reflect package. The reflection API provides functionalities such as for example loading or reloading a class instantiating a new instance of a class determining class and instance methods invoking class and instance methods accessing and manipulating a class fields methods and constructors determining the modifiers for fields methods classes and interfaces and or other functionalities. The above described dynamic code dynamic class loading reflection and or other functionalities are similarly provided in the .NET platform through its tools such as for example System.CodeDom.Compiler namespace System.Reflection.Emit namespace and or other native or other .NET tools. Other platforms in addition to Java and .NET may provide similar tools and or functionalities. Dynamic code dynamic class loading reflection and or other functionalities can be used to facilitate the disclosed functionalities by inserting or injecting anticipatory instructions i.e. anticipatory Operations or instruction Sets from Artificial Intelligence Unit into a running application. For example an existing or dynamically created class comprising UAIE functionalities can be loaded into a running application through manual automatic or dynamic instrumentation. Once the class is created and loaded an instance of UAIE class may be constructed. The instance of UAIE can then take or exert control of the application and or implement anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit at any point in the application s execution. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through independent tools that can be utilized across different platforms. Many tools exist that provide instrumentation and or other capabilities on more than one platform or computing system which may enable application modification or insertion of instructions such as anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial intelligence Unit . Examples of these tools include Pin DynamoRIO DynInst Kprobes KernInst OpenPAT DTrace SystemTap and or others. In some aspects Pin and or any of its systems methods and or techniques can be utilized for dynamic instrumentation. Pin can perform instrumentation by taking control of an application after it loads into memory. Pin may insert itself into the address space of an executing application enabling it to take control. Pin JIT compiler can then compile and implement alternate code such as anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial intelligence Unit . Pin provides an extensive API for instrumentation at many abstraction levels. Pin supports two modes of instrumentation JIT mode and probe mode. JIT mode uses a just in time compiler to recompile program code and insert instrumentation while probe mode uses code trampolines for instrumentation. Pin was designed for architecture and operating system independence. In other aspects KernInst and or any of its systems methods and or techniques can be utilized for dynamic instrumentation. KernInst may include an instrumentation framework designed for dynamically inserting code into a running kernel i.e. operating system kernel etc. . KernInst implements probe based dynamic instrumentation where code can be inserted changed and or removed at will. KernInst API enables client tools to construct their own tools for dynamic kernel instrumentation to suit variety of purposes such as insertion of anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit . Client tools can also communicate with KernInst over a network i.e. internet wireless network LAW WAN etc . Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through utilizing operating system s native tools or capabilities such as Unix ptrace command. Ptrace includes a system call that may enable one process to control another allowing the controller to inspect and manipulate the internal state of its target. Ptrace can be used by specialized programs i.e. UAIE etc. to modify running applications such as modifying an application with anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit s . By attaching to an application using the ptrace call the controlling program can gain extensive control over the operation of its target. This may include manipulation of its instructions execution path file descriptors memory registers and or other components. Ptrace can single step through the target s code observe and intercept system calls and their results manipulate the target s signal handlers receive and send signals on the target s behalf and or perform other operations within the target application. Ptrace s ability to write into the target application s memory space enables the controller to modify the running code of the target application. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through utilizing just in time JIT compiling. JIT compilation also known as dynamic translation dynamic compilation etc. includes compilation performed during an application s execution i.e. runtime etc. . A code can be compiled when it is about to be executed and it may be cached and reused later without the need for additional compilation. In some aspects JIT compilers convert source code or byte code to machine code. In other aspects JIT compilers convert source code to byte code or machine code. JIT compiling may generally be performed directly in memory. For example JIT compiler can output machine code directly into memory and immediately execute it. JIT compilation can be performed per file per function or with an arbitrary code segment. Platforms such as Java .NET and or others may implement JIT compilation as their native functionality. Many platform independent tools for custom system design include JIT compilation functionality as well. In some aspects JIT compilation includes redirecting application s execution to a JIT compiler from a specific entry point. For example one of the widely used tools Pin can insert its JIT compiler into the address space of an application. Once execution is redirected to it JIT compiler may receive alternate instructions such as anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit immediately before their compilation i.e. if they are not previously compiled . The compiled instructions such as anticipatory instructions from Artificial Intelligence Unit can be stored in memory or another repository from where they may be retrieved and executed. Alternatively for example JIT compiler can create a copy of the original application code or a segment thereof and insert including modifying rewriting overwriting etc. of the original code alternate code such as anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit s before compiling the modified code copy. Since the modified code copy can be stored and executed from a new location JIT compiler may modify the application s control instructions to account for this change. Direct control instructions may point directly to the modified code copy if its location is known. Indirect control instructions such as indirect branches jumps calls return instructions or others may point to address in a register memory location or other repository that may hold the location of the modified code. In some embodiments this address may only be known and computed by the system at runtime. In some aspects JIT compiler includes a specialized memory such as fast cache memory dedicated to JIT compiler functionalities from which the modified code can be fetched rapidly. JIT compilation and or any compilation in general may include compilation interpretation or other translation into machine code bytecode and or other formats or types of code. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through dynamic recompilation. Dynamic recompilation include recompiling an application or a part thereof during execution. An application can be modified with alternate features or instructions that may take effect after recompilation. Dynamic recompilation may be practical in various types of applications including object oriented event driven forms based graphical user interface GUI and or other applications. In a typical windows based application that includes GUI most of the action after initial startup occurs in response to user or system events such as moving the mouse selecting a menu option typing text running a scheduled task making a network connection and or other events when an event handler is called to perform an operation appropriate for the event. Generally when no events are being generated the program can be idle. For example when an event occurs and an appropriate event handler is called instrumentation can be implemented in the application s source code to insert including modifying rewriting overwriting etc. of the source code alternate instructions such as anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit at which point the modified source code can be recompiled and or executed. In some aspects the state of the application can be saved before recompiling its modified source code so that the application may continue from its prior state. Saving the application s state can be achieved by saving its variables data structures objects location of its current instruction and or other necessary information in environmental variables data structures objects or other elements where they can be accessed once the application is recompiled. In other aspects application s variables data structures objects address of its current instruction and or other necessary information can be saved in a repository such as file database or other repository accessible to the application after recompilation of its source code. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through modifying or redirecting the application s execution path. Generally an application can be loaded into memory and the flow of execution proceeds from one statement or instruction to the next until the end of the application. An application may include a branching mechanism that can be driven by keyboard or other input devices system events and or other computing device components or events that may impact the execution path. The execution path can also be altered by an external application through acquiring control of execution and or redirecting execution to a function routine subroutine or an alternate code segment at any point in the application s execution. A branch jump trampoline trap or another similar mechanism can be utilized to implement the redirected execution. For example a jump instruction can be inserted at a specific point in an application s execution to redirect execution to an alternate code segment. A jump instruction may include for example an unconditional branch which always results in branching or a conditional branch which may or may not result in branching depending on a condition. When executing an application a computer may fetch and execute instructions in sequence until it encounters a branch instruction. If the instruction is an unconditional branch or it is conditional and the condition is satisfied the computer may fetch its next instruction from a different instruction sequence or code segment as specified by the branch instruction. After the execution of the alternate code segment control may be redirected back to the original jump point or to another point in the application. In some aspects the disclosed functionalities can be implemented by redirecting the execution of an application to anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit . Depending on design platform programming language and or other factors anticipatory instructions can be pre compiled pre interpreted or otherwise pre translated and ready for execution. Anticipatory instructions can also be JIT compiled interpreted or otherwise translated before execution. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a furother example modifying execution and or functionality of an application can be implemented through assembly language. Assembly language instructions may be directly related with the architecture s machine instructions as previously described. Assembly language can therefore be a powerful tool for implementing direct hardware i.e. processor registers memory etc. manipulations and access to specialized processor features or instructions. Assembly language can also be a powerful tool for implementing low level embedded systems real time systems interrupt handlers self or dynamically modifying code and or other applications. Specifically self or dynamically modifying code that can be used to facilitate the disclosed functionalities can be seamlessly implemented using assembly language. For example using assembly language instructions can be dynamically created and loaded into memory similar to the ones that a compiler may generate. Furthermore using assembly language memory space of a loaded application can be accessed to modify including rewriting overwriting etc. original instructions or to insert jumps or trampolines to alternate code elsewhere in memory. Some operating systems may implement protection from changes to applications loaded into memory. Operating system s processor s or other low level computing device component s features or commands can be used to unprotect the protected locations in memory before the change as previously described. Alternatively a pointer that may reside in a memory location where it could be readily altered can be utilized where the pointer may reference alternate code. In some aspects assembly language can be utilized to write anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit into a location in memory outside a running application s memory space. Assembly language can then be utilized to redirect the application s execution to the alternate code i.e. anticipatory instructions etc. by inserting a jump or trampoline into the application s in memory code by redirecting program counter or by other technique. In other aspects assembly language can be utilized to overwrite or rewrite the entire or part of an application s in memory code with alternate code i.e. anticipatory instructions etc. . In yet other aspects high level programming languages can call an external assembly language program to facilitate application modification as previously described. In yet other aspects relatively low level programming languages such as C may allow embedding assembly language directly in their source code such as for example using asm keyword of C. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

In a further example modifying execution and or functionality of an application can be implemented through binary rewriting. Binary rewriting tools and or techniques may modify an application s executable. In some aspects modification can be minor such as in the case of optimization where the original executable s functionality is kept. In other aspects modification may change the application s functionality such as by inserting anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit . Examples of binary rewriting tools include SecondWrite ATOM DynamoRIO Purify Pin EEL DynInst PLTO and or others. Binary rewriting may include disassembly analysis and or modification of target application. Since binary rewriting works directly on machine code executable it is independent of source language compiler virtual machine if one is utilized and or other higher level abstraction layers. Also binary rewriting tools can perform application modifications without access to original source code. Binary rewriting tools include static rewriters dynamic rewriters minimally invasive rewriters and or others. Static binary rewriters can modify an executable when the executable is not in use i.e. not running . The rewritten executable may then be executed including any new or modified functionality. Dynamic binary rewriters can modify an executable during its execution therefore modifying an application s functionality at runtime. In some aspects dynamic rewriters can be used for instrumentation or selective application modifications such as insertion of anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit and or for other runtime transformations or modifications. For example some dynamic rewriters can be configured to intercept an application s execution at indirect control transfers and insert instrumentation or other application modifying code. Minimally invasive rewriters may keep the original machine code to the greatest extent possible. They support limited modifications such as insertion of jumps into and out of instrumentation code. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

Referring to in yet another example modifying execution and or functionality of an application can be implemented through modification of instructions or data in processor registers memory or other computing device components where an application s instructions data and or other information may be stored or used. Such modification can be implemented in software a combination of software and hardware or purely hardware system. In some aspects the disclosed functionalities can be implemented by redirecting the execution of an application to Artificial Intelligence Unit s anticipatory instructions i.e. anticipatory Operations or Instruction Sets . In one example Program Counter may hold or point to the memory address of Software Application s next instruction that will be executed. Artificial Intelligence Unit may generate anticipatory instructions i.e. anticipatory Operations or Instruction Sets as previously described and they can be stored in Memory . Application Modification Unit may then change Program Counter to point to the location in Memory where anticipatory instructions are stored. The anticipatory instructions can then be fetched from location in Memory pointed to by the modified Program Counter and loaded into Instruction Register for decoding and execution as previously described. Once anticipatory instructions are executed Application Modification Unit may change Program Counter to point to the last or subsequent Software Application s instruction before the redirection or any other Software Application s instruction. In other aspects anticipatory instructions i.e. anticipatory Operations or instruction Sets can be loaded directly into Instruction Register i.e. after issuing an interrupt etc. if the computing architecture allows for such loading. As previously described examples of other computing device or processor components that can be used during an instruction cycle include memory address register MAR memory data register MDR data registers address registers general purpose registers GPRs conditional registers floating point registers FPRs constant registers special purpose registers machine specific registers Register Array Arithmetic Logic Unit control unit and or other circuits or components. Any of the described processor registers memory or other computing device components can be accessed and or modified during an application s execution to facilitate the functionalities described herein. In some aspects processor interrupt may be issued after which arbitrary manipulations of processor registers memory and or other components can be performed to modify an application s functionality such as execution of anticipatory instructions i.e. anticipatory Operations or Instruction Sets from Artificial Intelligence Unit . In other aspects the disclosed devices apparatuses systems and or methods can be implemented in dedicated hardware that may send an interrupt signal to processor and that can perform arbitrary manipulations of processor registers memory and or other components to modify an application s functionality. A hardware solution can be implemented with marginal or no impact to computing overhead. Other platforms tools and or techniques may provide equivalent or similar functionalities as the above described ones.

Another example of modifying execution and or functionality of an application includes the use of delegates and or other similar techniques. In some aspects using a delegate may enable referencing one or more methods inside a delegate object. The delegate object can then be passed to code which may call the referenced methods without having to know which methods may be invoked at compile time.

Other additional techniques or elements can be utilized as needed for modifying execution and or functionality of an application or some of the disclosed techniques or elements can be excluded or a combination thereof can be utilized in alternate embodiments.

Referring to an embodiment is illustrated in which Software Application executes on User s Computing Device and UAIE executes on a Remote Computing Device . Remote Computing Device can be any computing device remote from Computing Device such as a remote computer a remote server another Computing Device or another similar type of remote computing device to which Computing Device may connect over Network . One of ordinary skill in art will recognize that Remote Computing Device may include any functionalities and or elements of Computing Device including any memory processing and or other elements. One of ordinary skill in art will also recognize that User s Computing Device can connect to Remote Computing Device over Network which may include various networks connection types protocols interfaces APIs and or other mechanisms or techniques all of which are within the scope of this disclosure. In some aspects the connection with Software Application can be implemented through a networking interface API or capabilities of the platform i.e. Java or .NET networking interface or API etc. or the operating system on which Software Application runs. In other aspects the connection with Software Application can be implemented through networking capabilities of the previously described tools i.e. JVMTI Pin DynamoRIO KernInst DynInst Kprobes OpenPAT DTrace SystemTap assembly language hardware components etc. used to implement Acquisition and Modification Interface functionalities. In yet other aspects the connection with Software Application can be implemented through custom built interface or capabilities specifically designed to facilitate functionalities described herein. Any of the previously described network or connection types networking interfaces and or other networking elements or techniques can similarly be utilized.

Referring to an embodiment is illustrated in which UAIE executes on User s Computing Device and Software Application executes on a Remote Computing Device where User s Computing Device may connect to Remote Computing Device over Network .

Referring to an embodiment is illustrated in which Software Application includes Acquisition and Modification Interface and or Artificial Intelligence Unit . In such integrated implementation Artificial Intelligence Unit may directly access internal functions processes libraries files objects data structures and or other elements of Software Application . Acquisition and Modification Interface and or any of its functionalities or elements may optionally be omitted in such integrated implementations.

Referring to an embodiment is illustrated in which UAIE includes Software Application . In such integrated implementations Software Application may be custom built for a specific artificial intelligence application. Acquisition and Modification Interface and or any of its functionalities or elements can optionally be omitted in such integrated implementations.

Referring to an embodiment is illustrated in which Knowledgebase i.e. remote Knowledgebase resides on a Remote Computing Device i.e. application server cloud etc. accessible via Network i.e. corporate enterprise network Internet etc. . Such remote Knowledgebase may include knowledge i.e. Operations or Instruction Sets Knowledge Cells etc. of operation of one or more Software Applications from any number of computing devices wherever on the Network they are located. In turn users of any computing devices can utilize the remote Knowledgebase to enable autonomous operation of their Software Applications . Remote Knowledgebase may include a global Knowledgebase . In some aspects a global Knowledgebase resides on a Remote Computing Device on the Internet available to all the world s computing devices configured to transmit operations of their Software Applications and or configured to utilize the global Knowledgebase to automate their Software Applications operations. The global Knowledgebase can be offered as a network service i.e. online application etc. in some implementations. In other aspects knowledge i.e. Operations or Instruction Sets Knowledge Cells etc. of Software Application s operation from various computing devices can be loaded into a local Knowledgebase i.e. Knowledgebase stored on user s Computing Device etc. to make the knowledge immediately available and or to speed up UAIE s learning process. The various computing devices may include computing devices of various different users. In further aspects a knowledgebase from another computing device can be loaded into UAIE. Remote Knowledgebase may include or be replaced with remote Neural Network later described and or other repository for storing Software Application s operation. Therefore Neural Network and or other repository comprises all features functionalities and embodiments of remote Knowledgebase .

Referring to an embodiment is illustrated in which UAIE including Artificial Intelligence Unit i.e. remote UAIE or Artificial Intelligence Unit resides and or executes on a Remote Computing Device i.e. application server cloud etc. . In such implementations Acquisition and Modification Interface executing on Computing Device may connect to UAIE and or Artificial intelligence Unit via Network .

Various other embodiments including other additional elements or excluding some of the disclosed elements or implementing a combination of elements are within the scope of this disclosure.

Referring to the illustration shows an embodiment of a method for autonomous application operating based on UAIE functionalities i.e. learning anticipating etc. . The method can therefore be used on a computing device to enable autonomous operation of the application with partial minimal or no user input. In some embodiments the method can be used on a computing device operating an interface for UAIE that enables autonomous operation of the application with partial minimal or no user input. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step a first instruction set and a second instruction set are received the first and the second instruction sets for performing operations on a computing device. The first instruction set may be followed by the second instruction set which may be followed by a third instruction set and so on. The first the second and or any other instruction sets can also be received in different orders other than a sequential order or one instruction set followed by another. An instruction set i.e. Instruction Set etc. may be part of an application i.e. Software Application etc. for performing operations on a computing device i.e. Computing Device etc. . The application can run or execute on one or more processors i.e. Processors etc. or other processing devices. The first the second and or other instruction sets and or their portions can be part of a list i.e. Operation List etc. of recently executed instruction sets. In some aspects the list of recently executed instruction sets comprises instruction sets executed immediately prior to and including a currently executed instruction set. In other aspects the list of recently executed instruction sets comprises instruction sets executed immediately prior to but not including a currently executed instruction set. In further aspects the list of recently executed instruction sets comprises any instruction sets executed prior to a currently executed instruction set. In further aspects the list of recently executed instruction sets comprises any instruction sets executed at any time points. A plurality of lists of recently executed instruction sets can be received at various time points depending on where the application is in its operation. Therefore a list of recently executed instruction sets may correspond to a specific time point or stage in the application s operation. An instruction set may include one or more commands keywords symbols i.e. parentheses braces commas semicolons etc. instructions operators i.e. etc. variables values objects i.e. file table network connection game player etc. functions i.e. Function1 FIRST MIN MAX SQRT etc. parameters references thereto and or other components for performing an operation on a computing device. An instruction set may include source code bytecode intermediate code compiled interpreted or otherwise translated code runtime code assembly code machine code and or any other computer code. An instruction set can be compiled interpreted or otherwise translated into machine code or any intermediate code i.e. bytecode assembly code etc. . An instruction set can be received from memory i.e. Memory etc. hard drive or any other storage element or repository. An instruction set can be received over a network such as Internet local area network wireless network and or other network. An instruction set can also be received by an interface i.e. Acquisition and Modification Interface etc. for UAIE operating on a computing device. An instruction set can be received by or from a computing device i.e. Computing Device etc. or by any other computing device in general. An instruction set can be received by any element of the UAIE system. Receiving comprises any action or operation by or for an Acquisition and Modification Interface and or other disclosed elements.

At step the first and the second instruction sets are disassembled into instruction set portions. An instruction set portion i.e. instruction Set Portion etc. may include a command keyword symbol instruction operator variable value object function parameter reference thereto and or other component of an instruction set. Disassembling may also include a more detailed disassembling where some or all characters digits symbols and or other detailed elements of an instruction set are captured in instruction set portions. Disassembling may include identifying one or more instruction set portions. Disassembling may include identifying the type of instruction set. Disassembling may include recording any extra information i.e. Extra info etc. pertinent for facilitating UAIE functionalities. Extra information comprises contextual information such as time stamp or other time information geo spatial information environmental information observed information computed information analyzed information inferred information and or other information. Time stamp for example can indicate the time when an instruction set has been received or executed. Disassembling may also include storing instruction set portions of an instruction set and or any related extra information in a data structure such as Operation or in any other data structure or repository. Disassembling may further include identifying a user which entered or executed an instruction set or identifying a group to which the user belongs. Disassembling may also include assigning or associating an importance index i.e. Importance Index etc. or weight to one or more instruction sets or their portions. In some aspects disassembling can optionally be disabled or omitted in which case the first and the second instructions sets can be stored in knowledgebase. Disassembling comprises any action or operation by or for a Command Disassembler Knowledge Structuring Unit and or other disclosed elements.

At step the first and the second instruction sets or at least one of their portions are stored into a knowledgebase comprising a plurality of instruction sets or their portions. Knowledgebase i.e. Knowledgebase etc. comprises any number of instruction sets and or their portions which can be stored in various arrangements including data structures objects files tables databases. DBMSs memory structures and or other computer repositories. In some implementations the first and the second instruction sets or at least one of their portions can be stored in the knowledgebase so that the first instruction set or at least one of its portions is followed by the second instruction set or at least one of its portions. In other aspects no such arrangement or relationship between the first and the second instruction sets or at least one of their portions is required and the first and the second instruction sets or at least one of their portions can be stored in any other arrangement in the knowledgebase. In further aspects knowledgebase includes a number of knowledge cells where each knowledge cell i.e. Knowledge Cell etc. comprises a number of instruction sets and or their corresponding portions. In further aspects knowledgebase includes a number of instruction set sequences. For example a knowledge cell comprises a sequence of instruction sets or their portions in some designs. In further aspects knowledgebase includes a single long knowledge cell comprising all instruction sets and or their corresponding portions ever executed or executed in a specific time period i.e. month year etc. . In further aspects knowledgebase includes one or more long knowledge cells. In some aspects an instruction set and or its portions can be stored in a list i.e. Operation List etc. of recently executed instruction sets that can be used for knowledge cell creation or any other knowledge structuring. In one example a knowledge cell includes a number of instruction sets and or their portions. In another example a knowledge cell includes a number of Operations each comprising an instruction set and or its portions. In some aspects the most recent instruction sets i.e. the second instruction set etc. from the list of recently executed instruction sets may become anticipatory instruction sets in the corresponding knowledge cell whereas the least recent instruction sets i.e. the first instruction set etc. from the list of recently executed instruction sets may become comparative instruction sets in the corresponding knowledge cell. Instruction sets and or their portions can be compiled interpreted or otherwise translated into machine code or intermediate code i.e. bytecode assembly code etc. . The compiled interpreted or otherwise translated code can be associated with the original instruction sets and or their portions and stored in knowledgebase. In some embodiments knowledgebase includes instruction sets and or their portions from a computing device i.e. Computing Device etc. from or on which the instruction sets and or their portions are received or executed. In other embodiments knowledgebase includes instruction sets and or their portions from any number of computing devices. Knowledgebase or additional knowledgebases can also be populated to include user specific and or group specific information gathered with respect to the instruction set. Also stored in knowledgebase may be the importance index i.e. Importance Index etc. or weight assigned to or associated with an instruction set and or its portions. Any of the disclosed storing of instruction sets and or their portions can also be implemented for storing any related extra information into the knowledgebase or other data structures or repositories. Knowledgebase may include or be replaced with various artificial intelligence methods systems and or models for knowledge structuring storing and or representation such as deep learning supervised learning unsupervised learning neural networks i.e. Neural Network convolutional neural network recurrent neural network etc. search based optimization based logic and or fuzzy logic based tree graph other data structure based hierarchical symbolic and or sub symbolic evolutionary genetic multi agent any deterministic probabilistic statistical and or other methods systems and or models. Storing comprises any action or operation by or for a Knowledgebase Knowledge Cell Operation List Knowledge Structuring Unit and or other disclosed elements.

At step a new instruction set for performing an operation on the computing device is received. Step may include any action or operation described in Step as applicable.

At step the new instruction set is disassembled into instruction set portions. Step may include any action or operation described in Step as applicable.

At step at least one portion of the new instruction set are compared with at least one portion of the first instruction set from the knowledgebase. The at least one portion of the new instruction set can be compared as a single string of characters with at least one portion of the first instruction set in the knowledgebase. Comparison can also be implemented by treating each instruction set portion as a separate string to be matched independently. Instruction set portions comprising numeric values can be compared as numbers wherein a tolerance or threshold can be utilized in determining a match. The first instruction set may be one of plurality of instruction sets stored in the knowledgebase whose portions can be compared with portions of the new instruction set. Comparison can be implemented by matching all portions of the new instruction set with all portions of an instruction set stored in a knowledgebase. Comparison can also be implemented by matching all but one portion of the new instruction set with all but one portion of an instruction set stored in the knowledgebase. Comparison can also be implemented by matching all but two or more i.e. any threshold number can be used etc. portions of the new instruction set with all but two or more portions of an instruction set stored in the knowledgebase. In some aspects comparison can be implemented by comparing one or more portions of the new instruction set with one or more portions of the instruction sets from the knowledgebase factoring in an importance index i.e. Importance Index etc. or weight for each of the instruction set portions. As such matching some portions of the new instruction set or the instruction set from the knowledgebase may be more important than other portions having smaller importance or weight. In other aspects comparison may include semantic analysis that accounts for semantically equivalent variations of instruction set portions. For example a number of most recently used or executed instruction sets i.e. new instruction set etc. and or their portions from a list i.e. Operation List etc. of recently executed instruction sets can be compared i.e. Substantial Similarity Comparison etc. with comparative instruction Sets i.e. first instruction set etc. and or their portions from a knowledge cell in the knowledgebase. If a substantially similar pattern of most recently used or executed instruction sets from the list of recently executed instruction sets is found in comparative instruction sets of a knowledge cell i.e. Substantially Similar Knowledge Cell etc. subsequent instruction sets can be anticipated in anticipatory instruction sets i.e. second instruction set etc. of the knowledge cell. Any of the disclosed comparing of instruction sets or their portions can similarly be implemented for comparing any related extra i.e. Extra Information etc. or contextual information. Comparing comprises any action or operation by or for a Substantial Similarity Comparison Comparison Strictness Function Decision Making Unit and or other disclosed elements.

At step a determination is made that there is a substantial similarity between the new instruction set and the first instruction set from the knowledgebase. During the comparison of the at least one portion of the new instruction set and the at least one portion of the first instruction set a perfect match may be found. In some aspects plurality of perfect matches can be found between the new instruction set and instruction sets stored in knowledgebase. If the number of matches exceeds a threshold for maximum number of substantial similarity results strictness used for determining a substantial similarity match can be increased to include additional one or more instruction set portions in order to narrow down or reduce the number of perfect matching results. If no perfect match is found or if the number of matches is lower than a threshold for minimum amount of substantially similar results then strictness can be reduced to allow for finding a match that is imperfect. Strictness can be adjusted to allow for a match of more important as indicated by Importance Index or other importance ranking technique instruction set portions. The more important instruction set portions may include portions comprising function names or command words. For example a substantial similarity match can be found when function names or command words from the one or more portions of the new instruction set match function names or command words in one or more instruction sets in the knowledgebase even if one or more variable names or values are not matched. Substantial similarity match can also be found when all but one portion of the new instruction set match all but one portion of an instruction set in the knowledgebase. Similarly a substantial similarity match may be found when all but two or more i.e. any threshold number can be used etc. portions of the new instruction set match all but two or more portions of an instruction set in the knowledgebase. The one two or more non matched instruction set portions may be portions having smaller or smallest importance index i.e. Importance Index etc. or weight. In one example the non matched instruction set portions may include variable names values or other instruction set portions that may be less important than the function names or commands. Determination of substantial similarity between any instruction sets and or their portions may include any one of or any combination of substantial similarity determination or decision making techniques or embodiments discussed herein. In some aspects determining and or decision making may include various artificial intelligence methods systems and or models such as deep learning supervised learning unsupervised learning neural networks i.e. Neural Network convolutional neural network recurrent neural network etc. search based optimization based logic and or fuzzy logic based tree graph other data structure based hierarchical symbolic and or sub symbolic evolutionary genetic multi agent any deterministic probabilistic statistical and or other methods systems and or models. Any of the disclosed determining of substantial similarity with respect to instruction sets and or their portions can similarly be implemented with respect to any related extra i.e. Extra Information etc. or contextual information. Determining comprises any action or operation by or for a Substantial Similarity Comparison Comparison Strictness Function Decision Making Unit Substantially Similar Knowledge Cell and or other disclosed elements.

At step the second instruction set from the knowledgebase or at least one of its portions are modified based on context analysis. Modifying the second instruction set from the knowledgebase or at least one of its portions includes modifying a copy of the second instruction set or at least one of its portions stored in the knowledgebase without changing the stored second instruction set or at least one of its portions. In some aspects extra or contextual information can be recorded in the processing or disassembling of an instruction set and stored along with its instruction set portions in the knowledgebase. Extra or contextual information may generally include time stamp or other time information geo spatial information environmental information observed information computed information analyzed information inferred information and or other information. In some embodiments contextual information may include time stamp user specific information group user information version of application type of application i.e. web browser computer game word processing database. CAD CAM software etc. type of computing device type of user novice moderate skilled expert and or other information. In embodiments involving computer games or other such applications contextual information may include player s avatar s coordinates speed direction of movement and or other information. Contextual information may further include the types i.e. enemy player friend player rock forest pond building etc. of objects around player s avatar and their coordinates speeds directions of movement and or other information. Such contextual information can provide geo spatial and situational awareness and or capabilities. Furthermore in embodiments involving computer games or other such applications extra or contextual information can be as important as indicated by Importance Index or other importance ranking technique or more important than the instruction sets and or their portions. In yet other embodiments contextual information includes observed information such as an object s location i.e. coordinates etc. system time user or group specific information type or version of the application type of computing device and or other observable information. In yet other embodiments contextual information includes computed information that can be created or calculated from instruction set portions extra information observed information and or other information. For example an object s distance bearing i.e. angle or direction of movement etc. speed and or other information can be calculated or estimated from the object s coordinates by utilizing Pythagorean theorem Euclidean distance formula trigonometry and or other theorems formulas or disciplines. In yet other embodiments contextual information may include any component of an instruction set not captured as an instruction set portion any instruction set portion or component thereof that is not used in substantial similarity comparison and or any information about instruction sets that may be useful in anticipating future instruction sets. In general contextual information can be utilized to provide additional or as much information as possible for best anticipation of future instruction sets. In some aspects context analysis includes analysis of context in which an instruction set was performed. Context analysis may include computational functionalities to create compute or analyze information from instruction set portions extra or contextual information and or other available information. Context analysis may also include the functionality to draw inferences from any available contextual or other information. Context analysis may further include reading or extracting values or ranges of values from instruction set portions extra or contextual information and or other available information. Context analysis may further include semantic analysis to account for semantically equivalent variations in instruction set portions and or other information. Context analysis may further include obtaining any observable information such as system time user or group specific information type or version of the application type of computing device coordinates or other attributes of an object and or other observable information. In other aspects a context interpreter can be utilized to interpret or analyze contextual information. Context interpreter may perform an extra analysis step and it may attempt to capture some or all information steps and or elements that may have been omitted by other elements or steps of the overall system. In one example context interpreter can discover or read the values or ranges of values used in the new instruction set by extracting the values from its instruction set portions. The system can then automatically modify the second instruction set copy thereof and or its portions to include these values or ranges of values. In another example the second instruction set copy thereof and or its portions can be automatically modified to indicate the same object as was indicated in the new instruction set. In another example the second instruction set copy thereof and or its portions can be automatically modified to indicate the same variable as was indicated in the new instruction set and so on. In some embodiments the second instruction set copy thereof and or its portions can be automatically modified based on inferences drawn in context analysis. In other embodiments the second instruction set copy thereof and or its portions can be automatically modified based on any technique function or method such as for example function for projecting a path movement or trajectory of any objects or other items in a computer game for example. In some aspects the second instruction set copy thereof and or its portions can be automatically modified responsive to the determination at step . Automatic modification can optionally be disabled or omitted based on user preferences application type and or other factors in some implementations. Context analysis and or modifying comprise any action or operation by or for Extra Info Context interpreter Operation Modifier and or other disclosed elements.

At step the second or the modified second instruction set from the knowledgebase is executed on the computing device. In some embodiments the new instruction set can also be executed prior to executing the second instruction set. In one example the new instruction set can be executed when it is received by UAIE. In another example the new instruction set can be executed before it is received by UAIE or at any point independent of when it is received by UAIE. Execution may include performing by a processor or a computing device one or more operations defined by or corresponding to the new instruction set and the second or the modified second instruction set. Operations include any operation that can be performed on any computing device. In some embodiments involving form based applications examples of operations include writing into a text field selecting an option in a drop down menu checking a checkbox editing a text area clicking a button and or other operations. In some embodiments involving web browsers examples of operations include editing a URL box to visit a web page clicking a link saving a web page scrolling the view of a web page selecting and copying a portion of a web page creating a bookmark and or other operations. In some embodiments involving computer games and or 2D 3D applications examples of operations include moving a player s character or avatar picking up an object opening a door or other object utilizing an object shooting selecting an item and or other operations. In some embodiments involving word processing applications examples of operations include writing text editing text formatting text opening a text file saving a text file converting a text file publishing a text file and or other operations. In some embodiments involving database applications examples of operations include accessing modifying creating or deleting data table database and or other operations. One of ordinary skill in art will recognize that while all possible variations of operations on the computing device are too voluminous to list and limited only by a programmer s design and or user s utilization all possible operations are within the scope of this disclosure in various implementations.

At step the executed second or modified second instruction set is rated. In some embodiments a user can be provided with an option and the user may choose to rate a previously executed instruction set such as the second or the modified second instruction set. Rating can serve as evaluator or feedback of how well the system predicted an instruction set. Rating can be associated with an instruction set and stored in knowledgebase for improvement of future predictions or matching. Rating can similarly be implemented for a knowledge cell of which the second or the modified second instruction set may be part. In some aspects user rating can be implemented through displaying previously executed instruction sets along with their possible rating values i.e. 0 10 etc. via a graphical user interface GUI or other such means for user s viewing and consideration. User s rating action can be recorded and or affect a particular instruction set s rating which can be used for improved instruction set anticipation in the future. In other aspects rating may be automatic based on a particular function or method that measures how well an anticipated instruction set matched the desired operation. Depending on the type of application and or other factors rating can optionally be disabled or omitted in some implementations.

At step the execution of the executed second or modified second instruction set is canceled and the computing device is restored to a prior state. In some embodiments a user may decide that an executed instruction set such as the second or the modified second instruction set did not performed a desired operation. As such the user may decide to cancel the execution of the second or the modified second instruction set and restore the computing device or application to a prior state. Cancelation can be implemented through displaying a previously executed instruction set via a GUI or other such means for user s viewing and consideration. Restoring the computing device or application to a prior state may include prior saving the state of the computing device or application before the execution of a particular instruction set. Saving the state of the computing device or application comprises saving its variables data structures objects location of its current instruction and or other necessary elements in files databases environmental variables data structures objects and or other repositories. A canceling action can be recorded and or affect a particular instruction set s rating which can be used for improved instruction set anticipation in the future. Depending on the type of application and or other factors canceling and or restoring may optionally be disabled or omitted in some implementations.

Referring to the illustration shows an embodiment of a method for autonomous application operating based UAIE functionalities. The method can therefore be used on a computing device to enable autonomous operation of the application with partial minimal or no user input. In some embodiments the method can be used on a computing device operating an interface for UAIE that enables autonomous operation of the application with partial minimal or no user input. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step the new instruction set is executed on the computing device. Step may include any action or operation described in step of method as applicable. In some embodiments the new instruction set can be executed earlier in the process such as when it is received by UAIE. In other embodiments the new instruction set can be executed before it is received by UAIE or at any point independent of when it is received by UAIE in which case step can be omitted.

At step the second instruction set from the knowledgebase or at least one of its portions are modified based on context analysis. Step may include any action or operation described in step of method as applicable.

At step the second or the modified second instruction set from the knowledgebase or its portions are displayed on the computing device as options to be selected further modified or canceled. In some embodiments the previously automatically modified if this functionality was enabled and or if modification was performed etc. second instruction set a copy thereof and or its portions can be displayed on the computing device responsive to the determination at step . In some aspects the previously automatically modified second instruction set a copy thereof and or its portions can be displayed along with one or more anticipatory instruction sets and or their portions that may immediately follow the second instruction set. The system may include an editor graphical user interface GUI and or other means through which a user can view and or manually modify if user chooses the previously automatically modified second instruction set and or its portions. For example a GUI can be utilized to receive or read the previously automatically modified second instruction set and or its portions display i.e. via text fields drop down menus check boxes and other GUI components etc. the previously automatically modified second instruction set and or its portions and ask the user to manually modify the previously automatically modified second instruction set and or its portions by manipulating GUI components i.e. changing values in text fields selecting options in drop down menus etc. . In some embodiments extra or contextual information and or other information can be displayed and or modified by the user as well. In some aspects user selection of the previously automatically modified second instruction set may effectively serve as user s confirmation of his her intention to execute the previously modified second instruction set. In other aspects the user may choose not to approve or implement i.e. cancel etc. any anticipatory instruction sets including the previously modified second instruction set. In yet other aspects the user may choose to approve or implement some of the anticipatory instruction sets including the previously modified second instruction set and choose not to approve or implement i.e. cancel etc. others. Depending on the type of application and or other factors displaying selecting further modifying and or canceling can optionally be disabled or omitted in order to provide an uninterrupted operation of the application. For example a form based application may be suitable for implementing the user confirmation step whereas a game is less suitable for implementing such interrupting step due to the real time nature of game playing execution. Components and or features of the computing device or its operating system such as display keyboard pointing device touchscreen microphone camera video camera speech recognition sound player video player tactile input output device and or other components features or applications can be utilized to implement the displaying selecting further modifying and or canceling of the previously automatically modified second instruction set and or its portions. Displaying selecting further modifying and or canceling comprise any action or operation by or for Confirmation Unit and or other disclosed elements. In some aspects step may include any action or operation described in steps and of method as applicable.

At step the second or the modified second instruction set from the knowledgebase is executed on the computing device. Step may include any action or operation described in step of method as applicable.

Referring to the illustration shows an embodiment of a method for learning an application s operations based UAIE functionalities. The method can therefore be used on a computing device to structure and or store knowledge of an application s operations that can be used for anticipation of the application s future operations or autonomous application operating. In some embodiments the method can be used on a computing device operating an interface for UAIE to structure and or store knowledge of an application s operations that can be used for anticipation of the application s future operations or autonomous application operating. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step a plurality of recently executed instruction sets are received the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set the plurality of recently executed instruction sets for performing operations on a computing device. At step at least one extra information associated with the plurality of recently executed instruction sets are received. At step the plurality of recently executed instruction sets are disassembled into instruction set portions. At step portions of comparative instruction sets and portions of anticipatory instruction sets are stored into a knowledgebase the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets wherein the comparative instruction sets include the least recently executed instruction sets of the plurality of recently executed instruction sets and the anticipatory instruction sets include the most recently executed instruction sets of the plurality of recently executed instruction sets. At step the at least one extra information associated with the comparative instruction sets and the at least one extra information associated with the anticipatory instruction sets are store into the knowledgebase.

Referring to the illustration shows an embodiment of a method for anticipating an application s operations based UAIE functionalities. The method can therefore be used on a computing device to anticipate an application s operations from stored knowledge of the application s operations. In some embodiments the method can be used on a computing device operating an interface for UAIE to anticipate an application s operations from stored knowledge of the application s operations. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step a knowledgebase is accessed that stores portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets the knowledgebase further stores at least one extra information associated with the comparative instruction sets and at least one extra information associated with the anticipatory instruction sets wherein the comparative and the anticipatory instruction sets for performing operations on a computing device. At step new instruction sets for performing operations on the computing device are received. At step at least one extra information associated with the new instruction sets are received. At step portions of the new instruction sets are compared with portions of the comparative instruction sets in the knowledgebase. At step at least one extra information associated with the new instruction sets are compared with at least one extra information associated with the comparative instruction sets in the knowledgebase. At step a determination is made that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the knowledgebase. At step one or more anticipatory instruction sets in the knowledgebase are anticipated.

Referring to the teaching presented by the disclosure can be implemented to include various artificial intelligence methods systems and or models instead of or in addition to the ones previously described. UAIE is independent of the artificial intelligence method system and or model used and any method system and or model can be utilized to facilitate functionalities described herein. Examples of these methods systems and or models include deep learning supervised learning unsupervised learning neural networks i.e. Neural Network convolutional neural network recurrent neural network etc. search based logic and or fuzzy logic based optimization based tree graph other data structure based hierarchical symbolic and or sub symbolic evolutionary genetic multi agent deterministic probabilistic statistical and or other methods systems and or models.

In one example shown in Model A in UAIE Artificial Intelligence Unit and or other elements of the disclosure may include a neural network also referred to as artificial neural network etc. . As such machine learning knowledge representation or structure pattern recognition decision making and or other artificial intelligence functionalities may include a network of Nodes also referred to as neurons in the context of neural networks etc. and Connections similar to that of a brain. Node can store any data object data structure and or other item or reference thereto. Node may also include a function for transforming or manipulating any data object data structure and or other item. Examples of such transformation function include mathematical functions i.e. addition subtraction multiplication divisions etc. object manipulation functions i.e. creating an object modifying an object deleting an object appending objects etc. data structure manipulation functions i.e. creating a data structure modifying a data structure deleting a data structure creating a data field modifying a data field deleting a data field etc. and or other transformation functions. A computational model can be utilized to compute values from inputs based on a pre programmed or learned function or method. For example a neural network may include one or more input neurons that can be activated by inputs such as Operations or Instruction Sets or their Instruction Set Portions . Activations of these neurons can then be passed on weighted and transformed by a function to other neurons. This process can be repeated until one or more output neurons is are activated such as neurons comprising anticipatory Operations or Instruction Sets or their Instruction Set Portions . Artificial neural network types may vary from those with only one or two layers of single direction logic to multi input many directional feedback loops and layers. Neural network systems can use weights to change the parameters of the throughput and the varying connections among the neurons. As such an artificial neural network can be autonomous i.e. facilitate autonomous Software Application s operation etc. and learn by input from its designer environment outside teacher and or self teaching from written in rules. An exemplary embodiment of Neural Network is described later.

In another example shown in Model B in UAIE Artificial Intelligence Unit and or other elements of the disclosure may include a tree or a tree like structure. As such machine learning knowledge representation or structure pattern recognition decision making and or other artificial intelligence functionalities may include Nodes and Connections i.e. references edges etc. similar to that of a tree. In some aspects a tree data structure comprises a collection of Nodes where a Node may include a value and or Connections i.e. references edges etc. to other or children Nodes . Trees can be utilized as one of the predictive modeling approaches used in machine learning. In some aspects a decision tree can be utilized as a predictive model that can map observations about an item to conclusions about the item s target value. In other aspects a decision tree can be used to represent decisions and decision making. In yet other aspects a decision tree may describe data instead of decisions and it can be an input for decision making. In yet other aspects a decision tree can be utilized as a model that may predict the value of a target variable based on several input variables where each interior node corresponds to an input variable and each edge to a children node corresponds to a possible value of the input variable and where each leaf node may represent a value of the target variable given the values of the input variables represented by the path from the root node to the leaf node. A decision tree may include various types of nodes such as decision nodes chance nodes end nodes and or other types of nodes. Each node may include any data structure or object or a reference thereto such as array list linked list doubly linked list queue tree heap graph map grid matrix multi dimensional matrix table database DBMS file and or any other type or form of a data structure.

In a further example shown in Model C in UAIE Artificial Intelligence Unit and or other elements of the disclosure may include a hierarchical structure or system. As such machine learning knowledge representation or structure pattern recognition decision making and or other artificial intelligence functionalities may include a structure of Nodes and Connections organized as a hierarchy. A hierarchical structure may include nodes in a tree like structure although data structures other than a tree can be used. In some aspects instructions tasks and or goals to be accomplished may flow down the hierarchy s layers from superior nodes to subordinate nodes whereas results and or other information may flow up the hierarchy s layers from subordinate to superior nodes. Nodes can also communicate with their siblings.

In yet another example UAIE Artificial Intelligence Unit and or other elements of the disclosure may include a search based method system and or model. As such machine learning knowledge representation or structure pattern recognition decision making and or other artificial intelligence functionalities may include searching through a collection of possible solutions. For example a search method can search through a list tree graph or other data structure i.e. Knowledgebase etc. that includes goals i.e. Operations or Instruction Sets and or sub goals i.e. Instruction Set Portions etc. to find a path to a target goal i.e. anticipatory Operations or instruction Sets or Instruction Set Portions etc. where each step may include application of a function i.e. Substantial Similarity Comparison etc. or rule i.e. inference rule logic rule probability rule statistical rule etc. . A search method may use heuristics to limit the search for solutions into a smaller sample size by eliminating choices that are unlikely to lead to the goal. Heuristics provide a best guess solution. A search can also include optimization. For example a search may begin with a guess and then refine the guess incrementally until no more refinements can be made. In a further example UAIE Artificial Intelligence Unit and or other elements of the disclosure may include logic based method system and or model. As such machine learning knowledge representation or structure pattern recognition decision making and or other artificial intelligence functionalities can use formal or another type of logic. Logic based systems may involve inferences or deriving conclusions from a set of premises. As such a logic based system can extend a knowledgebase automatically using inferences. Examples of the types of logic that can be utilized include propositional or sentential logic that comprises logic of statements which can be true or false first order logic that may allow the use of quantifiers and predicates and that can express facts about objects their properties and their relations with each other fuzzy logic that may allow degrees of truth to be represented as a value between 0 and 1 rather than simply true 1 or false 0 which can be used for uncertain reasoning subjective logic that comprises a type of probabilistic logic that may take uncertainty and belief into account which can be suitable for modeling and analyzing situations involving uncertainty incomplete knowledge and different world views and or other types of logic. Any logic based method system and or model can be utilized herein that can take inputs such as Operations or Instruction Sets or their Instruction Set Portions and produce outputs such as anticipatory Operations or Instruction Sets or their Instruction Set Portions . In a further example UAIE Artificial Intelligence Unit and or other elements of the disclosure may include a probabilistic method system and or model. As such machine learning knowledge representation or structure pattern recognition decision making and or other artificial intelligence functionalities can be implemented to operate with incomplete or uncertain information where probabilities may affect outcomes. Bayesian network among other models is an example of a tool for general artificial intelligence functionalities such as reasoning learning planning perception and or others. Probabilistic methods can also be used for functionalities such as filtering prediction smoothing and finding explanations for streams of data thereby helping to analyze processes that occur over time and or other functionalities. Any probabilistic method system and or model can be utilized herein that can take inputs such as Operations or Instruction Sets or their Instruction Set Portions and produce outputs such as anticipatory Operations or Instruction Sets or their Instruction Set Portions . One of ordinary skill in art will understand that while all possible variations of artificial intelligence methods systems and or models are too voluminous to list all of these methods systems and or models are within the scope of this disclosure in various implementations. One of ordinary skill in art will also recognize that an intelligent system or agent may solve a specific problem by using any approach that works such as for example some systems or agents can be symbolic and logical some can be sub symbolic neural networks some can be deterministic or probabilistic some can be hierarchical some may include searching techniques while others may use other or a combination of approaches. For example any artificial intelligence method system and or model can be utilized that may accept inputs such as Operations or Instruction Sets and or their Instruction Set Portions and produce outputs such as anticipatory Operations or Instruction Sets and or their Instruction Set Portions that may ultimately affect or control Software Application s operation.

Referring to Artificial Intelligence Unit comprising Neural Network is illustrated. In some embodiments Artificial Intelligence Unit includes interconnected Command Disassembler Operation List Knowledge Structuring Unit Neural Network Decision making Unit Confirmation Unit and Command Assembler . Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments.

Referring to an embodiment of Knowledge Structuring Unit learning Operations or Instruction Sets utilizing Neural Network is illustrated. Neural Network includes a number of neurons or Nodes interconnected by Connections as previously described. Operations are shown instead of Nodes to simplify the illustration as Node includes Operation for example. Therefore Operations and Nodes can be used interchangeably herein depending on context. Also to simplify description a mention or reference to Operation includes a reference to instruction Set from which the Operation originates as previously described. One of ordinary skill in art will understand that Node may include other elements and or functionalities instead of or in addition to Operation . In some designs Neural Network comprises a number of Layers each of which may include one or more Operations . Operations in successive Layers can be connected by Connections . Connection may include occurrence count and weight as described later. It should be understood that in some embodiments Operations in one Layer of Neural Network need not be connected only with Operations in a successive Layer but also in any other Layer thereby creating shortcuts i.e. shortcut Connections etc. through Neural Network . For example creating a shortcut Connection can be implemented by performing Substantial Similarity Comparisons of an Operation from Operation List with Operations in more than one Layer when applying i.e. storing copying etc. the Operation from Operation List onto Neural Network . Once created shortcut Connections enable a wider variety of Operations to be considered when selecting a path through Neural Network . An Operation can also be connected to itself such as for example in recurrent neural networks. In general any Operation can be connected with any other Operation anywhere else in Neural Network . In further embodiments back propagation of any data or information can be utilized. In one example back propagation of comparison accuracy indexes of compared Operations in a path through Neural Network can be implemented. In another example back propagation of errors can be implemented. Such back propagations can then be used to adjust occurrence counts and or weights of Connections for better future predictions for example. Any other back propagation can be implemented for other purposes. Any combination of Nodes i.e. Nodes comprising Operations etc. Connections Layers and or other elements or techniques can be implemented in alternate embodiments. Neural Network may include any type or form of a neural network known in art such as a feed forward neural network a back propagating neural network a recurrent neural network a convolutional neural network and or others including a custom neural network.

In some embodiments Knowledge Structuring Unit may apply i.e. copy store etc. the most recent Operations i.e. Operation n Operation n 1 etc. from Operation List onto anticipatory Layers i.e. Layer n 2 Layer n 1 etc. of Neural Network and apply the least recent Operations i.e. Operation n 2 Operation n 3 Operation n 4 etc. from Operation List onto comparative Layers i.e. Layer n Layer n 1 Layer n 2 etc. of Neural Network for example. The term apply or applying may refer to storing copying inserting or other similar action therefore these terms may be used interchangeably herein depending on context. Specifically for example Knowledge Structuring Unit can apply Operation n from Operation List onto Layer n 2 of Neural Network apply Operation n 1 from Operation List onto Layer n 1 of Neural Network apply Operation n 2 from Operation List onto Layer n of Neural Network and so forth. Therefore Operations with an order number greater than n may become anticipatory Operations in their respective anticipatory Layers and the rest of the Operations may become comparative Operations in their respective comparative Layers although this particular split can differ in alternate embodiments. Also as indicated by the up and down vertical dotted arrows application of Operation n from Operation List can start at any Layer of Neural Network . This way the number of comparative and anticipatory Layers can be adjusted for a particular application based on the type of Software Application experience testing inquiry analysis synthesis or other techniques. The number of comparative and anticipatory Layers can be determined or set by a user by UAIE administrator or automatically by the system based on such knowledge or information. Any number of comparative and any number of anticipatory Layers or Operations therein can be utilized in Neural Network . In effect Neural Network stores Software Application s operations i.e. Operations or Instruction Sets where for example Layer n Layer n 1 and Layer n 2 can later be used for comparison i.e. comparative Layers etc. with the then Software Application s recent operations i.e. including current etc. and Layer n 1 and Layer n 2 can later be used for anticipation i.e. anticipatory Layers etc. of Software Application s future or subsequent operations. It should be noted that n m and or other such letters or indicia in any of the figures may be different numbers in different elements even where the elements are depicted in the same figure. In general n m and or other such letters or indicia may follow the immediate sequence and or context where they are indicated. Therefore an Operation from Operation List having a same letter or indicia as an Operation from Neural Network may be a different Operation . In one example Operation n from Operation List may be different than any Operation n from Neural Network . In another example Operation n 2 from Operation List may be different than any Operation n 2 from Neural Network . Also Operations in a same Layer may be different Operations belonging to that Layer . In one example Operations n 2 are different Operations belonging to Layer n 2. In another example Operations n 1 are different Operations belonging to Layer n 1.

In some embodiments Knowledge Structuring Unit receives a current Operation List and applies the least recent Operations from Operation List onto Neural Network first and the most recent Operations from Operation List last thereby implementing learning of Operations from Operation List . This is an example of how Operations from Operation List may be processed or applied from the least recent one to the most recent one and or how Neural Network or a portion thereof can be traversed forward in the learning process. Knowledge Structuring Unit can perform Substantial Similarity Comparisons of an Operation in Operation List with one or more Operations in a corresponding Layer of Neural Network . If substantially similar Operation is found in the corresponding Layer Knowledge Structuring Unit may update occurrence count and weight of Connection to that Operation from an Operation in a prior Layer i.e. prior lower numbered Layer etc. and update any other Connections of the Operation in the prior Layer . On the other hand if substantially similar Operation is not found Knowledge Structuring Unit may insert i.e. copy store etc. Operation from Operation List into the corresponding Layer of Neural Network and create a Connection to the inserted Operation from an Operation in a prior Layer i.e. prior lower numbered Layer etc. including assigning an occurrence count to the new Connection calculating a weight of the new Connection and updating any other Connections of the Operation in the prior Layer . Furthermore inserting an Operation into a Layer of Neural Network may also include creating a Connection between the inserted Operation and an Operation in a subsequent i.e. subsequent higher numbered Layer etc. Layer thereby fully connecting the inserted Operation . Creating the Connection between the inserted Operation and an Operation in the subsequent Layer may be performed after the next Substantial Similarity Comparison when the target Operation from the subsequent Layer is determined.

In one example Knowledge Structuring Unit can perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit finds a substantially similar match between Operation and Operation Knowledge Structuring Unit may create a Connection between Operation and an Operation in a prior Layer none in this example if the Operation in the prior Layer is newly inserted the created Connection having occurrence count of 1 and weight of 1. If the Operation in the prior Layer is pre existing i.e. not newly inserted etc. Knowledge Structuring Unit may update occurrence count and weight of a Connection between Operation and the Operation in the prior Layer and update weights of any other Connections originating from the Operation in the prior Layer as later described. Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit does not find a substantially similar match Knowledge Structuring Unit may insert Operation into Layer and copy Operation into the inserted Operation . Knowledge Structuring Unit may also create Connection between Operation and Operation with occurrence count of 1 and weight calculated based on the occurrence count as later described. Knowledge Structuring Unit may also update weights of other Connections originating from Operation to account for the newly created Connection as later described. Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit finds a substantially similar match between Operation and Operation Knowledge Structuring Unit may create Connection between Operation and Operation with occurrence count of 1 and weight of 1. Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit does not find a substantially similar match Knowledge Structuring Unit may insert Operation into Layer and copy Operation into the inserted Operation . Knowledge Structuring Unit may also create Connection between Operation and Operation with occurrence count of 1 and weight calculated based on the occurrence count as later described. Knowledge Structuring Unit may also update weights of other Connections originating from Operation to account for the newly created Connection as later described. Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit does not find a substantially similar match Knowledge Structuring Unit may insert Operation into Layer and copy Operation into the inserted Operation . Knowledge Structuring Unit may also create Connection between Operation and Operation with occurrence count of 1 and weight of 1. As indicated by the up and down dotted arrows Operation List can be aligned differently with Layers of Neural Network thereby adjusting the split between comparative and anticipatory Layers in alternate embodiments. Therefore application of any additional Operations from Operation List onto Layers of Neural Network follows the same logic or process as above described.

Substantial Similarity Comparison used in some embodiments involving Neural Network comprises the functionality for comparing or matching an Operation or Instruction Set from Operation List with Operation or Instruction Set from Neural Network and or other functionalities. The rules for substantial similarity or substantial similarity match can be defined based on the type of Software Application experience testing inquiry analysis synthesis or other techniques. As such the rules of Substantial Similarity Comparison can be set by a user by UAIE administrator or automatically by the system based on such experience knowledge and or input. All previously described features functionalities and embodiments of Substantial Similarity Comparison can be utilized in embodiments of UAIE comprising Neural Network as applicable.

In some aspects Substantial Similarity Comparison can determine total equivalence when all Instruction Set Portions and or Extra Info of the compared Operations or Instructions Sets match. If total equivalence is not found Substantial Similarity Comparison may attempt to determine substantial similarity between the compared Operations or Instructions Set . In one example substantial similarity can be achieved when all but one Instruction Set Portion and or Extra Info of the compared Operations or Instruction Sets match. In another example substantial similarity can be achieved when all but two three or more any threshold number can be used etc. Instruction Set Portions and or Extra Info of the compared Operations or instruction Sets match. The number of allowable non matching Instruction Set Portions and or Extra info can be defined by a user by UAIE administrator or automatically by the system.

In further aspects Substantial Similarity Comparison can determine substantial similarity in terms of matches in more important Instruction Set Portions and or Extra Info thereby tolerating mismatches in less important Instruction Set Portions and or Extra Info . In one example Substantial Similarity Comparison can determine substantial similarity in terms of matches in commands functions objects and or parameters thereby tolerating mismatches in variable names and or values. Importance of an Instruction Set Portion and or Extra Info may be indicated by the previously described Importance Index or by another importance ranking technique. In some designs Substantial Similarity Comparison can be configured to omit any Instruction Set Portions and or Extra Info from the comparison. In one example some or all instruction Set Portions and or Extra Info containing values can be omitted. In another example some or all Instruction Set Portions and or Extra Info containing operators or other components can be omitted. In another example some or all Extra Info can be omitted. In yet another example i.e. context reliant applications etc. some or all Instruction Set Portions can be omitted.

In yet other aspects Substantial Similarity Comparison may include Comparison Strictness Function that comprises the functionality to define appropriately strict rules for determining substantial similarity between the compared Operations or Instruction Sets . All previously described features functionalities and embodiments of Comparison Strictness Function can be utilized in embodiments of UAIE comprising Neural Network as applicable. In one example Comparison Strictness Function can set reset and or adjust the strictness of the rules for finding or determining substantial similarity between the compared Operations or Instruction Sets thereby fine tuning Substantial Similarity Comparison so that the rules for determining substantial similarity are appropriately strict.

All previously described features functionalities and embodiments related to Substantial Similarity Comparison such as usage of Extra Info i.e. time stamps contextual information etc. usage of contextual information usage of Importance Index usage of Comparison Accuracy Index performing semantic analysis analyzing context in which Instruction Sets or Operations have been performed creating or analyzing computed information and or drawing inferences from any available contextual computed or other information can similarly be utilized in embodiments involving Neural Network .

Referring to and exemplary embodiments of updating weights of Connections are illustrated. In some aspects Knowledge Structuring Unit may apply the least recent Operations from Operation List onto Neural Network first and the most recent Operations from Operation List last i.e. apply Operations from the least recent one to the most recent one etc. as previously described. As shown for example in Operation is connected to Operation and Operation by Connection and Connection respectively. Operation may reside in one Layer of Neural Network whereas Operation and Operation may reside in another Layer . Each of Connection and Connection may include number of occurrences and weight. The number of occurrences may track or store the number of observations that an Operation or substantially similar Operation was followed by another Operation or substantially similar Operation indicating a connection or relationship between them. For example Operation or substantially similar Operation to Operation was followed by Operation or substantially similar Operation to Operation 10 times as indicated in the number of occurrences of Connection . Also Operation or substantially similar Operation to Operation was followed by Operation or substantially similar Operation to Operation 15 times as indicated in the number of occurrences of Connection . The weight of Connection can be calculated or determined as the number of occurrences of Connection divided by the sum of occurrences of all connections i.e. Connection and Connection etc. originating from Operation . Therefore the weight of Connection can be calculated or determined as 10 10 15 0.4 for example. Also the weight of Connection can be calculated or determined as 15 10 15 0.6 for example. Therefore the sum of weights of Connection Connection and or any other Connections originating from Operation may equal to 1 or 100 . As shown for example in in the case that Operation is inserted and an observation is made that Operation follows Operation Connection can be created between Operation and Operation . The occurrence count of Connection can be set to 1 and weight determined as 1 10 15 1 0.038. The weights of all other connections i.e. Connection Connection etc. originating from Operation may be updated to account for the creation of Connection . Therefore the weight of Connection can be updated as 10 10 15 1 0.385. The weight of Connection can also be updated as 15 10 15 1 0.577. As shown for example in in the case that an additional occurrence of Connection is observed i.e. Operation followed Operation etc. occurrence count of Connection and weights of all connections i.e. Connection Connection and Connection etc. originating from Operation may be updated to account for this observation. The occurrence count of Connection can be increased by 1 and its weight updated as 11 11 15 1 0.407. The weight of Connection can also be updated as 15 11 15 1 0.556. The weight of Connection can also be updated as 1 11 15 1 0.037.

In some embodiments instead of applying Operations from Operation List onto Neural Network individually as previously described Knowledge Structuring Unit can store i.e. copy insert etc. some or all Operations from Operation List into Neural Network collectively as a separate sequence or path. Operations in such separate sequence or path may not be cross connected with Operations in other sequences or paths. In such embodiments Substantial Similarity Comparison can be utilized to compare Operations from Operation List with Operations from Neural Network to find a separate sequence or path in the Neural Network comprising Operations that are substantially similar to Operations from Operation List . Any features functionalities and embodiments of the later described Decision making Unit can be utilized in finding such separate sequence or path. If substantially similar separate sequence or path is found storing i.e. copying inserting etc. Operations from Operation List into Neural Network can optionally be omitted. For example if Operations in a separate sequence or path through Neural Network are found to be nearly identical or substantially similar i.e. with a high degree of similarity etc. to Operations in Operation List storing i.e. copying inserting etc. Operations from Operation List into Neural Network may not add much or any additional knowledge to Neural Network . Therefore storing the Operations from Operation List into Neural Network can be omitted to save storage resources and limit the number of Operations that may later need to be processed or compared. Conversely for example if Operations in none of the separate sequences or paths through Neural Network are found to be substantially similar to Operations in Operation List Knowledge Structuring Unit can store into Neural Network a new separate sequence or path comprising the Operations from Operation List thereby implementing learning of Operations from Operation List . Any features functionalities and embodiments of Substantial Similarity Comparison Importance Index Comparison Accuracy Index and or other disclosed elements can be utilized to facilitate the determination whether to apply or store Operations from Operation List onto into Neural Network individually or collectively.

There may be advantages to storing some or all Operations from Operation List into Neural Network collectively as a separate sequence or path. In some aspects storing Operations from Operation List into Neural Network collectively as a separate sequence or path enables the system to decide whether to store the entire Operation List into Neural Network or not store the Operation List at all i.e. all or nothing etc. . In other aspects storing Operations from Operation List into Neural Network collectively as a separate sequence or path eliminates or reduces the need to keep track of and use occurrence counts and weights of Connections since an Operation stored in a separate sequence or path is connected only with a previous and subsequent Operation in the sequence or path. In further aspects storing Operations from Operation List into Neural Network collectively as a separate sequence or path may resolve a potential issue of one or more Connections in Neural Network becoming so frequent and dominant that selecting a path through Neural Network would frequently default to go through these Connections thereby not allowing alternative paths to be considered or selected.

Referring to an embodiment of Knowledge Structuring Unit learning Operations or Instruction Sets utilizing Neural Network is illustrated. In some aspects Knowledge Structuring Unit receives a current Operation List and implements a combination of applying Operations from Operation List individually and storing Operations from Operation List collectively onto into Neural Network . For example some Operations from Operation List can be applied individually onto corresponding Layers of Neural Network whereas other Operations from Operation List can be stored collectively into corresponding Layers of Neural Network thereby creating a partially separate sequence or path in Neural Network . Specifically for instance the least recently used or executed Operations i.e. Operation n 2 Operation n 3 Operation n 4 etc. from Operation List can be applied individually onto comparative Layers of Neural Network whereas the most recently used or executed Operations i.e. Operation n Operation n 1 etc. from Operation List can be stored collectively into anticipatory Layers of Neural Network . In such implementations Operations in comparative Layers of Neural Network may be interconnected with other Operations whereas Operations in anticipatory Layers of Neural Network may be stored in their own separate sequences or paths as described in an exemplary embodiment below. Any other combination of applying and storing Operations from Operation List individually or collectively onto into Neural Network can be implemented in alternate embodiments. It should be understood that in addition to the combinations of applying and storing Operations from Operation List individually and collectively onto into Neural Network each of these techniques can be implemented solely for the entire Neural Network without combining it with the other technique or other techniques in general. For example only individual applying or only collective storing of Operations from Operation List onto into Neural Network can be implemented.

In some embodiments Knowledge Structuring Unit receives a current Operation List and applies stores the most recent Operations from Operation List onto into Neural Network first and the least recent Operations from Operation List last thereby implementing learning of Operations from Operation List . This is an example of how Operations from Operation List may be processed or applied stored from the most recent one to the least recent one and or how Neural Network or a portion thereof can be traversed backward in the learning process. Also Knowledge Structuring Unit may store the most recent Operations from Operation List into corresponding anticipatory Layers of Neural Network collectively as separate sequences or paths and apply the least recent Operations from Operation List onto corresponding comparative Layers of Neural Network individually for example. Storing the most recent Operations from Operation List into corresponding anticipatory Layers of Neural Network collectively as separate sequences or paths can be implemented by performing Substantial Similarity Comparisons to compare the most recent Operations from Operation List with Operations from anticipatory Layers of Neural Network to find a separate sequence or path in the anticipatory Layers of Neural Network comprising Operations that are substantially similar to the most recent Operations from Operation List . If such separate sequence or path is not found Knowledge Structuring Unit can store into anticipatory Layers of Neural Network a new separate sequence or path comprising the most recent Operations from Operation List as previously described. Applying the least recent Operations from Operation List onto corresponding comparative Layers of Neural Network individually can be implemented by performing Substantial Similarity Comparisons of a least recent Operation in Operation List with one or more Operations in a corresponding comparative Layer of Neural Network . If substantially similar Operation is found in the corresponding comparative Layer Knowledge Structuring Unit may update occurrence count and weight of Connection from that Operation to an Operation in a subsequent Layer i.e. subsequent higher numbered Layer etc. and update weights of any other Connections pointing to the Operation in the subsequent Layer . On the other hand if substantially similar Operation is not found Knowledge Structuring Unit may insert i.e. copy store etc. the Operation from Operation List into the corresponding comparative Layer of Neural Network and create a Connection from the inserted Operation to an Operation in a subsequent Layer i.e. subsequent higher numbered Layer etc. including assigning an occurrence count to the new Connection calculating a weight of the new Connection and updating any other Connections pointing to the Operation in the subsequent Layer . Furthermore inserting an Operation into a Layer of Neural Network may also include creating a Connection between the inserted Operation and an Operation in a prior Layer i.e. prior lower numbered Layer etc. thereby fully connecting the inserted Operation . Creating the Connection between the inserted Operation and an Operation in the prior Layer may be performed after the next Substantial Similarity Comparison when the target Operation from the prior Layer is determined.

In one example Knowledge Structuring Unit can perform Substantial Similarity Comparisons of Operation and Operation from Operation List with separate sequences or paths of Operations in the corresponding Layer and Layer . In the case that Knowledge Structuring Unit does not find a separate sequence or path of Operations in anticipatory Layers that substantially match Operation and Operation Knowledge Structuring Unit may insert Operation into Layer and copy Operation into the inserted Operation and insert Operation into Layer and copy Operation into the inserted Operation . Knowledge Structuring Unit may also create Connection between Operation and an Operation with occurrence count of 1 and weight of 1. Occurrence count and weight can optionally be omitted since Connection is the only connection between Operation and Operation . Storing any additional Operations from Operation List into anticipatory Layers of Neural Network collectively as separate sequences or paths follows the same logic or process as the above described. Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit does not find a substantially similar match Knowledge Structuring Unit may insert Operation into Layer and copy Operation into the inserted Operation . Knowledge Structuring Unit may also create Connection between Operation and Operation with occurrence count of 1 and weight of 1. Occurrence count and weight can optionally be omitted since Connection is the only connection between Operation and Operation . Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit finds a substantially similar match between Operation and Operation Knowledge Structuring Unit may create a Connection between Operation and Operation with occurrence count of 1 and weight of 1. Knowledge Structuring Unit can then perform Substantial Similarity Comparisons of Operation from Operation List and Operations in the corresponding Layer . In the case that Knowledge Structuring Unit finds a substantially similar match between Operation and Operation Knowledge Structuring Unit may increase by 1 occurrence count of Connection between Operation and Operation and calculate weight of Connection based on its occurrence count as later described. Knowledge Structuring Unit may also update weights of any other Connections pointing to Operation as later described. As indicated by the up and down dotted arrows Operation List can be aligned differently with Layers of Neural Network thereby adjusting the split between comparative and anticipatory Layers in alternate embodiments. Therefore applying storing any additional Operations from Operation List onto into Layers of Neural Network follows the same logic or process as the above described.

Referring to and exemplary embodiments of updating weights of Connections are illustrated. In some aspects Knowledge Structuring Unit may apply the most recent Operations from Operation List onto Neural Network first and the least recent Operations from Operation List last i.e. apply Operations from the most recent one to the least recent one etc. for example. As shown for example in Operation is connected to Operation and Operation by Connection and Connection respectively. Operation may reside in one Layer of Neural Network whereas Operation and Operation may reside in another Layer . Each of Connection and Connection may include number of occurrences and weight. The number of occurrences may track or store the number of observations that an Operation or substantially similar Operation was preceded by another Operation or substantially similar Operation indicating a connection or relationship between them. For example Operation or substantially similar Operation to Operation was preceded by Operation or substantially similar Operation to Operation 10 times as indicated in the number of occurrences of Connection . Also Operation or substantially similar Operation to Operation was preceded by Operation or substantially similar Operation to Operation 15 times as indicated in the number of occurrences of Connection . The weight of Connection can be calculated or determined as the number of occurrences of Connection divided by the sum of occurrences of all connections i.e. Connection and Connection etc. pointing to Operation . Therefore the weight of Connection can be calculated or determined as 10 10 15 0.4 for example. Also the weight of Connection can be calculated or determined as 15 10 15 0.6 for example. Therefore the sum of weights of Connection Connection and or any other Connections pointing to Operation may equal to 1 or 100 . As shown for example in in the case that Operation is inserted and an observation is made that Operation precedes Operation Connection can be created between Operation and Operation . The occurrence count of Connection can be set to 1 and weight determined as 1 10 15 1 0.038. The weights of all other connections i.e. Connection Connection etc. pointing to Operation may be updated to account for the creation of Connection . Therefore the weight of Connection can be updated as 10 10 15 1 0.385. The weight of Connection can also be updated as 15 10 15 1 0.577. As shown for example in in the case that an additional occurrence of Connection is observed i.e. Operation preceded Operation etc. occurrence count of Connection and weights of all connections i.e. Connection Connection and Connection etc. pointing to Operation may be updated to account for this observation. The occurrence count of Connection can be increased by 1 and its weight updated as 11 11 15 1 0.407. The weight of Connection can also be updated as 15 11 15 1 0.556. The weight of Connection can also be updated as 1 11 15 1 0.037.

Referring to an embodiment is illustrated of Decision making Unit anticipating Operations or Instruction Sets utilizing Neural Network . In some aspects the least recent Operations from Operation List were applied onto Neural Network first and the most recent Operations from Operation List were applied onto Neural Network last i.e. Operations were applied from the least recent one to the most recent one etc. in the previously described learning process. In some implementations Decision making Unit can perform Substantial Similarity Comparisons of a number of most recently used or executed Operations i.e. Operation n Operation n 1 Operation n 2 etc. from Operation List with Operations from corresponding comparative Layers i.e. Layer n Layer n 1 Layer n 2 etc. of Neural Network . If a substantially similar pattern of most recently used or executed Operations from Operation List is found in comparative Layers of Neural Network subsequent Operations can be anticipated in Operations i.e. Operation n 1 Operation n 2 etc. from anticipatory Layers i.e. Layer n 1 Layer n 2 etc. of Neural Network .

Various techniques inputs and or parameters can be utilized in selecting Operations in a path through comparative Layers of Neural Network . In some aspects Decision making Unit can start by determining substantial similarity between an initial Operation i.e. Operation n 2 etc. from Operation List and one or more Operations i.e. Operations n 2 etc. from a corresponding comparative Layer i.e. Layer n 2 etc. of Neural Network . Decision making Unit can then perform Substantial Similarity Comparisons of a next Operation i.e. Operation n 1 etc. from Operation List with one or more Operations i.e. Operations n 1 etc. from a corresponding comparative Layer i.e. Layer n 1 etc. of Neural Network and so on. This is an example of how Operations from Operation List may be processed or compared from the least recent one to the most recent one and or how Neural Network or a portion thereof can be traversed forward in the decision making process. Any Operation from Operation List can be used as the initial one to be compared with Operations from a corresponding Layer of Neural Network .

In some embodiments Decision making Unit may limit Substantial Similarity Comparisons to only include Operations from comparative Layers that are interconnected by Connections . Also Decision making Unit can take into account weights of Connections among the interconnected Operations in choosing which Operation to compare first second third and so on. Specifically for instance Decision making Unit can perform Substantial Similarity Comparison with Operation pointed to by the highest weight Connection first Operation pointed to by the second highest weight Connection second and so on. In some aspects Decision making Unit can stop performing Substantial Similarity Comparisons in a particular Layer as soon as it finds a substantially similar Operation interconnected as previously described. In other aspects Decision making Unit may only follow the highest weight Connection to arrive at an Operation to be compared thereby disregarding Connections with less than the highest weight.

In other embodiments Decision making Unit may perform Substantial Similarity Comparisons of an Operation from Operation List with one or more interconnected Operations from a corresponding comparative Layer of Neural Network and utilize the previously described Comparison Accuracy index in deciding which Operation to select in the path through comparative Layers . Comparison Accuracy Index comprises the functionality for storing a measure of how well an Operation to or with which the index is assigned or associated is matched with another Operation . Comparison Accuracy Index on a scale of 0 1 can be utilized instead of the previously described Comparison Accuracy Index on a scale of 0 10. The scale of 0 1 is preferable since it corresponds to and is comparable with weights of Connections that are also on a scale of 0 1. In one example Decision making Unit may select an Operation having the highest Comparison Accuracy Index from a comparative Layer of Neural Network even if Connection pointing to that Operation has the lowest or less than the highest weight. Therefore Comparison Accuracy Index or other similar input or parameter can override or disregard the weight of a Connection . In another example Decision making Unit may select an Operation from a Layer of Neural Network if its Comparison Accuracy Index is higher than or equal to a weight of its Connection . In a further example Decision making Unit may select an Operation from a Layer of Neural Network if a weight of its Connection is higher than or equal to its Comparison Accuracy Index . Therefore Comparison Accuracy Index can be set to be more less or equally important than a weight of a Connection . In some aspects a minimum Comparison Accuracy Index required for substantial similarity with respect to an Operation from a Layer of Neural Network can be set to be different for various Layers . For example a higher minimum Comparison Accuracy Index can be set for comparative Layers comprising the most recently used or executed Operations and decreased for the remaining comparative Layers . Any other settings of a minimum Comparison Accuracy Index required for substantial similarity can be utilized in alternate embodiments.

In further embodiments Decision making Unit can utilize a bias to adjust weight of a Connection Comparison Accuracy Index and or other input or parameter used in selecting Operations in a path through comparative Layers of Neural Network . In one example Decision making Unit may select an Operation from a Layer of Neural Network if its Comparison Accuracy Index multiplied by or adjusted for a bias is higher than or equal to a weight of its Connection . In another example Decision making Unit may select an Operation from a Layer of Neural Network if the weight of its Connection multiplied by or adjusted for a bias is higher than or equal to its Comparison Accuracy Index . In a further example bias can be used to resolve deadlock situations where Comparison Accuracy Index is equal to a weight of a Connection . In some aspects bias can be expressed in percentages such as 0.3 percent 1.2 percent 25.7 percent 79.8 percent 99.9 percent 100.1 percent 155.4 percent 298.6 percent 1105.5 percent and so on. For example a bias below 100 percent decreases an input or parameter to which it is applied a bias equal to 100 percent does not change the input or parameter to which it is applied and a bias higher than 100 percent increases the input or parameter to which it is applied. In general any amount of bias can be utilized. Bias can be applied to one or more of a weight of a Connection Comparison Accuracy Index any other input or parameter and or all or any combination of them. Also different biases can be applied to each of a weight of a Connection Comparison Accuracy Index or any other input or parameter. For example 30 percent bias can be applied to Comparison Accuracy Index and 15 percent bias can be applied to a weight of a Connection . Also different biases can be applied to various Layers of Neural Network and or other disclosed elements. Bias can be set by a user by UAIE administrator or automatically by the system.

Any other technique input and or parameter can be utilized in selecting Operations in a path through the comparative or other Layers of Neural Network .

Once the path through comparative Layers of Neural Network is known Decision making Unit may then utilize highest weight Connections in deciding which path of Operations to follow through anticipatory Layers of Neural Network for example. Any of the previously described techniques inputs and or parameters such as weights of Connections bias and or other inputs or parameters can be utilized as applicable in selecting Operations in the path through anticipatory Layers of Neural Network .

Referring to an exemplary embodiment of selecting a path of Operations through Neural Network is illustrated. Decision making Unit can receive a current Operation List . Decision making Unit may first select a path of Operations through comparative Layers of Neural Network . A bias of 110 percent can be applied to increase Comparison Accuracy Indexes of Operations in comparative Layers of Neural Network for example. Decision making Unit can perform Substantial Similarity Comparisons of Operation from Operation List with one or more Operations in corresponding Layer . Operation from Layer may be found substantially similar to Operation from Operation List with the highest Comparison Accuracy Index and selected as the initial Operation in the path. Decision making Unit can then perform Substantial Similarity Comparisons of Operation from Operation List with one or more Operations in corresponding Layer connected with Operation . Operation from Layer may be found substantially similar to Operation from Operation List with the highest Comparison Accuracy Index of 0.48 for example. Operation is selected as the next Operation in the path since bias adjusted Comparison Accuracy Index of 0.48 1.1 0.528 is higher than the highest weight 0.50 of Connection even though Connection of Operation has a lower weight than Connection . This is an example of how a higher Comparison Accuracy Index or adjusted Comparison Accuracy Index can be used to override the highest weight Connection in choosing an Operation in the path. Decision making Unit can then perform Substantial Similarity Comparisons of Operation from Operation List with one or more Operations in corresponding Layer connected with Operation . Operation from Layer may be found substantially similar to Operation from Operation List with the highest Comparison Accuracy Index . Operation is selected as the next Operation in the path since the weight of Connection is equal to the only other Connection originating from Operation . This is an example of how Comparison Accuracy Index or adjusted Comparison Accuracy Index can be used to resolve a deadlock in equal weights of Connections . Decision making Unit may then select a path of Operations through anticipatory Layers of Neural Network . Decision making Unit may follow Connection with the highest weight leading to Operation in Layer . Decision making Unit may then follow Connection with the highest weight leading to Operation in Layer . Decision making Unit may implement similar logic or process for any additional Operations in any additional Layers beyond Layer . In some aspects at each selected Operation in the path through the Layers of Neural Network Decision making Unit can append a currently selected Operation to a collection of previously selected Operations to assemble a Substantially Similar Path later described .

The foregoing provides an example of utilizing a combination of weights of Connections Comparison Accuracy Index and bias. It should be understood that any of these techniques inputs and or parameters can be omitted used in a different combination or used in combination with other inputs or parameters in which case the path of Operations through Neural Network would be affected accordingly. In one example weights of Connections may not be used at all in selecting a path through comparative Layers in which case Comparison Accuracy Index can be solely utilized for deciding which Operations to select in the path. In another example weights of Connections can be used solely in selecting a path through anticipatory Layers as previously described. In a further example bias can be omitted in selecting a path through comparative Layers in which case unadjusted Comparison Accuracy Indexes and or weights of Connections can be utilized for deciding which Operations to select in the path. Any other techniques inputs and or parameters can be utilized to affect the choice of Operations in a path through Neural Network . In some aspects more than one path through Neural Network can be considered or selected using the above described technique or process in which case Decision making Unit may choose the most substantially similar of the considered or selected paths.

In some embodiments in the case that Operations from Operation List were stored into Neural Network collectively as separate sequences or paths Decision making Unit can consider multiple possible separate paths or sequences of Operations in Neural Network . In one example Decision making Unit can perform Substantial Similarity Comparisons of a number of most recently used or executed Operations i.e. Operation n Operation n 1 Operation n 2 etc. from Operation List with interconnected Operations from corresponding comparative Layers i.e. Layer n Layer n 1 Layer n 2 etc. of Neural Network . There may exist multiple separate substantially similar paths since each path of Operations through comparative Layers includes a separate sequence of Operations that may not be cross connected with Operations in other paths. Decision making Unit can then select i.e. using highest Comparison Accuracy Index etc. the most substantially similar path from the separate substantially similar paths. Subsequent Operations can then be anticipated in the anticipatory Operations i.e. Operation n 1 Operation n 2 etc. of the selected separate substantially similar path i.e. Substantially Similar Path etc. .

In another example where Operations from Operation List were stored into Neural Network collectively as separate sequences or paths Decision making Unit can perform Substantial Similarity Comparisons of an initial Operation i.e Operation n etc. from Operation List with one or more Operations from a corresponding comparative Layer i.e. Layer n etc. of Neural Network . Decision making Unit may find multiple Operations from the corresponding comparative Layer that are substantially similar to the initial Operation i.e. Operation n etc. from Operation List . Decision making Unit can then perform Substantial Similarity Comparisons of a next Operation i.e. Operation n 1 etc. from Operation List with one or more interconnected Operations from a corresponding comparative Layer i.e. Layer n 1 etc. of Neural Network and so on. This is an example of how Operations from Operation List may be processed or compared from the most recent one to the least recent one and or how Neural Network or a portion thereof can be traversed backward in the decision making process. At each Substantial Similarity Comparison if an Operation from a corresponding comparative Layer is found not to be substantially similar to the compared Operation from Operation List the entire separate sequence or path comprising the non matching Operation can be removed from consideration of being a substantially similar path. Therefore each Substantial Similarity Comparison may reduce the number of potential separate substantially similar paths. At the end of the process if more than one separate substantially similar paths remain Decision making Unit can select i.e. using highest Comparison Accuracy Index etc. the most substantially similar path from the separate substantially similar paths. Subsequent Operations can then be anticipated in anticipatory Operations i.e. Operation n 1 Operation n 2 etc. of the selected separate substantially similar path i.e. Substantially Similar Path etc. . In some designs similar techniques as the above described can be utilized in selecting a previously described Substantially Similar Knowledge Cell .

Referring to an embodiment of Decision making Unit anticipating Operations or Instruction Sets utilizing Neural Network is illustrated. In some aspects the most recent Operations from Operation List were stored into Neural Network first and the least recent Operations from Operation List were applied onto Neural Network last i.e. Operations were applied from the most recent one to the least recent one etc. in the previously described learning process. Also the most recent Operations from Operation List were stored into corresponding anticipatory Layers of Neural Network collectively as separate sequences or paths and the least recent Operations from Operation List were applied onto corresponding comparative Layers of Neural Network individually for example. In some implementations Decision making Unit can perform Substantial Similarity Comparisons of a number of most recently used or executed Operations i.e. Operation n Operation n 1 Operation n 2 etc. from Operation List with Operations from corresponding comparative Layers i.e. Layer n Layer n 1 Layer n 2 etc. of Neural Network . If a substantially similar pattern of most recently used or executed Operations from Operation List is found in comparative Layers of Neural Network subsequent Operations can be anticipated in Operations i.e. Operation n 1 Operation n 2 etc. from anticipatory Layers i.e. Layer n 1 Layer n 2 etc. of Neural Network 

Various techniques inputs and or parameters can be utilized in selecting Operations in a path through comparative Layers of Neural Network . In some aspects Decision making Unit can start by determining substantial similarity between an initial Operation i.e. Operation n etc. from Operation List and one or more Operations i.e. Operations n etc. from a corresponding comparative Layer i.e. Layer n etc. of Neural Network . Decision making Unit can then perform Substantial Similarity Comparisons of a next Operation i.e. Operation n 1 etc. from Operation List with one or more Operations i.e. Operations n 1 etc. from a corresponding comparative Layer i.e. Layer n 1 etc. of Neural Network and so on. This is an example of how Operations from Operation List may be processed or compared from the most recent one to the least recent one and or how Neural Network or a portion thereof can be traversed backward in the decision making process. Any Operation from Operation List can be used as the initial one to be compared with Operations from corresponding Layers in Neural Network .

In some aspects Decision making Unit may limit Substantial Similarity Comparisons to only include Operations from comparative Layers that are interconnected by Connections . All features functionalities and embodiments of the previously described Connection can be utilized in such implementations. In other aspects Decision making Unit may perform Substantial Similarity Comparisons of an Operation from Operation List with one or more interconnected Operations from a corresponding comparative Layer of Neural Network and utilize the previously described Comparison Accuracy Index in deciding which Operation to select in the path through comparative Layers as previously described. In further aspects Decision making Unit can utilize a bias to adjust weight of a Connection Comparison Accuracy Index and or other input or parameter used in selecting Operations in a path through comparative Layers of Neural Network as previously described. Any other technique input and or parameter can be utilized in selecting Operations in a path through the comparative or other Layers of Neural Network . In some aspects more than one path through comparative Layers of Neural Network can be considered or selected using the above described techniques in which case Decision making Unit may choose the most substantially similar of the considered or selected paths.

Once the path through comparative Layers of Neural Network is known Decision making Unit may then utilize sole Connections in selecting a separate sequence or path of Operations through anticipatory Layers of Neural Network .

Referring to an exemplary embodiment of selecting a path of Operations through Neural Network is illustrated. Decision making Unit can receive a current Operation List . Decision making Unit may first select a path of Operations through comparative Layers of Neural Network . Weights of Connections may be disregarded and therefore optionally omitted from the system etc in the selection of a path through Neural Network for example. A minimum Comparison Accuracy Index of 0.84 may be utilized for comparative Layer for example. Also a minimum Comparison Accuracy index of 0.80 may be utilized for comparative Layer for example. Further a minimum Comparison Accuracy Index of 0.76 may be utilized for comparative Layer for example. Decision making Unit can perform Substantial Similarity Comparisons of Operation from Operation List with one or more Operations in corresponding Layer . Operation from Layer may be found substantially similar to Operation from Operation List with the highest Comparison Accuracy Index of 0.85 for example. Operation is selected as the initial Operation in the path through comparative Layers since Comparison Accuracy Index of 0.85 is higher than the minimum Comparison Accuracy Index of 0.84 required for comparative Layer . Decision making Unit can then perform Substantial Similarity Comparisons of Operation from Operation List with one or more Operations in corresponding Layer connected with Operation . Operation from Layer may be found substantially similar to Operation from Operation List with the highest Comparison Accuracy Index of 0.82 for example. Operation is selected as the next Operation in the path through comparative Layers since Comparison Accuracy Index of 0.82 is higher than the minimum Comparison Accuracy index of 0.80 required for comparative Layer . Since weights of Connections are disregarded in this example higher weight of Connection than the weight of Connection has no effect. Decision making Unit can then perform Substantial Similarity Comparisons of Operation from Operation List with one or more Operations in corresponding Layer . Operation from Layer may be found substantially similar to Operation from Operation List with the highest Comparison Accuracy Index of 0.80 for example. Operation is selected as the next Operation in the path through comparative Layers since Comparison Accuracy Index of 0.80 is higher than the minimum Comparison Accuracy index of 0.76 required for comparative Layer . Decision making Unit may then select a path of Operations through anticipatory Layers of Neural Network . Decision making Unit may follow the sole Connection leading to Operation in Layer . Decision making Unit may then follow the sole Connection leading to Operation in Layer . Decision making Unit may implement similar logic or process for any additional Operations in any additional Layers beyond Layer . In some aspects at each selected Operation in the path through the Layers of Neural Network Decision making Unit can append a currently selected Operation i.e. according to its order or Layer in Neural Network etc. to a collection of previously selected Operations to assemble a Substantially Similar Path later described .

Referring to an embodiment of Confirmation Unit comprising Substantially Similar Path is illustrated. Confirmation Unit comprises Substantially Similar Path Context Interpreter Operation Modifier User Confirmation and Operation List . Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments.

Substantially Similar Path comprises the functionality for storing Operations selected in a path through Neural Network and or other functionalities. Substantially Similar Path comprises any features functionalities and embodiments of the previously described Substantially Similar Knowledge Cell . In some embodiments a Node comprising an Operation may include a function i.e. transformation function etc. such as a function that appends a currently selected Operation to a collection of previously selected Operations in a path through Neural Network . For example such append function can assemble a list or path i.e. Substantially Similar Path etc. of selected Operations while Decision making Unit traverses Operations through the Layers of Neural Network .

In some embodiments Confirmation Unit can serve as a means of evaluating or rating anticipatory Operations or instruction Sets if they matched the indented operation of User as previously described. A rating can be stored in the rated anticipatory Operation or Instruction Set in Extra info of the rated anticipatory Operation or Instruction Set in a rated Substantially Similar Path in a neuron or Node of Neural Network and or in other repository for improvement of future anticipation or matching. In one example rating of an Operation or Instruction Set can be associated with and or stored in a neuron or Node comprising the rated Operation or Instruction Set for improvement of future anticipation or matching. In another example rating of an Operation or Instruction Set may affect i.e. increase or decrease etc. occurrence count and or weight of a Connection of a neuron or Node comprising the rated Operation or Instruction Set thereby adjusting or fine tuning the Connection s ability to anticipate the rated Operation or Instruction Set in the future. Any combination of rating and other techniques inputs and or parameters can also be utilized.

In other embodiments Confirmation Unit can serve as a means of canceling anticipatory Operations or Instruction Sets if they did not match the indented operation of User as previously described. In one example canceling of an Operation or Instruction Set can be recorded and or affect a particular Operation s or Instruction Set s rating which can be used for improved anticipation or matching in the future. In another example canceling of an Operation or Instruction Set may affect i.e. reduce occurrence count and or weight of a Connection of a neuron or Node comprising the canceled Operation or Instruction Set thereby adjusting or fine tuning the Connection s ability to anticipate the canceled Operation or Instruction Set in the future. Any combination of canceling and or other techniques inputs or parameters can also be utilized.

Confirmation Unit comprising Substantially Similar Path may include any features functionalities and embodiments of the previously described Confirmation Unit comprising Substantially Similar Knowledge Cell .

Referring to an embodiment of Knowledge Structuring Unit learning Instruction Set Portions also referred to as Inst Set Por utilizing Neural Network is illustrated. Similar to the previously described Neural Network comprising Operations Neural Network comprising instruction Set Portions includes a number of neurons or Nodes interconnected by Connections . Instruction Set Portions are shown instead of Nodes to simplify the illustration as Node includes Instruction Set Portion for example. Therefore Instruction Set Portions and Nodes can be used interchangeably herein depending on context. Also Extra info is not shown to simplify the illustration. However it should be understood that a Node may include Extra Info as Operation may include both Instruction Set Portions and Extra info . Therefore learning and other operations with respect to Instruction Set Portions can be similarly implemented with respect to Extra Info . One of ordinary skill in art will understand that Node may include other elements and or functionalities instead of or in addition to instruction Set Portion or Extra Info . In some designs Neural Network comprises a number of Layers each of which may include one or more instruction Set Portions and or Extra Info . Instruction Set Portions or Extra Info in successive Layers can be connected by Connections . Connection may include occurrence count and weight as previously described.

In some embodiments Knowledge Structuring Unit may apply i.e. copy store etc. the most recent Instruction Set Portions i.e. Instruction Set Portion n Instruction Set Portion n 1 etc. from Operation onto anticipatory Layers i.e. Layer n 2 Layer n 1 etc. of Neural Network and apply the least recent Instruction Set Portions i.e. Instruction Set Portion n 2 Instruction Set Portion n 3 Instruction Set Portion n 4 etc. from Operation onto comparative Layers i.e. Layer n Layer n 1 Layer n 2 etc. of Neural Network for example. The term apply or applying may refer to storing copying inserting or other similar action therefore these terms may be used interchangeably herein depending on context. In some aspects the least recent Instruction Set Portions may include front most Instruction Set Portions of an Operation and the most recent Instruction Set Portions may include rear most instruction Set Portions of an Operation . The Operation may include an Operation or Instruction Set that a user is inputting or has caused to be executed. Specifically for example Knowledge Structuring Unit can apply Instruction Set Portion n from Operation onto Layer n 2 of Neural Network apply Instruction Set Portion n 1 from Operation onto Layer n 1 of Neural Network apply Instruction Set Portion n 2 from Operation onto Layer n of Neural Network and so forth. Therefore Instruction Set Portions with an order number greater than n may become anticipatory Instruction Set Portions in their respective anticipatory Layers and the rest of the Instruction Set Portions may become comparative instruction Set Portions in their respective comparative Layers although this particular split can differ in alternate embodiments as previously described. Also as indicated by the up and down vertical dotted arrows applying Instruction Set Portion n from Operation can start at any Layer of Neural Network . This way the number of comparative and anticipatory Layers can be adjusted for a particular application as previously described.

In some embodiments Knowledge Structuring Unit receives a current Operation and applies stores front most Instruction Set Portions from Operation onto into Neural Network first and rear most Instruction Set Portions from Operation last i.e. apply store Instruction Set Portions from the front most one to the rear most one etc. thereby implementing learning of Instruction Set Portions from Operation as previously described. In other embodiments Knowledge Structuring Unit receives a current Operation and applies stores rear most Instruction Set Portions from Operation onto into Neural Network first and front most Instruction Set Portions from Operation last i.e. apply store Instruction Set Portions from the rear most one to the front most one etc. thereby implementing learning of Instruction Set Portions from Operation as previously described. In further embodiments Knowledge Structuring Unit can apply Instruction Set Portions from Operation onto Neural Network individually as previously described. In yet further embodiments Knowledge Structuring Unit can store instruction Set Portions from Operation into Neural Network collectively as separate sequences or paths as previously described. Any combination of applying instruction Set Portions from Operation individually and storing instruction Set Portions from Operation collectively onto into Neural Network can be implemented in alternate embodiments as previously described.

Referring to an embodiment of Decision making Unit anticipating Instruction Set Portions utilizing Neural Network is illustrated. In some aspects Decision making Unit can perform Substantial Similarity Comparisons of a number of most recent Instruction Set Portions i.e. Instruction Set Portion n Instruction Set Portion n 1 Instruction Set Portion n 2 etc. from Operation with Instruction Set Portions from corresponding comparative Layers i.e. Layer n Layer n 1 Layer n 2 etc. of Neural Network . If a substantially similar pattern of most recent instruction Set Portions from Operation is found in comparative Layers of Neural Network subsequent Instruction Set Portions can be anticipated in Instruction Set Portions i.e. Instruction Set Portion n 1 Instruction Set Portion n 2 etc. from anticipatory Layers i.e. Layer n 1 Layer n 2 etc. of Neural Network . Therefore Neural Network comprising Instruction Set Portions can be utilized to anticipate Instruction Set Portions of an Operation . For example as user is inputting Instruction Set Portions of an Instruction Set or Operation such as a SQL statement i.e. in a manual or form based database application etc. Decision making Unit can anticipate one or more most likely subsequent Instruction Set Portions that the user may want to use or input. A similar technique can be used for any type of Operation or Instruction Set of any language or code that may be used or inputted in portions. It should be noted that n m and or other such letters or indicia in any of the figures may be different numbers in different elements even where the elements are depicted in the same figure. In general n m and or other letters or such indicia may follow the immediate sequence and or context where they are indicated. Therefore an Instruction Set Portion from Operation having same letter s or indicia as an Instruction Set Portion from Neural Network may be a different instruction Set Portion . Also Instruction Set Portions in a same Layer may be different Instruction Set Portions belonging to that Layer .

Any of the previously described techniques inputs and or parameters can be utilized in selecting Instruction Set Portions in a path through comparative Layers of Neural Network . In some embodiments Decision making Unit can start by determining substantial similarity between an initial Instruction Set Portion i.e. Instruction Set Portion n 2 etc. from Operation and one or more Instruction Set Portions i.e. instruction Set Portion n 2 etc. from a corresponding comparative Layer i.e. Layer n 2 etc. of Neural Network and traverse the comparative Layers forward as previously described. In other embodiments Decision making Unit can start by determining substantial similarity between an initial Instruction Set Portion i.e. Instruction Set Portion n etc. from Operation and one or more Instruction Set Portions i.e. Instruction Set Portion n etc. from a corresponding comparative Layer i.e. Layer n etc. of Neural Network and traverse the comparative Layers backward as previously described. Any Instruction Set Portion from Operation can be used as the initial one to be compared with Instruction Set Portions from corresponding Layers in Neural Network . In further embodiments Decision making Unit may limit Substantial Similarity Comparisons to only include Instruction Set Portions from comparative Layers that are interconnected by Connections . All features functionalities and embodiments of the previously described Connection can be utilized in such implementations. In further embodiments Decision making Unit may perform Substantial Similarity Comparisons of an Instruction Set Portion from Operation with one or more interconnected Instruction Set Portions from a corresponding comparative Layer of Neural Network and utilize the previously described Comparison Accuracy Index in deciding which Instruction Set Portions to select in the path through comparative Layers as previously described. In further embodiments Decision making Unit can utilize a bias to adjust weight of a Connection Comparison Accuracy Index and or other input or parameter used in selecting Instruction Set Portions in a path through the comparative Layers of Neural Network as previously described. Any other technique input and or parameter can be utilized in selecting Instruction Set Portions in a path through the comparative or other Layers of Neural Network .

Once the path through comparative Layers of Neural Network is known Decision making Unit may utilize highest weight Connections in deciding which path of instruction Set Portions to follow through anticipatory Layers of Neural Network . Also in the case that Instruction Set Portions in anticipatory Layers of Neural Network were stored as separate sequences or paths Decision making Unit may utilize sole Connections in selecting a separate sequence or path of Instruction Set Portions through anticipatory Layers of Neural Network . Any of the previously described techniques inputs and or parameters such as weights of Connections bias and or other inputs or parameters can be utilized as applicable in selecting Instruction Set Portions in the path through the anticipatory Layers of Neural Network .

Neural Network comprising Instruction Set Portions includes any features functionalities and embodiments of the previously described Neural Network comprising Operations . Also the operation of Knowledge Structuring Unit Decision making Unit Confirmation Unit and or other elements with respect to Neural Network comprising Instruction Set Portions similarly includes any features functionalities and embodiments of the previously described operation of Knowledge Structuring Unit Decision making Unit Confirmation Unit and or other elements with respect to Neural Network comprising Operations .

Referring to the illustration shows an embodiment of a method for autonomous application operating based on UAIE functionalities. The method can therefore be used on a computing device to enable autonomous operation of the application with partial minimal or no user input. In some embodiments the method can be used on a computing device operating an interface for UAIE that enables autonomous operation of the application with partial minimal or no user input. Method may include some or all the actions operations and embodiments of the previously described method . Due to similarity in some aspects of method and method the forthcoming description of method will be directed to differences between the two methods. Method may also include any action or operation of any of the other disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step a first instruction set and a second instruction set are received the first and the second instruction sets for performing operations on a computing device. Step may include any action or operation described in step of method as applicable wherein neural network i.e. Neural Network etc. can be utilized instead of knowledgebase i.e. Knowledgebase etc. .

At step the first and the second instruction sets are disassembled into instruction set portions. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase.

At step the first and the second instruction sets or at least one of their portions are stored into a neural network comprising a plurality of instruction sets or their portions. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase. In some implementations the first and the second instruction sets or at least one of their portions can be stored in the neural network so that the first instruction set or at least one of its portions is followed by the second instruction set or at least one of its portions. In other implementations no such arrangement or relationship between the first and the second instruction sets or at least one of their portions is required and the first and the second instruction sets or at least one of their portions can be stored in any other arrangement in the neural network. In some aspects neural network i.e. Neural Network etc. comprises a number of neurons or nodes i.e. Nodes etc. interconnected by connections i e. Connections etc . A neuron or node may include an instruction set i.e. Instruction Set etc. instruction set portion i.e. Instruction Set Portion etc. and or other element or data for example. In some designs neural network comprises a number of layers i.e. Layers etc. each of which may include one or more neurons or nodes. In an embodiment of a layered configuration neurons or nodes in successive layers can be connected by connections. In general any neurons or nodes can be connected by connections with any other neurons or nodes in alternate embodiments. A connection may include or be associated with occurrence count and weight for example although other parameters or variables can be utilized. For example a list i.e. Operation List etc. of recently executed instruction sets and or their portions can be applied onto a neural network thereby implementing learning of the instruction sets and or their portions. Substantial similarity comparisons i.e. Substantial Similarity Comparisons etc. can be performed of an instruction set in the list of recently executed instruction sets with one or more instruction sets in a corresponding layer of the neural network. If substantially similar instruction set is found in the corresponding layer occurrence count and weight of connection to that instruction set from an instruction set in a prior layer can be updated. Any other connections of the instruction set in the prior layer may also be updated. On the other hand if a substantially similar instruction set is not found the instruction set from the list of recently executed instruction sets can be inserted i.e. copied stored etc. into the corresponding layer of the neural network and a connection to that instruction set can be created from an instruction set in a prior layer including assigning an occurrence count to the new connection and calculating a weight of the new connection. Any other connections of the instruction set in the prior layer may be updated. Furthermore inserting an instruction set into a layer of neural network may also include creating a connection between the inserted instruction set and an instruction set in a subsequent layer thereby fully connecting the inserted instruction set. Creating the connection between the inserted instruction set and an instruction set in the subsequent layer can be performed after the next substantial similarity comparison when the target instruction set from the subsequent layer is determined. In some aspects the most recent instruction sets i.e. the second instruction set etc. or their portions from a list of recently executed instruction sets can be applied onto anticipatory layers of neural network and the least recent instruction sets i.e. the first instruction set etc. or their portions can be applied onto comparative layers. Therefore the most recent instruction sets i.e. the second instruction set etc. from the list of recently executed instruction sets may become anticipatory instruction sets in the neural network whereas the least recent instruction sets i.e. the first instruction set etc. from the list of recently executed instruction sets may become comparative instruction sets in the neural network. Any of the disclosed storing of instruction sets can also be implemented to store instruction set portions extra information and or any other data or items into the neural network. Storing comprises any action or operation by or for a Neural Network Operation List Knowledge Structuring Unit and or other disclosed elements.

At step a new instruction set for performing an operation on the computing device is received. Step may include any action or operation described in step or step of method as applicable wherein neural network can be utilized instead of knowledgebase.

At step the new instruction set is disassembled into instruction set portions. Step may include any action or operation described in step or step of method as applicable wherein neural network can be utilized instead of knowledgebase.

At step at least one portion of the new instruction set are compared with at least one portion of the first instruction set from the neural network. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase. The first instruction set may be one of plurality of instruction sets stored in the neural network whose portions can be compared with portions of the new instruction set. In some aspects the at least one portion of the new instruction set can be compared with the at least one portion of instruction sets in comparative layers of the neural network. In one example substantial similarity comparisons i.e. Substantial Similarity Comparisons etc. can be performed of a number of most recently used or executed instruction sets i.e. new instruction set etc. and or their portions from a list i.e. Operation List etc. of recently executed instruction sets with instruction sets i.e. first instruction set etc. and or their portions from corresponding comparative layers i.e. Layers etc. of the neural network i.e. Neural Network etc. . In another example substantial similarity comparisons can be performed of a number of most recently used or executed instruction sets and or their portions from a list of recently executed instruction sets with interconnected instruction sets and or their portions from corresponding comparative layers of the neural network. If a substantially similar pattern of most recently used or executed instruction sets from the list of recently executed instruction sets is found in comparative layers of the neural network subsequent instruction sets can be anticipated in instruction sets i.e. second instruction set etc. from anticipatory layers of the neural network. A substantially similar path i.e. Substantially Similar Path etc. may include the instruction sets selected in a path through the comparative and or anticipatory layers of the neural network.

At step a determination is made that there is a substantial similarity between the new instruction set and the first instruction set from the neural network. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase.

At step the second instruction set from the neural network or at least one of its portions are modified based on context analysis. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase.

At step the second or the modified second instruction set from the neural network is executed on the computing device. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase.

At step the executed second or modified second instruction set is rated. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase. In some aspects rating of an instruction set can be associated with or stored in a neuron or node comprising the instruction set for improvement of future anticipation or matching. In other aspects rating of an instruction set may affect i.e. increase or decrease etc. occurrence count and or weight of a connection of the neuron or node comprising the instruction set thereby adjusting or fine tuning the connection s ability to anticipate the instruction set in the future.

At step the execution of the executed second or modified second instruction set is canceled and the computing device is restored to a prior state. Step may include any action or operation described in step of method as applicable wherein neural network can be utilized instead of knowledgebase. In some aspects canceling of an instruction set can be associated with or stored in a neuron or node comprising the instruction set for improvement of future anticipation or matching. In other aspects canceling an instruction set may affect i.e. decrease etc. occurrence count and or weight of a connection of the neuron or node comprising the instruction set thereby adjusting or fine tuning the connection s ability to anticipate the instruction set in the future.

Referring to the illustration shows an embodiment of a method for autonomous application operating based UAIE functionalities. The method can therefore be used on a computing device to enable autonomous operation of the application with partial minimal or no user input. In some embodiments the method may be used on a computing device operating an interface for UAIE that enables autonomous operation of the application with partial minimal or no user input. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step the new instruction set is executed on the computing device. Step may include any action or operation described in step of method as applicable. In some embodiments the new instruction set can be executed earlier in the process such as when it is received by UAIE. In other embodiments the new instruction set can be executed before it is received by UAIE or at any point independent of when it is received by UAIE in which case step can be omitted.

At step the second instruction set from the neural network or at least one of its portions are modified based on context analysis. Step may include any action or operation described in step of method as applicable.

At step the second or the modified second instruction set from the neural network or its portions are displayed on the computing device as options to be selected further modified or canceled. In some embodiments the previously automatically modified if this functionality was enabled and or if modification was performed etc. second instruction set a copy thereof and or its portions can be displayed on the computing device responsive to the determination at step . In some aspects the previously automatically modified second instruction set a copy thereof and or its portions can be displayed along with one or more anticipatory instruction sets and or their portions that may immediately follow the second instruction set. The system may include an editor graphical user interface GUI and or other means through which a user can view and or manually modify if user chooses the previously automatically modified second instruction set and or its portions. For example a GUI can be utilized to receive or read the previously automatically modified second instruction set and or its portions display i.e. via text fields drop down menus check boxes and other GUI components etc. the previously automatically modified second instruction set and or its portions and ask the user to manually modify the previously automatically modified second instruction set and or its portions by manipulating GUI components i.e. changing values in text fields selecting options in drop down menus etc. . In some embodiments extra or contextual information and or other information can be displayed and or modified by the user as well. In some aspects user selection of the previously automatically modified second instruction set may effectively serve as user s confirmation of his her intention to execute the previously modified second instruction set. In other aspects the user may choose not to approve or implement i.e. cancel etc. any anticipatory instruction sets including the previously modified second instruction set. In yet other aspects the user may choose to approve or implement some of the anticipatory instruction sets including the previously modified second instruction set and choose not to approve or implement i.e. cancel etc. others. Depending on the type of application and or other factors displaying selecting further modifying and or canceling can optionally be disabled or omitted in order to provide an uninterrupted operation of the application. For example a form based application may be suitable for implementing the user confirmation step whereas a game is less suitable for implementing such interrupting step due to the real time nature of game playing execution. Components and or features of the computing device or its operating system such as display keyboard pointing device touchscreen microphone camera video camera speech recognition sound player video player tactile input output device and or other components features or applications can be utilized to implement the displaying selecting further modifying and or canceling of the previously automatically modified second instruction set and or its portions. Displaying selecting further modifying and or canceling comprise any action or operation by or for Confirmation Unit and or other disclosed elements. In some aspects step may include any action or operation described in steps and of method as applicable.

At step the second or the modified second instruction set from the neural network is executed on the computing device. Step may include any action or operation described in step of method as applicable.

Referring to the illustration shows an embodiment of a method for learning an application s operations based UAIE functionalities. The method can therefore be used on a computing device to structure and or store knowledge of an application s operations that can be used for anticipation of the application s future operations or autonomous application operating. In some embodiments the method can be used on a computing device operating an interface for UAIE to structure and or store knowledge of an application s operations that can be used for anticipation of the application s future operations or autonomous application operating. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step a plurality of recently executed instruction sets are received the plurality of recently executed instruction sets comprise instruction sets executed immediately prior to and including a currently executed instruction set the plurality of recently executed instruction sets for performing operations on a computing device. At step at least one extra information associated with the plurality of recently executed instruction sets are received. At step the plurality of recently executed instruction sets are disassembled into instruction set portions. At step portions of the least recently executed instruction sets of the plurality of recently executed instruction sets are stored into nodes of comparative layers of a neural network and portions of the most recently executed instruction sets of the plurality of recently executed instruction sets are stored into nodes of anticipatory layers of the neural network. At step the at least one extra information associated with the least recently executed instruction sets are stored into the nodes of comparative layers of the neural network and the at least one extra information associated with the most recently executed instruction sets are stored into the nodes of anticipatory layers of the neural network.

Referring to the illustration shows an embodiment of a method for anticipating an application s operations based UAIE functionalities. The method can therefore be used on a computing device to anticipate an application s operations from stored knowledge of the application s operations. In some embodiments the method can be used on a computing device operating an interface for UAIE to anticipate an application s operations from stored knowledge of the application s operations. Method may include any action or operation of any of the disclosed methods such as for example methods and or others. Other additional steps actions or operations can be included as needed or some of the disclosed ones can be optionally omitted or a different order thereof can be implemented in alternate embodiments of method .

At step a neural network is accessed that stores portions of comparative instruction sets and portions of anticipatory instruction sets the neural network comprising a plurality of portions of comparative instruction sets and portions of anticipatory instruction sets the neural network further stores at least one extra information associated with the comparative instruction sets and at least one extra information associated with the anticipatory instruction sets wherein the comparative and the anticipatory instruction sets for performing operations on a computing device. At step new instruction sets for performing operations on the computing device are received. At step at least one extra information associated with the new instruction sets are received. At step portions of the new instruction sets are compared with the portions of the comparative instruction sets in the neural network. At step at least one extra information associated with the new instruction sets are compared with at least one extra information associated with the comparative instruction sets in the neural network. At step a determination is made that there is a substantial similarity between one or more new instruction sets and one or more comparative instruction sets in the neural network. At step one or more anticipatory instruction sets in the neural network are anticipated.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a web browser. Such embodiments may include artificial intelligence that enables a personal computer or other such device or application to learn the operation of the web browser store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the web browser with partial minimal or no user input to help the user in his her use of the web browser.

UAIE can be used on a Personal Computer i.e. Computing Device etc. . Personal Computer may include Web Browser i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial Intelligence Unit Human machine Interface Display Memory and Storage . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

Personal Computer comprises the functionality for performing computing or processing operations and or other functionalities. Examples of Personal Computer include a desktop computer a mobile computer such as a laptop or tablet computer computing capable cellular telephone i.e. smartphone etc. server and or other computers. Personal Computer can be referred to as and comprises any features functionalities and embodiments of Computing Device .

In some aspects Web Browser comprises the functionality for performing web browsing operations on Personal Computer and or other functionalities. Web Browser comprises the functionality for accessing presenting navigating and or executing information. Web Browser comprises the functionality for accessing presenting navigating and or executing information accessible over a network. UAIE can attach to and obtain Web Browser s instructions data and or other information and modify execution and or functionality of Web Browser thereby providing artificial intelligence functionalities to Web Browser as previously described. Information may include web pages files digital repositories programs databases and or other information or resources. Examples of Web Browsers include Mozilla Firefox Google Chrome Netscape Navigator Microsoft Internet Explorer and others. Information that Web Browser may access present navigate and or execute can be stored in files objects data structures and or other such repositories or in a database DBMS server and or other such system or repository. A web page as the most common information format for Web Browsers comprises the functionality for storing information readable by Web Browser or by other software application device or system able to read web pages. In one example a web page can be stored in a file that resides on a Remote Computing Device accessible over a Network . In another example a web page can be stored in a file that resides on Personal Computer . In yet another example a web page can be dynamically created by a program and delivered over a network. Examples of web page formats and or programs that may dynamically create web pages include HTML XML DHTML Java Script Perl PhP Ruby and others. A web page may include any type of information or content readable by Web Browser such as for example textual information graphical information sound video and or other information or content readable by Web Browser . Web Browser may reside on User s Personal Computer or reside on a Remote Computing Device accessible over a Network and if on a Remote Computing Device Web Browser may be available as a network service i.e. online web or information browser etc. . User can operate Web Browser via Human machine Interface and or other input device. Web Browser can be referred to as and comprises any features functionalities and embodiments of Software Application .

In one example when User wishes to view a web page on Personal Computer User may issue an operating instruction to Web Browser via Human machine Interface i.e. keyboard etc. to present the web page. Web browser can then retrieve the web page or a reference thereto from Memory Storage Remote Computing Device or other repository and present it to User . In another example when User wishes to change the view of a particular web page User may issue an operating instruction to Web Browser via Human machine Interface i.e. mouse etc. to scroll the view of the web page. In yet another example when User wishes to find information in a particular web page User may issue an operating instruction to Web Browser via Human machine Interface to search i.e. text search etc. for needed information. Various other operating instructions and or operations can be implemented in Web Browser examples of which include changing text size zooming in or out clicking a link clicking a button saving a web page selecting and or copying a portion of a web page creating deleting editing a bookmark operating an application within a web browser viewing or editing information in a web browser playing pausing stopping rewinding fast forwarding sound or video increasing or decreasing volume of sound and or other web browser instructions and or operations. UAIE can learn Web Browser s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as web page presenting scrolling searching and or other operations by storing the instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments Personal Computer comprises a smartphone such as Apple s iPhone Samsung s Galaxy or other smartphone or a tablet such as Apple s iPad Samsung s Galaxy Tab or other tablet. In one example User may wish to visit a Youtube web page containing Frank Sinatra a music video such as a web page at http www.youtube.com watch v h9ZGKALMMuc . User may then want to increase sound volume by 3 units for each of the stereo surround sound or other sound channels. User may then want to scroll down the view of the web page by 5 units to fit the entire area of the video on his her device s display. While listening to the music User may want to read more information about Frank Sinatra. User may then decide to create a new tab and visit official Frank Sinatra web page at http www.sinatra.com . User s operations may result or be implemented by corresponding Web Browser s instructions such as for example the following 

In another example User may visit a web page such as the one containing Frank Sinatra s music video. At the end of the music video in this web page User may decide to visit or click on a web page containing another Frank Sinatra s music video. At the end of the music video in the second web page User may want to visit or click on a third web page containing another Frank Sinatra s music video and so on. As User operates Web Browser in his her pursuit of browsing web pages UAIE can learn Web Browser s instructions i.e. Instruction Sets or Operations etc. used to implement visiting sequential web pages and or other operations including any contextual information i.e. Extra Info etc. and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described. Next time User or any user visits the first web page and or any of the other visited web pages Web Browser can implement subsequent web page visits and or perform other operations autonomously. In some aspects Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations such as visiting sequential web pages. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations such as visiting additional web pages and or other operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances. If the knowledge of Web Browser s instructions i.e. Instruction Sets or Operations etc. that were used to implement User s operations such as visiting sequential web pages is stored in a global Knowledgebase any Web Browser having access to the global Knowledgebase can implement Web Browser s anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. .

In other exemplary embodiments Personal Computer comprises a laptop or desktop computer or other computer. In one example User can be a professional or other experienced researcher who uses the Internet as a source of information. User may conduct research on a topic such as subcompact car market or any other topic. User may decide to input a search phrase such as subcompact car market into a search engine such as google.com yahoo.com any proprietary search engine or other search engine. User may then click on various web pages that contain information on the searched topic and open each of the web pages in a new tab or window for example. User may then highlight keywords key phrases or other content of interest in each of the web pages by utilizing Web Browser s search find highlight and or other features or functionalities. User may also scroll some of the web pages to view or to draw attention to content of interest. As User operates Web Browser in his her pursuit of browsing web pages UAIE can learn Web Browser s instructions i.e. Instruction Sets or Operations etc. used to implement searching clicking opening web pages highlighting content of interest scrolling and or other operations including any contextual information i.e. Extra Info etc. . In this and each of the preceding examples UAIE can learn Web Browser s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Web Browser s operations as previously described. Furthermore Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Web Browser s operations as previously described. If the knowledge i.e. Knowledge Cells etc. of Web Browser s instructions i.e. Instruction Sets or Operations etc. that were used to implement professional researcher s operations i.e. searching for a word or phrase visiting web pages in new tabs or windows highlighting content of interest scrolling etc. is stored in a global Knowledgebase any Web Browser having access to the global Knowledgebase can implement Web Browser s anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. . The knowledge of Web Browser s instructions i.e. Instruction Sets or Operations etc. used to implement professional researcher s operations can be stored in a private Knowledgebase file or other repository. UAIE enables a user such as a professional researcher to record his her knowledge i.e. his her research methodology and or results etc. of searching a particular topic. A user such as a professional researcher can then sell his her knowledge i.e. Knowledgebase or Knowledge Cells that include his her her research methodology and or results etc. to other users who need to conduct similar research and save time. A user can sell his her knowledge i.e. Knowledgebase or Knowledge Cells etc. of searching a particular topic under a commercial or other license. Buyers of the Knowledgebase and or Knowledge Cells can use them for various purposes such as professionals can use them for their business academicians can use them for their scholarly work students can use them for their studies anyone can use them to gain information on the researched topic other professional researchers can use them as a start of their own more detailed research or use them for any other purpose. A buyer can also load the Knowledgebase or Knowledge Cells into his her own UAIE. Once loaded Knowledgebase or Knowledge Cells can be initiated or activated manually as an executable sequence or automatically through UAIE s decision making process. Buyer s Web Browser can then implement anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. included in the bought Knowledgebase or Knowledge Cells .

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Web Browser s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Web Browser s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a web browser s operations and of UAIE functionalities with respect to web browser and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for an operating system. Such embodiments may include artificial intelligence that enables a personal computer or other such device or application to learn the operation of the operating system store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the operating system with partial minimal or no user input to help the user in his her use of the operating system.

UAIE can be used on a Personal Computer i.e. Computing Device etc. . Personal Computer may include Operating System i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial Intelligence Unit Human machine Interface Display Memory and Storage . Other additional elements can be included as needed or some of the disclosed ones can be excluded or a combination thereof can be utilized in alternate embodiments.

In some aspects Operating System comprises the functionality for performing operating system operations on Personal Computer and or other functionalities. Operating System comprises the functionality for providing system and or other functionalities as previously described. UAIE can attach to and obtain Operating System s instructions data and or other information and modify execution and or functionality of Operating System thereby providing artificial intelligence functionalities to Operating System as previously described. Operating System may reside on Personal Computer or on a Remote Computing Device accessible over a Network and if on a Remote Computing Device Operating System may be available as a network service as previously described. User can operate Operating System via Human machine Interface and or other input device.

Operating System can be referred to as and comprises any features functionalities and embodiments of Software Application .

In one example when User wishes to copy a file on Personal Computer User can issue an operating instruction to Operating System via Human machine Interface i.e. mouse etc. to copy the file. Operating System may then access the file or a reference thereto on a Remote Computing Device or another remote or peripheral device and make a copy of the file in Storage for example. In another example when User wishes to connect to a Remote Computing Device i.e. to view a particular web page on a web server etc. Operating System can enable the connection with the Remote Computing Device . To enable the connection Operating System may access Personal Computer s network adapter create new or activate an existing network connection support or implement a particular network protocol support or manage the exchange of information and or perform other operations. In yet another example when User wishes to automatically execute a particular application at a specific time User can issue an operating instruction to Operating System via Human machine Interface to schedule the execution of the application via Operating System s task scheduler Various other operating instructions and or operations can be implemented in Operating System examples of which include managing file or other permissions managing user accounts performing hard drive maintenance managing and monitoring system resources managing system recovery managing network connections managing DBMS database connections file browsing managing backups managing system security managing software settings and or information managing devices and drivers managing sound and or other sensory inputs or outputs and or any other operating system instructions and or operations. UAIE can learn Operating System s instructions i.e. Instruction Sets or Operations etc and or contextual information i.e. Extra Info etc. used to implement operations such as file copying network connecting task scheduling and or other operations by storing the instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory instruction Sets or Operations etc. as previously described..

In some exemplary embodiments Personal Computer comprises a laptop or desktop computer or other computer. In one example User may perform daily weekly monthly yearly and or other periodic file backups. After performing one or more of these periodic file backups UAIE can learn Operating System s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement the file backups and their timing i.e. using time stamp etc. and then perform future file backups autonomously as previously described. In another example User may have a preference for setting specific permissions for newly created or copied files. After User creates or copies one or more files User may access the files permissions and set them to his preference. UAIE can learn Operating System s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement file permissions settings and then perform future file permissions settings autonomously as previously described. In yet another example User may prefer to be offline when he she is not browsing Internet i.e. for security reasons etc . After User launches a web browser and connects to the Internet on one or more occasions UAIE may learn Operating System s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement web browser launching and Internet connecting and then autonomously perform future Internet connections following web browser launches as previously described. In yet another example User may prefer to perform certain tasks at certain stages of Operating System s operation such as checking email at Operating System s start or virus scanning at Operating System s shut down. After User launches an email application i.e. Microsoft Outlook etc. and or retrieves email at Operating System s start on one or more occasions UAIE can learn Operating System s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement email application s launching and or email retrieval and then autonomously perform future email application launches and or email retrieval as previously described. In this and each of the preceding examples UAIE can learn Operating System s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Operating System s operations as previously described. Furthermore Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Operating System s operations as previously described.

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Operating System s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Operating System s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of an operating system s operations and of UAIE functionalities with respect to operating system and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a word processing application also referred to as text processing application word application or other such references etc. . Such embodiments may include artificial intelligence that enables a personal computer or other such device or application to learn the operation of the word processing application store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the word processing application with partial minimal or no user input to help the user in his her use of the word processing application.

UAIE can be used on a Personal Computer i.e. Computing Device etc. . Personal Computer may include Word Application i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial Intelligence Unit Human machine Interface Display Memory and Storage . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

In some aspects Word Application comprises the functionality for performing word processing operations on Personal Computer and or other functionalities. Word Application comprises the functionality for text creation editing formatting printing publishing manipulation and or other functionalities. Text may include any character digit symbol and or other similar item for example. Examples of Word Applications include Microsoft Word Corel WordPerfect LibreOffice Writer KWord and or others. UAIE can attach to and obtain Word Application s instructions data and or other information and modify execution and or functionality of Word Application thereby providing ailificial intelligence functionalities to Word Application as previously described. Word Application can reside on User s Personal Computer or on a Remote Computing Device accessible over a Network and if on a Remote Computing Device Word Application may be available as a network service. User can operate Word Application via Human machine Interface and or other input device. Word Application can be referred to as and comprises any features functionalities and embodiments of Software Application .

In one example when User wishes to input a character word phrase sentence or another section of text User can issue an operating instruction to Word Application via Human machine Interface i.e. keyboard etc. to input the character word phrase sentence or another section of text. In another example when User wishes to copy a section of text User can issue an operating instruction to Word Application via Human machine Interface i.e. mouse etc. to copy the section of text i.e. copy from one document into memory for other documents to access etc. . In yet another example when User wishes to paste a previously copied section of text User can issue an operating instruction to Word Application via Human machine Interface to paste the section of text i.e. access text in memory and deliver into current document etc. . In yet another example when User wishes to set formatting i.e. color font spacing etc. for a character word phrase sentence or another section of text User can issue an operating instruction to Word Application via Human machine Interface i.e. mouse etc. to set formatting for the character word phrase sentence or another section of text. In yet another example when User wishes to set page layout i.e. portrait landscape margin sizes etc. User can issue an operating instruction to Word Application via Human machine Interface to set page layout. Various other operating instructions and or operations can be implemented in Word Application examples of which include saving or renaming text files printing text or other content publishing text or other content managing Word Application s settings managing sound and or other sensory inputs or outputs and or any other word processing application instructions and or operations. UAIE can learn Word Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as inputting text copying text pasting text formatting text setting page layout and or other operations by storing the instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments Personal Computer comprises a laptop or desktop computer or other computer. In one example User may want to copy a section of text from a first to a second document where each of the documents has different text formatting. User may select and copy i.e. copy into memory or cache etc. the section of text from the first document and paste it into the second document. User may then reformat the pasted section of text to conform to the formatting of the second document. UAIE can learn Word Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement the copying pasting reformatting and or other operations. UAIE can also learn contextual information i.e. Extra Info etc. such as for example formatting of the text around the pasted text in the second document prior to and after the reformatting of the pasted text. UAIE can then perform future reformatting i.e. that follows copying and or pasting etc. autonomously as previously described. In another example User may have different preferences for page settings for various types of documents such as personal letters business correspondence official correspondence and or other types of documents. After User creates one or more of the different types of text documents User may adjust page settings to his her preference for each type of document. UAIE can learn Word Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as adjusting page settings and perform future adjusting of page settings autonomously as previously described.

In yet another example Personal Computer may be a network connected computer. Word Application may include or access a Knowledgebase which comprises instructions i.e. Instruction Sets or Operations etc. implementing past Word Application s operations i.e. prior written text formatting editing etc. . Either or both Word Application and Knowledgebase can be stored in Personal Computer s Memory Storage and or other local repository or on a Remote Computing Device accessible over a Network . As User operates Word Application in his her pursuit of writing UAIE can learn Word Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. and anticipate future instructions i.e. anticipatory Instruction Sets or Operations as previously described. Additionally a global Knowledgebase including writing knowledge i.e. Knowledge Cells etc. of other users may be available to be used in anticipating Word Application s instructions and or operations. For example User may want to write a letter to his her representative congressman senator governor etc. concerning a topic. There may exist a global Knowledgebase of writings on the topic that User s Word Application and or UAIE can access. User may write the letter by inputting characters words phrases sentences or other text by performing edits or formatting or by performing other operations within Word Application . Word Application can implement the inputting of characters words phrases sentences or other text the edits or formatting and or other operations by executing instructions i.e. Instruction Sets or Operations etc. of Word Application . In this and each of the preceding examples UAIE can learn Word Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Word Application s operations as previously described. User may start his her letter by addressing the representative and writing his her title first and last name. In some aspects as User is writing the representative s title first and last name Decision making Unit can search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement similar text i.e. title first and last name etc. and or its properties i.e. formatting etc. . Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. used to implement similar text i.e. title first and last name etc. and or its properties i.e. formatting etc. as in Comparative Section shown in for example. Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent text i.e. the representative s entire address etc. and or its properties as in Anticipatory Section for example. UAIE can then implement the subsequent text and or its properties as in Anticipatory Section autonomously based on similar text and or other operations performed in a prior similar letter or writing thereby implementing anticipation of Word Application s operations as previously described. User may then input additional text i.e. opening sentence additional words sentences paragraphs etc. perform additional edits or formats or perform other operations within Word Application . In some aspects as User is inputting additional text i.e. first part of an opening sentence etc. performing additional edits or formats and or performing other operations Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement similar text i.e. first part of an opening or other sentence etc. and or its properties i.e. formatting etc. . Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. comparative instruction Sets or Operations etc. used to implement similar text i.e. first part of an opening or other sentence etc. and or its properties i.e. formatting etc. as in Comparative Section shown in for example. Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent text i.e. second part of the opening or other sentence subsequent words sentences paragraphs subsequent formats or edits etc. and or its properties as in Anticipatory Section shown in for example. UAIE can then implement the subsequent text and or its properties as in Anticipatory Section autonomously based on similar text and or other operations performed in a prior similar letter or writing thereby implementing anticipation of Word Application s operations as previously described. Any Anticipatory Section etc. may include any number of characters words phrases sentences paragraphs or other text. In some aspects key words key phrases and or other key items such as representative s name topic of the letter and or other information can be stored in Extra Info or other repository to help identify a global Knowledgebase from which to draw knowledge or information. Key words phrases and or other items may include words phrases and or other items that were most frequently used or used in prominent sections of the letter such as the addressing section opening sentence first paragraph and or other sections. In one example after User inputs representative s title first and last name UAIE may look for a Knowledgebase containing letters articles and or other writings to or about the particular representative. In another example after User inputs the topic of the letter i.e. environment pollution etc. or the topic is extracted from the letter UAIE may look for a Knowledgebase containing letters articles and or other writings about or including the particular topic.

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Word Application s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Word Application s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a word application s operations and of UAIE functionalities with respect to word application and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a media application. Such embodiments may include artificial intelligence that enables a media player or other such device or application to learn the operation of the media application store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the media application with partial minimal or no user input to help the user in his her use of media player.

UAIE can be used on a Media Player i.e. Computing Device etc. . Media Player may include Media Application i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial Intelligence Unit Display Memory Storage Sound interface Speaker and Media Player Controls . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

Media Player comprises the functionality for performing media operations and or other functionalities. Media Player comprises the functionality for playing media. Examples of Media Player include a music player such as an iPod a video player such as a DVD player a picture player a television device a media capable computer a media capable cellular phone such as a smartphone a media capable tablet and or other media players. Media Player can be referred to as and comprises any features functionalities and embodiments of Computing Device .

In some aspects Media Application comprises the functionality for performing media operations on Media Player and or other functionalities. Media Application comprises the functionality for accessing playing managing manipulating and or performing other operations on media or references thereto. Media can be stored in files objects data structures and or other repositories or in a database DBMS and or other such system or repository. Media comprises sound video pictures and or other media generally included in digital files. Media files may include additional information such as author authorship date copyright information and or other additional information pertinent to the media. Media Application and or media i.e. media files etc. can reside on User s Media Player or on a Remote Computing Device accessible over a Network and if on a Remote Computing Device Media Player and or media i.e. media files etc. may be available as a network service such as music or video streaming service i.e. Netflix Youtube Pandora iTunes etc. . UAIE can attach to and obtain Media Application s instructions data and or other information and modify execution and or functionality of Media Application thereby providing artificial intelligence functionalities to Media Application as previously described. User can operate Media Application by using Media Player s control means. In one example User can input his her music playing instructions by using the music player s native control means such as iPod s control wheel. In another example User can input his her channel watching instructions by using television device s native control means such as a remote controller. In yet another example User can input his her operating instructions by using Media Player Controls . User can input his her operating instructions by using any other means or methods or a combination thereof. Media Application can be referred to as and comprises any features functionalities and embodiments of Software Application .

Media Player Controls comprises the functionality for inputting media operating instructions data and or other inputs and or other functionalities. Media Player Controls may include any means of inputting operating instructions data and or other inputs such as by pressing keys or buttons touching keys or buttons clicking keys or buttons sliding physical or graphical components and or manipulating other physical graphical and or other elements. Examples of Media Player Controls may include a control wheel i.e. iPod s control wheel etc. a remote controller a keypad a touchscreen a keyboard a track point or other input or control device.

Sound Interface comprises the functionality for acoustical processing of output from Media Application i.e. Software Application etc. or other disclosed elements and or other functionalities. Sound Interface may be or include a sound driver a sound API a built in sound interface an operating system provided interface a sound processing device a sound card a sound adapter and or other sound interface.

Speaker comprises the functionality for producing sound and or other functionalities. Speaker can be a built in or an external speaker headphone and or other sound producing device.

In one example when User wishes to play a media file on Media Player User can issue an operating instruction to Media Application via Media Player Controls to play the media file. Media Application may then retrieve the media file or a reference thereto from Memory Storage Remote Computing Device and or other system or repository and play the media file. In another example when User wishes to increase or decrease sound volume User can issue an operating instruction to Media Application via Media Player Controls to increase or decrease sound volume of Speaker . In yet another example when User wishes to skip a specific part of a media file User can issue an operating instruction to Media Application via Media Player Controls to fast forward a part of the media file. Various other operating instructions and or operations can be implemented in Media Application examples of which include rewinding pausing or stopping a media file changing the view of a media file renaming a media file viewing or editing media file information i.e. Extra Info etc. deleting a media file creating editing or manipulating media file lists and or other media player instructions and or operations. UAIE can learn Media Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as media file or a reference thereto playing sound volume changing fast forwarding and or other operations by storing the instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments Media Player comprises a music player such as an iPod. Media Application may include or access music files or references thereto stored in Media Player s Memory Storage and or other local repository for example. User may listen to a playlist of songs A B C and D. After songs A and B are finished playing song C would start. After certain time User may decide that he she does not like a middle part of song C and User can issue an operating instruction to Media Application to fast forward song C to listen to the ending of song C. Media Application may execute a function such as fastForward 73 . . . to implement fast forwarding of song C by 73 seconds for example. User can then listen to the ending of song C and go on to listen to entire song D in the playlist. UAIE can learn Media Application s function or instruction i.e. Instruction Set or Operation etc. used to implement fast forwarding song C. UAIE can also learn contextual information i.e. Extra Info etc. such as the name of song C time offset from the start of song C at which User initiated fast forwarding and or other contextual information. UAIE can then anticipate future fast forwarding functions or instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described. Next time User plays song C Media Application can implement fast forwarding and or other operations autonomously.

In other exemplary embodiments Media Player may be a desktop computer smart phone or network connected television device with web browsing capabilities such as a smart TV . Media Application may include or access video files or references thereto stored on a Remote Computing Device accessible over a Network . In one example the video files can be delivered as a network service such as video or channel streaming service i.e. Netflix Google Play iTunes etc. . In another example the video files can be delivered as a network service such as video file downloading service where files are downloaded to Media Player s Memory Storage and or other local repository and then played. User may prefer specific settings when he she watches video files on a specific device. For example User may watch a file from a video streaming service on a desktop computer in his her office. Upon starting the video file User may decide to adjust Media Application s window size volume subtitles and or other settings to his her preference for a desktop computer and office setting. User may then go to a park on his her lunch break and watch a file from the video streaming service on a smartphone. Upon starting or continuing a video file User may decide to adjust Media Application s window size volume subtitles and or other settings to his her preference for a smartphone and outdoor setting. User may then go home at the end of the day and watch a file from the video streaming service on a smart TV. Upon starting or continuing a video file User may decide to adjust Media Application s window size volume subtitles and or other settings to his her preference for smart TV and home setting. For each of the Media Players i.e. desktop computer smartphone smart TV etc. User can issue operating instructions to Media Application to adjust window size volume subtitles and or other settings. Media Application may execute functions such as setWindowSize 400 300 . . . setVolume 48 . . . and subtitlesOn to implement adjusting window size volume and subtitles for example. UAIE can learn Media Application s functions or instructions i.e. Instruction Sets or Operations etc. used to implement adjusting window size volume and subtitles. UAIE can also learn contextual information i.e. Extra Info etc. such as the type of computing device display size and or other contextual information. UAIE can then anticipate future functions or instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described. Next time User watches a video file on a specific Media Player i.e. desktop computer smartphone smart TV etc. Media Application can implement adjusting the settings and or other operations for that particular device autonomously.

In further exemplary embodiments a global Knowledgebase including video playing knowledge i.e. Knowledge Cells etc. of other users may be available to be used in anticipating Media Application s instructions. For example a Knowledge Cell or other repository may include specific video files and their network locations that users of the global Knowledgebase may find useful in searching for their video content of interest.

In yet other exemplary embodiments Media Player may be a standard television device without web browsing capabilities. Media Application may include or access cable satellite on the air and or other video channels or references thereto. In one example User may watch specific channels at specific times as many television watchers do when they watch daily or weekly scheduled shows and UAIE can learn the channel switching instructions and their times i.e. using time stamp etc. and autonomously switch to these channels at their specific times. If User is not at home UAIE can also trigger a recording process learned from User as previously described for later recorded channel watching. In another example while watching his her favorite show User may switch to other channels during commercials in specific time intervals and UAIE can learn the channel switching instructions and their time intervals i.e. using time stamp or other Extra Info etc. and autonomously switch the channels to avoid commercials. In a further example User may change color contrast brightness and or other settings based on User s preferences for various types of channels and content i.e. darker for movies etc. and UAIE can learn these settings changing instructions and adjust the settings autonomously. In each of the preceding examples UAIE can learn Media Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Media Application s operations as previously described. Furthermore Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Media Application s operations as previously described.

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Media Application s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Media Application s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a media application s operations and of UAIE functionalities with respect to media application and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a global position system GPS application. Such embodiments may include artificial intelligence that enables a GPS receiver or other such device or application to learn the operation of the GPS application store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the GPS application with partial minimal or no user input to help the user in his her use of the GPS receiver.

UAIE can be used on a GPS Receiver i.e. Computing Device etc. . GPS Receiver may include GPS Application i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial Intelligence Unit Display Memory Storage Sound interface Speaker Speech Recognizer Microphone and Touchscreen . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

GPS Receiver comprises the functionality for performing GPS operations and or other functionalities. Examples of GPS Receiver include a hand held GPS receiver a built in GPS receiver i.e. built in a car or boat etc. GPS capable cellular telephone i.e. smartphone etc. and or other GPS receivers. GPS Receiver can be referred to as and comprises any features functionalities and embodiments of Computing Device .

In some aspects GPS Application comprises the functionality for performing GPS operations on GPS Receiver and or other functionalities. GPS Application comprises the functionality for accessing managing manipulating presenting performing calculations with and or performing other operations on or with location references. Location references can be stored in files objects data structures and or other such repositories or in a database DBMS and or other such system or repository. A location reference may include latitude longitude altitude coordinates street address distance from a point absolute or relative location reference and or other location reference. A location reference may also include additional information such as nearby restaurants museums or other attractions population information historic facts climate weather information and or other additional information pertinent to a specific location reference. GPS Application and or location references can reside on User s GPS Receiver or on a Remote Computing Device accessible over a Network and if on a Remote Computing Device GPS Application and or location references may be available as a network service such as online GPS Application web service for updating location references or other network service. UAIE can attach to and obtain GPS Application s instructions data and or other information and modify execution and or functionality of GPS Application thereby providing artificial intelligence functionalities to GPS Application as previously described. User can operate GPS Application by using GPS Receiver s control means. In one example User can input his her operating instructions by using GPS Receiver s native control means such as Touchscreen . In another example User can input his her operating instructions by using voice inputs via Microphone and Speech Recognizer that may interpret voice inputs as previously described. User can input his her operating instructions by using any other means or methods or a combination thereof. GPS Application can be referred to as and comprises any features functionalities and embodiments of Software Application .

Touchscreen comprises the functionality for enabling input of operating instructions data and or other inputs and or other functionalities. Touchscreen may include any means of inputting operating instructions data and or other inputs such as by touching areas of Touchscreen sliding Touchscreen s slider components and or manipulating other Touchscreen elements.

Speech Recognizer comprises the functionality for processing input events of Microphone for use by GPS Application or other elements and or other functionalities. Speech Recognizer comprises the functionality for listening to voice events on Microphone interpreting the voice events as User s voice commands and transmitting the voice commands for use by GPS Application or other elements. Speech Recognizer can be implemented by utilizing for example 1 an operating system s speech recognition functionality such as iOS s Voice Services Siri etc. which may come inherently as part of the computing device or mobile device package 2 a Java Speech API JSAPI or any of its implementations such as The Cloud Garden Sphinx etc. 3 applications or engines providing speech recognition functionality such as OpenEars Dragon Mobile iSpeech CeedVocal Flite Julius etc. and or 4 other systems or techniques including custom ones. Speech Recognizer enables User to issue operating instructions by voice input. In general Speech Recognizer may identify or recognize speech or sound from Microphone by comparing sample values of digitally sampled sound or portions thereof coming from Microphone with sample values of digitally sampled sound from a collection of known sounds. The collection of known sounds can be stored locally on GPS Receiver or remotely on a remote computing device accessible over a network.

Microphone comprises the functionality for receiving and or detecting User s voice events or inputs and or other functionalities. Most modern mobile and computing devices include Microphone as one of the input devices.

In one example when User wishes to visit a location stored on GPS Receiver User can issue an operating instruction to GPS Application via Touchscreen to calculate a route and provide directions from User s current location to the location User wishes to visit. User s current location can be determined by using satellite signals cellular signals triangulation and or by other methods. In another example when User wishes to change a route that GPS Application previously calculated User can issue an operating instruction to GPS Application via Touchscreen to calculate an alternate route and provide directions from User s current location to the location User wishes to visit. In yet another example when User wishes to view information about a location User wishes to visit i.e. when User reaches the location etc. User can issue an operating instruction to GPS Application via Touchscreen to present location information i.e. nearby restaurants museums or other attractions population information historic facts climate weather information etc. on Display . Various other operating instructions and or operations can be implemented in GPS Application examples of which include changing the view of a location reference i.e. zooming tilting moving etc. changing the view of a calculated route or directions increasing or decreasing the volume of any voice directions adjusting user preferences i.e. calculating quickest or shortest routes avoiding toll roads screen color preferences language preferences etc. updating location references i.e. updating from a network service etc. renaming a location reference viewing or editing location reference information i.e. Extra info etc. deleting a location reference and or any other GPS receiver instructions and or operations. UAIE can learn GPS Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as calculating a route changing a route viewing a location information and or other operations by storing the instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments GPS Receiver comprises a network connected GPS receiver. GPS Application may include or access location references stored in GPS Receiver s Memory Storage and or other local repository or on a Remote Computing Device accessible over a Network . As User operates GPS Application in his her pursuit of visiting locations of interest UAIE can learn GPS Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra info etc. and anticipate future instructions i.e. anticipatory Instruction Sets or Operations as previously described. Additionally a global Knowledgebase including location visiting knowledge i.e. Knowledge Cells etc. of other users may be available to be used in anticipating GPS Application s instructions. For example a Knowledge Cell or other repository may include specific locations that users of the global Knowledgebase may find useful in searching for their locations of interest to visit. Specifically for example User may come to a city for the first time and look for places of interest to visit. After User discovers and visits a great restaurant and or an interesting museum. UAIE can anticipate User s future location visiting instructions based on location visits of other users in the global Knowledgebase who visited the same or similar restaurant and or museum. In this and each of the preceding examples UAIE can learn GPS Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of GPS Application s operations as previously described. Furthermore Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of GPS Application s operations as previously described.

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of GPS Application s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of GPS Application s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a GPS application s operations and of UAIE functionalities with respect to GPS application and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a computer game also referred to as video game game application game or other such reference etc. . Such embodiments may include artificial intelligence that enables a gaming device or other such device or application to learn the operation of the computer game and or any of its objects i.e. player s avatar opponent s avatar computer object etc. store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the computer game and or any of its objects with partial minimal or no user input to help the user in his her use of the computer game.

UAIE can be used on Gaming Device i.e. Computing Device etc. . Gaming Device may include Game Application i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial Intelligence Unit Display Memory Storage and Game Controller . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

Gaming Device comprises the functionality for processing or implementing computer games i.e. Game Applications etc. and or other functionalities. Examples of Gaming Device include a video game console i.e. Sony PlayStation Microsoft Xbox etc. arcade machine laptop or desktop computer tablet computer computing capable telephone i.e. smartphone cellular phone etc. server and or other gaming or computing devices. Gaming Device can be referred to as and comprises any features functionalities and embodiments of Computing Device .

In some aspects Game Application comprises the functionality for performing gaming operations on Gaming Device and or other functionalities. Various types of Game Applications exist such as 2D 3D single player multi player strategic action adventure word puzzles mind games and or other game types. One of ordinary skill in art will understand that while all possible embodiments of Game Applications or their types are too voluminous to list they are all within the scope of this disclosure. Examples of some popular Game Applications include Tetris Pac man Solitaire Super Mario Doom Command and Conquer Grand Theft Auto and or others. UAIE can attach to and obtain Game Application s instructions data and or other information and modify execution and or functionality of Game Application thereby providing artificial intelligence functionalities to Game Application as previously described. Game Application can reside on User s Gaming Device or on a Remote Computing Device accessible over a Network and if on a Remote Computing Device Game Application may be available as a network service such as zynga.com games.com and or other online gaming services. User can operate Game Application by using Gaming Device s control means. In one example User can input his her game playing instructions by using Gaming Device s native control means such as Game Controller . In another example User can input his her game playing instructions by using a camera or other detector that captures User s body movements. In yet another example User can input his her game playing instructions by using voice inputs via Microphone and Speech Recognizer that may interpret voice inputs. User can input his her operating or game playing instructions by using any other means or methods or a combination thereof.

Game Application can be referred to as and comprises any features functionalities and embodiments of Software Application .

Game Controller comprises the functionality for enabling input of game playing instructions data and or other inputs and or other functionalities. Game Controller may include any means of inputting operating instructions data and or other inputs such as by pressing keys or buttons touching keys or buttons clicking keys or buttons moving or sliding physical or graphical components and or manipulating other physical graphical and or other elements. Examples of Game Controller include Sony PlayStation or Microsoft Xbox game controller Sony PlayStation Portable or other handheld game console controller arcade machine controller joystick keyboard keypad mouse steering wheel glove weapon i.e. gun sword etc. touchscreen control wheel track point or other input or control device.

In one example when User wishes to start a Game Application User can issue an operating instruction to Game Application via Game Controller to start Game Application . In another example when User wishes to move his her avatar or another object forward in a Game Application User can issue an operating instruction to Game Application via Game Controller to move forward. In yet another example when User wishes to jump in a Game Application User can issue an operating instruction to Game Application via Game Controller to jump i.e. elevate player s avatar or another object over an obstacle etc. . In yet another example when User wishes to utilize an object in a Game Application User can issue an operating instruction to Game Application via Game Controller to utilize the object i.e. utilize a shield open a door activate a switch etc. . In yet another example when User wishes to save a state of a Game Application User can issue an operating instruction to Game Application via Game Controller to save the state of the Game Application i.e. save the state of a game in a file or other repository for later playing etc. . Various other game playing or operating instructions and or operations can be implemented in Game Application examples of which include pausing or stopping a Game Application moving in various directions i.e. forward backward right left up down angular diagonal etc. selecting or changing appearance of the player s avatar selecting or utilizing an object communicating with other players deleting or renaming a saved game file and or other computer game instructions and or operations. UAIE can learn Game Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as starting a game moving forward jumping utilizing an object saving a game state and or other operations by storing the instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments Gaming Device comprises a video game console such as Sony PlayStation or Microsoft Xbox handheld game console such as Sony PlayStation Portable or Nintendo 3DS or other game console. In one example User can perform various actions or operations to defeat an opponent such as hit the opponent with body parts or objects i.e. fists handheld weapons etc. shoot the opponent with firearms i.e. guns missiles etc. use magic on the opponent i.e. magical objects or weapons etc. and or perform other actions or operations. In some aspects each type of opponent can be defeated by performing specific actions or operations for that type of opponent such as a fighter in a martial arts game may need to be hit in the head a number of times or in the chest a number of times or both. In another example User can perform various moves or maneuvers to overcome an obstacle such as jump over an obstacle crawl under an obstacle move around an obstacle climb over an obstacle fly over an obstacle and or perform other moves or maneuvers. In some aspects each type of obstacle may be overcome by performing specific moves or maneuvers for that type of obstacle. In yet another example User can save a state of the game played in regular or other intervals i.e. every 30 minutes etc. after reaching a certain stage in the game i.e. after completing a level etc. or at other times or stages in the game. User may pause the game select saving operation select default name or name the file or object into which to save the game resume the game and or perform other operations. In yet another example User can have a preference for specific game settings i.e. number of players game difficulty etc. game object settings i.e. appearance of player s avatar player s avatar s weapons etc. and or other game settings. As User performs actions operations moves or maneuvers in each of the examples above UAIE can learn Game Application s instructions i.e. Instruction Set or Operation etc. and or contextual information i.e. Extra Info etc. used to implement actions operations moves or maneuvers such as to defeat opponent to overcome an obstacle to save a game to adjust game settings and or other actions operations moves or maneuvers. UAIE can also anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. to defeat opponent to overcome an obstacle to save a game to adjust game settings and or to perform other actions operations moves or maneuvers autonomously as previously described.

Referring to in some exemplary embodiments User may play a game i.e. Game Application etc. in which User s Avatar is near Opponent and User may want to engage Opponent to defeat it. User may want to perform various actions moves maneuvers behaviors and or other operations while engaging Opponent such as moving toward Opponent i.e. walking running flying etc. blocking attacks shooting at Opponent utilizing objects i.e. utilizing shield sword or other objects etc. and or performing other defensive offensive evasive or other actions or operations User deems a good strategy to defeat Opponent or achieve other game goals. Each of the operations can be performed by User s issuing operating instructions to direct User s Avatar on how to act and behave. Once User s operating instructions are received Game Application can implement the corresponding User s Avatar s actions or operations by executing one or more instructions i.e. Instruction Sets or Operations etc. that cause User s Avatar to behave as User directed. UAIE can learn Game Application s instructions i.e. Instruction Set or Operation etc. and or contextual information i.e. Extra Info etc. used to implement User s Avatar s or other object s actions. In one example a User s Avatar s action includes one or more instructions i.e. Instruction Sets or Operations etc. to implement showing User s Avatar s head arms legs and or other body parts on Display such as showing in upright body position with arms extended toward opponent. In another example a User s Avatar s action includes one or more instructions i.e. Instruction Sets or Operations etc. to implement showing any objects that User s Avatar may be using on Display such as showing a handgun in User s Avatar s hands. In yet another example a User s Avatar s action includes one or more instructions i.e. Instruction Sets or Operations etc. to implement showing any effects of User s Avatar s actions on Display such as showing smoke after shooting. A User s Avatar s action may include one or more instructions i.e. Instruction Sets or Operations etc. to implement any other action or operation. One or more instructions i.e. Instruction Sets or Operations etc. can be included in a function. In some aspects a function includes all instructions i.e. Instruction Sets or Operations etc. needed to implement a certain action or operation and therefore a call to the function can implement that action or operation.

In addition to instructions i.e. Instruction Sets or Operations etc. UAIE can also learn contextual geo spatial situational environmental and or other information about User s Avatar and or other objects in a game application. In some aspects this contextual geo spatial situational environmental and or other information can be stored in Extra Info as previously described. In one example Extra Info includes any information about User s Avatar such as its location i.e. coordinates vector defined position absolute or relative position etc. its direction i.e. north southwest 13 degrees angular etc. its speed and or other information. In another example Extra Info includes any information about objects in a game such as objects name object s type i.e. player rock forest pond building tank etc. object s location i.e. coordinates vector defined position absolute or relative position etc. object s direction i.e. east northwest 118 degrees angular etc. object s speed and or other information. In yet another example Extra Info includes any information about relationships among objects in a game such as distance among objects allegiance among objects i.e. opponent friend etc. and or other information. Extra Info may include any information about a game application or any objects in a game application in alternate embodiments. Such Extra Info can then provide geo spatial and situational awareness and or other capabilities. In some aspects Decision making Unit and or other disclosed elements can utilize Extra Info to best anticipate future Game Application s instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

Contextual geo spatial situational environmental and or other information about User s Avatar and or other objects in a Game Application can be obtained by utilizing functions or methods of the 2D or 3D engine or environment in which the Game Application is implemented. For example location i.e. coordinates vector defined position absolute or relative position etc. of an avatar or other object in a 2D or 3D environment can be obtained by utilizing a function such as GameObject.Find ObjectN .transform.position in Unity 3D Engine GetActorLocation in Unreal Engine getPosition in Torque 3D and or other similar function or method in other 2D and 3D engines or environments. Furthermore location i.e. coordinates etc. of an avatar or other object on a screen can be obtained by utilizing WorldToScreen or similar function or method in various 2D or 3D engines or environments. An avatar s or other object s direction speed trajectory and or other information can then be computed from its coordinates. Other information i.e. name type allegiance etc. about an avatar or other object in a Game Application can similarity be obtained by utilizing functions or methods of the 2D or 3D engine or environment in which the Game Application is implemented or by utilizing functions or methods of custom built objects within the Game Application .

Once UAIE has learned instructions i.e. Instruction Sets or Operations etc. and or contextual geo spatial situational environmental and or other information i.e. Extra Info etc. in future instances where User s Avatar or other object encounters a similar situation including Opponent and or other objects UAIE can enable autonomous operation of User s Avatar or other objects by causing Game Application to implement instructions i.e. anticipatory Instruction Sets or Operations etc. autonomously as previously described. Therefore UAIE enables learning of a particular player s i.e. User s etc. methodology or style of playing the game. In some aspects learning of a particular player s i.e. User s etc. methodology or style of playing the game includes learning the player s i.e. User s etc. directing or operating User s Avatar in certain contextual geo spatial situational environmental and or other circumstances. For example one player may shoot opponent while another player may strike the opponent with a sword. Also one player may jump over an obstacle while another player may move around the obstacle. Further one player may drive fast in a racing game while another player may drive cautiously etc. The knowledge of User s methodology or style of playing the game can be used to provide autonomous functionalities such as auto pilot and or other automatic playing functionalities to Game Application User s Avatar and or other objects in the game. In one example auto pilot automatic and or other autonomous playing functionalities can be utilized in games where User may need to direct or operate more than one avatar such as games in which User can switch among avatars and operate an active avatar while other user s avatars operate automatically or autonomously. In another example auto pilot automatic and or other autonomous playing functionalities can be utilized in situations where user may want to allow his her avatar to operate automatically or autonomously such as in situations when user is distracted i.e. gets a phone call etc. and does not want to pause the game and or in other situations. Auto pilot automatic and or other autonomous playing functionalities can be activated to take control manually by User such as user s switching to another avatar or automatically by the system such as Decision making Unit s finding a Knowledge Cell with high degree of matching accuracy and executing it. Auto pilot automatic and or other autonomous playing functionalities can be effective for any number of actions or operations such as for a single or multiple actions or operations or for any period of time such as for a second for a number of minutes or continuously. Furthermore knowledge of User s methodology or style of playing the game can be utilized to enable operation of artificially intelligent avatars that operate with full or partial autonomy. An artificially intelligent avatar may exemplify User s methodology or style of playing the game as learned from User . One or more artificially intelligent avatars can be utilized in Game Application to assist User in defeating Opponent or achieving another game goal. In one example User can utilize a team or army of artificially intelligent avatars each of which may exemplify User s methodology or style of playing the game. Artificially intelligent avatars may be dispersed around User s Avatar within a specific radius and follow User s Avatar s movement. In another example artificially intelligent avatars may move autonomously toward a certain point or goal in a game. In yet other example artificially intelligent avatars can be completely autonomous and move without any directions and rely completely on the knowledge learned from User s methodology or style of playing the game.

In some embodiments UAIE enables a professional or other experienced game player to record his her methodology or style of playing a game. The knowledge i.e. Knowledge Cells etc. of User s methodology or style of playing a game can be stored in Knowledgebase or other repository. If the knowledge i.e. Knowledge Cells etc. of User s methodology or style of playing a game is stored in a global Knowledgebase any Game Application or UAIE having access i.e. over a network etc. to the global Knowledgebase can implement User s methodology or style of playing a game as previously described. User can sell his her knowledge i.e. Knowledge Cells or entire Knowledgebase etc. to other users who may want to implement User s methodology or style of playing a game. User can sell his her knowledge i.e. Knowledge Cells or entire Knowledgebase etc. under a commercial or other license. Buyers of the Knowledge Cells or Knowledgebase can use it for various purposes such as to improve their own actions moves maneuvers behaviors and or other operations in playing the game to enable other characters i.e. support characters avatars or other objects etc. to act move maneuver behave and or perform other operations according to the methodology or style of User or use it for any other purpose. In some aspects a buyer can load the bought Knowledge Cells or Knowledgebase into his her UAIE. Once loaded the Knowledge Cells or Knowledgebase can be initiated or activated manually as an executable sequence or automatically through UAIE s decision making process. Buyer s Game Application can then implement anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. included in the bought Knowledge Cells or Knowledgebase as previously described. Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network as previously described. For example instead of storing User s methodology or style of playing a game in Knowledgebase and or Knowledge Cells User s methodology or style of playing a game can be stored in Neural Network as previously described.

In further embodiments location distance direction movement and or other features or attributes of objects in Game Application or other application may include or be determined from coordinates or other location defining techniques. Such coordinates may include x i.e. latitude etc. y i.e. longitude etc. z i.e. altitude etc. and or other coordinates. Any other systems of coordinates or location defining techniques can be used such as for example a vector based method angle and distance from a reference point intersecting angles from various reference points triangulation absolute position relative position and or other systems or techniques.

In further embodiments objects within a game i.e. player s avatar opponent s avatar forest rock pond building tank etc. can be implemented as data objects in Game Application s design or code. In some aspects UAIE can be selective in learning Game Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. to include those instructions and or contextual information implemented or related to a specific object. In one example UAIE can learn Game Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. implemented or related to User s Avatar . In another example UAIE can learn Game Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. implemented or related to Opponent even if Opponent may be a computer directed or another player directed object. In yet another example UAIE can learn Game Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. implemented or related to any other object i.e. forest pond rock building tank etc. .

In examples shown in User s Avatar may confront Opponent as in scenarios A B and C. In an example in scenario A Opponent may attempt a physical attack on User s Avatar such as an attempt to punch User s Avatar as shown. User may decide to move User s Avatar into a blocking position or posture to block the incoming punch. Game Application s instructions i.e. Instruction Sets or Operations etc. that implement the blocking posture may include a function such as blockPunch Param1 Param2 . . . that can be disassembled and stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. In an example in scenario B Opponent may utilize an object such as a shield to deflect incoming projectiles as shown. User may decide to direct User s Avatar to shoot Opponent with a laser beam that Opponent s shield cannot deflect. Game Application s instructions i.e. Instruction Sets or Operations etc. that implement a laser shooting action may include a function such as shootLaser Param1 Param2 . . . that can be disassembled and stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. In an example in scenario C Opponent may fly near User s Avatar as shown. User may decide to direct User s Avatar to shoot Opponent with a missile i.e. homing missile etc. that can reach Opponent in flight. Game Application s instructions i.e. Instruction Sets or Operations etc. that implement a missile shooting action may include a function such as shootMissile Param1 Param2 . . . that can be disassembled and stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. In scenarios A B C and or other various scenarios Game Application can implement any number of instructions i.e. Instruction Sets etc. or functions that can be disassembled into their portions and stored into Operation or other repository along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of User s Avatar s operations within Game Application . Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Game Application s operations as previously described.

In some aspects Autonomous Avatar or other autonomous object may include autonomous user s avatar any other autonomous avatar or character and or any autonomous object whether controlled by UAIE or other method system or function. Autonomous Avatar or other autonomous object may include knowledge i.e. Knowledge Cells etc. of actions moves maneuvers behaviors and or other operations learned from User . In one example Autonomous Avatar or other autonomous object may encounter Opponent as in or similar to scenario A in . Decision making Unit may search for a Knowledge Cell that includes similar object i.e. Opponent etc. and or its properties i.e. punching posture etc. in Autonomous Avatar s surrounding. Substantial Similarity Comparison i.e. performed by or for Decision making Unit etc. may find a Substantially Similar Knowledge Cell that includes Opponent or other similar object in a punching or other similar posture and that includes instructions i.e. Instruction Sets or Operations etc. used to implement a blocking action as in scenario A when User directed User s Avatar . UAIE can then implement the blocking action autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Game Application s operations as previously described. In another example Autonomous Avatar or other autonomous object may encounter Opponent as in or similar to scenario B in . Decision making Unit may search for a Knowledge Cell that includes a similar object i.e. Opponent etc. and or its properties i.e. utilizing a shield etc. in Autonomous Avatar s surrounding. Substantial Similarity Comparison i.e. performed by or for Decision making Unit etc. may find a Substantially Similar Knowledge Cell that includes Opponent or other similar object utilizing a shield or other similar item and that includes instructions i.e. Instruction Sets or Operations etc. used to implement a laser shooting action as in scenario B when User directed User s Avatar . UAIE can then implement the laser shooting action autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Game Application s operations as previously described. In another example Autonomous Avatar or other autonomous object may encounter Opponent as in or similar to scenario C in . Decision making Unit may search for a Knowledge Cell that includes similar object i.e. Opponent etc. and or its properties i.e. flying etc. in Autonomous Avatar s surrounding. Substantial Similarity Comparison i.e. performed by or for Decision making Unit etc. may find a Substantially Similar Knowledge Cell that includes Opponent or other similar object flying or performing other similar maneuver and that includes instructions i.e. Instruction Sets or Operations etc. used to implement a missile shooting action as in scenario B when User directed User s Avatar . UAIE can then implement the missile shooting action autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Game Application s operations as previously described. Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples Decision making Unit can search for a path in Neural Network that includes similar objects and or their properties in Autonomous Avatar s surrounding. Decision making Unit may find a Substantially Similar Path that includes such similar objects and or their properties and that includes instructions i.e. Instruction Sets or Operations etc. used to implement User s operations in similar circumstances. UAIE can then implement the operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Game Application s operations as previously described.

In a game application example shown in User may detect Opponent and choose to move User s Avatar on Path E toward Opponent to confront Opponent . User s Avatar may be in upright posture in Location E1 with coordinates 5 5 . User may decide to move User s Avatar into Location E2 with coordinates 5.2 6 on Path E toward Opponent as shown. Game Application s instructions i.e. Instruction Sets or Operations etc. that implement the move may include a function such as moveAvatar 5.2 6 . . . that can be disassembled and stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. In one example information that can be stored in Extra Info includes User s Avatar s current i.e. 5.2 6 and prior i.e. 5 5 coordinates from which direction of movement i.e. northeast 87 degrees etc. or other information can be computed i.e. computed contextual information etc. later in the process. In some aspects direction of movement or other computed information can be pre computed such as at a time when the instruction i.e. Instruction Set or Operation etc. implementing the move is disassembled and the pre computed direction of movement or other computed information can be stored as Extra Info so no calculation is necessary later in the process. In another example Extra Info may store User s Avatar s body position or posture such as upright posture crawling posture and or other postures. In another example Extra info may store coordinates of objects surrounding User s Avatar such as Opponent s coordinates 13 16 Forest coordinates 5 14 Rock coordinates 10 8 . Pond coordinates 13 4 and or other objects coordinates or locations. In some aspects coordinates of the center or any other point of a large object such as Forest Rock Pond and or others can be utilized to provide information on the object s location. In other aspects coordinates of more than one point of a large object that spans multiple screens such as Forest Pond and or others can be utilized to provide information on the object s location. In yet other aspects coordinates of the boundaries or points thereon of a large object such as Forest Rock Pond and or others can be utilized to provide information on the shape of the object in addition to its location. In yet another example Extra Info may store types of objects surrounding User s Avatar such as Opponent being robot object type Forest being camouflage object type Rock being cover object type Pond being camouflage object type and or other object types. Objects types may be different in different games such as Pond may be body of water object type in other games. Any other object types can be used depending on the game. Any other contextual geo spatial environmental situational and or other information about User s Avatar and or objects in the game can be stored in Extra Info . User may then decide to move User s Avatar into Location E3 with coordinates 5.5 7 toward Opponent . Game Application can implement a function such as moveAvatar 5.5 7 . . . that can be stored along with any Extra Info as previously described. User s Avatar may be approaching Opponent s detection area or line of sight and User may decide to position User s Avatar in a crawling posture to avoid detection. Game Application can implement a function such as changePosture Crawling . . . that can be stored along with any Extra Info as previously described. User may then decide to move User s Avatar into Location E4 with coordinates 7.5 10 toward Opponent . Game Application can implement a function such as moveAvatar 7.5 10 . . . that can be stored along with any Extra Info as previously described. In some aspects a single function can be used to implement the change of posture and the move such as moveAvatar Crawling 7.5 10 . . . or moveAvatarCrawling 7.5 10 . . . . When User s Avatar reaches Opponent User may decide to place User s Avatar into a defensive posture to get ready for close combat as shown. Game Application can implement a function such as changePosture Defensive . . . that can be stored along with any Extra info as previously described. In some aspects User s Avatar s movement may include a single movement such as from Location E1 to Location E8. In other aspects User s Avatar s movement may include a set of sub movements such as from Location E1 to Location E2 from Location E2 to Location E3 and so on as shown. In some embodiments in each Location E1 E2 E3 E4 E5 E6 E7 E8 etc. Game Application can implement a move function posture changing function and or other instruction i.e. Instruction Set etc. or function that can be disassembled into its portions and stored in Operation or other repository along with any Extra info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of User s Avatar s operations within Game Application . Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Game Application s operations as previously described.

In an example shown in Autonomous Avatar or other autonomous object may include UAIE functionalities comprising knowledge i.e. Knowledge Cells etc. of moves postures actions behaviors and or other operations learned from User in past circumstances such as circumstances shown in . Autonomous Avatar or other autonomous object may be near Opponent and or other objects as shown. Decision making Unit may search fora Knowledge Cell that includes one or more similar objects i.e. Opponent Forest Rock Pond etc. and or their properties as in Autonomous Avatar s surrounding shown in for example. Substantial Similarity Comparison i.e. performed by or for Decision making Unit etc. may find a Substantially Similar Knowledge Cell that includes Opponent or other similar object and that includes instructions i.e. Instruction Sets or Operations etc. used to implement User s Avatar s moves actions postures behaviors and or other operations in similar circumstances. UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar such as those on Path H in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. . Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . For example Decision making Unit may search for a path in Neural Network that includes one or more similar objects i.e. Opponent Forest Rock Pond etc. and or their properties as in Autonomous Avatar s surrounding shown in . Decision making Unit may find a Substantially Similar Path that includes Opponent or other similar object and that includes instructions i.e. Instruction Sets or Operations etc. used to implement User s Avatar s moves actions postures behaviors and or other operations in similar circumstances. UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar such as those on Path H in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. .

In some aspects the moves actions postures behaviors and or other operations can be absolute in which case Autonomous Avatar or other autonomous object may perform the same exact moves actions postures behaviors and or other operations as the ones stored in Substantially Similar Knowledge Cell for given circumstances. Absolute moves actions postures behaviors and or other operations can be implemented by absolute Instruction Sets or Operations . Absolute moves actions postures behaviors and or other operations can be suitable for certain types of games such as for example pinball simulations driving simulations tetris like games chess like games and or others where terrain or number or types of objects does not change substantially and or where moves actions postures behaviors and or other operations are limited in variety. In other aspects context reliant games such as 3D games flight simulations strategic games and or others may require performance of moves actions postures behaviors and or other operations relative to other objects in the game where the terrain or circumstances change rapidly. Relative moves actions postures behaviors and or other operations can be implemented by relative Instruction Sets or Operations . As such importance i.e. as indicated by importance Index or another importance ranking technique etc. or weight of contextual information i.e. Extra Info etc. may be more important than that of Instruction Set Portions in Substantial Similarity Comparisons for example. Context analysis or interpretation can also be used in context reliant games or other applications. In one example Decision making Unit Context Interpreter and or other element can analyze one or more Substantially Similar Knowledge Cells and or other information and infer that User moved User s Avatar toward Opponent and used various postures or behaviors i.e. upright crawling defensive etc. . The inference that User s Avatar moved toward Opponent can be drawn by computing that the distance between User s Avatar and Opponent decreased and or that User s Avatar maintained direction of movement toward Opponent . The inference on the timing of User s Avatar s posture changes such as the change from upright into crawling posture can be drawn by computing User s Avatar s distance from Opponent to be approaching Opponent s detection area or line of sight. In some aspects the computations can be performed using coordinates of User s Avatar coordinates of Opponent or other objects and or other attributes properties Extra Info or information. Distance direction and or other information can be computed or estimated by using Pythagorean theorem Euclidean distance formula trigonometry and or other theorems formulas or disciplines.

In other aspects Autonomous Avatar s or other autonomous object s moves actions postures behaviors and or other operations can be based on any non UAIE system or process know in art such as for example moving toward opponent or other object as soon as detected moving toward or through closest camouflage type object i.e. Forest Pond etc. moving toward or taking cover in closest cover type object i.e. Rock building etc. taking shortest path to target taking fastest path to target taking best way around an obstacle performing evasive or other maneuvers and or other systems processes or functions. Such non UAIE systems or processes may include instructions i.e. Instruction Sets or Operations etc. that User did not perform i.e. not learned from User etc. . In some aspects these instructions i.e. Instruction Sets or Operations etc. can override User learned instructions i.e. Instruction Sets or Operations etc. . The override functionality enables Autonomous Avatar or other autonomous object to implement strategies actions moves postures behaviors and or other operations that were not learned through UAIE such as for example a strategy to engage opponent wherever it may be in the current field of view a strategy to engage the closest object i.e. hide in a forest if forest is closest cover behind a rock if rock is closest etc. a strategy to engage a preferred type of object first i.e. hide in a forest if forest is within sight cover behind a rock if rock is in between user s avatar and opponent etc. and or other strategies actions moves postures behaviors and or other operations. A non UAIE system or process may include any instruction i.e. Instruction Sets or Operations etc. or function that was not learned or generated through UAIE. In one example if Autonomous Avatar comes within a certain distance from a specific type of object i.e. Forest etc. Game Application may direct Autonomous Avatar into Forest based on forest preference method or function. In another example where both Forest and Opponent are within Autonomous Avatar s detection area if Opponent is closer than Forest Game Application may implement movement toward Opponent based on shortest path to target method or function. In yet another example where Rock and Opponent are within Autonomous Avatar s detection area if Rock is closer than and located in a general direction of Opponent Game Application may implement movement toward Rock based on finding cover method or function.

In yet other aspects a combination of methods or functions can be utilized to direct moves actions postures behaviors and or other operations of Autonomous Avatar or other autonomous object. In one example a non UAIE system or process can be utilized to direct Autonomous Avatar or other autonomous object in patrolling a specific area in the game in a traversing roaming east to west circular rectangular zig zag spherical or other pattern. When Autonomous Avatar or other autonomous object encounters circumstances similar to any of the prior learned circumstances UAIE can take control and implement instructions i.e. anticipatory Instruction Sets or Operations etc. to direct Autonomous Avatar or other autonomous object according to the stored knowledge on how to move act behave and or otherwise operate in those particular or similar circumstances. In another example while patrolling an area based on a non UAIE system or process Autonomous Avatar or other autonomous object may detect an opponent type object. UAIE may recognize the circumstances as one of the previously stored circumstances and take control from User or another system or process. Autonomous Avatar or other autonomous object may defeat opponent under the control of UAIE at which point UAIE can switch control to User or another system or process. In yet another example UAIE can take control from User or a non UAIE system or process at any point such as to place Autonomous Avatar or other autonomous object into a crawling posture when it reaches Opponent s detection area or line of sight as shown in . In yet another example UAIE can release control to User or to a non UAIE system or process at any point such as to allow User or a non UAIE system or process to move Autonomous Avatar or other autonomous object further toward Opponent after UAIE has implemented a crawling posture. In general UAIE can take control over or release control from any of its related objects at any time remain in control for any period of time and share control with other systems or processes as needed.

In an example shown in User may consider several paths of movement. User may consider moving User s Avatar on Path A through Forest that provides camouflage. User may consider moving User s Avatar on Path B directly toward Opponent . User may consider moving User s Avatar on Path C toward Rock that provides cover. User may consider moving User s Avatar on Path D through Pond that provides camouflage. User can move User s Avatar on any other path that User deems a good strategy to defeat Opponent or achieve other game goals. User s Avatar may be in Location A1 with coordinates 5 5 . User may decide to move User s Avatar into Location A2 with coordinates 5 6 on Path A toward Forest . Game Application s instructions i.e. Instruction Sets or Operations etc. that implement the move may include a function such as moveAvatar 5 6 . . . that can be stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. For example Extra Info can store User s Avatar s current and prior coordinates User s Avatar s posture i.e. upright posture crawling posture etc. coordinates of objects i.e. Opponent Forest Rock Pond etc. surrounding User s Avatar types of objects surrounding User s Avatar and or other contextual geo spatial environmental situational and or other information. User may then decide to move User s Avatar into Location A3 with coordinates 5 7 toward Forest and so on. In some embodiments in each Location A1 A2 A3 A4 A5 etc. Game Application can implement a move function and or other instruction i.e. Instruction Set etc. or function that can be disassembled into its portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of User s Avatar s operations within Game Application as previously described. Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . For example instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Game Application s operations as previously described. In some aspects while on the chosen path i.e. path A etc. User may also decide to perform various defensive offensive evasive and or other maneuvers and or other operations such as for example curved circular rectangular zig zag or other maneuvers and or other operations that can also be learned as described.

In an example shown in Autonomous Avatar or other autonomous object may include UAIE functionalities comprising knowledge i.e. Knowledge Cells etc. of moves postures actions behaviors and or other operations learned from User in past circumstances such as circumstances shown in . Autonomous Avatar or other autonomous object may be near Opponent Forest Rock Pond and or other objects. Decision making Unit can search for a Knowledge Cell that includes one or more similar objects and or their properties as in Autonomous Avatar s surrounding shown in for example. Importance Index or weight of Extra info may be increased as high or higher than that of Instruction Set Portions for the type of game application in question. Using these Importance Indexes or weights Substantial Similarity Comparison i.e. performed by or for Decision making Unit etc. may find a Substantially Similar Knowledge Cell that includes same or similar objects and that includes instructions i.e. Instruction Sets or Operations etc. used to implement User s Avatar s moves actions postures behaviors and or other operations in similar circumstances. UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar such as those on Path M in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. as previously described. Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . For example Decision making Unit may search for a path in Neural Network that includes one or more similar objects and or their properties as in Autonomous Avatar s surrounding shown in . Decision making Unit may find a Substantially Similar Path that includes Opponent or other similar object and that includes instructions i.e. Instruction Sets or Operations etc. used to implement User s Avatar s moves actions postures behaviors and or other operations in similar circumstances. UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar such as those on Path M in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. as previously described. Decision making Unit Context Interpreter and or other element with context interpreting functionalities can analyze one or more Substantially Similar Knowledge Cells and or other information and infer that User moved User s Avatar north toward Forest . The inference that User s Avatar moved north toward Forest can be drawn by computing that the distance between User s Avatar and Forest decreased and or that User s Avatar maintained direction of movement north toward Forest . A determination can also be made that Forest is located east of Autonomous Avatar . As such movement coordinates stored in Substantially Similar Knowledge Cell may be modified or replaced to direct Autonomous Avatar east toward Forest . UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar or other autonomous object such as moves on Path M in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. adjusted for contextual information as previously described.

In an example shown in User may consider several paths of movement such as Path A through Forest that provides camouflage Path B directly toward Opponent Path C toward Rock that provides cover Path D through Pond that provide camouflage and or other path that User deems a good strategy to defeat Opponent or achieve other game goals. User s Avatar may be in Location C1 with coordinates 5.5 5 . User may decide to move User s Avatar into Locations C2 C3 C4 C5 etc. on Path C toward Rock . Game Application s instructions i.e. Instruction Sets or Operations etc. that implement the moves may include a function such as moveAvatar 5.5 5 . . . that can be disassembled and stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. In some aspects Opponent Forest Rock Pond or other objects and or their properties within Area of Interest can be stored as Extra Info . Once covered behind Rock User may decide to wait a period of time for Opponent to approach. In some aspects Opponent can be a computer operated character programmed to engage User s Avatar as soon as detected and therefore it may approach User s Avatar around Rock . User may then direct User s Avatar to shoot or otherwise confront Opponent . In other aspects Opponent can be a human operated character whose user may decide to wait for User s Avatar to approach first. After waiting a period of time User may decide to move User s Avatar from around Rock toward Opponent such as in Locations C6 C7 C8 C9 C10 C11 etc. on Path C. In addition to the moves. User may also decide to perform various defensive offensive evasive and or other moves maneuvers actions behaviors postures and or other operations as previously described such as curved circular rectangular zig zag and or other maneuvers walking running flying and or other movements upright crawling and or other postures utilizing objects blocking attacks shooting at opponent waiting and or other actions or operations. Each move maneuver action behavior posture and or other operation can be implemented by Game Application through one or more instructions i.e. Instruction Sets etc. or functions that can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of User s Avatar s operations within Game Application as previously described. Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . For example instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Game Application s operations as previously described.

In an example shown in Autonomous Avatar or other autonomous object may include UAIE functionalities comprising knowledge i.e. Knowledge Cells etc. of moves postures actions behaviors and or other operations learned from User in past circumstances such as circumstances shown in . Opponent Forest Rock Pond and or other objects may be within Autonomous Avatar s or other autonomous object s Area of Interest . Decision making Unit can search for a Knowledge Cell that includes one or more similar objects and or their properties as in Autonomous Avatar s Area of Interest shown in for example. Importance Index or weight of Extra Info may be increased as high or higher than that of Instruction Set Portions for the type of game application in question. Using these Importance Indexes or weights Substantial Similarity Comparison i.e. performed by or for Decision making Unit etc. may find a Substantially Similar Knowledge Cell that includes same or similar objects as those in Autonomous Avatar s Area of Interest and that includes instructions i.e. Instruction Sets or Operations etc. used to implement User s Avatar s moves actions postures behaviors and or other operations in similar circumstances. UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar such as those on Path K in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. as previously described. Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . For example Decision making Unit may search for a path in Neural Network that includes one or more similar objects and or their properties as in Autonomous Avatar s surrounding shown in . Decision making Unit may find a Substantially Similar Path that includes Opponent or other similar object and that includes instructions i.e. Instruction Sets or Operations etc used to implement User s Avatar s moves actions postures behaviors and or other operations in similar circumstances. UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar such as those on Path K in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. as previously described. Decision making Unit Context Interpreter and or other element with context interpreting functionalities can analyze one or more Substantially Similar Knowledge Cells and or other information and infer that User moved User s Avatar toward Opponent and took cover behind Rock . The inference that User s Avatar moved toward Opponent and took cover behind Rock can be drawn by computing that the distance between User s Avatar and both Opponent and Rock decreased and or that User s Avatar maintained general direction of movement toward both Opponent and Rock . In some aspects a tolerance or threshold can be utilized in the computation or analysis to indicate whether Rock may be too far from the path toward Opponent for Rock to be of use as a cover object or for an accurate inference to be drawn. A determination can also be made that Rock is closer to Autonomous Avatar than Opponent and that Rock is located in a general direction i.e. within certain tolerance etc. of Opponent . As such movement coordinates stored in Substantially Similar Knowledge Cell can be modified or replaced to direct Autonomous Avatar toward Opponent while bending Autonomous Avatar s path to take cover behind Rock . UAIE can then autonomously implement moves actions postures behaviors and or other operations of Autonomous Avatar or other autonomous object such as moves on Path K in based on similar moves actions postures behaviors and or other operations decided by User in prior similar circumstances i.e. circumstances shown in etc. adjusted for contextual information as previously described.

In some embodiments User s Avatar Autonomous Avatar or other autonomous object or other object may not need to track or be aware of all objects and or their properties in the game or on the screen but track or be aware of objects and or their properties within an Area of Interest . This approach can save computing resources. In one example Area of Interest may include a radial circular elliptical or other such area around User s Avatar Autonomous Avatar or other autonomous object or other object. In another example Area of Interest may include a triangular rectangular octagonal or other such area around User s Avatar Autonomous Avatar or other autonomous object or other object. In yet another example Area of interest may include a spherical cubical pyramid like or other such area around User s Avatar Autonomous Avatar or other autonomous object or other object. Any other Area of Interest shape can be utilized. In some aspects Area of interest can be subdivided into sub areas i.e. sub circles sub rectangles sub spheres etc. . Sub areas can be used to classify objects by distance from User s Avatar Autonomous Avatar or other autonomous object or other object. For example objects closer to User s Avatar may be more important and may be assigned higher Importance Index or weight when stored as Extra info . User s Avatar Autonomous Avatar or other autonomous object or other object can scan its surrounding by utilizing Area of Interest or detection area. In some embodiments Area of Interest can be used to activate autonomous operation of User s Avatar Autonomous Avatar or other autonomous object or other object. In one example Autonomous Avatar or other autonomous object may be operated by a non UAIE system or process i.e. traversing system or process etc. until UAIE finds a Knowledge Cell that includes similar objects and or their properties as in current Area of Interest at which point UAIE can take control. In another example User s Avatar or other object may be operated by User until UAIE finds a Knowledge Cell that includes similar objects and or their properties as in current Area of Interest at which point UAIE can take control. In yet another example Autonomous Avatar or other autonomous object may be operated by a non UAIE system or process i.e. traversing system or process etc. until the system finds sufficient number or types of objects and or their properties to invoke UAIE functionalities at which point UAIE can take control.

UAIE functionalities can be implemented in any type of game application. In one example learning a user s steering wheel moves and or other operations for various road circumstances and performing autonomous steering wheel moves and or other operations in a car or other racing game can be implemented. In another example learning a user s moves actions postures behaviors and or other operations given various objects movements or other properties and performing autonomous operations in a 3D game i.e. first shooter game flight simulation etc. can be implemented. In yet another example learning a user s moves actions postures behaviors and or other operations given certain objects positions or other attributes and performing autonomous moves actions postures behaviors and or other operations in a strategic game can be implemented. In yet another example learning a user s moves actions and or other operations given certain items existence arrangement relationship or other properties and performing autonomous moves actions and or other operations in a tetris like word puzzle or mind game can be implemented.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a game application s operations and of UAIE functionalities with respect to game application and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a robot control application or robotic application. Such embodiments may include artificial intelligence that enables a robot or other such device or application to learn the operation of the robot control application and or the robot store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the robot control application and or the robot with partial minimal or no input from a user and or the environment.

UAIE can be used in a Robot i.e. Computing Device etc. . Robot may include Control Application i.e. Software Application etc. UAIE Acquisition and Modification Interface Artificial intelligence Unit Controller Sensor Interface Sensor Motor interface Actuator Memory and Storage . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

Robot comprises the functionality for performing robotic operations and or other functionalities. Robot comprises the functionality for performing mechanical physical or other operations. Robot may include an interface that enables Robot to perform robotic functionalities or mechanical operations. Robot may include any mechanical device with remote control capabilities. In some aspects Robot can be a User controlled robot. In other aspects Robot can be a partially autonomous robot. In other aspects Robot can be a fully autonomous robot. Examples of Robot include industrial robots military robots factory robots domestic robots personal robots medical robots and or other robots. Additional examples of robots include remote controlled ground aerial or water vehicles remote controlled toys telesurgery i.e. remote surgery etc. systems and or other such devices. Further examples of robots include auto pilot capable machines where control may be shared between a software application and a user and or other such devices. Robot can be referred to as and comprises any features functionalities and embodiments of Computing Device .

In some aspects Control Application comprises the functionality for performing robotic operations on Robot and or other functionalities. Control Application comprises the functionality for controlling Robot . Control Application may receive inputs from a user and or the environment employ some logic or rules and implement instructions to enable Robot to perform various operations for a given set of inputs or circumstances. UAIE can attach to and obtain Control Application s instructions data and or other information and modify execution and or functionality of Control Application thereby providing artificial intelligence functionalities to Control Application as previously described. Control Application can reside in Robot or on a Remote Computing Device accessible over a Network and if on a Remote Computing Device Control Application may be available as a network service as previously described. In some aspects Control Application can be implemented in electronic circuitry as a hardware component such as a chip microcontroller microprocessor or other such device. User can operate Control Application via Controller Human machine Interface microphone and or other input device. In addition to User inputs Control Application may receive sensory or other inputs from the environment. Control Application can control any element of Robot such as engage a motor or other elements to enable Robot to perform operations for which it was designed. Control Application can be referred to as and comprises any features functionalities and embodiments of Software Application .

Controller comprises the functionality for enabling input of robot operating instructions data and or other inputs and or other functionalities. Controller may include any means of inputting operating instructions data and or other inputs such as by pressing keys or buttons touching keys or buttons clicking keys or buttons moving or sliding physical or graphical components and or manipulating other physical graphical and or other elements. Examples of Controller include a joystick a keyboard a keypad a mouse a steering wheel a glove a touchscreen a control wheel a track point a remote controller or other input or control device. In some aspects Controller may include Microphone and Speech Recognizer for user s voice input as previously described.

Sensor comprises the functionality for detecting objects events or other activities in the sensor s environment and or other functionalities. Robot may include one or more Sensors to enable Robot to perceive and or interact with its environment i.e. Environment etc. . Examples of Sensor include vision i.e. video or other camera etc. sound i.e. microphone etc. tactile motion physical contact smell taste magnetic electro magnetic radio i.e. radio antenna etc. radar sonar and or other sensors or detectors.

Sensor Interface comprises the functionality for processing input events of Sensor and or other input devices for use by Control Application or other disclosed elements and or other functionalities. Examples of Sensor Interface include a sensor listener a device driver i.e. audio video or other driver a speech recognizer a video interpreter and or other interface.

Actuator comprises the functionality for moving an object to which it is attached and or other functionalities. Robot may include one or more Actuators to enable Robot to perform mechanical physical or other operations and or to interact with its environment i.e. Environment etc. . Actuators can be utilized for implementing movements actions behaviors maneuvers and or other operations as directed by Control Application . In some aspects Actuator itself can act upon the environment. In other aspects Actuator can be connected to or coupled with an element such as a wheel arm or other element to act upon the environment. Examples of Actuator include a motor a linear motor a servomotor a hydraulic element a pneumatic element an electro magnetic element a spring element and or other actuators. Examples of types of Actuator include a rotary actuator a linear actuator and or other types of actuators.

Motor interface comprises the functionality for processing output from Control Application or other elements for use by Actuator and or other functionalities. Motor Interface comprises the functionality for processing control signals or instructions from Control Application or other disclosed elements to control Actuator . Examples of Motor Interface include a microcontroller a device driver a device programming interface and or other interfaces.

In one example when User wishes to move Robot User can issue an operating instruction to Control Application via Controller and Control Application may engage a motor i.e. Actuator etc. to move Robot . In another example when User wishes to lift an arm of Robot User may issue an operating instruction to Control Application via Controller and Control Application may engage a hydraulic element i.e. Actuator etc. to lift the arm. In yet another example when User wishes to pick up an object with Robot User may issue an operating instruction to Control Application via Controller and Control Application may engage one or more motors hydraulic pneumatic or other elements i.e. Actuators etc. to pick up the object. Various other operating instructions and or operations can be implemented with Robot examples of which include pausing Robot stopping Robot moving Robot in various directions i.e. forward backward right left up down angular diagonal etc. selecting or utilizing an object with Robot communicating with other robots or devices and or other instructions or operations. UAIE can learn Control Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as moving Robot lifting Robot s arm picking up an object with Robot and or other operations by storing them in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments Robot comprises an industrial machine such as a loader with computing capabilities and or ability to run Control Application that controls or assists in controlling the loader. A loader may be a type of heavy machine with a mounted bucket used to move material i.e. sand gravel snow etc. from one location to another. In one example User may direct the loader i.e. Robot etc. to pick up material with the bucket from a pile. In another example User may direct the loader to move to a delivery location. In yet another example User may direct the loader to perform various moves maneuvers and or other operations to overcome an obstacle such as move around the obstacle move the obstacle and or perform other moves maneuvers and or operations with respect to the obstacle. In yet another example the loader may detect a moving object or person through a sensor i.e. video or motion sensor etc. and alert User and User may direct loader to move around the object or person stop and wait for the object or person to pass and or perform other moves maneuvers and or operations with respect to the object or person. In yet another example the loader may detect a moving object or person through a sensor i.e. video or motion sensor etc. and Control Application may direct loader to move around the object or person stop and wait for the object or person to pass and or perform other moves maneuvers and or operations with respect to the object or person based on a function or program. In some aspects each type of obstacle or object can be overcome by performing specific moves maneuvers and or other operations for that type of obstacle or object. In yet another example User may direct loader i.e. Robot etc. to unload material from the bucket to a delivery location. In yet another example User may direct the loader to move back into the original location to pick up additional material. As User directs the loader to perform moves maneuvers and or other operations in each of the examples above UAIE can learn Control Application s instructions i.e. Instruction Set or Operation etc. and or contextual information i.e. Extra Info etc. used to implement moves maneuvers and or other operations such as picking up material moving the loader overcoming an obstacle or object unloading material moving into original location and or other moves maneuvers or operations. UAIE can also anticipate future instructions i.e. anticipatory instruction Sets or Operations etc. for picking up material moving the loader overcoming an obstacle or object unloading material moving into original location and or performing other moves maneuvers or operations autonomously as previously described.

In other exemplary embodiments similar to the previously described game application examples Sensor i.e. video or other camera etc. can be utilized to detect objects in Robot s surrounding or area of interest. Objects in Robot s surrounding can be detected and or tracked by any of the object recognition systems techniques or tools known in art examples of which include deep neural networks convolutional neural networks OpenCV Open Source Computer Vision library CamFind API Kooaba 6px API Dextro API and or others. In some aspects object recognition techniques or tools may generally involve identifying and or analyzing object features such as lines edges ridge corners or blobs regions and or their relative positions sizes shapes etc. which may then be used to search for images with matching features. Also similar to the previously described game application examples. User may consider several paths of movement relative to objects in Robot s surrounding. User may choose a path that best accomplishes User s goals. In one example User may direct Robot i.e. loader etc. to move around the back of a moving truck i.e. truck is in Robot s way etc. in order to safely reach Robot s target i.e. a pile of material etc. . In another example User may direct Robot i.e. loader etc. to stop for a person to pass and then continue on its path to Robot s target. Control Application s instructions i.e. Instruction Sets or Operations etc. that implement the moves may include a function such as moveRobot Angle Distance . . . that can be stored along with any contextual geo spatial situational environmental and or other information i.e. Extra Info etc. as previously described. For example Extra Info can store Robot s current and prior positions i.e. positions relative to an object or reference point GPS coordinates etc. positions of objects in Robot s surrounding types i.e. truck person etc. of objects in Robot s surrounding and or other contextual geo spatial environmental situational and or other information. In some embodiments for each move action behavior maneuver and or other operation Control Application can implement a move function and or other instruction i.e. Instruction Set etc. or function that can be disassembled into its portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Control Application s operations as previously described. Also similar to the previously described game application examples autonomous Robot i.e. Robot controlled by UAIE etc. may include UAIE functionalities comprising knowledge i.e. Knowledge Cells etc. of moves actions behaviors maneuvers and or other operations learned from User in past circumstances such as circumstances including the truck person or other objects described above. Autonomous Robot may encounter a truck person and or other objects in future circumstances. Decision making Unit can search for a Knowledge Cell that includes one or more similar objects and or their properties as in autonomous Robot s surrounding. Decision making Unit may find a Substantially Similar Knowledge Cell that includes same or similar objects and that includes instructions i.e. Instruction Sets or Operations etc. used to implement Robot s moves actions behaviors maneuvers and or other operations in similar circumstances. UAIE can then autonomously implement moves actions behaviors maneuvers and or other operations of autonomous Robot such as moving around the back of the truck stopping for a person or performing other operations based on similar moves actions behaviors maneuvers and or other operations decided by User in prior similar circumstances as previously described.

In further exemplary embodiments Robot may be a remote controlled toy such as a remote controlled vehicle with computing capabilities and or ability to run Control Application that controls or assists in controlling the remote controlled vehicle. In one example User may direct the remote controlled vehicle i.e. Robot etc. to back away from an object after colliding with it. In another example User may direct the remote controlled vehicle to perform various moves maneuvers and or other operations when moving over stairs or other types of terrains. In yet another example the remote controlled vehicle may detect stairs or other type of terrain through a sensor i.e. video sensor radar etc. and Control Application may direct remote controlled vehicle to perform various moves maneuvers and or other operations when moving over stairs or other types of terrains based on a function or program. In some aspects each type of terrain can be handled by performing specific moves maneuvers and or other operations for that type of terrain. In yet another example User may direct remote controlled vehicle i.e. Robot etc. to perform various flips or other tricks that User finds amusing. In yet another example User may direct remote controlled vehicle i.e. Robot etc. to a charging station to be recharged. As User performs moves maneuvers and or other operations in each of the examples above UAIE can learn Control Application s instructions i.e. Instruction Set or Operation etc. and or contextual information i.e. Extra Info etc. used to implement the moves maneuvers and or other operations such as backing away after colliding with an object performing specific moves for specific types of terrains performing flips or other tricks moving into a charging station and or other moves maneuvers or operations. UAIE can also anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. for backing away after colliding with an object performing specific moves for specific types of terrains performing flips or other tricks moving into a charging station and or performing other moves maneuvers or operations autonomously as previously described.

In further exemplary embodiments Robot may be an autonomous robot. As such Robot can be controlled by Control Application that provides autonomous functionalities to Robot through various non UAIE systems or processes. In one example Robot may detect an object through its physical contact sensor and Control Application may execute one or more instructions i.e. Instruction Sets or Operations etc. to move Robot around the object. In another example Robot may detect an object through its vision sensor i.e. video or other camera etc. and Control Application may execute one or more instructions i.e. Instruction Sets or Operations etc. to move Robot closer to the object. In yet another example Robot may detect sound through its sound sensor i.e. microphone etc. and Control Application may execute one or more instructions i.e. instruction Sets or Operations etc. to stop Robot for best speech recognition. In yet another example Robot may detect a radio signal through its radio sensor i.e. radio antenna etc. and Control Application may execute one or more instructions i.e. Instruction Sets or Operations etc. to position Robot for best radio signal reception. Any other sensory inputs can be received and corresponding operations can be performed in other examples. In some embodiments involving autonomous robots UAIE can serve as a learning system to learn or record Control Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement autonomous Robot s operations in various circumstances. This knowledge i.e. Knowledgebase Knowledge Cells etc. can be loaded into another robot device machine and or application to provide pre learned knowledge as previously described. The robot device machine and or application into which the knowledge is loaded may then implement anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. included in the loaded Knowledgebase or Knowledge Cells . In some aspects UAIE can take control from or release control to Control Application and or any non UAIE system or process and therefore control Robot as previously described. Similar to Knowledgebase and or Knowledge Cells Neural network can also be used to store and or transfer knowledge of Control Application s operations among various robots devices machines and or applications to provide pre learned knowledge. In each of the preceding examples UAIE can learn Control Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Control Application s operations as previously described. Furthermore Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Control Application s operations as previously described.

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Control Application s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Control Application s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a robot s and or robot control application s operations and of UAIE functionalities with respect to robot and or robot control application and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

Referring to the teaching presented by the disclosure can be implemented in exemplary embodiments to provide UAIE functionalities for a database application. Such embodiments may include artificial intelligence that enables a server i.e. database server computer etc. or other such device or application to learn the operation of the database application store this knowledge in a knowledgebase neural network or other repository and enable autonomous operation of the database application with partial minimal or no user input to help the user in his her use of the database application.

UAIE can be used on a Server i.e. Computing Device etc. . Server may include Database Application i.e. Software Application etc. UAIE Acquisition and Modification interface Artificial Intelligence Unit Display Human machine Interface Memory and Storage . Other additional elements may be included as needed or some of the disclosed ones may be excluded or a combination thereof may be utilized in alternate embodiments.

Server comprises the functionality for performing computing or processing operations and or other functionalities. Server comprises any computing device capable of running or executing Database Application . Server can be implemented as a local server on the user s computing device i.e. Computing Device etc. as shown. Server can also be implemented as a remote server or Remote Computing Device accessible via Network as previously described. Server can be referred to as and comprises any features functionalities and embodiments of Computing Device .

In some aspects Database Application comprises the functionality for performing database operations on Server or other computing device and or other functionalities. Database Application comprises the functionality for storing managing and or manipulating data. Examples of Database Application include a database management system DBMS any database an application or program using a DBMS or a database as the underlying data source an interface for managing data any data management application and or other database applications. UAIE can attach to and obtain Database Application s instructions data and or other information and modify execution and or functionality of Database Application thereby providing artificial intelligence functionalities to Database Application as previously described. Database Application can reside on Server or on Remote Computing Device accessible over Network as a network service as previously described. Database Application can also reside locally on user s personal computing device in alternate embodiments. User can operate Database Application via Human machine Interface and or other input device. Database Application can be referred to as and comprises any features functionalities and embodiments of Software Application .

In one example when User wishes to create a database in Database Application User may issue an operating instruction i.e. CREATE DATABASE SQL statement etc. to Database Application via Human machine Interface i.e. keyboard etc. to create the database. Database Application can then execute the SQL statement create the new database in its internal file and or data structure and make the new database available to the user. In another example when User wishes to delete a table in Database Application User may issue an operating instruction i.e. DROP TABLE SQL statement etc. to Database Application via Human machine Interface to delete the table. Database Application can then execute the SQL statement and delete the table from its internal file and or data structure. In a further example when User wishes to insert data i.e. one or more rows of data etc. into a table in Database Application User may issue an operating instruction i.e. INSERT SQL statement etc. to Database Application via Human machine Interface to insert the data. Database Application can then execute the SQL statement and insert the data into the table. In a further example when User wishes to delete data i.e. one or more rows of data etc. from a table in Database Application User may issue an operating instruction i.e. DELETE SQL statement etc. to Database Application via Human machine Interface to delete the data. Database Application can then execute the SQL statement and delete the data from the table. Various other operating instructions and or operations can be implemented in Database Application examples of which include accessing modifying creating or deleting a database accessing modifying creating or deleting a table of a database accessing modifying creating deleting searching sorting or rearranging of a row column or cell i.e. also referred to as data etc. within a table accessing modifying creating or deleting a report view relation user account setting and or other elements or objects. Any of the operating instructions i.e. SQL statements etc. given to Database Application by User can be inputted by User as text or issued through an application that generates operating instructions i.e. SQL statements etc. understood by Database Application . Examples of such applications include a report generating application i.e. Chrystal Reports etc. a visual database application i.e. Microsoft Access etc. and or other applications that provide a graphical user interface comprising input fields selectable lists drop down menus buttons or other graphical elements to enable a User to issue operating instructions to Database Application in a point and click manner without typing SQL code. UAIE can learn Database Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement operations such as creating a database deleting a table inserting data deleting data and or other operations by storing them in Knowledgebase Neural Network or other repository and anticipate future instructions i.e. anticipatory Instruction Sets or Operations etc. as previously described.

In some exemplary embodiments Server comprises a computer running Database Application . In one example User may perform insert update delete and or other operations on one or more tables in Database Application . Such operations on Database Application can be performed in a business setting when an event occurs such as procurement of an item i.e. raw material etc. production of an item i.e. finished good etc. change of an item sale of an item and or other event. Such operations on Database Application can also be performed in a person s daily activities when an event occurs such as download of an item i.e. song pictur movie etc. creation of an item i.e. captured photograph etc. change of an item sale of an item or other event. After performing one or more of these operations UAIE can learn Database Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement these operations and then perform future insert update delete and or other operations autonomously as previously described. In another example User may perform daily weekly monthly yearly and or other periodic maintenance tasks on Database Application such as performing backup of one or more tables. After performing one or more periodic table backups UAIE can learn Database Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement the table backups and their timing i.e. using time stamp etc. and then perform future table backups autonomously as previously described. In yet another example User may perform reporting from Database Application such as creating financial reports. This type of reporting is often a daily weekly monthly and or yearly scheduled process of creating same or similar reports with updated times dates or other filtering information. After creating one or more of these periodic reports UAIE can learn Database Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to create the reports and their timing i.e. using time stamp etc. and then create future reports autonomously as previously described. In each of the preceding examples UAIE can learn Database Application s instructions i.e. Instruction Sets or Operations etc. and or contextual information i.e. Extra Info etc. used to implement one or more operations. The instructions i.e. Instruction Sets etc. can be disassembled into their portions and stored in Operation or other repository along with any Extra Info . Operation can then be stored in Operation List that comprises recently used or implemented i.e. executed etc. Operations or Instruction Sets . Knowledge Structuring Unit may create a Knowledge Cell from the Operation List and store the Knowledge Cell in Knowledgebase thereby implementing learning of Database Application s operations as previously described. Furthermore Decision making Unit may search for a Knowledge Cell that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Knowledge Cell that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Knowledge Cell may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Database Application s operations as previously described.

Any learning anticipating and or other functionalities implemented using Knowledgebase and or Knowledge Cells can be similarly implemented using Neural Network . In each of the preceding examples instead of creating Knowledge Cells and storing them into Knowledgebase Knowledge Structuring Unit can apply Operations from Operation List onto a Neural Network thereby implementing learning of Database Application s operations as previously described. Furthermore Decision making Unit can search for a path in Neural Network that includes comparative instructions i.e. comparative Instruction Sets or Operations etc. used to implement one or more operations. Decision making Unit may find a Substantially Similar Path that includes such comparative instructions i.e. Instruction Sets or Operations etc. . Substantially Similar Path may also include anticipatory instructions i.e. anticipatory Instruction Sets or Operations etc. used to implement subsequent operations. UAIE can then implement the subsequent operations autonomously based on similar operations performed in prior similar circumstances thereby implementing anticipation of Database Application s operations as previously described.

One of ordinary skill in art will understand that the above exemplary embodiments are merely examples of a database application s operations and of UAIE functionalities with respect to database application and while all possible embodiments are too voluminous to describe other embodiments are within the scope of this disclosure.

One of ordinary skill in art will also understand that the teaching presented by the disclosure enables learning and or anticipation of any other items such as any data data structures or objects by utilizing the previously described Knowledge Cells Knowledgebase Neural Network and or other elements or functionalities.

It must be noted that as used herein and in the appended claims the singular forms a an and the include plural referents unless the context clearly dictates otherwise.

A number of embodiments have been described herein. While this disclosure contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments. It should be understood that various modifications can be made without departing from the spirit and scope of the invention. The logic flows depicted in the figures do not require the particular order shown or sequential order to achieve desirable results. In addition other or additional steps elements or connections can be included or some of the steps elements or connections can be eliminated or a combination thereof can be utilized in the described flows illustrations or descriptions. Further the various aspects of the disclosed devices apparatuses systems and or methods can be combined in whole or in part with each other to produce additional implementations. Moreover separation of various components in the embodiments described herein should not be understood as requiring such separation in all embodiments and it should be understood that the described components can generally be integrated together in a single software product or packaged into multiple software products. Accordingly other embodiments are within the scope of the following claims.

