---

title: Method and system for reclaiming unused resources in a networked application environment
abstract: Techniques are disclosed for reclaiming resources within a distributed computing system. A reclamation application searches the distributed computing architecture for unused resources, classifies the unused resources, and determines an expiration period based on the classification. The reclamation application determines a candidate owner of the resource based on one or more characteristics of the resource. The reclamation application then notifies the candidate owner that the resource is to be reclaimed unless claimed by the candidate owner within the expiration period. If the candidate owner claims the resource within the expiration period, then the reclamation application terminates the reclamation of the resource. If the candidate owner does not claim the resource within the expiration period, then the reclamation application reclaims the resource after the duration of the expiration period. Advantageously, reclaiming resources results in more efficient utilization of resources, lower operation and maintenance costs, and improved system security.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09577950&OS=09577950&RS=09577950
owner: NETFLIX, INC.
number: 09577950
owner_city: Los Gatos
owner_country: US
publication_date: 20150504
---
This application is a continuation of the co pending U.S. patent application titled METHOD AND SYSTEM FOR RECLAIMING UNUSED RESOURCES IN A NETWORKED APPLICATION ENVIRONMENT filed on Apr. 12 2012 and having Ser. No. 13 445 877. The subject matter of this related application is hereby incorporated herein by reference.

Embodiments of the present invention generally relate to distributed computing systems and methods and more specifically to reclaiming unused resources in a networked application environment.

A broad variety of computing applications have been made available to users over computer networks. Frequently a networked application may be provided using multiple interacting computing nodes within a distributed computing architecture. For example a web site may be provided using a web server running on one node within the distributed computing system configured to receive requests from users for web pages. The requests can be passed to an application server running on another node within the distributed computing system which in turn processes the requests and generate responses passed back to the web server and ultimately to the users.

Another example of a networked application includes a content distribution system used to provide access to media titles over a network. Typically a content distribution system may include various servers such as access servers and content servers. Clients may connect to the servers using a content player such as a gaming console computing system computing tablet mobile telephone or network aware DVD player. The content server stores files or streams available for download from the content server to the content player. Each stream may provide a digital version of various forms of video or other content such as a movie a television program a sporting event user generated content or a staged or live event captured by recorded video. Users access the service by connecting to a web server where a list of content is available. Once a request for a particular title is received the title may be streamed to the client system over a connection to an available content server.

One problem with distributed computing systems is that networked applications running on systems such as these often accumulate multiple resources such as storage volumes and licenses for software applications some of which may have fallen into disuse. Unused resources could be redeployed to other networked applications where the resources would be utilized more efficiently. In addition users may pay for reserving or maintaining resources within the distributed computing architecture. Where resources have fallen into disuse users may be paying for resources that are underutilized. Further security vulnerabilities may arise when resources fall into disuse. Unused resources may not receive software updates including updates to resolve security problems and thus present a security risk to the distributed computing system. While unused resources may be reclaimed manually some unused resources may be inadvertently missed due to human error while other unused resources may be difficult to discover using manual processes.

As the foregoing illustrates what is needed is a more automated way to discover and reclaim resources that have fallen into disuse.

One embodiment of the present invention sets forth a computer implemented method for reclaiming unused resources in a networked application environment. The method includes identifying a resource that is eligible for reclaiming determining a classification for the resource based on one or more classification criteria notifying a candidate owner of the resource that the resource is to be reclaimed at the termination of an expiration period and if the candidate owner claims the resource within the expiration period then terminating the reclamation of the resource or if the candidate owner does not claim the resource within the expiration period then reclaiming the resource.

Other embodiments include without limitation a computer readable medium that includes instructions that enable a processing unit to implement one or more aspects of the disclosed methods as well as a system configured to implement one or more aspects of the disclosed methods.

One advantage of the disclosed method is that unused resources in a distributed computing architecture are reclaimed and subsequently may be relinquished or redeployed resulting in more efficient and cost effective utilization of the resources.

In the following description numerous specific details are set forth to provide a more thorough understanding of the present invention. However it will be apparent to one of skill in the art that the present invention may be practiced without one or more of these specific details. In other instances well known features have not been described in order to avoid obscuring the present invention. Further particular embodiments of the invention are described using an example of a networked application used to stream movies music television programming user generated content etc. over a data communications network to end user client devices. However it should be understood that embodiments of the invention may be adapted to discover and reclaim unused resources for a broad variety of networked applications or services. Accordingly references to a streaming media service are merely illustrative and not limiting.

The distributed computing architecture includes a plurality of compute nodes referred to herein as nodes . Each of the nodes may include a processor CPU a memory a network interface controller NIC and one or more non volatile storage devices such as a hard disk drive a magnetic tape drive optical disk drives a drive array e.g. RAID or the like. Each node includes an operating system as well as one or more applications stored in memory and executing on the CPU. Some of the applications may provide a software framework for various cloud service architectures such as a distributed database management system or a distributed application system. Such applications may execute on a single node . Applications may also execute on multiple nodes where portions of the application run on different nodes . Alternatively multiple instances of the application where the instances execute on various nodes within distributed computing system . The distributed computing architecture provides one or more virtual computing services via standard messaging protocols such as representational state transfer REST . Examples of virtual computing services may include processing capacity storage and relational databases among many other types of services. The virtual computing services may include networked applications where various active application components of the networked application execute on a plurality of nodes in communication with each other. For example node may execute one active application component of a networked application. Node may communicate with node where node may execute a second active application component of the same networked application. Node may communicate with nodes N 1 where each of these nodes may execute an instance of a third active application component of the same networked application. The nodes interconnect to each other through any technically feasible means. As described below the distributed computing architecture connect to external devices and other computing systems via network and communication channel .

The network connects the distributed computing architecture to external devices such as client device . The network may include any technically feasible networking system such as a LAN Local Area Network a WAN Wide Area Network or the Internet.

The client device is configured to access one or more applications executing within the distributed computing architecture . For example the client device may access a content distribution system executing within the distributed computing architecture to access media titles over network . In one embodiment client computer is maintained by a data analyst to analyze the distributed computing architecture . The client device includes a processor CPU a memory a NIC and one or more non volatile storage devices not shown . Similar to nodes client device also includes an operating system as well as one or more applications such as client application stored in memory and running on the CPU. The client device communicates with one or more of the nodes via network thereby allowing the client application to access to or more networked applications executing on the distributed computing architecture .

The communication channel connects one or more nodes within the distributed computing architecture to a computing system utilized for configuring maintaining and testing the distributed computing architecture such as the administration server . The network may include any technically feasible communication channel including a point to point connection or a networking system such as a LAN Local Area Network a WAN Wide Area Network or the Internet.

The administration server performs administrative tasks for the distributed computing architecture autonomously or in response to one or more commands issued by a system administrator. The administration server may be any type of computing device such as a personal computer minicomputer or server. As shown the administration server may include one or more software applications that allow a system administrator to perform various functions including without limitation configuring monitoring and testing the distributed computing architecture .

In one embodiment the administration server includes a reclamation application that enables searches for unused resources within the distributed computing architecture . As described in greater detail herein the reclamation application determines the expiration period for the resource identifies a candidate owner of the resource and notifies the candidate owner. If the candidate owner does not claim the resource within the expiration period then the reclamation application is able to reclaim the resource. The administration server communicates to one or more of the nodes via communication link .

The CPU is included to be representative of a single CPU multiple CPUs a single CPU having multiple processing cores and the like. The CPU retrieves and executes programming instructions related to various application programs residing on the administration server . The CPU is connected to other components within the administration server via the interconnect . The interconnect is a communications channel such as a computer bus to provide a means of communication among the various components within the administration server . The interconnect facilitates transmission of programming instructions and application data between the CPU network interface memory storage and I O devices interface . The network interface provides a communication path between the administration server and the distributed computing infrastructure . The memory includes programming and instructions and application data for the administration server . Accordingly the CPU retrieves and executes programming instructions stored in the memory . Similarly the CPU stores and retrieves application data residing in the memory . The memory is generally included to be representative of a random access memory. The storage may be any device for long term storage of data such as a disk drive storage device. Although shown as a single unit the storage may be a combination of fixed and or removable storage devices such as fixed disc drives floppy disc drives tape drives removable memory cards optical storage network attached storage NAS or a storage area network SAN . The I O device interface connects I O devices e.g. keyboard display and mouse devices to the administration server .

As shown the memory includes a reclamation application and storage includes a resource database . The reclamation application includes a reclamation component and reclamation rules . As noted above the reclamation application is configured to search the distributed computing architecture for unused resources and then if desired reclaim the resources.

The reclamation component is configured to search the distributed computing architecture via network interface to identify resources that are eligible for reclaiming. Resources are determined to be eligible for reclaiming based on one or more conditions including without limitation resources associated with out of date software resources that have not been accessed for a pre determined period of time and resources associated with a storage volume that contains no data. When an unused resource has been identified the reclamation component determines a class for the resource based on one or more classification criteria. For example the reclamation component may determine that an unused resource is classified as an instance of a software application a user account or a storage volume. In another example multiple instances of a software application may exist within the distributed computing architecture and the reclamation component classifies the instances based on the software version number of the software application associated with each instance. The classification criteria may also include characteristics not directly related to the type of resource such as the date on which the resource was last accessed or the version number of a software application associated with the resource.

The reclamation component determines an expiration period for the resource based on one or more reclamation rules . For example the reclamation rules may indicate that a storage volume has an expiration period of fifteen days while an instance of a software application has an expiration period of thirty days. The reclamation rules include any suitable rules for setting expiration periods associated with a reclaimable resource as tailored for the distributed computing architecture .

The reclamation component also is responsible for identifying a candidate owner of a reclaimable resource based on one or more characteristics of the resource. Examples of resource characteristics include without limitation a username to which the resource is registered a username associated with one or more data files stored within the resource and in cases where more than one candidate owner is identified the reclamation application may use any technically feasible technique for determining the most likely candidate owner. The reclamation component then notifies the candidate owner that the resource will be reclaimed at the termination of the expiration period. For example the reclamation component may send an email to the candidate owner via network interface . The notification includes information identifying the resource and the expiration period for the resource based on the reclamation rules .

In certain circumstances the reclamation component may be unable to determine candidate owner for an unused resource. For example a resource may have no identifiable characteristics to identify a candidate owner. In another example the reclamation component may have determined a candidate owner and sent the candidate owner a notification but the candidate owner is not the actual owner. In another example the reclamation component may have determined a candidate owner who no longer owns the resource. In such cases the reclamation component notifies the system administrator that no candidate owner has been identified and terminates the reclamation of the resource. The system administrator may then manually attempt to reclaim the resource.

Once the reclamation component has notified the candidate owner the candidate owner may respond and claim the resource within the duration of the expiration period otherwise the resource is reclaimed. The candidate owner may reclaim the resource through any technically feasible means such as replying to the notification by accessing a specific uniform resource locator URL associated with a website that is configured to claim resources or by requesting an extension to the expiration period. If the candidate owner claims the resource then the reclamation component terminates the process for reclaiming the resource. Alternatively the candidate owner may respond and request that the expiration period be extended. If the expiration period is extended then the resource is still eligible for reclaiming but the reclamation component delays reclaiming the resource until the expiration of the extended period. If the candidate owner does not respond to the notification within the expiration period then the reclamation component proceeds to reclaim the resource.

As shown a method begins at step where the reclamation component identifies an unused resource. For example the reclamation component may systematically scan a set of resources and determine that a resource is considered unused if the resource has not been accessed for the previous thirty days. At step the reclamation component classifies the unused resource. For example the reclamation component may determine that the unused resource is an unused storage volume. At step the reclamation component determines the expiration period for the resource according to a pre determined rule. For example the reclamation component may determine that a storage volume expiration period is fifteen days. At step the reclamation component attempts to identify the candidate owner based on one or more characteristics of the resource. For example the reclamation component may examine the resource to see whether the resource is registered to a particular user whether there is a record of the user who last accessed the resource the time when the resource was most recently accessed or whether the resource is associated with a particular user s account.

At step the reclamation component determines whether a candidate user has been identified. If a candidate user has not been identified then the method proceeds to step where the reclamation component alerts the system administer. The method then terminates.

If however in step a candidate user has been identified then the method proceeds to step where the monitoring application notifies the candidate owner via a generated email message a system message or any other technically feasible means. At step the reclamation component determines whether a request to extend the expiration period has been received and granted such as by request of the candidate owner. If an extension of the expiration period has been granted then the method proceeds to step where the reclamation component where the reclamation component extends the expiration period. The method then proceeds to step where the reclamation component waits for the duration of the extended expiration period. At step the reclamation component determines whether the candidate owner has claimed the resource. If the candidate owner has claimed the resource then the method terminates.

If however in step the candidate owner has not claimed the resource then the method proceeds to step where the reclamation component reclaims the resource. The method then terminates.

Returning to step if an extension of the expiration period has not been granted then the method proceeds to step and continues as described above.

In sum a reclamation component within a reclamation application searches a distributed computing architecture for unused resources such as storage volumes and out of date software applications. A resource may be considered unused if for example the resource has not been accessed for an extended period. The resource is classified via one or more classification criteria such as whether the resource is a storage volume. The reclamation component determines an expiration period for the resource based on a set of reclamation rules . The reclamation component identifies a candidate owner based on one or more characteristics of the resource such as registration of the resource to or access of the resource by a particular username. The reclamation component notifies the candidate owner that the unused resource is to be reclaimed at the termination of the expiration period unless the candidate owner claims the resource. If the candidate owner claims the resource then the reclamation component terminates the reclamation of the resource. Alternatively the candidate owner may request an extension to the termination period before the resource is claimed. If the candidate owner has not claimed the resource by the end of the expiration period then the reclamation component reclaims the resource. The resource may then be relinquished or redeployed by the system administrator.

Advantageously unused resources within a distributed computing architecture are reclaimed and subsequently relinquished or redeployed. Resources may be redeployed for other purposes thus increasing overall efficiency and utilization. Resources that are no longer needed may be relinquished resulting in lower operating and maintenance costs. Further some unused resources may pose a security risk. Reclaiming such resources may improve security within the distributed computing architecture .

While the foregoing is directed to embodiments of the present invention other and further embodiments of the invention may be devised without departing from the basic scope thereof. For example aspects of the present invention may be implemented in hardware or software or in a combination of hardware and software. One embodiment of the invention may be implemented as a program product for use with a computer system. The program s of the program product define functions of the embodiments including the methods described herein and can be contained on a variety of computer readable storage media. Illustrative computer readable storage media include but are not limited to i non writable storage media e.g. read only memory devices within a computer such as CD ROM disks readable by a CD ROM drive flash memory ROM chips or any type of solid state non volatile semiconductor memory on which information is permanently stored and ii writable storage media e.g. floppy disks within a diskette drive or hard disk drive or any type of solid state random access semiconductor memory on which alterable information is stored. Such computer readable storage media when carrying computer readable instructions that direct the functions of the present invention are embodiments of the present invention.

