---

title: Filtering multi-sample surfaces
abstract: In accordance with some embodiments, multi-sampling may be used together with texture filtering and particularly texture filtering that generally uses rectangular grids of samples. This is accomplished by performing the texture filtering before doing the resolve, while conventionally the resolve is done and then the texture filtering is done. In addition, each sample is filtered as if it were the only sample.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09659402&OS=09659402&RS=09659402
owner: Intel Corporation
number: 09659402
owner_city: Santa Clara
owner_country: US
publication_date: 20150626
---
This relates generally to graphics processing and particularly to a shading technique call multi sampling.

Multi sampled anti aliasing multi sampling or MSAA is a technique that allows higher image quality by storing multiple color and depth sample values at each pixel. This permits higher precision for object edges since each sample position is separately tested for whether it is inside or outside the primitive. The multi sample image is resolved to a single sample per pixel when rendering is finished. A typical resolve function simply averages the sample values within each pixel.

Typically when using MSAA a single color is computed for all of the samples in a pixel that are within the primitive. As a result interior pixels of a primitive have the same value at each sample. Samples have different values only in pixels that contain a triangle edge or vertex. This makes the rendering time required for MSAA rendering the same as for single sampling for interior pixels.

Super sampled anti aliasing super sampling or SSAA differs from MSAA in that it uses a higher precision pixel grid for rendering which is then resolved to the desired pixel resolution. An MSAA and an SSAA image may have the same number of samples but the SSAA image requires dramatically more processing since a separate color must be computed for each sample.

Another difference between MSAA and SSAA is that SSAA typically uses an ordered grid of samples. That is just as the pixels are defined at positions on a rectangular grid the samples are also defined at positions on a rectangular grid. MSAA typically uses scattered sample positions within each pixel. E.g. 4 SSAA 4 samples per pixel uses an aligned 2 2 grid of samples within each pixel. 4 MSAA typically uses four positions that cover four different X positions and four different Y positions. This results in higher quality edge anti aliasing.

Texture filtering is a technique that allows scaling rotating and otherwise warping an image by applying a filtering function to the color values stored at multiple texels in the array. Typical filtering functions multiply each of a set of texel values by a filter weight and then sum the results. The set of texture values that are filtered are called the footprint of the filter function.

One type of texture filtering called bilinear filtering or bilinear interpolation generally requires a rectangular or square grid of sample positions. This technique linearly interpolates between two horizontal pairs of values at top and bottom of a rectangle and then linearly interpolates between those two values. While it is conceivable that a non rectangular grid could be used the calculation complexity would be sufficiently large to deter most practical applications.

When texture filtering is applied to multi sampled images a problem arises because multi samples in conventional multi sample images are not arranged within the pixel in a rectangular way. Another problem that arises with respect to conventional multi sampling is that in some situations with particular depicted objects block artifacts will be created. These block artifacts are the result of samples within a pixel being rendered with the same color value when they are in the interior of a triangle or other rendered primitive. Typically multi sample values only differ in a pixel when they are part of different primitives.

The standard way to texture filter a multi sample image is to first convert it to a single sample image. This is referred to as a resolve operation. A typical resolve operation simply averages the sample values within a pixel. Expressed as a filter function a 4 sample resolve multiplies each sample value by 0.25 and then sums them. This blends color values across primitive edges and simply returns the common sample value for pixels entirely in the interior of a triangle or other primitive.

In accordance with some embodiments multi sampling may be used together with texture filtering and particularly texture filtering that generally uses rectangular grids of samples. This is accomplished by performing the texture filtering before doing the resolve while conventionally the resolve is done and then the texture filtering is done. In addition each sample is filtered separately as if a series of single sample images were specified that each only contained the value of that sample at each pixel.

Thus any technique for texture filtering that is suitable for images with single samples can be used in connection with multi sampling. Also in many embodiments it is possible to use these techniques with per pixel shading and per sample shading as well as with arrangements that switch between per pixel and per sample shading. In some embodiments this may reduce the blurring produced by resolving before filtering. Embodiments also eliminate the blockiness that can result if multi sample images are filtered as if they were single sample images and the filter footprint covers multiple samples of the same pixel.

In contrast as shown in per pixel multi sampling anti aliasing shading generally gives each of the four sample positions the same value when all four are covered by the primitive. In one case this same value may be determined by performing the filter function at the center position of each pixel. Thus for the upper left pixel shown in each of the sample positions have the value 8.5 which is the result of computing the linear function in at the center of each pixel.

In accordance with some embodiments filtering may be performed before resolving to a single value per pixel by treating the multi sample image as a set of single sample images one for each sample in the pixel in the multi sample image. This is possible since sample positions are typically the same in each pixel. Therefore an image created from choosing sample N in each pixel forms a rectangular grid allowing all existing single sample filtering methods to be used. However other embodiments can be conceived where the sample positions in adjacent pixels are jittered by a small amount e.g. by of a pixel in X and or Y. In such a case the grid formed by an image formed by a single sample is not rectangular but is close enough to rectangular that it can be treated as such for filtering.

Single sample filter functions typically assume that the sample position is at the center of each pixel. To apply these functions to per sample filtering it is necessary to offset the filter position. For example if a sample is at location relative to the center of each pixel where each pixel has a size of 1 unit then that offset must be subtracted from the filter position to compensate. Embodiments may perform this either by biasing the filter values before being sent for hardware processing or it may occur in fixed function hardware that implements filtering using this invention.

Typical single sample filtering defines a footprint around the filter position that represents the texels to combine in the filter. This occurs in the usual way when filtering a single sample position according to this invention. For example bilinear filtering selects the four pixels nearest to the filter position. Embodiments of this method would select four pixels nearest to the offset filter position. Since each sample uses its own offset the four nearest pixels can be different for different samples.

The final step is to average together the results of filtering each individual sample position. A typical number of samples per pixel is four. In that case this method would filter each of the four samples individually and then average together the four results to produce the filter result.

The multi sample sequence shown in starts by setting an accumulator to zero as shown in block . Once the sample has been obtained block the sample position relative to the pixel center is subtracted from the texture filter position as shown in block . Then single sample texture filtering is performed at that position using the specified sample at each pixel as indicated in block . For example bilinear filtering finds the pixel centers nearest to the filter position and linearly interpolates them. Then the result from the filter is added to the accumulator as shown in block . Of course it should be understood that any texture filtering technique that is applicable to a single sample texture can be used in connection with the techniques described herein. A check at diamond indicates if this is the last sample. If not the flow iterates until all the samples have been processed.

After the last sample has been completed the resulting texture filter values are resolved for the N samples as indicated in block . A typical way to resolve the results is to sum the individual filter results and divide by the number of samples. In the example described above N 4. The accumulator result may be divided by N in one embodiment. Other resolve techniques may also be used.

Thus by doing the filtering then the resolve the reverse of the conventional order a variety of advantages may be obtained in some embodiments. The blockiness conventionally occurring with some images that are multi sampled can be reduced or even substantially eliminated. In addition it is possible to filter whether the rendering process computes a different value per sample or computes a single value for all of the samples in a pixel that are within the primitive. As a result it is possible with these techniques to switch between per sample and per pixel multi sample anti aliasing.

It can be shown that when the pixels being filtered are fully covered by a primitive and the rendered per sample or per pixel values are a linear function the same final result is produced for both per pixel and per sample rendering and for both normal pre resolve filtering and this post resolve filtering method. As a result in these cases changing to this algorithm does not alter the result of filtering. For non linear functions and for partially covered pixels both per pixel rendering and pre resolve filtering introduce blurriness that may be reduced by this algorithm.

It is known that where multi sampling has weaknesses one can use super sampling instead. But the problem is that super sampling creates a lot more work which means slower operation and higher power consumption for the graphics processor. Therefore this method allows super sampling which renders a separate value per sample and multi sampling which renders a single value per pixel covered by a primitive to be mixed in the same image the application choosing the former where the latter is insufficient quality e.g. because of a highly non linear rendering function. This method allows both techniques to be combined in the same image without forcing the super sampled pixels to be resolved prior to filtering.

This method can be implemented in software firmware or hardware. Thus referring to the render engine includes a texture filter coupled to a resolve engine including an accumulator register and a divide circuit . Typical numbers of samples per pixel are powers of two so the divide circuit can typically be implemented with a bit shift. The texture filter receives the sample positions offset by subtractor and performs any filter function that is defined on single sample pixels applying it to the specified sample.

Then the result is added at to the accumulator . This is repeated for each sample until all samples are processed. Then a resolve is completed at block . For example the accumulator result may be divided by the N the number of samples.

As used herein single sampling refers to the normal rendering method where a single sample position is rendered at the center of each pixel. Super sampling generally involves rendering each sample separately. As a result within super sampling both rendering time and memory bandwidth are times larger. Typically super samples are organized in a grid within a pixel. This allows a 4 super sampled image to be filtered as if it was a single sample image that is twice as large in each dimension.

In accordance with some embodiments the resulting filter has a footprint that when measured in pixels is the same size as the filter footprint for single sampling. This prevents artifacts in the presence of fragment compression. Fragment compression stores the computed multi sampled results in an index per sample to indicate which rendered color covers that sample. If a pixel is fully covered just one color is stored along with an index per sample selecting that color. This may dramatically reduce the required rendering time and memory bandwidth. For example 8 multi sampling may require 2 of bandwidth of single sampling and one quarter of the bandwidth of 8 super sampling. When measured in samples this is a wider filter than could be used with super sampling. However in many cases a wider filter is desirable because it may permit smoothing of the data.

The techniques described herein are applicable in some cases even if different pixels use different sample patterns. Some multi sampling systems vary the sample pattern for adjacent pixels to increase the degree of anti aliasing over a multi pixel region. This is problematic since it can cause sawtooth artifacts along the edges. One way to limit such artifacts is to use the same pattern in each pixel except offset by a small amount. For example for the four sample patterns pixels in a 2 region may use the same pattern offset by 1 16 1 16 1 16 1 16 1 16 1 16 and 1 16 1 16 . This scheme results in sample plane where samples vary by or 1 16th of the pixel center. This should be a small enough variation to allow bilinear interpolation to be performed assuming that all of the samples in the plane are at the same position.

An embodiment of system can include or be incorporated within a server based gaming platform a game console including a game and media console a mobile gaming console a handheld game console or an online game console. In some embodiments system is a mobile phone smart phone tablet computing device or mobile Internet device. Data processing system can also include couple with or be integrated within a wearable device such as a smart watch wearable device smart eyewear device augmented reality device or virtual reality device. In some embodiments data processing system is a television or set top box device having one or more processors and a graphical interface generated by one or more graphics processors .

In some embodiments the one or more processors each include one or more processor cores to process instructions which when executed perform operations for system and user software. In some embodiments each of the one or more processor cores is configured to process a specific instruction set . In some embodiments instruction set may facilitate Complex Instruction Set Computing CISC Reduced Instruction Set Computing RISC or computing via a Very Long Instruction Word VLIW . Multiple processor cores may each process a different instruction set which may include instructions to facilitate the emulation of other instruction sets. Processor core may also include other processing devices such a Digital Signal Processor DSP .

In some embodiments the processor includes cache memory . Depending on the architecture the processor can have a single internal cache or multiple levels of internal cache. In some embodiments the cache memory is shared among various components of the processor . In some embodiments the processor also uses an external cache e.g. a Level 3 L3 cache or Last Level Cache LLC not shown which may be shared among processor cores using known cache coherency techniques. A register file is additionally included in processor which may include different types of registers for storing different types of data e.g. integer registers floating point registers status registers and an instruction pointer register . Some registers may be general purpose registers while other registers may be specific to the design of the processor .

In some embodiments processor is coupled to a processor bus to transmit communication signals such as address data or control signals between processor and other components in system . In one embodiment the system uses an exemplary hub system architecture including a memory controller hub and an Input Output I O controller hub . A memory controller hub facilitates communication between a memory device and other components of system while an I O Controller Hub ICH provides connections to I O devices via a local I O bus. In one embodiment the logic of the memory controller hub is integrated within the processor.

Memory device can be a dynamic random access memory DRAM device a static random access memory SRAM device flash memory device phase change memory device or some other memory device having suitable performance to serve as process memory. In one embodiment the memory device can operate as system memory for the system to store data and instructions for use when the one or more processors executes an application or process. Memory controller hub also couples with an optional external graphics processor which may communicate with the one or more graphics processors in processors to perform graphics and media operations.

In some embodiments ICH enables peripherals to connect to memory device and processor via a high speed I O bus. The I O peripherals include but are not limited to an audio controller a firmware interface a wireless transceiver e.g. Wi Fi Bluetooth a data storage device e.g. hard disk drive flash memory etc. and a legacy I O controller for coupling legacy e.g. Personal System PS devices to the system. One or more Universal Serial Bus USB controllers connect input devices such as keyboard and mouse combinations. A network controller may also couple to ICH . In some embodiments a high performance network controller not shown couples to processor bus . It will be appreciated that the system shown is exemplary and not limiting as other types of data processing systems that are differently configured may also be used. For example the I O controller hub may be integrated within the one or more processor or the memory controller hub and I O controller hub may be integrated into a discreet external graphics processor such as the external graphics processor .

The internal cache units A N and shared cache units represent a cache memory hierarchy within the processor . The cache memory hierarchy may include at least one level of instruction and data cache within each processor core and one or more levels of shared mid level cache such as a Level 2 L2 Level 3 L3 Level 4 L4 or other levels of cache where the highest level of cache before external memory is classified as the LLC. In some embodiments cache coherency logic maintains coherency between the various cache units and A N.

In some embodiments processor may also include a set of one or more bus controller units and a system agent core . The one or more bus controller units manage a set of peripheral buses such as one or more Peripheral Component Interconnect buses e.g. PCI PCI Express . System agent core provides management functionality for the various processor components. In some embodiments system agent core includes one or more integrated memory controllers to manage access to various external memory devices not shown .

In some embodiments one or more of the processor cores A N include support for simultaneous multi threading. In such embodiment the system agent core includes components for coordinating and operating cores A N during multi threaded processing. System agent core may additionally include a power control unit PCU which includes logic and components to regulate the power state of processor cores A N and graphics processor .

In some embodiments processor additionally includes graphics processor to execute graphics processing operations. In some embodiments the graphics processor couples with the set of shared cache units and the system agent core including the one or more integrated memory controllers . In some embodiments a display controller is coupled with the graphics processor to drive graphics processor output to one or more coupled displays. In some embodiments display controller may be a separate module coupled with the graphics processor via at least one interconnect or may be integrated within the graphics processor or system agent core .

In some embodiments a ring based interconnect unit is used to couple the internal components of the processor . However an alternative interconnect unit may be used such as a point to point interconnect a switched interconnect or other techniques including techniques well known in the art. In some embodiments graphics processor couples with the ring interconnect via an I O link .

The exemplary I O link represents at least one of multiple varieties of I O interconnects including an on package I O interconnect which facilitates communication between various processor components and a high performance embedded memory module such as an eDRAM module. In some embodiments each of the processor cores N and graphics processor use embedded memory modules as a shared Last Level Cache.

In some embodiments processor cores A N are homogenous cores executing the same instruction set architecture. In another embodiment processor cores A N are heterogeneous in terms of instruction set architecture ISA where one or more of processor cores A N execute a first instruction set while at least one of the other cores executes a subset of the first instruction set or a different instruction set. In one embodiment processor cores A N are heterogeneous in terms of microarchitecture where one or more cores having a relatively higher power consumption couple with one or more power cores having a lower power consumption. Additionally processor can be implemented on one or more chips or as an SoC integrated circuit having the illustrated components in addition to other components.

In some embodiments graphics processor also includes a display controller to drive display output data to a display device . Display controller includes hardware for one or more overlay planes for the display and composition of multiple layers of video or user interface elements. In some embodiments graphics processor includes a video codec engine to encode decode or transcode media to from or between one or more media encoding formats including but not limited to Moving Picture Experts Group MPEG formats such as MPEG 2 Advanced Video Coding AVC formats such as H.264 MPEG 4 AVC as well as the Society of Motion Picture Television Engineers SMPTE 421 M VC 1 and Joint Photographic Experts Group JPEG formats such as JPEG and Motion JPEG MJPEG formats.

In some embodiments graphics processor includes a block image transfer BLIT engine to perform two dimensional 2D rasterizer operations including for example bit boundary block transfers. However in one embodiment 2D graphics operations are performed using one or more components of graphics processing engine GPE . In some embodiments graphics processing engine is a compute engine for performing graphics operations including three dimensional 3D graphics operations and media operations.

In some embodiments GPE includes a 3D pipeline for performing 3D operations such as rendering three dimensional images and scenes using processing functions that act upon 3D primitive shapes e.g. rectangle triangle etc. . The 3D pipeline includes programmable and fixed function elements that perform various tasks within the element and or spawn execution threads to a 3D Media sub system . While 3D pipeline can be used to perform media operations an embodiment of GPE also includes a media pipeline that is specifically used to perform media operations such as video post processing and image enhancement.

In some embodiments media pipeline includes fixed function or programmable logic units to perform one or more specialized media operations such as video decode acceleration video de interlacing and video encode acceleration in place of or on behalf of video codec engine . In some embodiments media pipeline additionally includes a thread spawning unit to spawn threads for execution on 3D Media sub system . The spawned threads perform computations for the media operations on one or more graphics execution units included in 3D Media sub system .

In some embodiments 3D Media subsystem includes logic for executing threads spawned by 3D pipeline and media pipeline . In one embodiment the pipelines send thread execution requests to 3D Media subsystem which includes thread dispatch logic for arbitrating and dispatching the various requests to available thread execution resources. The execution resources include an array of graphics execution units to process the 3D and media threads. In some embodiments 3D Media subsystem includes one or more internal caches for thread instructions and data. In some embodiments the subsystem also includes shared memory including registers and addressable memory to share data between threads and to store output data.

In some embodiments GPE couples with a command streamer which provides a command stream to the GPE 3D and media pipelines . In some embodiments command streamer is coupled to memory which can be system memory or one or more of internal cache memory and shared cache memory. In some embodiments command streamer receives commands from the memory and sends the commands to 3D pipeline and or media pipeline . The commands are directives fetched from a ring buffer which stores commands for the 3D and media pipelines . In one embodiment the ring buffer can additionally include batch command buffers storing batches of multiple commands. The 3D and media pipelines process the commands by performing operations via logic within the respective pipelines or by dispatching one or more execution threads to an execution unit array . In some embodiments execution unit array is scalable such that the array includes a variable number of execution units based on the target power and performance level of GPE .

In some embodiments a sampling engine couples with memory e.g. cache memory or system memory and execution unit array . In some embodiments sampling engine provides a memory access mechanism for execution unit array that allows execution array to read graphics and media data from memory. In some embodiments sampling engine includes logic to perform specialized image sampling operations for media.

In some embodiments the specialized media sampling logic in sampling engine includes a de noise de interlace module a motion estimation module and an image scaling and filtering module . In some embodiments de noise de interlace module includes logic to perform one or more of a de noise or a de interlace algorithm on decoded video data. The de interlace logic combines alternating fields of interlaced video content into a single fame of video. The de noise logic reduces or removes data noise from video and image data. In some embodiments the de noise logic and de interlace logic are motion adaptive and use spatial or temporal filtering based on the amount of motion detected in the video data. In some embodiments the de noise de interlace module includes dedicated motion detection logic e.g. within the motion estimation engine .

In some embodiments motion estimation engine provides hardware acceleration for video operations by performing video acceleration functions such as motion vector estimation and prediction on video data. The motion estimation engine determines motion vectors that describe the transformation of image data between successive video frames. In some embodiments a graphics processor media codec uses video motion estimation engine to perform operations on video at the macro block level that may otherwise be too computationally intensive to perform with a general purpose processor. In some embodiments motion estimation engine is generally available to graphics processor components to assist with video decode and processing functions that are sensitive or adaptive to the direction or magnitude of the motion within video data.

In some embodiments image scaling and filtering module performs image processing operations to enhance the visual quality of generated images and video. In some embodiments scaling and filtering module processes image and video data during the sampling operation before providing the data to execution unit array .

In some embodiments the GPE includes a data port which provides an additional mechanism for graphics subsystems to access memory. In some embodiments data port facilitates memory access for operations including render target writes constant buffer reads scratch memory space reads writes and media surface accesses. In some embodiments data port includes cache memory space to cache accesses to memory. The cache memory can be a single data cache or separated into multiple caches for the multiple subsystems that access memory via the data port e.g. a render buffer cache a constant buffer cache etc. . In some embodiments threads executing on an execution unit in execution unit array communicate with the data port by exchanging messages via a data distribution interconnect that couples each of the sub systems of GPE .

In some embodiments graphics processor includes a ring interconnect a pipeline front end a media engine and graphics cores A N. In some embodiments ring interconnect couples the graphics processor to other processing units including other graphics processors or one or more general purpose processor cores. In some embodiments the graphics processor is one of many processors integrated within a multi core processing system.

In some embodiments graphics processor receives batches of commands via ring interconnect . The incoming commands are interpreted by a command streamer in the pipeline front end . In some embodiments graphics processor includes scalable execution logic to perform 3D geometry processing and media processing via the graphics core s A N. For 3D geometry processing commands command streamer supplies commands to geometry pipeline . For at least some media processing commands command streamer supplies the commands to a video front end which couples with a media engine . In some embodiments media engine includes a Video Quality Engine VQE for video and image post processing and a multi format encode decode MFX engine to provide hardware accelerated media data encode and decode. In some embodiments geometry pipeline and media engine each generate execution threads for the thread execution resources provided by at least one graphics core A.

In some embodiments graphics processor includes scalable thread execution resources featuring modular cores A N sometimes referred to as core slices each having multiple sub cores A N A N sometimes referred to as core sub slices . In some embodiments graphics processor can have any number of graphics cores A through N. In some embodiments graphics processor includes a graphics core A having at least a first sub core A and a second core sub core A. In other embodiments the graphics processor is a low power processor with a single sub core e.g. A . In some embodiments graphics processor includes multiple graphics cores A N each including a set of first sub cores A N and a set of second sub cores A N. Each sub core in the set of first sub cores A N includes at least a first set of execution units A N and media texture samplers A N. Each sub core in the set of second sub cores A N includes at least a second set of execution units A N and samplers A N. In some embodiments each sub core A N A N shares a set of shared resources A N. In some embodiments the shared resources include shared cache memory and pixel operation logic. Other shared resources may also be included in the various embodiments of the graphics processor.

In some embodiments thread execution logic includes a pixel shader a thread dispatcher instruction cache a scalable execution unit array including a plurality of execution units A N a sampler a data cache and a data port . In one embodiment the included components are interconnected via an interconnect fabric that links to each of the components. In some embodiments thread execution logic includes one or more connections to memory such as system memory or cache memory through one or more of instruction cache data port sampler and execution unit array A N. In some embodiments each execution unit e.g. A is an individual vector processor capable of executing multiple simultaneous threads and processing multiple data elements in parallel for each thread. In some embodiments execution unit array A N includes any number individual execution units.

In some embodiments execution unit array A N is primarily used to execute shader programs. In some embodiments the execution units in array A N execute an instruction set that includes native support for many standard 3D graphics shader instructions such that shader programs from graphics libraries e.g. Direct 3D and OpenGL are executed with a minimal translation. The execution units support vertex and geometry processing e.g. vertex programs geometry programs vertex shaders pixel processing e.g. pixel shaders fragment shaders and general purpose processing e.g. compute and media shaders .

Each execution unit in execution unit array A N operates on arrays of data elements. The number of data elements is the execution size or the number of channels for the instruction. An execution channel is a logical unit of execution for data element access masking and flow control within instructions. The number of channels may be independent of the number of physical Arithmetic Logic Units ALUs or Floating Point Units FPUs for a particular graphics processor. In some embodiments execution units A N support integer and floating point data types.

The execution unit instruction set includes single instruction multiple data SIMD instructions. The various data elements can be stored as a packed data type in a register and the execution unit will process the various elements based on the data size of the elements. For example when operating on a 256 bit wide vector the 256 bits of the vector are stored in a register and the execution unit operates on the vector as four separate 64 bit packed data elements Quad Word QW size data elements eight separate 32 bit packed data elements Double Word DW size data elements sixteen separate 16 bit packed data elements Word W size data elements or thirty two separate 8 bit data elements byte B size data elements . However different vector widths and register sizes are possible.

One or more internal instruction caches e.g. are included in the thread execution logic to cache thread instructions for the execution units. In some embodiments one or more data caches e.g. are included to cache thread data during thread execution. In some embodiments sampler is included to provide texture sampling for 3D operations and media sampling for media operations. In some embodiments sampler includes specialized texture or media sampling functionality to process texture or media data during the sampling process before providing the sampled data to an execution unit.

During execution the graphics and media pipelines send thread initiation requests to thread execution logic via thread spawning and dispatch logic. In some embodiments thread execution logic includes a local thread dispatcher that arbitrates thread initiation requests from the graphics and media pipelines and instantiates the requested threads on one or more execution units A N. For example the geometry pipeline e.g. of dispatches vertex processing tessellation or geometry processing threads to thread execution logic . In some embodiments thread dispatcher can also process runtime thread spawning requests from the executing shader programs.

Once a group of geometric objects has been processed and rasterized into pixel data pixel shader is invoked to further compute output information and cause results to be written to output surfaces e.g. color buffers depth buffers stencil buffers etc. . In some embodiments pixel shader calculates the values of the various vertex attributes that are to be interpolated across the rasterized object. In some embodiments pixel shader then executes an application programming interface API supplied pixel shader program. To execute the pixel shader program pixel shader dispatches threads to an execution unit e.g. A via thread dispatcher . In some embodiments pixel shader uses texture sampling logic in sampler to access texture data in texture maps stored in memory. Arithmetic operations on the texture data and the input geometry data compute pixel color data for each geometric fragment or discards one or more pixels from further processing.

In some embodiments the data port provides a memory access mechanism for the thread execution logic output processed data to memory for processing on a graphics processor output pipeline. In some embodiments the data port includes or couples to one or more cache memories e.g. data cache to cache data for memory access via the data port.

In some embodiments the graphics processor execution units natively support instructions in a 128 bit format . A 64 bit compacted instruction format is available for some instructions based on the selected instruction instruction options and number of operands. The native 128 bit format provides access to all instruction options while some options and operations are restricted in the 64 bit format . The native instructions available in the 64 bit format vary by embodiment. In some embodiments the instruction is compacted in part using a set of index values in an index field . The execution unit hardware references a set of compaction tables based on the index values and uses the compaction table outputs to reconstruct a native instruction in the 128 bit format .

For each format instruction opcode defines the operation that the execution unit is to perform. The execution units execute each instruction in parallel across the multiple data elements of each operand. For example in response to an add instruction the execution unit performs a simultaneous add operation across each color channel representing a texture element or picture element. By default the execution unit performs each instruction across all data channels of the operands. In some embodiments instruction control field enables control over certain execution options such as channels selection e.g. predication and data channel order e.g. swizzle . For 128 bit instructions an exec size field limits the number of data channels that will be executed in parallel. In some embodiments exec size field is not available for use in the 64 bit compact instruction format .

Some execution unit instructions have up to three operands including two source operands src src and one destination . In some embodiments the execution units support dual destination instructions where one of the destinations is implied. Data manipulation instructions can have a third source operand e.g. SRC where the instruction opcode determines the number of source operands. An instruction s last source operand can be an immediate e.g. hard coded value passed with the instruction.

In some embodiments the 128 bit instruction format includes an access address mode information specifying for example whether direct register addressing mode or indirect register addressing mode is used. When direct register addressing mode is used the register address of one or more operands is directly provided by bits in the instruction .

In some embodiments the 128 bit instruction format includes an access address mode field which specifies an address mode and or an access mode for the instruction. In one embodiment the access mode to define a data access alignment for the instruction. Some embodiments support access modes including a 16 byte aligned access mode and a 1 byte aligned access mode where the byte alignment of the access mode determines the access alignment of the instruction operands. For example when in a first mode the instruction may use byte aligned addressing for source and destination operands and when in a second mode the instruction may use 16 byte aligned addressing for all source and destination operands.

In one embodiment the address mode portion of the access address mode field determines whether the instruction is to use direct or indirect addressing. When direct register addressing mode is used bits in the instruction directly provide the register address of one or more operands. When indirect register addressing mode is used the register address of one or more operands may be computed based on an address register value and an address immediate field in the instruction.

In some embodiments instructions are grouped based on opcode bit fields to simplify Opcode decode . For an 8 bit opcode bits and allow the execution unit to determine the type of opcode. The precise opcode grouping shown is merely an example. In some embodiments a move and logic opcode group includes data movement and logic instructions e.g. move mov compare cmp . In some embodiments move and logic group shares the five most significant bits MSB where move mov instructions are in the form of 0000xxxxb and logic instructions are in the form of 0001xxxxb. A flow control instruction group e.g. call jump jmp includes instructions in the form of 0010xxxxb e.g. 0 20 . A miscellaneous instruction group includes a mix of instructions including synchronization instructions e.g. wait send in the form of 0011xxxxb e.g. 0 30 . A parallel math instruction group includes component wise arithmetic instructions e.g. add multiply mul in the form of 0100xxxxb e.g. 0 40 . The parallel math group performs the arithmetic operations in parallel across data channels. The vector math group includes arithmetic instructions e.g. dp4 in the form of 0101xxxxb e.g. 0 50 . The vector math group performs arithmetic such as dot product calculations on vector operands.

In some embodiments graphics processor includes a graphics pipeline a media pipeline a display engine thread execution logic and a render output pipeline . In some embodiments graphics processor is a graphics processor within a multi core processing system that includes one or more general purpose processing cores. The graphics processor is controlled by register writes to one or more control registers not shown or via commands issued to graphics processor via a ring interconnect . In some embodiments ring interconnect couples graphics processor to other processing components such as other graphics processors or general purpose processors. Commands from ring interconnect are interpreted by a command streamer which supplies instructions to individual components of graphics pipeline or media pipeline .

In some embodiments command streamer directs the operation of a vertex fetcher that reads vertex data from memory and executes vertex processing commands provided by command streamer . In some embodiments vertex fetcher provides vertex data to a vertex shader which performs coordinate space transformation and lighting operations to each vertex. In some embodiments vertex fetcher and vertex shader execute vertex processing instructions by dispatching execution threads to execution units A B via a thread dispatcher .

In some embodiments execution units A B are an array of vector processors having an instruction set for performing graphics and media operations. In some embodiments execution units A B have an attached L1 cache that is specific for each array or shared between the arrays. The cache can be configured as a data cache an instruction cache or a single cache that is partitioned to contain data and instructions in different partitions.

In some embodiments graphics pipeline includes tessellation components to perform hardware accelerated tessellation of 3D objects. In some embodiments a programmable hull shader configures the tessellation operations. A programmable domain shader provides back end evaluation of tessellation output. A tessellator operates at the direction of hull shader and contains special purpose logic to generate a set of detailed geometric objects based on a coarse geometric model that is provided as input to graphics pipeline . In some embodiments if tessellation is not used tessellation components can be bypassed.

In some embodiments complete geometric objects can be processed by a geometry shader via one or more threads dispatched to execution units A B or can proceed directly to the clipper . In some embodiments the geometry shader operates on entire geometric objects rather than vertices or patches of vertices as in previous stages of the graphics pipeline. If the tessellation is disabled the geometry shader receives input from the vertex shader . In some embodiments geometry shader is programmable by a geometry shader program to perform geometry tessellation if the tessellation units are disabled.

Before rasterization a clipper processes vertex data. The clipper may be a fixed function clipper or a programmable clipper having clipping and geometry shader functions. In some embodiments a rasterizer depth in the render output pipeline dispatches pixel shaders to convert the geometric objects into their per pixel representations. In some embodiments pixel shader logic is included in thread execution logic . In some embodiments an application can bypass the rasterizer and access un rasterized vertex data via a stream out unit .

The graphics processor has an interconnect bus interconnect fabric or some other interconnect mechanism that allows data and message passing amongst the major components of the processor. In some embodiments execution units A B and associated cache s texture and media sampler and texture sampler cache interconnect via a data port to perform memory access and communicate with render output pipeline components of the processor. In some embodiments sampler caches and execution units A B each have separate memory access paths.

In some embodiments render output pipeline contains a rasterizer and depth test component that converts vertex based objects into an associated pixel based representation. In some embodiments the rasterizer logic includes a windower masker unit to perform fixed function triangle and line rasterization. An associated render cache and depth cache are also available in some embodiments. A pixel operations component performs pixel based operations on the data though in some instances pixel operations associated with 2D operations e.g. bit block image transfers with blending are performed by the 2D engine or substituted at display time by the display controller using overlay display planes. In some embodiments a shared L3 cache is available to all graphics components allowing the sharing of data without the use of main system memory.

In some embodiments graphics processor media pipeline includes a media engine and a video front end . In some embodiments video front end receives pipeline commands from the command streamer . In some embodiments media pipeline includes a separate command streamer. In some embodiments video front end processes media commands before sending the command to the media engine . In some embodiments media engine includes thread spawning functionality to spawn threads for dispatch to thread execution logic via thread dispatcher .

In some embodiments graphics processor includes a display engine . In some embodiments display engine is external to processor and couples with the graphics processor via the ring interconnect or some other interconnect bus or fabric. In some embodiments display engine includes a 2D engine and a display controller . In some embodiments display engine contains special purpose logic capable of operating independently of the 3D pipeline. In some embodiments display controller couples with a display device not shown which may be a system integrated display device as in a laptop computer or an external display device attached via a display device connector.

In some embodiments graphics pipeline and media pipeline are configurable to perform operations based on multiple graphics and media programming interfaces and are not specific to any one application programming interface API . In some embodiments driver software for the graphics processor translates API calls that are specific to a particular graphics or media library into commands that can be processed by the graphics processor. In some embodiments support is provided for the Open Graphics Library OpenGL and Open Computing Language OpenCL from the Khronos Group the Direct3D library from the Microsoft Corporation or support may be provided to both OpenGL and D3D. Support may also be provided for the Open Source Computer Vision Library OpenCV . A future API with a compatible 3D pipeline would also be supported if a mapping can be made from the pipeline of the future API to the pipeline of the graphics processor.

In some embodiments client specifies the client unit of the graphics device that processes the command data. In some embodiments a graphics processor command parser examines the client field of each command to condition the further processing of the command and route the command data to the appropriate client unit. In some embodiments the graphics processor client units include a memory interface unit a render unit a 2D unit a 3D unit and a media unit. Each client unit has a corresponding processing pipeline that processes the commands. Once the command is received by the client unit the client unit reads the opcode and if present sub opcode to determine the operation to perform. The client unit performs the command using information in data field . For some commands an explicit command size is expected to specify the size of the command. In some embodiments the command parser automatically determines the size of at least some of the commands based on the command opcode. In some embodiments commands are aligned via multiples of a double word.

The flow diagram in shows an exemplary graphics processor command sequence . In some embodiments software or firmware of a data processing system that features an embodiment of a graphics processor uses a version of the command sequence shown to set up execute and terminate a set of graphics operations. A sample command sequence is shown and described for purposes of example only as embodiments are not limited to these specific commands or to this command sequence. Moreover the commands may be issued as batch of commands in a command sequence such that the graphics processor will process the sequence of commands in at least partially concurrence.

In some embodiments the graphics processor command sequence may begin with a pipeline flush command to cause any active graphics pipeline to complete the currently pending commands for the pipeline. In some embodiments the 3D pipeline and the media pipeline do not operate concurrently. The pipeline flush is performed to cause the active graphics pipeline to complete any pending commands. In response to a pipeline flush the command parser for the graphics processor will pause command processing until the active drawing engines complete pending operations and the relevant read caches are invalidated. Optionally any data in the render cache that is marked dirty can be flushed to memory. In some embodiments pipeline flush command can be used for pipeline synchronization or before placing the graphics processor into a low power state.

In some embodiments a pipeline select command is used when a command sequence requires the graphics processor to explicitly switch between pipelines. In some embodiments a pipeline select command is required only once within an execution context before issuing pipeline commands unless the context is to issue commands for both pipelines. In some embodiments a pipeline flush command is is required immediately before a pipeline switch via the pipeline select command .

In some embodiments a pipeline control command configures a graphics pipeline for operation and is used to program the 3D pipeline and the media pipeline . In some embodiments pipeline control command configures the pipeline state for the active pipeline. In one embodiment the pipeline control command is used for pipeline synchronization and to clear data from one or more cache memories within the active pipeline before processing a batch of commands.

In some embodiments return buffer state commands are used to configure a set of return buffers for the respective pipelines to write data. Some pipeline operations require the allocation selection or configuration of one or more return buffers into which the operations write intermediate data during processing. In some embodiments the graphics processor also uses one or more return buffers to store output data and to perform cross thread communication. In some embodiments the return buffer state includes selecting the size and number of return buffers to use for a set of pipeline operations.

The remaining commands in the command sequence differ based on the active pipeline for operations. Based on a pipeline determination the command sequence is tailored to the 3D pipeline beginning with the 3D pipeline state or the media pipeline beginning at the media pipeline state .

The commands for the 3D pipeline state include 3D state setting commands for vertex buffer state vertex element state constant color state depth buffer state and other state variables that are to be configured before 3D primitive commands are processed. The values of these commands are determined at least in part based the particular 3D API in use. In some embodiments 3D pipeline state commands are also able to selectively disable or bypass certain pipeline elements if those elements will not be used.

In some embodiments 3D primitive command is used to submit 3D primitives to be processed by the 3D pipeline. Commands and associated parameters that are passed to the graphics processor via the 3D primitive command are forwarded to the vertex fetch function in the graphics pipeline. The vertex fetch function uses the 3D primitive command data to generate vertex data structures. The vertex data structures are stored in one or more return buffers. In some embodiments 3D primitive command is used to perform vertex operations on 3D primitives via vertex shaders. To process vertex shaders 3D pipeline dispatches shader execution threads to graphics processor execution units.

In some embodiments 3D pipeline is triggered via an execute command or event. In some embodiments a register write triggers command execution. In some embodiments execution is triggered via a go or kick command in the command sequence. In one embodiment command execution is triggered using a pipeline synchronization command to flush the command sequence through the graphics pipeline. The 3D pipeline will perform geometry processing for the 3D primitives. Once operations are complete the resulting geometric objects are rasterized and the pixel engine colors the resulting pixels. Additional commands to control pixel shading and pixel back end operations may also be included for those operations.

In some embodiments the graphics processor command sequence follows the media pipeline path when performing media operations. In general the specific use and manner of programming for the media pipeline depends on the media or compute operations to be performed. Specific media decode operations may be offloaded to the media pipeline during media decode. In some embodiments the media pipeline can also be bypassed and media decode can be performed in whole or in part using resources provided by one or more general purpose processing cores. In one embodiment the media pipeline also includes elements for general purpose graphics processor unit GPGPU operations where the graphics processor is used to perform SIMD vector operations using computational shader programs that are not explicitly related to the rendering of graphics primitives.

In some embodiments media pipeline is configured in a similar manner as the 3D pipeline . A set of media pipeline state commands are dispatched or placed into in a command queue before the media object commands . In some embodiments media pipeline state commands include data to configure the media pipeline elements that will be used to process the media objects. This includes data to configure the video decode and video encode logic within the media pipeline such as encode or decode format. In some embodiments media pipeline state commands also support the use one or more pointers to indirect state elements that contain a batch of state settings.

In some embodiments media object commands supply pointers to media objects for processing by the media pipeline. The media objects include memory buffers containing video data to be processed. In some embodiments all media pipeline states must be valid before issuing a media object command . Once the pipeline state is configured and media object commands are queued the media pipeline is triggered via an execute command or an equivalent execute event e.g. register write . Output from media pipeline may then be post processed by operations provided by the 3D pipeline or the media pipeline . In some embodiments GPGPU operations are configured and executed in a similar manner as media operations.

In some embodiments 3D graphics application contains one or more shader programs including shader instructions . The shader language instructions may be in a high level shader language such as the High Level Shader Language HLSL or the OpenGL Shader Language GLSL . The application also includes executable instructions in a machine language suitable for execution by the general purpose processor core . The application also includes graphics objects defined by vertex data.

In some embodiments operating system is a Microsoft Windows operating system from the Microsoft Corporation a proprietary UNIX like operating system or an open source UNIX like operating system using a variant of the Linux kernel. When the Direct3D API is in use the operating system uses a front end shader compiler to compile any shader instructions in HLSL into a lower level shader language. The compilation may be a just in time JIT compilation or the application can perform shader pre compilation. In some embodiments high level shaders are compiled into low level shaders during the compilation of the 3D graphics application .

In some embodiments user mode graphics driver contains a back end shader compiler to convert the shader instructions into a hardware specific representation. When the OpenGL API is in use shader instructions in the GLSL high level language are passed to a user mode graphics driver for compilation. In some embodiments user mode graphics driver uses operating system kernel mode functions to communicate with a kernel mode graphics driver . In some embodiments kernel mode graphics driver communicates with graphics processor to dispatch commands and instructions.

One or more aspects of at least one embodiment may be implemented by representative code stored on a machine readable medium which represents and or defines logic within an integrated circuit such as a processor. For example the machine readable medium may include instructions which represent various logic within the processor. When read by a machine the instructions may cause the machine to fabricate the logic to perform the techniques described herein. Such representations known as IP cores are reusable units of logic for an integrated circuit that may be stored on a tangible machine readable medium as a hardware model that describes the structure of the integrated circuit. The hardware model may be supplied to various customers or manufacturing facilities which load the hardware model on fabrication machines that manufacture the integrated circuit. The integrated circuit may be fabricated such that the circuit performs operations described in association with any of the embodiments described herein.

The RTL design or equivalent may be further synthesized by the design facility into a hardware model which may be in a hardware description language HDL or some other representation of physical design data. The HDL may be further simulated or tested to verify the IP core design. The IP core design can be stored for delivery to a 3party fabrication facility using non volatile memory e.g. hard disk flash memory or any non volatile storage medium . Alternatively the IP core design may be transmitted e.g. via the Internet over a wired connection or wireless connection . The fabrication facility may then fabricate an integrated circuit that is based at least in part on the IP core design. The fabricated integrated circuit can be configured to perform operations in accordance with at least one embodiment described herein.

Additionally other logic and circuits may be included in the processor of integrated circuit including additional graphics processors cores peripheral interface controllers or general purpose processor cores.

One example embodiment may be a method comprising treating a multi sample image as a set of single sample images one single sample image for each sample in the multi sample image for a first of N samples subtracting a sample position relative to a pixel center from a texture filter position performing single sample texture filtering at the texture filter position to generate a result combining the results into an accumulator repeating the steps above for N 1 samples and resolving the N texture filtering results. The method may also include wherein texture filtering includes bilinear filtering. The method may also include implementing per sample multi sample anti aliasing. The method may also include implementing per pixel multi sampling anti aliasing. The method may also include processing both per pixel and per sample multi sample anti aliasing. The method may also include receiving samples with a linear function and providing a texture filtering result that preserves said linear function. The method may also include receiving samples with a non linear function and providing a texture filtering result that preserves said non linear function. The method may also include wherein resolving includes summing the N per sample results and dividing by N.

Another example embodiment may be one or more non transitory computer readable media storing instructions executed by a processor to perform a sequence comprising treating a multi sample image as a set of single sample images one single sample image for each sample in the multi sample image for a first of N samples subtracting a sample position from a texture filter position performing single sample texture filtering at the texture filter position to generate a result combining the results into an accumulator repeating the steps above for N 1 samples and resolving the N texture filtering results. The media may include wherein texture filtering includes bilinear filtering. The media may include said sequence including implementing per sample multi sample anti aliasing. The media may include said sequence including implementing per pixel multi sampling anti aliasing. The media may include said sequence including processing both per pixel and per sample multi sample anti aliasing. The media may include said sequence including receiving samples with a linear function and providing a texture filtering result that preserves said linear function. The media may include said sequence including receiving samples with a non linear function and providing a texture filtering result that preserves said non linear function. The media may include wherein resolving includes summing the N per sample results and dividing by N.

In another example embodiment may be an apparatus comprising a subtractor to subtract a sample position from a texture filter position for a first of N samples a texture filter to perform single sample texture filtering at the texture filter position an accumulator to add the result of the filter and a resolve unit to resolve the N texture filtering results. The apparatus may include wherein N 4. The apparatus may include wherein said texture filter is a bilinear filtering. The apparatus may include wherein said apparatus to implement per sample multi sample anti aliasing. The apparatus may include wherein said apparatus to implement per pixel multi sampling anti aliasing. The apparatus may include wherein said apparatus to process both per pixel and per sample multi sample anti aliasing. The apparatus may include wherein said apparatus to receive samples with a linear function and provide a texture filtering result that preserves said linear function. The apparatus may include wherein said apparatus to receive samples with a non linear function and provide a texture filtering result that preserves said non linear function. The apparatus may include wherein the resolve unit to sum the N sample results and divide by N. The apparatus may include wherein said resolve unit uses a bit shift to divide by N.

The graphics processing techniques described herein may be implemented in various hardware architectures. For example graphics functionality may be integrated within a chipset. Alternatively a discrete graphics processor may be used. As still another embodiment the graphics functions may be implemented by a general purpose processor including a multicore processor.

References throughout this specification to one embodiment or an embodiment mean that a particular feature structure or characteristic described in connection with the embodiment is included in at least one implementation encompassed within the present disclosure. Thus appearances of the phrase one embodiment or in an embodiment are not necessarily referring to the same embodiment. Furthermore the particular features structures or characteristics may be instituted in other suitable forms other than the particular embodiment illustrated and all such forms may be encompassed within the claims of the present application.

While a limited number of embodiments have been described those skilled in the art will appreciate numerous modifications and variations therefrom. It is intended that the appended claims cover all such modifications and variations as fall within the true spirit and scope of this disclosure.

