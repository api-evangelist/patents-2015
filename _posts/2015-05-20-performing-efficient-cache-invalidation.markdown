---

title: Performing efficient cache invalidation
abstract: Performing cache invalidation is disclosed, including: receiving an invalidation request to invalidate one or more invalidated cache entries of a cache storage, wherein the cache storage is configured to store cache entries; storing the invalidation request to invalidate the one or more invalidated cache entries in an invalidation data structure; prior to removing the one or more invalidated cache entries from the cache storage, receiving a data retrieval request for a requested cache entry from the cache storage; and using the invalidation data structure to determine whether the requested cache entry has been invalidated.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489306&OS=09489306&RS=09489306
owner: Apigee Corporation
number: 09489306
owner_city: San Jose
owner_country: US
publication_date: 20150520
---
Data that may be subsequently requested can be cached for faster access. Cached data may be invalidated from a cache in response to a manually initiated invalidation request. However a cache may include a large number of entries and it could therefore be costly to search through the cache to indicate each cache entry that is to be invalidated by an invalidation request.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

Embodiments of performing efficient cache invalidation are described. In various embodiments a cache storage stores cached data as entries where each cache entry includes at least a key value pair and also a time at which the entry was created in the cache storage. In various embodiments the key of the key value pair in a cache entry comprises at least a portion of a data retrieval request and the value of the key value pair in the cache entry comprises at least a portion of a response from a backend server to the data retrieval request. An invalidation request to invalidate one or more cache entries of the cache storage is received. The invalidation request is stored in an invalidation data structure. In some embodiments an invalidation data structure stores data associated with invalidation requests. For example an invalidation request describes an invalidation pattern associated with keys of cache entries that are to be invalidated and a time at which the invalidation is to occur. In some embodiments the invalidation data structure is stored in the same storage as the cache. In some embodiments the invalidation data structure is stored in a different storage and one that permits faster accesses than the cache. Prior to removing the one or more invalidated cache entries from the cache storage a data retrieval request for a requested cache entry from the cache storage is received. The invalidation data structure is used to determine whether the requested cache entry has been invalidated. An invalidated cache entry may comprise outdated data expired data or data that is otherwise determined to be no longer permitted to be retrieved from the cache storage. In the event that the requested cache entry has not been invalidated then the data that is requested by the data retrieval request is retrieved directly from the cache storage. Otherwise in the event that the requested cache entry has been invalidated then the data that is requested by the data retrieval request is directed to another data source e.g. the data source from which the requested cache entry was originally obtained .

Application is executing on device . Examples of device may include a desktop computer a laptop computer a mobile device a smart phone a tablet device and any other type of computing device. Based on a user s interaction e.g. selection s input s with application application is configured to generate a data retrieval request e.g. an application programming interface API request to access desired data. The API request is sent over network to cache server . Cache server comprises an API management server that receives API requests from applications and retrieves the data required to respond to each API request by sending requests to one or more of backend server and or a third party service server not shown in the diagram . Backend server may comprise a server that stores data associated with the application. Backend server comprises a collection of services and systems behind an API proxy such as cache server . Cache server serves as a front end for the backend systems and handles incoming API requests processes them before sending the requests to the backend server for further processing. Similarly backend servers respond to API requests sent by cache server with responses. These responses are sent to cache server which in turn sends the responses to the requesting application. For example application may have been developed by a party that is associated with the party that operates backend server and or a third party developer who makes use of publicly available services.

For example backend server is associated with a company that wishes to expose its backend services on the web so that the services can be consumed by applications e.g. such as application and or desktops. For example the company might want to expose services that provide product pricing and availability information sales and ordering services order tracking services and any other services required by applications. For example companies often expose services as a set of hypertext transfer protocol HTTP endpoints. Application developers then make API requests e.g. HTTP requests to these endpoints. Depending on the endpoint the service might then return data formatted as XML or JSON back to the requesting application. Because cache server acts as an API proxy for backend server developers of applications such as application do not need to know about the implementation of services provided by backend server . Furthermore since cache server acts as an API proxy for backend server cache server isolates developers of applications such as application from the services provided by backend server and so the implementation of a service provided by backend server may change as long as the public API remains consistent. Examples of changes to the service implementation include a database implementation and a migration of the service to a new host.

Cache server is configured to cache data obtained from backend sever and or a third party service server in cache storage based on stored caching policies. In various embodiments cache server is configured to store cached data in cache storage as cache entries each with at least a key value pair and a time at which the cache entry was created which is also sometimes referred to as a creation timestamp . In some embodiments the key of the key value pair in a cache entry comprises at least a portion of an API request and the value of the key value pair in the cache entry comprises at least a portion of a response from a backend server to the API request. The type of data associated with the keys and corresponding values in cache storage may vary depending on the configuration of backend server . For example the key may comprise a HTTP request uniform resource identifier URI and the corresponding value may comprise a JSON response or a binary value. For example such caching policies include default caching policies parameters configured by cache server and or configurations submitted by an application developer associated with an application.

Cache server is configured to receive an invalidation request to invalidate one or more cache entries stored at cache storage . In some embodiments the invalidation request is received from backend server or a device associated with a developer of application . For example the invalidation request is generated at backend server or a device associated with a developer of application in response to a manual input by a user. For example the invalidation request may be generated in response to a user input to invalidate certain cached entries prior to the expiration of a previously configured retention period. For example the reason that prompted the generation of the invalidation request may be that data stored at backend server has changed such that the response e.g. that comprises a value of a key value pair for a given API request e.g. that comprises the key of the key value pair will be different compared to what was previously cached. An invalidation request includes an invalidation pattern that can be used to identify one or more cache entries stored at cache storage to invalidate and also a time at which the invalidation is to occur. In some embodiments the invalidation pattern included in an invalidation request is configured to match the key portion of the key value pairs corresponding to cache entries to invalidate. In some embodiments the invalidation pattern included in an invalidation request is configured to match the value portion of the key value pairs corresponding to cache entries to invalidate. In some embodiments the invalidation pattern included in an invalidation request is configured to match the creation timestamps of the key value pairs corresponding to cache entries to invalidate. Cache server is configured to store the invalidation request in a stored invalidation data structure. In some embodiments the invalidation data structure is stored at cache storage . In some embodiments the invalidation data structure is stored at a storage that is different from and enables faster access than cache storage . For example the invalidation data structure is stored in a memory of cache server whereas cache storage comprises a hard disk storage which allows the invalidation data structure to be searched faster than cache storage .

By storing the invalidation request in the invalidation data structure cache server can invalidate one or more cache entries stored in cache storage that are identified by the invalidation request without searching through cache storage to find and mark those cache entries identified by the invalidation request as being invalidated. Put another way cache entries of cache storage can be invalidated by simply storing data in the invalidation data structure instead searching through the potentially numerous entries of cache storage to find the invalidated cache entries and marking them as being invalidated.

In some embodiments the invalidated cache entries stored at cache storage are not immediately removed from cache storage . Instead the cache entries stored at cache storage that are invalidated by virtue of data stored in the invalidation data structure are removed from cache storage over time by an asynchronous process or a thread that is invoked periodically or in response to a triggering event.

As will be described in further detail below cache server is configured to determine whether a requested cache entry associated with a data retrieval request e.g. an API request received from application executing at device is invalidated at cache storage using the invalidation data structure. In the event that the requested cache entry has not been invalidated cache server is configured to retrieve the requested cache entry associated with the data retrieval request directly from cache storage . Otherwise in the event that the requested cache entry has been invalidated cache server is configured to forward the data retrieval request to another data source e.g. backend server or a third party service server from which data associated with the requested cache entry was originally obtained.

Caching engine is configured to store data that was obtained from a data source e.g. a backend server or a third party service server in cache storage based on an associated caching policy that is stored at caching policy storage . In various embodiments the data to be stored at cache storage is obtained by data retrieval request processing engine in response to a data retrieval request that is received at the cache server. In some embodiments data retrieval request processing engine is configured to determine whether the requested data associated with the data retrieval request is already stored in cache storage . In the event that the requested data associated with the data retrieval request is not already stored in cache storage data retrieval request processing engine is configured to obtain the requested data from the data source e.g. a backend server or a third party service server . The requested data that is obtained from the data source is then stored by caching engine as one or more cache entries at cache storage using an associated caching policy that is stored at caching policy storage . In various embodiments a cache entry stored at cache storage comprises a key value pair and a creation timestamp that indicates when the cache entry was stored at cache storage by caching engine . In some embodiments caching policies stored at caching policy storage are configured by an application developer an administrative user associated with a backend server and or an administrative user associated with the cache server. In various embodiments a caching policy determines which type of data e.g. which key value pairs among the obtained data is to be cached and the time period in which to retain such data in a cache storage. The retention period associated with cached data is also sometimes represented by a time to live TTL period which indicates a length of time from the creation timestamp that the cached data will remain in the cache storage. In some embodiments a TTL period is stored with each of the one or more cache entries of cache storage . In some embodiments after the TTL period associated with a cache entry expires the cache entry is immediately removed from cache storage or can be selectively filtered based on TTL depending upon which kind of cache storage is used. In some embodiments a cache entry whose corresponding TTL expires is different from an invalidated cache entry because the TTL of the invalidated cache entry could have not yet expired.

As will be described in further detail below in some embodiments in response to receiving a data retrieval request it is first determined whether requested data associated with the data retrieval request is already stored in cache storage and if so then data retrieval request processing engine is configured to determine whether the requested data associated with the data retrieval request is invalidated based at least in part on checking an invalidation data structure that is stored in invalidation data structure storage .

Invalidation engine is configured to receive invalidation requests to invalidate one or more cache entries stored at cache storage . In various embodiments an invalidation request includes an invalidation pattern that comprises any data that can be used to match any portion of cache entries stored at cache storage that are to be invalidated. In various embodiments an invalidation request further includes an invalidation timestamp that indicates when the invalidation is to take effect. For example an invalidation pattern included in an invalidation request includes at least a portion of a key and any cache entries associated with keys that include the pattern are to be invalidated by the invalidation request. In various embodiments an invalidation entry invalidates cache entries that match the invalidation pattern of the invalidation entry and are associated with creation timestamps that are earlier than the invalidation timestamp of the invalidation entry. In various embodiments an invalidation request is generated in response to a user input or an instruction from a computer program. For example cached data may be associated with a promotion at a store that is available to a limited quantity of customers but when the limited quantity of customers has been met the promotion is no longer valid and so an administrative user may submit an input to the backend server associated with the store to generate and send an invalidation request to invalidate the cache entries associated with the promotion. Invalidation engine is configured to store received invalidation requests at invalidation data structure storage . In various embodiments invalidation engine is configured to store received an invalidation request at an invalidation data structure storage as an invalidation entry that includes the invalidation pattern and a timestamp at which the cache entries identified by the pattern are to be invalidated. In some embodiments in the event that a new invalidation request includes a pattern that is already stored in the invalidation data structure this invalidation entry in the invalidation data structure is updated with the new invalidation timestamp that is included in the new invalidation request.

In various embodiments by storing the invalidation request in the invalidation data structure invalidation engine does not need to find the cache entries in cache storage that are identified by the invalidation request and subsequently mark those cache entries to be invalidated. Given the potentially numerous cache entries that may be stored at cache storage it is likely more efficient for invalidation engine to invalidate cache entries by simply storing a new entry in the invalidation data structure than it would be for invalidation engine to invalidate cache entries by searching through cache storage and marking all the cache entries that are identified by the invalidation request as invalidated.

In some embodiments invalidation data structure storage comprises a different type of storage than the storage of cache storage . In some embodiments invalidation data structure storage comprises a type of storage that enables faster accesses than the storage of cache storage . For example invalidation data structure storage comprises memory and cache storage comprises hard disk storage. In some embodiments invalidation data structure storage and cache storage are implemented as a single storage.

Data retrieval request processing engine is configured to receive a data retrieval request e.g. from an application executing at a device . In various embodiments data retrieval request identifies a key associated with data that is requested and in some embodiments a data source from which to obtain the requested data. In response to receiving the data retrieval request data retrieval request processing engine is configured to check whether cache storage stores the data requested by the data retrieval request. In the event that data retrieval request processing engine determines that a matching cache entry to the requested data is stored at cache storage then data retrieval request processing engine is configured to determine that a cache miss has occurred forward the data retrieval request to the data source and not check the invalidation data structure.

Otherwise in the event that data retrieval request processing engine determines that a matching cache entry to the requested data is stored at cache storage then data retrieval request processing engine is configured to check whether the requested key included in the data retrieval request matches an invalidation entry in the invalidation data structure that is stored at invalidation data structure storage . In the event that the key included in the data retrieval request matches an invalidation entry in the invalidation data structure data retrieval request processing engine is configured to compare the invalidation timestamp of the matching invalidation entry of the invalidation data structure to the creation timestamp of the matching cache entry of cache storage to determine which timestamp is later. If the invalidation timestamp is later then this indicates that the matching invalidation entry was created after the matching cache entry and that at least one matching cache entry is invalidated. A determination that the matching cache entry is invalidated can be thought of as a cache miss and would cause data retrieval request processing engine to forward the data retrieval request to the data source. However if the creation timestamp is later then this indicates that the matching invalidation entry was created before the matching cache entry and that the matching cache entry has not been invalidated by the matching invalidation entry and is therefore valid. A determination that the matching cache entry is still valid can be thought of as a cache hit and would cause data retrieval request processing engine to return the matching cache entry to the requestor e.g. the application .

However in the event that data retrieval request processing engine determines that a matching cache entry to the requested data is stored at cache storage but that the key included in the data retrieval request does not match an invalidation entry in the invalidation data structure data retrieval request processing engine is configured to determine that a cache hit has occurred return the matching cache entry to the requestor e.g. the application .

Invalidated data removal engine is configured to asynchronously remove the invalidated cache entries from cache storage using the invalidation data structure stored at invalidation data structure . In some embodiments invalidation data removal engine is configured to remove the invalidated cache entries from cache storage at every predetermined time interval or in response to an indication configured to trigger the removal of invalidated data. In various embodiments invalidation data removal engine is configured to use the invalidation pattern in an invalidation entry stored at the invalidation data structure to identify one or more invalidated cache entries stored at cache storage . Invalidation data removal engine is then configured to remove the invalidated cache entries that were identified by the invalidation pattern e.g. if the invalidation timestamp of the invalidation request has already passed . Once invalidation data removal engine confirms that the identified cache entries have been removed invalidation data removal engine is configured to remove the invalidation entry from the invalidation data structure. In some embodiments invalidation data removal engine is configured to repeat this process until every invalidation entry is removed from the invalidation data structure.

At requested data is obtained from a backend server. In some embodiments data is requested by a data retrieval request that is sent from an application that is executing at a device. The data retrieval request identifies a key associated with data that is requested. In various embodiments the data retrieval request was received at a cache server such as cache server of system of . In some embodiments the requested data was either not stored in a cache storage associated with the cache server and or was stored in the cache storage but was determined to be invalidated. Because the requested data was not available in the cache storage the requested data is obtained from a backend server. In some embodiments the requested data is obtained from a data source other than a backend server such as a third party service server for example. The obtained data for a data retrieval request may comprise one or more values that correspond to the key s included in the request.

At the requested data is determined to be cached based at least in part on a caching policy. Whether the requested data that is obtained from the backend server is stored in the cache storage or not is determined based on an associated caching policy. For example the associated caching policy may be configured by an administrator user associated with the backend server the application developer or an administrator user associated with the cache server. In some embodiments the caching policy determines which type of obtained data should be cached and if so the TTL of the data in the cache storage.

At the requested data is written as one or more cache entries in a cache storage with corresponding creation time information. In the event that the requested data is determined to be cached based on the associated caching policy the requested data is written as cache entries in the cache storage where each cache entry includes at least a key value pair and the creation timestamp i.e. the time at which the cache entry was stored at the cache storage . The key portion of a key value pair represents the key that was included in the data retrieval request and the value portion of the key value pair represents the requested data that was obtained from the backend server. For example the key comprises a HTTP request URI and the value comprises a JSON response. In some embodiments in addition to a key value pair and a creation timestamp each cache entry further includes a TTL associated with how long from the creation timestamp the cache entry is to be retained in the cache storage.

At an invalidation request to invalidate one or more invalidated cache entries of a cache storage is received. The invalidation request includes an invalidation pattern that is usable to identify one or more cache entries stored at a cache storage that are to be invalidated. In some embodiments the invalidation pattern is to be compared to keys of key value pairs of cache entries and those cache entries whose keys match the pattern are identified to be invalidated. In some embodiments in addition to the invalidation pattern the invalidation request further includes an invalidation timestamp that identifies the time at which the cache entries identified by the pattern are to be considered invalidated. In various embodiments an invalidation entry invalidates cache entries that match the pattern of the invalidation entry and are associated with creation timestamps that are earlier than the invalidation timestamp of the invalidation entry. In some embodiments the invalidation timestamp may be associated with when the invalidation request was generated. In some embodiments the invalidation timestamp may be associated with a time in the future.

At the invalidation request to invalidate the one or more invalidated cache entries is stored in an invalidation data structure. The data associated with the invalidation request is stored as an invalidation entry in an invalidation data structure. In some embodiments the invalidation data structure comprises a table or other object. In some embodiments an invalidation entry in the invalidation data structure comprises the invalidation pattern and the invalidation timestamp that were included in the invalidation request.

At prior to removing the one or more invalidated cache entries from the cache storage a data retrieval request for a requested cache entry from the cache storage is received. The cache entries identified by the invalidation request remain in the cache storage until they are removed by an asynchronous invalidated cache entry removal process or other type of invalidated cache entry removal process. Prior to these cache entries being removed from the cache storage a data retrieval request is received. The data retrieval request identifies requested data that may be stored in the cache storage but whether the cached data is invalidated or is not depends on the invalidation data structure. In various embodiments the data retrieval request includes a key that is used to identify the matching cache entries stored at the cache storage and or the requested data from a data source.

At the invalidation data structure is used to determine whether the requested cache entry has been invalidated. It is first determined whether one or more matching cache entries to the data retrieval request are found in the cache storage. If no matching cache entry to the data retrieval request can be found in the cache storage then a cache miss has occurred and the data retrieval request is forwarded to the data source. But if one or more matching cache entries to the data retrieval request can be found in the cache storage then the invalidation data structure is checked to determine whether the data requested by the data retrieval request is valid or invalidated in the cache storage. An example of using the invalidation data structure to determine whether the data requested by a data retrieval request is valid or invalidated in the cache storage is described with below.

Process describes an example process of storing data associated with an invalidation request at an invalidation data structure.

At an invalidation request to invalidate a set of cache entries associated with an invalidation pattern is received. In various embodiments the invalidation request includes an invalidation pattern that is usable to identify one or more cache entries in a cache storage to invalidate and also an invalidation timestamp associated with when such cache entries are to be considered invalidated and therefore no longer accessible from the cache storage.

At it is determined whether the invalidation pattern is already found in the invalidation data structure. In the event that the pattern is already found in the invalidation data structure control is transferred to . Otherwise in the event that the pattern is not already found in the invalidation data structure control is transferred to . The pattern of the invalidation request is compared against the patterns of the existing invalidation entries in the invalidation data structure to determine whether the pattern can be found in an existing invalidation entry.

At a matching invalidation entry in the invalidation data structure is updated with a new invalidation timestamp associated with the invalidation request. In the event that the pattern of the invalidation request can be found in an existing invalidation entry that existing invalidation entry is determined to be a matching invalidation entry in the invalidation data structure. Due to the existence of the matching invalidation entry no new invalidation entry needs to be added to the invalidation data structure. Instead the matching invalidation entry is updated to include a new invalidation timestamp which is the invalidation timestamp that is included in the invalidation request. For example the cache entries associated with the same pattern may be stored in the cache storage over time and can be therefore be invalidated at multiple times.

At the pattern is written as a new invalidation entry in the invalidation data structure with an invalidation timestamp associated with the invalidation request. Because there is no matching invalidation entry already in the invalidation data structure a new invalidation entry is added to the invalidation data structure with the pattern and the invalidation timestamp that are included in the invalidation request.

In the example of cache entry comprises key a1 the value that corresponds to key a1 that is represented by the creation timestamp of 1 00 AM and the TTL value of 3 hours. Cache entry comprises key a2 the value that corresponds to key a2 that is represented by the creation of 1 05 AM and the TTL value of 5 hours. Cache entry comprises key a3 k5 the value that corresponds to key a3 k5 that is represented by the creation timestamp of 2 43 AM and the TTL value of 1 hour and so forth.

While the example of shows that each cache entry is associated with the columns of Key Value Creation timestamp and TTL in actual implementation a cache entry may include more fewer and or different columns.

While the example of shows that each invalidation entry may be associated with up to three columns of invalidation timestamps in actual implementation an invalidation entry may include more or fewer columns of invalidation timestamps.

In the example of invalidation entry comprises the key pattern of a1 the invalidation timestamp of 2 00 AM the invalidation timestamp of 3 30 AM and the invalidation timestamp of 6 30 AM. As such it can be seen from the example of that three invalidation requests that included the key pattern of a1 were received at the cache server the first invalidation request was associated with the invalidation timestamp of 2 00 AM the second invalidation request was associated with the invalidation timestamp of 3 30 AM and the third invalidation request was associated with the invalidation timestamp of 6 30 AM. Invalidation entry comprises the key pattern of x2 and the invalidation timestamp of 7 00 AM. As such it can be seen from the example of that two invalidation requests that included the key pattern of x2 were received at the cache server the first invalidation request was associated with the invalidation timestamp of 7 00 AM and the second invalidation request was associated with the invalidation timestamp of 7 30 AM. 

At a data retrieval request is received wherein the data retrieval request includes a requested key. In some embodiments the data retrieval request comprises an API request. In some embodiments the requested key that is included in the data retrieval request is used to match against the keys of cached data. In some embodiments the requested key comprises a HTTP request URI.

At the requested key is compared to a cache storage. The requested key is compared to the keys of the cache entries of the cache storage to determine whether one or more matching cache entries can be found.

At it is determined whether a matching cache entry to the requested key is found in the cache storage. In the event that the requested key matches a matching cache entry in the cache storage control is transferred to . Otherwise in the event that the requested key does not match a matching cache entry in the cache storage control is transferred to . The cache storage is first checked for whether requested data associated with the data retrieval request is stored in the cache storage. If one or more matching cache entries are found in the cache storage then it is determined that there is a cache hit. Otherwise if no matching cache entries are found in the cache storage then it is determined that there is a cache miss. In some embodiments any cache entries associated with expired TTLs are either already removed from the cache storage or are not used to compare against the requested key.

Returning to the example above the requested key of v2 k1 can be compared to each cache entry of example cache storage table of . The cache entry that includes key v2 k1 is found in the example cache storage table of .

At the requested key is compared to an invalidation data structure. The requested key is matched against the invalidation patterns of the invalidation entries of an invalidation data structure. For example an invalidation pattern of an invalidation entry may match at least a portion of the requested key of the data retrieval request.

Returning to the example above the requested key of v2 k1 can be compared to each invalidation entry of example invalidation data structure of .

At it is determined whether the requested key matches a matching invalidation entry in the invalidation data structure. In the event that the requested key matches a matching invalidation entry in the invalidation data structure control is transferred to . Otherwise in the event that the requested key does not match a matching invalidation entry in the invalidation data structure control is transferred to .

In the event that the requested key matches a matching invalidation entry in the invalidation data structure then it can be determined that the requested data associated with the data retrieval request is stored in the cache storage but is potentially invalidated. As mentioned above a cache entry that is invalidated may not be immediately removed from the cache storage and may be eventually removed by an asynchronous process. In the event that the requested key does not match a matching invalidation entry in the invalidation data structure then at the matching cache entry from the cache storage is determined to and at the requested data associated with the matching cache entry is retrieved. Data e.g. the value portion of the key value pair associated with the valid matching cache entry is retrieved from the cache storage and returned in response to the data retrieval request.

Returning to the example above an invalidation entry of example invalidation data structure of with the key pattern of v2 matches the requested key of v2 k1. As such it is determined that the requested data associated with the requested key of v2 k1 is stored in the cache storage and could be either valid or invalidated will be described below.

At an invalidation timestamp associated with the matching invalidation entry in the invalidation data structure is determined. The invalidation timestamp that is included in the matching invalidation entry in the invalidation data structure is obtained. The invalidation timestamp of the invalidation entry indicates that any data cached in the cache storage whose key matches the invalidation pattern of the invalidation entry and that is cached before i.e. has an creation timestamp that is earlier than the invalidation timestamp is invalidated. In the event that multiple invalidation timestamps are included in the matching invalidation entry the latest invalidation timestamp is obtained.

Returning to the example above the matching invalidation entry of example invalidation data structure of with the key pattern of v2 is associated with the only invalidation timestamp of 9 00 AM. 

At it is determined whether the creation timestamp associated with the matching cache entry is later than the invalidation timestamp associated with the matching invalidation entry in the invalidation data structure. In the event that the creation timestamp associated with the matching cache entry is later than the invalidation timestamp associated with the matching invalidation entry in the invalidation data structure control is transferred to . Otherwise in the event that the creation timestamp associated with the matching cache entry is not later than the invalidation timestamp associated with the matching invalidation entry in the invalidation data structure control is transferred to .

If the creation timestamp associated with the matching cache entry is later than the invalidation timestamp associated with the matching invalidation entry in the invalidation data structure then it means that the cache entry was created in the cache storage after the invalidation timestamp of the invalidation entry and therefore the cache entry is not invalidated by the invalidation entry and therefore remains valid and therefore steps and are executed. As described above an invalidation entry invalidates cache entries that match the pattern of the invalidation entry and are associated with creation timestamps that are earlier than the invalidation timestamp of the invalidation entry. However if the creation timestamp associated with the matching cache entry is not later than the invalidation timestamp associated with the matching invalidation entry in the invalidation data structure then it means that the cache entry was created in the cache storage before or at the invalidation timestamp of the invalidation entry and therefore at it is determined that the matching cache entry from the cache storage has been invalidated by the invalidation entry. Because the matching cache entry has been invalidated by the invalidation entry the data associated with the invalidated cache entry is not permitted to be retrieved from the cache storage and it is determined that there is a cache miss.

Returning to the example above the creation timestamp of the matching cache entry of the example cache storage table of with the key of v2 k1 is 8 15 AM and the invalidation timestamp of the matching invalidation entry of example invalidation data structure of with the key pattern of v2 is 9 00 AM. Because the creation timestamp is not later than the invalidation timestamp then it indicates that the matching cache entry for the data retrieval request is invalidated by the matching invalidation entry. Therefore data associated with the invalidated matching cache entry cannot be retrieved in response to the data retrieval request.

At a cache miss is determined. As described above a cache miss is determined either when the requested data associated with the data retrieval request is not found in the cache storage and or if one or more matching cache entries to the requested data associated with the data retrieval request are determined to be invalidated by one or more invalidation entries stored at the invalidation data structure.

At the data retrieval request is forwarded to a backend server. The data retrieval request for which either no matching cache entry exists at the cache storage or a matching but invalidated cache entry exists in the cache storage is forwarded to the backend server or another data source to obtain the requested data.

At a next invalidation entry in an invalidation data structure is determined wherein the invalidation entry comprises an invalidation pattern. An invalidation entry from an invalidation data structure is determined and its invalidation pattern extracted. In some embodiments the invalidation pattern may be usable to match against keys of cache entries stored at a cache storage to identify cache entries to invalidate. In some other embodiments the invalidation pattern may be usable to match against data other than keys of cache entries stored at a cache storage to identify cache entries to invalidate.

For example assume that the invalidation entry under consideration includes the key pattern of v2 from the example invalidation data structure of .

Returning to the above example the key pattern of v2 from the example invalidation data structure of is compared against the keys of the cache entries of the example cache storage table of and the three cache entries associated with respective keys of v2 k1 v2 k2 and v2 k3 are determined to match the key pattern of v2. These three matching cache entries are therefore invalidated.

At the matching one or more cache entries are removed from the cache storage. Those cache entries that match the pattern of the invalidation entry are cleared removed deleted from the cache storage.

Returning to the above example the three invalidated cache entries associated with respective keys of v2 k1 v2 k2 and v2 k3 that match the key pattern of v2 are removed from the cache storage.

At the invalidation entry is removed from the invalidation data structure. After the matching cache entries are confirmed to have been removed from the cache storage the invalidation entry itself is cleared removed deleted from the invalidation data structure.

At it is determined whether there is at least one more invalidation entry left in the invalidation data structure. In the event that there is at least one more invalidation entry left in the invalidation data structure control is returned to at which the next invalidation entry in the invalidation data structure is considered. Otherwise in the event that there are no more invalidation entries left in the invalidation data structure process ends.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

