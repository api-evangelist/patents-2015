---

title: Manipulating electronic backups
abstract: Systems and methods are provided for storing and restoring digital data. In some implementations, a method is provided. The method includes initiating a backup operation of data including a plurality of items, interrupting the backup operation, where interrupting occurs after a portion of the data has been completed, receiving an input to resume the backup operation, identifying a previously completed portion of the backup data, and performing a backup of a remaining uncompleted portion of the backup data. Other embodiments of this aspect include corresponding systems, apparatus, computer program products, and computer readable media.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09354982&OS=09354982&RS=09354982
owner: Apple Inc.
number: 09354982
owner_city: Cupertino
owner_country: US
publication_date: 20150123
---
This application is a continuation application of and claims priority to U.S. application Ser. No. 13 669 099 filed on Nov. 5 2012 which is a continuation application of and claims priority to U.S. application Ser. No. 11 760 604 filed on Jun. 8 2007 the entire disclosures of both applications are incorporated herein by reference.

Modern graphical user interfaces allow a large number of graphical objects or items to be displayed on a display screen at the same time. Operating systems e.g. Apple Mac OS provide user interfaces in which a number of graphical user interface windows can be displayed overlapped resized moved configured and reformatted according to the needs of a user or a particular application. Taskbars menus virtual buttons and other user interface elements provide mechanisms for accessing and activating windows even when they are hidden behind other windows.

With the sophisticated tools available users are encouraged not only to create and save a multitude of items in their computers but to revise or otherwise improve on them over time. For example a user can work with a certain file and thereafter save the file s current version on a storage device. The next day however the user could have had second thoughts about the revisions or could have come up with new ideas and therefore opens the file again.

The revision process is usually straightforward if the user wants to add more material to the file or make changes to what is there. But it is typically more difficult for a user who has changed his her mind about changes that were previously made and wants the file returned to a previous version. Application programs for word processing typically let the user undo previous edits of a text at least up to a predefined number of past revisions. The undo feature also usually is configured so that the previously made revisions must be undone in reverse chronological order that is the user must first undo the most recently made edit then the second most recent one and so on. If the user saves and closes the document and thereafter opens the document again it might not be possible to automatically undo any previous edits.

Conventional backup applications allow for the recovery of previously stored data. A backup operation typically must be completed in a single session. If the backup is interrupted the backup generally must be started over from the beginning.

Systems and methods are provided for storing and restoring digital data. In general in one aspect a method is provided. The method includes initiating a backup operation of data including a plurality of items interrupting the backup operation where interrupting occurs after a portion of the data has been completed receiving an input to resume the backup operation identifying a previously completed portion of the backup data and performing a backup of a remaining uncompleted portion of the backup data. Other embodiments of this aspect include corresponding systems apparatus computer program products and computer readable media.

Implementations of the aspect can include one or more of the following features. The aspect can further include monitoring for modifications to one or more items of the plurality of items during the backup operation completing the backup operation and performing a second backup for the modified items. Interrupting the backup operation can include receiving a user input that causes the backup to be interrupted. Receiving the user input can include receiving a log out request or receiving a shut down request. Interrupting the backup can include interrupting the backup in response to a system crash. Receiving an input to resume the backup operation includes receiving a user request to resume the backup. Receiving an input to resume the backup operation can include receiving an automatic request to resume the backup. An automatic request to resume can be received when a user logs into the system after interrupting the backup operation.

Identifying a previously completed portion of the backup can include identifying backup data written to the backup before the backup was interrupted. Identifying backup data written to the backup can include identifying a timestamp of the backup data. Identifying backup data written to the backup can include identifying backup data that has not been marked as complete. Identifying a previously completed portion of the backup can include identifying a portion of a file system included in the completed portion.

In general in one aspect a method is provided. The method includes initiating a backup operation determining whether a partially completed backup exists when a partially completed backup exists determining whether to resume the partially completed backup and completing the backup using the partially completed backup when resuming the partially completed backup. Other embodiments of this aspect include corresponding systems apparatus computer program products and computer readable media.

Implementations of the aspect can include one or more of the following features. Initiating a backup operation can include receiving a user input to initiate a backup operation. Initiating a backup operation can be according to a specified schedule. Determining whether a partially completed backup exists can include identifying backup data and determining whether the data is marked as complete. Determining whether a partially completed backup exists can include comparing time stamped backup data with a timestamp for a last completed backup. Determining whether to resume the partially completed backup can include prompting the user to indicate whether to resume the partially completed backup.

Particular embodiments of the subject matter described in this specification can be implemented to realize one or more of the following advantages. A partially completed backup operation can be resumed at a later time without restarting the backup operation. Resuming a partially completed backup operation provides efficient backup operations.

The details of one or more embodiments of the invention are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the invention will become apparent from the description the drawings and the claims.

The system includes a personal computer communicatively coupled to a remote server using a network interface and a network e.g. local area network wireless network Internet intranet etc. . The computer generally includes a processor memory one or more input devices e.g. keyboard mouse etc. and one or more output devices e.g. a display device . A user interacts with the system using the input and output devices . The system also includes various hardware elements. The system can include hardware software and combinations of the two.

The computer also includes a local storage device and a graphics module e.g. a graphics card for storing information and generating graphical objects respectively. The local storage device can be a computer readable medium. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter effecting a machine readable propagated signal or a combination of one or more of them.

While modifications of a user interface view are described herein with respect to a personal computer it should be apparent that the disclosed implementations can be incorporated in or integrated with any electronic device that has a user interface including without limitation portable and desktop computers servers electronics media players game devices mobile phones email devices personal digital assistants PDAs embedded devices televisions other consumer electronic devices etc.

Systems and methods are provided for modifying an interface view e.g. a user interface view . Systems and methods are also provided for handling interruptions during backup operations. The systems and methods can be stand alone or otherwise integrated into a more comprehensive application.

Though discussion is made with reference to modifying a user interface view those of ordinary skill will recognize that such a view can be based on various data structures files processes and other aspects of information management. It follows that modification to file structures data and the like is also contemplated in order to achieve the modification of the user interface view. In other words while the restoration of the user interface view from one state to another can be the most apparent change from the user s perspective this is accomplished through the corresponding changes in the underlying system content.

One of ordinary skill in the art will recognize that the engines methods processes and the like that are described can themselves be an individual process or application part of an operating system a plug in an application or the like. In one implementation the system and methods can be implemented as one or more plug ins that are installed and run on the personal computer . The plug ins are configured to interact with an operating system e.g. MAC OS X WINDOWS XP LINUX etc. and to perform the various functions as described below.

A system and method for modifying a user interface view can also be implemented as one or more software applications running on the computer . Such a system and method can be characterized as a framework or model that can be implemented on various platforms and or networks e.g. client server networks wireless networks stand alone computers portable electronic devices mobile phones etc. and or embedded or bundled with one or more software applications e.g. email media player browser etc. .

The computer includes the backup component that allows for the storage of versions of the computer s files or other items for example within the local storage or in an external storage repository. In one implementation the backup component also allows a user to select any of the stored versions and use the selected version to initiate a restoration of that version in the computer.

In some implementations each application can include an application programming interface API . The architecture can utilize API techniques to access applications and enhance the applications with additional functionality. For example the API can link several applications together for providing a single service on all linked applications. Particularly the backup component can utilize API techniques to enhance the applications with the functionality of the backup component . The API tools can link several applications to the backup component by using an API to provide a similar menu or icon for each of one or more applications . For example the API can be used by the backup component when generating a backup view corresponding to a current state of the subject application .

As another example the API can be used when the application is restored using the backup component to a prior view representing a prior state of the application. Although the API is shown in as part of application programs the API can be separate from the application programs . For example the API can be separately located and made available by the system for use by one or more of the application programs .

In one implementation the backup component provides back up and restoration capability for the system . Many different items or elements can be the subject of a backup operation in the system . For example folders files items information portions directories images system parameters playlists address books e mails e mail folders application states and the like all can be candidates for inclusion in an archive as backup data. Other types of data can be included as backup data.

In some implementations the backup component can include a local storage device and an external storage device . The backup data can be stored on either or both. Any number of local and or external storage devices can be used by the backup component for storing backup data. In one implementation no local storage is provided. In one implementation the backup component stores the backup data in a format corresponding to a file system structure. Backup data can be stored incrementally during a backup operation where backup data is periodically written to a particular storage device.

In one implementation one copy of original data e.g. folders files items information portions directories images system parameters playlists address books e mails e mail folders application states preferences and the like is stored in the system as backup data e.g. an original version of the data . When one or more subsequent sets of backup data or versions of the data are generated through subsequent backup operations the backup data can contain only the differences between a current data version and the prior backup data thereby saving storage space. In some implementations the storage devices and can be used to store the original backup data as well as links pointing to the original backup data. The links can be hard links which reference or point to physical data or as another example can be symbolic links that reference another file on the storage device e.g. by name or location .

The backup component can interact with one or more of the applications using the corresponding API . In one implementation the interaction allows the backup component to perform backup operations to capture a view of the application including the particular application s files state or other items and can provide for user restoration of selected backup data to name two examples.

In another implementation the backup component runs as a background task on an operating system where the task is generally not visible to the user. The backup component can be configured to run across multiple user accounts.

The backup component includes an activity monitoring engine . In one implementation the activity monitoring engine monitors for changes within data e.g. files or application states targeted for inclusion in backup operations. A change can also include the addition of new files or other data structures and the modification or deletion of existing ones. For example the activity management engine can be responsible for verifying the integrity of a playlist in a music file management program or for verifying that a corresponding song file exists for a listed song.

In one implementation the activity monitoring engine is capable of discerning between a substantive change e.g. the text within a document has been modified and a non substantive change e.g. the play count within an iTunes playlist has been updated or several changes cancel each other out through the activity monitoring engine s interaction with the application programs . The activity monitoring engine can for example create a list of modified elements e.g. files to be used when a backup operation is eventually triggered. In one implementation the activity monitoring engine can monitor the system for periods of inactivity. The activity monitoring engine can then trigger a backup operation during a period of time in which the backup operation will not cause a system slowdown for an active user.

A preference management engine specifies some operating parameters of the backup component . In one implementation the preference management engine contains user specified and or system default application parameters for the backup component . These can include settings for the details of capturing and storing the views. For example the preference management engine can determine the frequency of backup operations the storage location for the backup data the types of elements e.g. files or other items that are eligible for inclusion in backup operations and the events which trigger a backup operation periodic or event driven etc. .

The preference management engine can in some implementations determine what steps are to be taken in the event that a backup operation is interrupted for example due to a system shutdown a user logging out or an unexpected system failure. For example the preference management engine can determine if and when an alert can be generated regarding the interruption of a backup operation and or the ability to complete a previously interrupted backup operation.

In one implementation the preference management engine can detect that a new storage device is being added to the system and prompt the user whether the new storage device should be included as a backup repository. Files and other items can be scheduled for a backup operation due to location e.g. everything on the C drive and within D photos a correlation with specific applications e.g. all pictures music e mail in an inbox an address book and system settings or a combination of strategies. Different types of items can be scheduled to be stored on different devices or on different segments of a storage device during a backup operation.

A backup management engine coordinates the collection storage and retrieval of views performed by the backup component . For example the backup management engine can trigger the activity monitoring engine to monitor for activities that satisfy one or more criteria specified in the preference management engine for initiating a backup operation.

A change identifying engine locates specific element e.g. files or other items to determine if data associated with the elements has changed. The change identifying engine can be capable of discerning a substantive change from a non substantive change. For example the change identifying engine can identify a loss of data associated with a user s current view. In one implementation the change identifying engine traverses a target set of files or other items comparing a previous version to the current version to determine whether or not a modification has occurred. In addition the change identifying engine can generate an alert identifying the loss of data and prompt the user to initiate a previous version of the current view to restore the lost data. For example the change identifying engine can be responsible for verifying whether a data loss has occurred in a music file management program or for verifying that a corresponding song file is unchanged for a listed song.

A backup capture engine locates views e.g. elements files or other items that are to be included in a backup operation. The backup capture engine can invoke the activity monitoring engine and or the change identifying engine for example to generate a capture list identifying data to be included in a next backup operation. The backup capture engine can then store copies of listed data in one or more targeted storage repositories. The backup capture engine can track multiple versions of elements or items included in the backup repository.

The backup component includes a backup restoration engine to restore previous versions of views e.g. files or other items . In one implementation the backup restoration engine provides a user interface e.g. a graphical user interface where a user can select the item s to be restored.

The backup restoration engine can initiate backup operations on one or more data elements or items as directed by a user the system or according to a specified or otherwise defined schedule. For example the user can set up a scheduled backup operation to occur for any number of data files. The data files can be related to one another such as when the files share similar attributes or a schema. For example several files included on one particular webpage can have a similar schema and can require versions of each related file to remain consistent to display a successful webpage image.

Unless the backup operation is completed in a very short amount of time there is a chance that one or more of the files to be included in the backup can be modified before the backup operation is complete. For example the backup operation can be performed while a computer system is in use e.g. executing operation received from a user . The use of the computer system during a backup operation can introduce inconsistencies for example between backed up data files and data files currently awaiting the backup operation.

In another example if the backup operation is interrupted e.g. because of a user logout system shutdown or system crash and later completed there is a chance that one or more of the files pending inclusion in the backup can be modified before the backup operation is complete. In these examples such changes are monitored and the backup operation can be tailored to take them into account. If inconsistencies are found between files the backup restoration engine can attempt to resolve any discrepancies between data files as described in greater detail below.

During the backup operation the backup component writes e.g. periodically backup data to a storage device. For example the backup component can write data in a temporary manner e.g. in a temporary location marked as incomplete etc. . Alternatively the backup component can write the data as part of the backup on the storage device which is not marked as complete until the backup operation has finished. For example when backing up a large amount of data the backup data can be written incrementally as portions of the backup operation are performed. In some implementations the data has the form of a file system and backup data is written as portions of the file system are traversed during the backup operation. The data written to the storage device in this example can also include a timestamp. The timestamp can indicate the time at which the backup data was written to the backup.

The system interrupts the backup operation. In some examples a system reboot occurs in the middle of the backup operation the system crashes or the user logs out. When the backup operation is interrupted only a partial backup has been completed. Consequently only a portion of the data elements scheduled for inclusion in the backup have been written to the storage device.

The system resumes the interrupted backup operation. The resumption of the backup operation can occur for example automatically when the system starts up again or when the user logs on again. Alternatively resumption of backup operation can be initiated according to a user request or when the next backup operation is triggered e.g. according to a specified time schedule or in response to one or more backup events . In some implementations the backup component prompts the user whether or not an incomplete backup operation should be resumed or a new backup operation begun.

The system identifies the previously completed portion of the backup. For example a backup capture engine e.g. backup capture engine can locate a partially completed backup by comparing timestamps on written backup data to the timestamp of the last completed backup operation. Additionally the partially completed backup can be identified according to backup data that has not been marked as complete. In comparing the data stored in the partially completed backup with the schedule data to be included in the backup a remaining set of data can be determined.

Using the remaining set of data the system continues the backup operation. For example the identified data that has not yet been backed up can be added to the partial backup to provide a completed backup. In some implementations the backup data is stored as a file system hierarchy. Completing the backup operation includes completing the backup of elements in the file system hierarchy that were scheduled to be included in the backup. In some implementations when the backup operation is completed the backup data is marked as a completed backup. The completed backup can also include a timestamp for example to compare the backup data of the completed backup with backup data from previous backup operations or future partial backups.

In some implementations the procedures described in method can be performed in a different order or in combination with each other and more or fewer steps can be taken for the interrupted backup operation to complete. For example in some implementations the backup capture engine locates a partially completed backup and triggers the backup operation to resume. In another example the interrupted backup operation can be canceled e.g. by the system or by a user . In an alternative example additional interruptions and resumptions could occur before a backup operation completes.

The system determines whether a partially completed backup has occurred. A backup operation may fail to complete in one example due to a system failure on the computer . In some implementations the system e.g. as backup restoration engine or the change identifying engine of the backup component can identify a partially completed backup by traversing the backup data for stored backup data that is not marked as completed. Additionally the backup data that is not completed can have a timestamp that is later than the most recent backup data marked as a completed backup.

Alternatively the system can identify backup data stored within a temporary directory or those containing a more recent timestamp than the time at which the last full backup operation completed. In some implementations the backup component can recognize an interruption as it occurs e.g. due to a voluntary shutdown or log off operation and write an interrupt indicator such as a flag that identifies the partially completed backup.

If the system identifies a partially completed backup the system determines whether to resume the incomplete backup operation. In some implementations the user can be prompted to provide an input indicating whether or not the backup operation should be resumed or whether alternatively the partially completed backup should be discarded. In other implementations the system e.g. the preference management engine can have a parameter specifying when to resume an incomplete backup operation.

When a partially completed backup is resumed the system completes the interrupted backup operation using the partial backup data. For example when the backup data is stored as a file system hierarchy the elements of the file system hierarchy that were not yet included are added to the backup data. Additionally once completed the backup data can be flagged as a completed backup. In some implementations when resuming the backup operation the system determines whether or not there have been changes to data previously stored in the partial backup. For example a change identifying engine e.g. change identifying engine can check the partial backup data provided by a backup capture engine e.g. backup capture engine to verify that none of the items have changed since the previous backup operation was interrupted. The change identifying engine can provide an updated list of items to the backup capture engine so that the backup capture engine can complete the interrupted backup operation.

When a partially completed backup does not exist or when the system determines that the partially completed backup operation should not be resumed the system initiates a new backup operation. The new backup operation includes identifying modified data with respect to the most recently completed backup operation if any and generating a new backup including storing changed data. For example the change identifying engine can generate a new list of modified items for the backup capture engine to use during the backup operation.

A user can select a continue later button to request that the backup component resume the backup operation at a later point in time e.g. after the user logs back into the computer . A user can instead select a cancel log out button so that the user may remain logged in while the backup operation runs to completion. Alternatively in some implementations a presented button allows the user to cancel the current backup operation and continue with the log out shut down or other operation that triggered the interrupt. In some implementations if the user cancels the backup operation the partial backup data is discarded. In an alternative implementation if the user continues with the log out the backup process can be immediately terminated or otherwise stopped at an appropriate point e.g. after writing any processed but unwritten backup data .

A user can select a continue backup button to request that the backup component resume the previously interrupted backup operation. Alternatively the user can instead select a cancel backup button so that the interrupted backup operation is canceled. In some implementations upon selection of the cancel backup option the backup data of the partially completed backup are discarded. Additionally in some implementations selection of the cancel backup option results in the initiation of a new backup operation.

The system initiates a backup operation. For example a user can choose to initiate a backup operation of data including for example files or folders stored in a storage device. The backup component e.g. backup component can begin the backup operation according to the specified time schedule. The system monitors for modifications to one or more items during the backup operation. For example the backup component can monitor file changes made by a user and determine whether or not the modifications cause an inconsistency between related items such as the individual files used in combination for displaying a single web page.

In some implementations the backup component can initially ignore modifications that have been made to related files and back up the original files before determining whether or not the modifications cause an inconsistency in the files. Alternatively in some implementations the backup component can simply monitor for any changes to items occurring during the backup operation regardless of the items relationship to any other item. In particular the backup component monitors for changes to items already stored in the backup data as part of the backup operation in progress.

The system interrupts the backup operation. An interruption can occur for example due to a system shutdown system failure or user disconnection or a manual user cancellation of the backup operation.

The backup operation resumes at a later point in time for example as described above. The system resumes monitoring for modifications. In addition to monitoring current modifications in some implementations the monitoring task determines whether or not changes were made to items in the interval between the interruption of the backup operation and the resumption of the backup operation.

The system completes the initial backup operation. The system determines whether or not modifications have occurred during the backup operation. A query can be sent for example to a backup management engine to determine whether or not modifications occurred during a particular backup operation. If modifications did not occur during the backup operation the system determines that the backup operations are complete and the backup data is stored for later use.

If modifications occurred during the backup operation or between interruption and resumption of the backup operation the backup component modifies the backup data. In one implementation the backup data can be modified to correspond to the state that the files or other items have at the end of the initial backup operation. In another implementation the backup data can be modified to correspond to the state that the files or other items have at the beginning of their initial backup operation. In some implementations the user can be given a prompt or an option to decline further backup operations. For example when a modification is insignificant to the structure and content of the files e.g. a title change or file name change the system can present a pop up window containing a decline or ignore option.

Upon completion of the backup modification operation the system determines whether or not modifications have occurred during the backup modification operation. If modifications did not occur during the backup modification operation the system determines that the backup is complete. When modifications have occurred during a backup modification operation a query can be sent to determine whether or not additional backup modification operations are permitted. For example a user can set a maximum number of backup modification operations that can be carried out by configuring the backup component with a specified number of iterations. If further backup modification operations are allowed the backup operation can be performed again to resolve the inconsistencies.

The system can attempt to resolve inconsistencies by performing steps and until the maximum number of iterations has been reached. Upon reaching the maximum number of backup modification operations the system can generate an alert to the user. The alert can notify the user of the intended resolution and can allow the user to decline continue or modify the backup operation. In some implementations the user can choose to be prompted each time the time machine engine triggers the performance of the backup modification operation.

In the above description for purposes of explanation numerous specific details are set forth in order to provide a thorough understanding. It will be apparent however to one skilled in the art that implementations can be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid obscuring the disclosure.

In particular one skilled in the art will recognize that other architectures and graphics environments can be used and that the examples can be implemented using graphics tools and products other than those described above. In particular the client server approach is merely one example of an architecture for providing the functionality described herein one skilled in the art will recognize that other non client server approaches can also be used. Some portions of the detailed description are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the discussion it is appreciated that throughout the description discussions utilizing terms such as processing or computing or calculating or determining or displaying or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

An apparatus for performing the operations herein can be specially constructed for the required purposes or it can comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program can be stored in a computer readable storage medium such as but is not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions and each coupled to a computer system bus.

The algorithms and modules presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems can be used with programs in accordance with the teachings herein or it can prove convenient to construct more specialized apparatuses to perform the method steps. The required structure for a variety of these systems will appear from the description. In addition the present examples are not described with reference to any particular programming language. It will be appreciated that a variety of programming languages can be used to implement the teachings as described herein. Furthermore as will be apparent to one of ordinary skill in the relevant art the modules features attributes methodologies and other aspects can be implemented as software hardware firmware or any combination of the three. Of course wherever a component is implemented as software the component can be implemented as a standalone program as part of a larger program as a plurality of separate programs as a statically or dynamically linked library as a kernel loadable module as a device driver and or in every and any other way known now or in the future to those of skill in the art of computer programming. Additionally the present description is in no way limited to implementation in any specific operating system or environment.

The subject matter described in this specification can be implemented as one or more computer program products i.e. one or more modules of computer program instructions encoded on a computer readable medium for execution by or to control the operation of data processing apparatus. The instructions can be organized into modules or engines in different numbers and combinations from the exemplary modules described. The computer readable medium can be a machine readable storage device a machine readable storage substrate a memory device a composition of matter affecting a machine readable propagated signal or a combination of one or more them. The term data processing apparatus encompasses all apparatus devices and machines for processing data including by way of example a programmable processor a computer or multiple processors or computers. The apparatus can include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system or a combination of one or more of them. A propagated signal is an artificially generated signal e.g. a machine generated electrical optical or electromagnetic signal that is generated to encode information for transmission to suitable receiver apparatus.

While this specification contains many specifics these should not be construed as limitations on the scope of what may be claimed but rather as descriptions of features specific to particular implementations of the subject matter. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

The subject matter of this specification has been described in terms of particular embodiments but other embodiments can be implemented and are within the scope of the following claims. For example the actions recited in the claims can be performed in a different order and still achieve desirable results. As one example the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous. Other variations are within the scope of the following claims.

