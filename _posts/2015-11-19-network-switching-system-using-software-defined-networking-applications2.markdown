---

title: Network switching system using software defined networking applications
abstract: A network switching system includes a storage device including a plurality of application-provided flow-based rules provided by a plurality of applications. A packet processor is coupled to the storage device and includes a flow-based handler that is operable to receive a packet, determine that the packet is associated with a flow session, and associate a plurality of the application-provided flow-based rules with the packet based the association of the packet with the flow session. The packet processor also includes a flow-based rule processing engine that is operable to determine a priority for the plurality of application-provided flow-based rules and apply at least one of the plurality of application-provided flow-based rules to the packet according to the priority. The system allows a plurality of SDN applications to operate in a network switching system independently and without knowledge of each other.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09577944&OS=09577944&RS=09577944
owner: Dell Products L.P.
number: 09577944
owner_city: Round Rock
owner_country: US
publication_date: 20151119
---
This is a Continuation application to U.S. Utility application Ser. No. 13 586 550 filed Aug. 15 2012 entitled NETWORK COMMUNICATION PROTOCOL PROCESSING OPTIMIZATION SYSTEM the disclosures of which is incorporated herein by reference in their entirety.

The present disclosure relates generally to information handling systems IHS s and more particularly to a network switching IHS implementing software defined networking SDN applications for transferring information between IHS s.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an IHS. An IHS generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications IHSs may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in IHSs allow for IHSs to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition IHSs may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

Conventionally the control of network switches and routers has been proprietary and determined by the manufacturers of the equipment. Software Defined Networking SDN seeks to change this by making the control plane e.g. the information defining what to do with incoming packets such as for example the information in the routing table remotely accessible and modifiable using SDN applications. SDN applications have been developed that can manage security policy network load balancing power routing algorithms packet modification and redirection and or a variety of other network criteria known in the art.

However SDN applications expect to have full control over the incoming packets which becomes a problem when multiple SDN applications are added to the system and particularly when those SDN applications are provided by different vendors. For example a first SDN application may be desirable for associating rules or actions with packets that provide for network load balancing while a second SDN application may be desirable for associating rules or action with those packets that provide a security policy. In some situations the rules or actions provided using the first SDN application will conflict with the rules or actions provided using the second SDN application which can result in conflicting logic that creates unpredictable network behavior. The solution to this problem is to build an SDN application that perform all the functions needed by the system e.g. an SDN application that provides for both network load balancing and security policy and that SDN application may then be designed such that no rules or actions conflict. However this solution makes it difficult to quickly and easily leverage new innovations in SDN because of the need to build a SDN application that provides all of the desired SDN functionality in a system in order to implement a new SDN functionality.

According to one embodiment a network switching system includes a storage device including a plurality of application provided flow based rules provided by a plurality of applications and a packet processor coupled to the storage device wherein the packet processor includes a flow based handler that is operable to receive a packet determine that the packet is associated with a flow session associate a plurality of the application provided flow based rules with the packet based the association of the packet with the flow session and a flow based rule processing engine that is operable to determine a priority for the plurality of application provided flow based rules and apply at least one of the plurality of application provided flow based rules to the packet according to the priority.

For purposes of this disclosure an IHS may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an IHS may be a personal computer a PDA a consumer electronic device a display device or monitor a network server or storage device a switch router or other network communication device or any other suitable device and may vary in size shape performance functionality and price. The IHS may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components of the IHS may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The IHS may also include one or more buses operable to transmit communications between the various hardware components.

In one embodiment IHS includes a processor which is connected to a bus . Bus serves as a connection between processor and other components of IHS . An input device is coupled to processor to provide input to processor . Examples of input devices may include keyboards touchscreens pointing devices such as mouses trackballs and trackpads and or a variety of other input devices known in the art. Programs and data are stored on a mass storage device which is coupled to processor . Examples of mass storage devices may include hard discs optical disks magneto optical discs solid state storage devices and or a variety other mass storage devices known in the art. IHS further includes a display which is coupled to processor by a video controller . A system memory is coupled to processor to provide the processor with fast storage to facilitate execution of computer programs by processor . Examples of system memory may include random access memory RAM devices such as dynamic RAM DRAM synchronous DRAM SDRAM solid state memory devices and or a variety of other memory devices known in the art. In an embodiment a chassis houses some or all of the components of IHS . It should be understood that other buses and intermediate circuits can be deployed between the components described above and processor to facilitate interconnection between the components and the processor .

Traditional packet processing logic in network switching devices includes two major components a data plane or fast processing path where data packets are received queued processed and then forwarded to the appropriate destination and a control plane or slow processing path where communication protocols configuration and administration takes place. Data packets that transit the data plane or fast processing path are typically delay sensitive and processed with priority based on application and policy settings while control packets that transit the control plane are relatively less delay sensitive and thus tolerant to longer latency. For example control packets typically carry device control information or communication protocol data that allows devices to communicate packet forwarding logic with each other routing and discovery protocol data packets that requirement additional attention processing configurations device configurations and or a variety of other control packet information known in the art.

New communications protocols such as for example the OpenFlow communications protocol www.openflow.org separate the data plane and the control plane with the data plane remaining on the networking device and the control plane containing the routing protocol and forwarding logic moved to a controller platform typically running on an IHS coupled to the networking device. illustrates a software defined networking framework including a plurality of network switching IHSs and each having a respective agent e.g. an OpenFlow agent and . Each of the network switching IHSs and may be coupled to each other and a control IHS such as for example a server. The illustrated embodiment the network switching IHS is coupled to the network switching IHSs and and the control IHS the network switching IHS is coupled to the network switching IHSs and and the control IHS the network switching IHS is coupled to the network switching IHSs and and the control IHS and the network switching IHS is coupled to the network switching IHS and the control IHS although other connection schemes are possible.

The control IHS includes a controller e.g. an OpenFlow controller a controller Application Programming Interface API e.g. an OpenFlow controller API interfacing with the controller and a plurality of Software Defined Networking SDN applications and interfacing with the controller API . In an embodiment of the present disclosure any two of the SDN applications and may be provided by different SDN application providers e.g. vendors and are operable to operate independently from each other and without knowledge of each other as described in further detail below. Each of the networking IHSs and include their respective agents and for use in managing the flows seen by that networking IHS. The controller is operable to configure the agents and for flow matching rules flow based rules and actions provided by the SDN applications and for execution on one or more flows by configuring flow tables flow rules and actions in the networking IHSs and . Thus the controller and controller API provide the structure for which the SDN applications and may interface with the rest of the networked system .

Any of the SDN applications and may be a variety of SDN applications known in the art such as for example SDN applications for managing security policies network load balancing power routing algorithms packet modification and redirection and or a variety of other SDN application functions known in the art. As discussed in further detail below each of the SDN applications and is operable to create flow entries e.g. flow based rules in flow tables in the networking IHSs and for matching packets to specific flows and in response associating actions with those packets.

Referring now to an embodiment of an IHS network is illustrated. The embodiment of the IHS network illustrated in is an example of a flow based switching system including optimized fabric port extenders that may be tailored for flow based switching. However the example illustrated in is simply one example of an IHS network that provides flow based network switching system according to the teachings of the present disclosure and one of skill in the art will recognize that the teachings below may be applied to a variety of different devices and systems without departing from the scope of the present disclosure. The IHS network includes a switch IHS having a plurality of packet managers each connected to a plurality of line modules . As illustrated for one of the line modules any of the line modules may be connected to a plurality of port extenders . As illustrated for one of the port extenders any of the port extenders may be coupled to a plurality of user IHS s . As would be understood by one of skill in the art the switch IHS may be connected to a core switch or router not illustrated that is further connected the Internet a datacenter etc.

Referring now to an embodiment of a flow based network switching system is illustrated. The flow based network switching system includes an IHS . In an embodiment the IHS may be the IHS described above with reference to may be included in the packet managers the line modules or the port extenders described above with reference to and or may be provided in a variety of other network components known in the art. The IHS includes a plurality of ports that are each coupled to an interface that may include for example a Media Interface with physical PHY and link MAC layers. The interface couples the ports to a packet processor which in an embodiment may be a flow based packet processing chip such as for example a chip that has been optimized to inspect and classify application layer packet information as opposed to convention packet processing chips that process packets based on layer 2 and layer 3 data as discussed further below. The packet processor includes a flow based handler and session manager a flow based rule processing engine and a flow based rule storage . Each of the flow based handler and session manager and the flow based rule processing engine are coupled to the interface . The flow based handler and session manager the flow based rule processing engine and the flow based rule storage are coupled to each other and to a memory . The flow based rule storage is configurable and programmable by a user to include a variety of flow based rules discussed in further detail below. Furthermore the flow based rule storage may include one or more default rules that may be applied to packets that are not associated with any user defined flow set rules discussed in further detail below. In an embodiment the memory is external to the packet processor and coupled to at least one core of the packet processor through a high speed memory bus. The memory includes a plurality of queues and a flow table .

Several embodiments of the operation of the system illustrated in are described in co pending U.S. application Ser. No. 13 543 019 attorney docket no. 16356.1505 filed on Jul. 6 2012 the disclosure of which is incorporated herein by reference. Those embodiments are generally directed to a flow based networking system that assembles packets retrieves application layer meta data from each of the packets determines flow sessions associated with each of the packets using the application layer metadata retrieves and applies flow based rules for each of the packets using the application layer metadata and forwards each of the packets. The details with respect to these embodiments need not be repeated here but one of skill in the art will recognize that the association of packets with flow sessions and the association of flow based rules with packets may be performed by the systems and methods of the present disclosure is substantially the same manner.

As discussed in co pending U.S. application Ser. No. 13 543 019 attorney docket no. 16356.1505 filed on Jul. 6 2012 packets that ingress the network switching system are matched to flows by the flow based handler and session manager followed by the association of flow based rules or action rule sets e.g. security load balancing traffic shaping redirection modification statistics packet header rewrites etc. with the packets based on their association with particular flows. The flow based handler and session manager is also operable to create flow sessions upon receiving the first packet associated with those flow sessions and to monitor and maintain statistics on all active flow sessions. The flow based rule processing engine then applies the flow based rules or action rule sets to the packets prior to flow scheduling and redirection to egress ports on the network switching system .

The network switching system provides the agent for configuration by a controller e.g. the controller of for flow matching rules and actions provided by a plurality of SDN applications e.g. the SDN applications and of while the flow based handler and session manager and the flow based rule processing engine are used to associate and apply rules and actions provided by different SDN application to packets while avoiding conflicts that result in undesired network behavior. illustrates the operation of the network switching system to associate rules with packets that are associated with different flow sessions. Packets enter the network switching system through the media interface and are determined to be associated with or used to create one or more flow sessions and by the flow based handler which then monitors those flow sessions as discussed above.

Each of a plurality of SDN applications and defines flow entries or flow based rules for each flow session. For example the SDN application defines rule for flow session rule for flow session and rule for flow session the SDN application defines rule for flow session rule for flow session and rule for flow session and the SDN application defines rule for flow session rule for flow session and rule for flow session . The flow based handler is operable to determine that a packet is associated with a flow session and then associate flow entries or flow based rules in one or more flow tables in a flow table pipeline associated with that flow session. These operations by the flow based handler result in the building of flow based rule pipelines for each flow session monitored by the flow based handler . For example in the illustrated embodiment a first flow based rule pipeline is associated with the flow session and includes rules and a second flow based rule pipeline is associated with the flow session and includes rules and and a third flow based rule pipeline is associated with the flow session and includes rules and

The flow based rule processing engine is operable to apply the rules for each flow based rule pipeline based on one or more priorities. Priorities may be based on actions taken according to a flow entry or flow based rule the SDN application that provided the rule and or a variety of other priority criteria known in the art. Furthermore priorities may differ for a given flow based rule depending on the flow to which it is applied. In the event of a conflict the higher priority flow entry or flow based rule may be applied while the lower priority and conflicting flow entry or flow based rule may be ignored or modified such that the lower priority rule no longer conflicts with the higher priority rule. When all the flow entries or flow based rules in a particular flow based rule pipeline either have either been applied to a packet conflicted out of application to the packet or modified such that no conflict exists the packet is passed from the flow based rule processing engine to the media interface such that the packet may egress the system.

Referring now to an embodiment of a method for processing packets is illustrated. The method may be performed by the network switching system according to the operation illustrated in as implemented in the IHS network of e.g. in the packet managers line modules and or port extenders and or in a variety of other networking scenarios known in the art. The method and flow based architecture illustrated in may be leveraged for access network designs aggregation network designs and a variety of other network designs known in the art. The flow based processing performed in the method addresses next generation network architecture that requires intensive and high performance packet processing of independently operating content aware SDN applications and services at line rate speeds while providing programmable deep packet inspection and classification of complex data types of flow based services designed into emerging technologies e.g. the OpenFlow protocol L4 L7 protocols security and filtering traffic management load balancing rate shaping and or a variety of other emerging technologies known in the art. 

The method begins at block where a packet is assembled. As is known in the art packets may be sent from one or more IHS s in a network to the IHS e.g. a first IHS may send a first set of packets to the IHS over the network a second IHS may send a second set of packets to the IHS over the network and so on. In an embodiment packet data ingresses the IHS through one of the ports . That packet data passes through the interface and to the flow based handler and session manager in the packet processor . The flow based handler and session manager receives the packet data and assembles the packet data into packets for further processing. Thus the flow based handler and session manager may receive a first set of packet data and assemble a first packet from that packet data receive a second set of packet data and assemble a second packet from that packet data receive a third set of packet data and assemble a third packet from that packet data and so on. As packets are assembled they may be stored in the queues of the memory before or while being processed according the method .

The method then proceeds to block where the packet is matched to a flow session. Subsequent to assembling a packet in block of the method the flow based handler and session manager may perform a deep inspection on the packet header. Using the metadata from the deep inspection of the packet the flow based handler and session manager then compares that metadata to flow match rules that are stored in the flow table to determine whether the packet assembled in block of the method matches a flow session that is associated with one or more of the flow match rules that are stored in the flow table . The flow based handler and session manager may employ a variety of algorithms to determine whether the metadata from the packet is associated with a flow session such as for example retrieving application layer metadata such as signatures e.g. URLs from the packet header and matching that application layer metadata with flow match rule data for a flow session in the flow table. When the first packet associated with a particular flow is received the flow based handler and session manager creates a flow session in response to determining that the packet metadata matches flow match rule data that is stored in the flow table and that pertains to configurations and management associated with that flow session. Then further packets associated with that particular flow session can then be determined to be part of that flow session by matching metadata retrieved through the deep packet inspection discussed above with the flow match rules data in the flow table .

In an embodiment of block using the metadata retrieved through the deep packet inspection discussed above the flow based handler and session manager may access the flow table to determine whether any flow match rules exist for that packet. In one example a first SDN application may provide a flow based rule discussed in further detail below for security while a second SDN application may provide a flow based rule discussed in further detail below for network load balancing. A user of the flow based network switching system may pre configure and program flow based rules for packets into the flow based rule storage for particular flows and flow match rules associated with those particular flows are then stored in the flow table and used to match packets to their appropriate flows such that the user defined flow based rules may be applied.

Following block the method proceeds to block where flow based rules are associated with the packet. The flow based handler and session manager uses the metadata retrieved through the deep packet inspection discussed above to retrieve one or more flow based rules from the flow based rule storage and associates the one or more flow based rules with the packet. For example the flow based handler and session manager may retrieve the SDN application provided rules associated with security and network load balancing and provide those rules in a flow based rule pipeline that is associated with the packet. Flow based rules associated with a packet in a flow based rule pipeline may be provided to the flow based rule processing engine at block .

In an embodiment the flow based rules retrieved and associated with the packet in the flow based rules pipeline at block may include a security rule provided by an SDN application such as for example a rule for dropping packets belonging to a flow session that is accessing unauthorized websites. In an embodiment the flow based rules retrieved and associated with the packet in block may include a load balancing rule provided by an SDN application such as for example a rule for directing packets in a flow session to a destination based on a network traffic design. In an embodiment the flow based rules retrieved and associated with the packet in block may include a traffic shaping rule provided by an SDN application such as for example a rule for directing packets belonging to a flow session to maintain traffic speeds over one or more traffic interfaces. In an embodiment the flow based rules retrieved and associated with the packet in block may include a redirection rule provided by an SDN application such as for example a rule for directing packets in a flow session to another network application etc. In an embodiment the flow based rules retrieved and associated with the packet in block may include a modification rule provided by an SDN application such as for an example a rule to modify a packet belonging to a flow session based on any user requirement. In an embodiment the flow based rules retrieved and associated with the packet in block may include a statistical rule provided by an SDN application such as for example a rule to direct packets in a flow session to maintain traffic statistics as desired. In an embodiment the flow based rules retrieved and associated with the packet in block may include a packet header rewrite rule provided by an SDN application such as for example a rule to rewrite the destination of packets in a flow session as desired by the user.

The method then proceeds to block where conflicts between the flow based rules are resolved. The flow based rule processing engine receives the flow based rule pipeline for the packet and applies one or more priorities to the flow based rules in the flow based rule pipeline to determine how the rules associated with the packet should be applied to the packet. As discussed above some of the rules associated with the packet at block may conflict with other rules associated with the packet at block and the flow based rule processing engine determines which of the conflicting rules should be applied to the packet and whether the conflicting rules that are of lower priority may be modified such that no conflict exits or ignored if the conflict cannot be resolved. By using the flow based rule processing engine to resolve conflicts between flow based rules in a flow based rule pipeline that were provided by different SDN application SDN applications may be added to the system at any time and without any knowledge of the existence and or operation of other SDN applications in the system as the each SDN application will be allowed to provide its flow entries or flow based rules to flow tables for association with packets and all conflicts between any flow entries or flow based rules will be resolved by the flow based rule processing engine .

Conflicts may be resolved by prioritizing flow based rules based on a variety of criteria. For example SDN applications providing for security may have their flow based rules prioritized over all other SDN applications in the system. In another example flow based rules that provide for traffic shaping such that minimum traffic speeds are maintained may be prioritized over flow based rules that provide for redirection of packets to a particular network. Priorities for flow based rules may be defined by the system a network administrator an IHS user and or a variety of other system entities known in the art.

As can also be seen for each flow session and that has had prioritized rules matched with it and with different priorities per flow session in the illustrated example the flow based rule processing engine is operable to perform rule creation using the rules matched to the flow session. As discussed above the flow based rule processing engine is operable to determine whether the rules and conflict for each of the flows and and then either modified the conflicting rule or ignore the conflicting rule such that a new rule created. In the illustrated embodiment the rule has been created from the matched and prioritized rules and for flow session and the rule has been created from the matched and prioritized rules and for flow session . In an embodiment new rules may be created as a cross product that combines all rules matched and prioritized for a particular flow that do not conflict or have been modified to not conflict. For example the user may create a profile or policy for the combining of rules based on flow requirements application requirements flow priorities rule priorities etc.

The method then proceeds to block where the packet is modified using the flow based rules. The flow based rule processing engine uses the flow based rules associated with the packet in block that were not conflicted out in block to modify the packet. For example the packet may be modified according to the rules described above by changing any information in the packet header based on the requirements of the flow based rule.

The method then proceeds to block where the packet is processed. In an embodiment processing the packet may include performing flow scheduling e.g. queueing the packet forwarding the packet through the interface such that the packet egresses the IHS via one of the ports dropping the packet and or a variety of other packet processing actions known in the art. In an embodiment when packets associated with a flow session are scheduled for redirection and forwarding the flow based rule processing engine also enforces the associated rules and policies on the packets as they progress into the egress pipeline of the IHS . Flow based processing rules and policies may include conditional logic based actions byte swaps field rewrite increment decrement operations header insertion deletion for tunnel creation termination traffic management and load balancing.

The method then returns to block to where packets are assembled and the flow based packet processing is repeated. One of skill in the art will recognize that the method may be used by the flow based network switching system to process in parallel sets of packets associated with different flow sessions. For example a first set of packets associated with a first flow may be received and assembled with a first flow session created upon receiving the first packet in the first set of packets followed by modification of the packets in the first set of packets using the flow based rules as discussed above before forwarding the packets in the first set of packets through the network. Concurrently a second set of packets associated with a second flow may be received and assembled with a second flow session created upon receiving the first packet in the second set of packets followed by modification of the packets in the second set of packets using the flow based rules as discussed above before forwarding the packets in the second set of packets through the network. This may occur for any number of flows occurring within the IHS network.

Thus a flow based network switching system and method have been described that provides for the processing of packets using a plurality of flow based rules provided by a plurality of different SDN applications that operate independently from and without knowledge of each other. Each flow based rules that is associated with a flow defined by a flow session is placed in a flow based rule pipeline that is associated with the packet and then priorities are applied to determine which of those flow based rules to apply to the packet in the event two or more of the flow based rules provide conflicting actions. The systems and methods of the present disclosure allow new SDN functions to be quickly adopted and utilized by allowing an SDN application that provides that SDN function to be integrated into a system without the need to worry about possible conflicts between that SDN application and existing SDN applications in the system.

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. Accordingly it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

