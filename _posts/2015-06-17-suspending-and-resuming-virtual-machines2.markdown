---

title: Suspending and resuming virtual machines
abstract: Suspending multiple virtual machines executed simultaneously a hypervisor a data processing system, including: sending, by a control instance, a request to the hypervisor to suspend virtual machines at a given future first point in time; the hypervisor determining if its virtual machines can be suspended at the first point in time, and, if the suspending is possible, returning a suspend handle to the control instance and storing the suspend handle, otherwise returning an invalid handle; when receiving a suspend handle from the hypervisor in return to the request to suspend virtual machines, the control instance sending a suspend command to the hypervisor, wherein the respective suspend handle is provided to the corresponding hypervisor; the hypervisor determining if the received suspend handle is equal to its stored handle and, if yes, suspending its virtual machines at the first point in time.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09563462&OS=09563462&RS=09563462
owner: International Business Machines Corporation
number: 09563462
owner_city: Armonk
owner_country: US
publication_date: 20150617
---
The present disclosure relates in general to data processing systems and in particular to a method and a system for suspending and resuming multiple virtual machines executed simultaneously by hypervisors on data processing systems.

In virtualized computer systems it may be desirable in certain circumstances to suspend a virtual machine VM and resume it at a later time. In order to save resources concerning e.g. computing power energy or memory it may also be worthwhile to suspend a virtual machine and resume it at a later time. Also for example changes to the VM s configuration file cannot be made while the VM is executing. In order to make such changes the VM is first suspended. This causes the VM execution to halt and the VM s state to be serialized and written to a file commonly known as a checkpoint file or a suspend file. After the VM is suspended the desired change can be made to the VM s configuration file. The VM having the changed configuration can then be resumed from the saved state.

As described herein it is an objective to provide a method for suspending multiple virtual machines executed simultaneously by hypervisors with increased reliability and availability of network resources.

Another objective is to provide a data processing system for executing the method for suspending multiple virtual machines executed simultaneously by hypervisors with increased reliability and availability of network resources.

These objectives are achieved by the features of the independent claims. The other claims the drawings and the specification disclose advantageous embodiments.

According to a first aspect as described herein a method is proposed for suspending multiple virtual machines executed simultaneously by at least one hypervisor in at least one data processing system comprising i sending by a control instance a request to the at least one hypervisor to suspend virtual machines at a given future first point in time ii in response to receiving a request to suspend virtual machines from the control instance the hypervisor determining if its virtual machines can be suspended at the first point in time and if the suspending is possible returning a suspend handle to the control instance and storing the suspend handle otherwise returning an invalid handle iii when receiving a suspend handle from the hypervisor in return to the request to suspend virtual machines the control instance sending a suspend command to the hypervisor wherein the respective suspend handle is provided to the corresponding hypervisor iv in response to receiving a suspend command with a suspend handle from the control instance the hypervisor determining if the received suspend handle is equal to its stored handle and if that is the case suspending its virtual machines at the first point in time.

Firmware simulation allows to couple multiple system environments utilizing virtual machines for interface verification and test. These firmware components maintain open network connections between each other.

The protocols expect continuously running timers without longer gaps or delays. This inhibits suspending resuming these environments without restarting the simulation.

In the state of the art coupled virtual machines cannot be suspended resumed to preserve resources like network resources. Instead either the resources are left running unused with the disadvantage of wasting resources e.g. computing power energy or memory or the resources have to be stopped and restarted causing significant overhead on the user side. Stopping and restarting also implies reproducing the previous state of the virtual machines. Suspending allows to bring development test setup to a certain stage and preserve for later use.

A precondition for an embodiment of a method is that all host operating system timers are synchronized via a standard system timer protocol which is normally state of the art. According to the proposed method a two step clock preserving suspend command for virtual machines is proposed which comprises at least a prepare and an execute process step. An application programming interface API on hypervisor level may for this purpose be implemented in order to dump set virtual real time clock parameters for each connected virtual machine. So the intention of the proposed method is not to be cycle time accurate between hypervisors. The virtual real time clocks of the multiple virtual machines do not have to be synchronized. But the virtual real time clocks are simply saved and restored at a given point in time.

Thus due to an embodiment of a described method if a user decides to suspend virtual machines via a control instance the control instance will first call a hypervisor API for each involved hypervisor. Commands for preparing the suspending process suspending the virtual machines in case all involved hypervisors are ready or canceling the suspending process if not all involved hypervisors are ready are executed on the data processing system.

Favorably the an embodiment of a described method may further comprise i sending by the control instance a request to the at least one hypervisor to resume virtual machines at a given future second point in time ii in response to receiving a request to resume virtual machines from the control instance the hypervisor determining if its suspended virtual machines can be resumed at the second point in time and if the resuming is possible returning a resume handle to the control instance otherwise returning an invalid handle iii when receiving a resume handle from the hypervisor in return to the request to resume virtual machines the control instance sending a resume command to the hypervisor wherein the respective resume handle is provided to the corresponding hypervisor iv in response to receiving a resume command with a resume handle from the control instance the hypervisor determining if the received resume handle is equal to its stored handle and if that is the case resuming its suspended virtual machines at the second point in time.

Thus due to an embodiment of a described method if a user decides to resume simulation environment utilizing virtual machines via a control instance the control instance manager first retrieves a timer state from a state database. The control instance then picks the involved hypervisors. The control instance will then call a hypervisor API for each involved hypervisor. Commands for preparing the resuming process resuming the virtual machines in case all involved hypervisors are ready or canceling the resuming process if not all involved hypervisors are ready are executed on the data processing system. The result will be that all related virtual machines are started at the same time using the previous time of the virtual machines.

In a favorable embodiment the method may further comprise for suspending multiple virtual machines i the hypervisor returning a clock state of the virtual machine requested for suspending to the control instance ii the control instance storing the clock state of the virtual machine. By this way it is possible to save the actual clock state of the virtual machine at the point in time when the virtual machine is suspended for future use when resuming the virtual machine after retrieving the stored previous clock state of the virtual machine.

In another favorable embodiment the method may further comprise for resuming multiple virtual machines i the control instance retrieving a stored clock state of the virtual machine requested for resuming and returning the clock state to the corresponding hypervisor ii the hypervisor setting a clock state of the virtual machine to the retrieved clock state. Thus it is possible to retrieve the previous clock state and pass it to the involved hypervisor for setting the previous clock state of the virtual machine during the resume process and starting the virtual machine again at the exact clock state when it was suspended.

Favorably the virtual machines may be connected via a network. For executing firmware simulation it may be necessary to couple various system environments for interface testing. So the firmware components maintain open network connections between each other. Therefore coupling of the multiple virtual machines might be a common state during the simulation process.

Advantageously at least two hypervisors may be implemented on different data processing systems represented on different hardware architectures. This may be favorably the case if an application programming interface API may for this purpose be implemented on hypervisor level as well as a virtual real time clock may be emulated in a virtual hardware in order to dump set virtual real time clock parameters for each connected virtual machine.

In a favorable embodiment a method further comprises for multiplying virtual machines i suspending the virtual machines ii copying the suspended virtual machines iii retrieving the clock states of the suspended virtual machines iv resuming the copied virtual machines with the retrieved clock states. Thus connected virtual machines may be cloned. The copied virtual machines are able to be resumed and be running in their connected virtual time.

Due to an advantageous embodiment the method upon triggering for suspending by the control instance may comprise i the control instance calling for suspending the virtual machines ii the corresponding hypervisor suspending the virtual machine iii the hypervisor storing the states of the virtual machine iv the hypervisor returning a clock state of the virtual machine to the control instance v the control instance storing the states and the clock state of the virtual machines. Thus a described method is based on storing the states of the virtual machines to be suspended and especially storing the clock states of the virtual machines. The information concerning the states and the clock states are gathered by the hypervisor from the virtual machines and then passed to the control instance where a control instance manager will store the information e.g. in a database of the control instance.

Due to an advantageous embodiment the method upon triggering for resuming by the control instance may further comprise i the control instance calling for resuming the virtual machines and retrieving the clock states of the virtual machines ii the corresponding hypervisor setting the clock state of the virtual machine to the retrieved clock state iii the hypervisor restoring the states of the virtual machine iv the hypervisor starting the virtual machine v the control instance updating the states of the virtual machines in the database. As a described method is based on storing the states of the virtual machines to be suspended and especially storing the clock states of the virtual machines the control instance upon calling for resuming the virtual machines will first retrieve the clock states of the virtual machines to be resumed from the database. The information concerning the states and the clock states are passed to the hypervisor by the control instance and then used to set the clock states of the virtual machines to the retrieved clock states and then restore the states of the virtual machines in order to start them at the previous clock state. The actual states of the virtual machines i.e. the running state after a successful resume or a suspended state after a successful suspend of a virtual machine respectively are then passed to the control instance where a control instance manager will update the information on the data base of the control instance.

Advantageously the multiple virtual machines may be resumed at the clock state where the virtual machines were suspended. This may favorably be performed by retrieving the stored clock states of the virtual machines and then setting the clock states of the virtual machines to the retrieved clock states by the respective hypervisors.

Favorably upon resuming the multiple virtual machines an offset between system clocks of the multiple virtual machines may be determined. This may allow to determine the time interval the virtual machines were suspended. As the intention of the proposed method is not to be cycle time accurate between hypervisors the virtual real time clocks of the multiple virtual machines are never synchronized. So a method is working not with absolute time stamps but with relative time stamps. Therefore offsets of system clocks and or virtual real time clocks may be working as well.

So advantageously the virtual machine may be resumed at a clock state updated with the offset between system clocks of the multiple virtual machines when being suspended. Thus the relative time stamp for further processing in a simulation environment may be sufficient in order to resume testing without delay and interruption of a network connection.

In an advantageous embodiment the virtual real time clock may be adapted to the retrieved clock state of the virtual machine resumed. Thus the system clock of the virtual machine does not need to be changed after resuming the virtual machine. So the virtual machine may execute simulation tasks on a time scale which is running continuously. This may be favorable for recording testing processes and further analyzing the data on a continuous level.

Favorably the first point in time to suspend the virtual machines and or the second point in time to resume the virtual machines may be synchronized by the control instance for the at least two hypervisors. It is a major advantage of a method that the virtual machines are suspended at the same point in time and or that the virtual machines are also resumed at the same point in time. This can be achieved by calling the corresponding hypervisors in order to synchronize the first and the second point in time. So the suspending process and or the resuming process may be executed at the same point in time. Therefore the hypervisors in use may have synchronized their internal timers e.g. by an external time server like a network time protocol NTP .

According to a further advantageous aspect of a data processing program for execution in a data processing system is proposed comprising an implementation of an instruction set for performing a method as described above when the data processing program is run on a computer.

Further a favorable computer program product is proposed comprising a computer usable medium including a computer readable program wherein the computer readable program when executed on a computer causes the computer to perform a method for suspending multiple virtual machines executed simultaneously by at least one hypervisor in at least one data processing system comprising i sending by a control instance a request to the at least one hypervisor to suspend virtual machines at a given future first point in time ii in response to receiving a request to suspend virtual machines from the control instance the hypervisor determining if its virtual machines can be suspended at the first point in time and if the suspending is possible returning a suspend handle to the control instance and storing the suspend handle otherwise returning an invalid handle iii when receiving a suspend handle from the hypervisor in return to the request to suspend virtual machines the control instance sending a suspend command to the hypervisor wherein the respective suspend handle is provided to the corresponding hypervisor iv in response to receiving a suspend command with a suspend handle from the control instance the hypervisor determining if the received suspend handle is equal to its stored handle and if that is the case suspending its virtual machines at the first point in time.

As will be appreciated by one skilled in the art aspects of the present disclosure may be embodied as a system method or computer program product. Accordingly aspects of the present disclosure may take the form of an entirely hardware embodiment an entirely software embodiment including firmware resident software micro code etc. or an embodiment combining software and hardware aspects that may all generally be referred to herein as a circuit module or system. 

Furthermore aspects of the present disclosure may take the form of a computer program product embodied in one or more computer readable medium s having computer readable program code embodied thereon.

Any combination of one or more computer readable medium s may be utilized. The computer readable medium may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic infrared or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following an electrical connection having one or more wires a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an optical fiber a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device. A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device.

Program code embodied on a computer readable medium may be transmitted using any appropriate medium including but not limited to wireless wire connection optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider .

Aspects of the present disclosure are described below with reference to block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions stored in the computer readable medium produce an article of manufacture including instructions which implement the function act specified in the block diagram block or blocks.

The computer program instructions may also be loaded onto a computer other programmable data processing apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatus or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the block diagram block or blocks.

Due to a further aspect of the disclosure a data processing system for execution of a data processing program is proposed comprising software code portions for performing a method described above.

A problem with various existing approaches is that it may take a certain amount of time to write out the VM s state to a file and then read it back again. For a VM with a memory size of many gigabytes this can take tens of seconds to potentially minutes. Because of this prolonged read and write cycle the VM would incur downtime that can cause the VM s network connection to expire and close. Even more important is the fact that the clock of the VM is usually synchronized with the hypervisor during startup. The gap between the synchronized VM time and the VM time during the suspension may cause a timeout. This can be mitigated by e.g. the commercial product VMware that restores the previous point in time storing the virtual real time clock in the image . However even in this case the time difference that occurs when suspending more VMs one after the other can cause timeouts. In addition users and clients of the VM would not be able to access or interact with the VM during this downtime and as long as the VM is suspended. This would be viewed as an outage period for the VM.

Due to an alternative approach a new copy of the VM is started on the same host as the old VM while the old VM is still running. It then pre copies the VM s memory from the old VM to the new VM. This is followed by the steps of suspending the old VM making any desired changes to the VM s configuration file and resuming from the new VM. Because of the pre copying step the amount of downtime the VM encounters can be reduced quite a bit. The downside of this approach is the doubling of the VM s memory usage and CPU costs associated with the pre copying step.

U.S. Pat. No. 8 635 395 B2 describes a method of suspending and resuming being carried out in a host computer having a first instance of a virtual machine running therein. The method includes the steps of instantiating a second instance of the virtual machine while guest instructions are being executed in the first instance of the virtual machine suspending the execution of the guest instructions in the first instance of the virtual machine and storing a state of the first instance of the virtual machine. Further the method includes copying metadata maintained for pages of virtual memory space allocated for the first instance of the virtual machine and using the copied metadata as metadata for pages of virtual memory space allocated for the second instance of the virtual machine loading the stored state into the second instance of the virtual machine and resuming the execution of the guest instructions in the second instance of the virtual machine. In this method the stored state does not include the virtual machine s memory. Instead of storing the virtual machine s memory and then restoring it metadata maintained for pages of virtual memory space allocated for the first instance of the virtual machine which include pointers to the virtual machine s memory are copied and used as metadata for pages of virtual memory space allocated for the second instance of the virtual machine.

In the drawings like elements are referred to with equal reference numerals. The drawings are merely schematic representations not intended to portray specific parameters of the disclosure. Moreover the drawings are intended to depict only typical embodiments of the disclosure and therefore should not be considered as limiting the scope of the disclosure.

The method starts in step S with triggering for suspending by the control instance with a prepare for suspending command. In step S it is checked if a hypervisor may be able to suspend a virtual machine at a requested point in time. If not the control instance cancels the operation in step S. If the answer is yes next in step S the control instance is calling for suspending the virtual machines . Then in step S the corresponding hypervisor starts suspending the virtual machines . Next in step S the hypervisor is storing the states of the virtual machine and in step S the hypervisor is returning a clock state of the virtual machine to the control instance . Finally in step S the control instance is storing the states and the clock state of the virtual machines in a database managed by the control instance . In step S it is checked if there are more virtual machines to be suspended. If the answer is yes the whole loop starts again with step S otherwise the process is finished.

Thus due to a described method for suspending multiple virtual machines each hypervisor is returning a clock state of the virtual machine requested for suspending to the control instance and the control instance storing the clock state of the virtual machine .

The method starts in step S with triggering for resuming by the control instance with a prepare for resuming command. In step S it is checked if a hypervisor may be able to resume a virtual machine at a requested second point in time. If not the control instance cancels the operation in step S. If the answer is yes next in step S the control instance calling for resuming the virtual machines and retrieving the clock states of the virtual machines and passed to the corresponding hypervisor . Then in step S the hypervisor is setting the clock state of the virtual machine to the retrieved clock state by updating the clock state of the virtual real time clocks which are then setting the corresponding system clocks of the virtual machines . Next in step S the hypervisor starts restoring the states of the virtual machine . Then in step S the hypervisor is starting the virtual machine . Finally in step S the control instance is updating the states of the virtual machines in the database . In step S it is checked if there are more virtual machines to be resumed. If the answer is yes the whole loop starts again with step S otherwise the process is finished.

Thus due to a disclosed method for resuming multiple virtual machines the control instance is retrieving a stored clock state of the virtual machine requested for resuming and returning the clock state to the corresponding hypervisor . Then each hypervisor is setting a clock state of the virtual machine to the retrieved clock state.

In a signal flow of an implementation of the method for suspending multiple virtual machines according to an embodiment is shown for the case of suspending virtual machines . Reference numerals used for explanation and not depicted in the Figure are referring to elements shown in .

The method for suspending multiple virtual machines which are executed simultaneously by two hypervisors in at least one data processing system starts in step S by triggering the suspending for a connected simulation environment by a user via a Web graphical user interface GUI at the control instance . Then in steps S an ID of related virtual machines and in S a first point in time for suspending is determined by the control instance . Next in steps S and S the control instance is sending a request to each of the hypervisors to suspend the virtual machines at a given future first point in time. In steps S and S a handle for each of the virtual machines that are requested to be suspended is created and then in response to receiving the request to suspend virtual machines from the control instance each hypervisor is determining if its virtual machines can be suspended at the first point in time and if the suspending is possible is returning in steps S and S respectively a suspend handle to the control instance and storing the suspend handle otherwise returning an invalid handle. When receiving a suspend handle from each of the hypervisors in return to the request to suspend virtual machines the control instance is sending a suspend command in steps S and S to each of the hypervisors wherein the respective suspend handle is provided to the corresponding hypervisor . In response to receiving a suspend command with a suspend handle from the control instance each hypervisor is determining in steps S and S respectively if the received suspend handle is equal to its stored handle and if that is the case is suspending in steps S and S its virtual machines at the first point in time. In steps S and S the hypervisors are returning the clock states of the virtual machines suspended to the control instance which in step S stores states and clock states of the virtual machines suspended in the database . Finally in step S the status of the suspend operation is reported to the user.

According to a method the first point in time to suspend the virtual machines and or the second point in time to resume the virtual machines are synchronized by the control instance for the two hypervisors .

In a corresponding signal flow of an implementation of the method for suspending multiple virtual machines according to an embodiment is shown for the case of resuming virtual machines . Reference numerals used for explanation and not depicted in the Figure are referring to elements shown in .

The method starts in step S by triggering the resuming of virtual machines by a user via the Web GUI at the control instance . In step S clock states of the suspended virtual machines are retrieved by the control instance from the database and in step S the involved hypervisors are determined. In steps S and S respectively the control instance is sending a request to each of the hypervisors to resume virtual machines at a given future second point in time. In response to receiving a request to resume virtual machines from the control instance each hypervisor is determining in steps S and S after creating a handle for each of the virtual machines that are requested to be resumed and then if its suspended virtual machines can be resumed at the second point in time and if the resuming is possible is returning in steps S and S a resume handle to the control instance otherwise returning an invalid handle. When receiving a resume handle from each of the hypervisors in return to the request to resume virtual machines the control instance is sending in steps S and S a resume command to each of the hypervisors wherein the respective resume handle is provided to the corresponding hypervisor . In response to receiving a resume command with a resume handle from the control instance each hypervisor is determining in steps and S if the received resume handle is equal to its stored handle and if that is the case is resuming in steps S and S its suspended virtual machines at the second point in time. In steps S and S the hypervisors are returning a status of the resumed virtual machines to the control instance and in step S the status is reported to the user.

According to one embodiment the multiple virtual machines are resumed at the clock state where the virtual machines were suspended. Alternatively upon resuming the multiple virtual machines an offset between system clocks of the multiple virtual machines may be determined. Then according to another embodiment the virtual machine may be resumed at a clock state updated with the offset between system clocks of the multiple virtual machines when being suspended.

Additionally it may be possible that the virtual real time clock is adapted to the retrieved clock state of the virtual machine resumed.

Initially in step S a handle for each of the virtual machines that are requested to be suspended is created.

In step S a function check readiness checks if a virtual machine may be suspended at a given host time. The function uses as an input the handles for the actual suspend operation and the expected time when the suspend operation is planned hostTimeToSuspend . The function creates a readiness indication for this operation. Steps S S correspond to a first part of steps S S in the signal flow of . Step S may be implemented as 

The function check readiness checks if at a time hostTimeToSuspend starting from the time currentTime given a time requiredTimeToSuspend and an expected delay time expectedDelay a virtual machine with handles may be suspended. If the check is successful a ready as an output is returned.

In step S then a function prepare vm for suspend prepares a virtual machine to be suspended at a given host time. The function creates a readiness indication for this operation. The function also uses a handle for the actual suspend operation. Step S corresponds to a second part in steps S and S in the signal flow of and may be implemented as 

The function prepare vm for suspend uses a unique operation handle and scans network and disk devices for use by the virtual machine . For all resources found to be used by the virtual machine the function releases devices like VPN connections or disks. Then the function instantiates a VM lifetime manager . The function prepare vm for suspend uses the functions lookupDevicesFor of step S as well as the function InstantiateManagerFor of step S.

In step S a function lookupDevicesFor determines used devices for a specific virtual machine . The function returns the devices found to be used by the virtual machine . The function is used by the step S and may be implemented as 

The function lookupDevicesFor looks for network devices VPN connections disk drives to be used by a specific virtual machine and instantiates specific device managers to reduce the time for the actual suspend operation. The function lookupDevicesFor returns the identification of resources found.

Next in step S a function instantiateManagerFor instantiates specific device managers and associate devices. It reduces the time for the actual suspend operation. The function instantiateManagerFor may be implemented as 

Finally in step S a function suspend vm executes the actual suspend operation. The function suspend vm suspends a virtual machine and returns the clock state of the virtual machine. This function corresponds to steps S S in the signal flow of and may be implemented as 

The function suspend vm uses as an input the operation handle as well as a reference to return as an output the clock state of the virtual machine at the point in time it is suspended. The function waits until the time to suspend is reached and then initiates the hypervisor to suspend the virtual machine . The resources used by the virtual machine will then be freed.

Initially in step S a handle for each of the virtual machines that are requested to be resumed is created.

In step S a function check readiness checks if a virtual machine may be resumed at a given host time. The function uses as an input the handles for the actual resume operation and the expected time when the resume operation is planned hostTimeToResume . The function creates a readiness indication for this operation. Steps S S correspond to a first part of steps S S in the signal flow of . Step S may be implemented as 

The function check readiness checks if at a time hostTimeToResume starting from the time currentTime given a time requiredTimeToResume and an expected delay time expectedDelay a virtual machine with handles may be resumed. If the check is successful a ready as an output is returned.

In step S then a function prepare vm for resume prepares a virtual machine to be resumed at a given host time. The function creates a readiness indication for this operation. The function also uses a handle for the actual resume operation. Step S corresponds to a second part in steps S and S in the signal flow of and may be implemented as 

The function prepare vm for resume uses unique operation handles and scans network and disk devices required for resuming the virtual machines . For all resources found to be required for resuming the virtual machines the function creates devices like VPN connections or disks. Then the function instantiates a VM lifetime manager . The function prepare vm for resume uses the functions lookupDevicesFor of step S as well as the function InstantiateManagerFor of step S.

In step S a function lookupDevicesFor determines devices required for resuming an inactive virtual machine . The function returns the devices found to be required for resuming the virtual machines . The function is used by the step S and may be implemented as 

The function lookupDevicesFor looks for network devices VPN connections disk drives to be required for resuming a specific virtual machine and instantiates specific device managers to reduce the time for the actual resume operation. The function lookupDevicesFor returns the identification of resources found to be required.

Next in step S a function instantiateManagerFor instantiates specific device managers and associate devices. It reduces the time for the actual resume operation. The function instantiateManagerFor may be implemented as 

Finally in step S a function resume vm executes the actual resume operation. The function resume vm resumes a virtual machine and stores the time. This function corresponds to steps S S in the signal flow of and may be implemented as 

The function resume vm uses as an input the operation handle as well as the time of the virtual clock of the VM to be started. The function waits until the time to resume is reached and then initiates the hypervisor to resume the virtual machines . The virtual real time clocks used by the virtual hardware are set up in order the virtual machines to be resumed.

Referring now to a schematic of an example of a data processing system is shown. Reference numerals used for explanation and not depicted in the Figure are referring to elements shown in .

Data processing system is only one example of a suitable data processing system and is not intended to suggest any limitation as to the scope of use or functionality of embodiments as described herein. Regardless data processing system is capable of being implemented and or performing any of the functionality set forth herein above.

The data processing system is capable of running a computer program product comprising a computer usable medium including a computer readable program wherein the computer readable program when executed on a computer system causes the computer system to perform a method for suspending multiple virtual machines executed simultaneously by at least one hypervisors in at least one data processing system comprising i sending by a control instance a request to the at least one hypervisor to suspend virtual machines at a given future first point in time ii in response to receiving a request to suspend virtual machines from the control instance the hypervisor determining if its virtual machines can be suspended at the first point in time and if the suspending is possible returning a suspend handle to the control instance and storing the suspend handle otherwise returning an invalid handle iii when receiving a suspend handle from the hypervisor in return to the request to suspend virtual machines the control instance sending a suspend command to the hypervisor wherein the respective suspend handle is provided to the corresponding hypervisor iv in response to receiving a suspend command with a suspend handle from the control instance the hypervisor determining if the received suspend handle is equal to its stored handle and if that is the case suspending its virtual machines at the first point in time.

In data processing system there is a computer system server which is operational with numerous other general purpose or special purpose computing system environments or configurations. Examples of well known computing systems environments and or configurations that may be suitable for use with computer system server include but are not limited to micro controllers personal computer systems server computer systems thin clients thick clients handheld or laptop devices multiprocessor systems microprocessor based systems set top boxes programmable consumer electronics network PCs minicomputer systems mainframe computer systems and distributed cloud computing environments that include any of the above systems or devices and the like.

Computer system server may be described in the general context of computer system executable instructions such as program modules being executed by a computer system. Generally program modules may include routines programs objects components logic data structures and so on that perform particular tasks or implement particular abstract data types. Computer system server may be practiced in distributed cloud computing environments where tasks are performed by remote processing devices that are linked through a communications network. In a distributed cloud computing environment program modules may be located in both local and remote computer system storage media including memory storage devices.

As shown in computer system server in data processing system is shown in the form of a general purpose computing device. The components of computer system server may include but are not limited to one or more processors or processing units a system memory and a bus that couples various system components including system memory to processor . Bus represents one or more of any of several types of bus structures including a memory bus or memory controller a peripheral bus an accelerated graphics port and a processor or local bus using any of a variety of bus architectures. By way of example and not limitation such architectures include Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus.

Computer system server typically includes a variety of computer system readable media. Such media may be any available media that is accessible by computer system server and it includes both volatile and non volatile media removable and non removable media.

System memory can include computer system readable media in the form of volatile memory such as random access memory RAM and or cache memory . Computer system server may further include other removable non removable volatile non volatile computer system storage media. By way of example only storage system can be provided for reading from and writing to a non removable non volatile magnetic media not shown and typically called a hard drive . Although not shown a magnetic disk drive for reading from and writing to a removable non volatile magnetic disk e.g. a floppy disk and an optical disk drive for reading from or writing to a removable non volatile optical disk such as a CD ROM DVD ROM or other optical media can be provided. In such instances each can be connected to bus by one or more data media interfaces. As will be further depicted and described below memory may include at least one program product having a set e.g. at least one of program modules that are configured to carry out the functions of embodiments.

Program utility having a set at least one of program modules may be stored in memory by way of example and not limitation as well as an operating system one or more application programs other program modules and program data.

Each of the operating system one or more application programs other program modules and program data or some combination thereof may include an implementation of a networking environment. Program modules generally carry out the functions and or methodologies of embodiments as described herein.

Computer system server may also communicate with one or more external devices such as a keyboard a pointing device a display etc. one or more devices that enable a user to interact with computer system server and or any devices e.g. network card modem etc. that enable computer system server to communicate with one or more other computing devices. Such communication can occur via Input Output I O interfaces . Still yet computer system server can communicate with one or more networks such as a local area network LAN a general wide area network WAN and or a public network e.g. the Internet via network adapter . As depicted network adapter communicates with the other components of computer system server via bus . It should be understood that although not shown other hardware and or software components could be used in conjunction with computer system server . Examples include but are not limited to microcode device drivers redundant processing units external disk drive arrays RAID systems tape drives and data archival storage systems etc.

The block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present disclosure. In this regard each block in the block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical functions. It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and combinations of blocks in the block diagrams can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

