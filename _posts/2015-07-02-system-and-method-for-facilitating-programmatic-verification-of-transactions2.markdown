---

title: System and method for facilitating programmatic verification of transactions
abstract: Systems and methods for programmatic access of a financial institution system. A normalized API request provided by an application system specifies user information corresponding to at least one account endpoint of an external financial institution system. Responsive to the request, at least one application proxy instance associated with the normalized API request is used to collect transaction information from a corresponding financial institution system by providing the financial institution system with a proprietary API request that specifies at least account credentials associated with the user information. The transaction information is included in at least one proprietary API response provided by the financial institution system. A normalized API response is generated based on the collected transaction information and provided to the application system. Each application proxy instance is constructed to simulate an application of the corresponding financial institution system on behalf of a user associated with the application proxy instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09595023&OS=09595023&RS=09595023
owner: PLAID TECHNOLOGIES, INC.
number: 09595023
owner_city: San Francisco
owner_country: US
publication_date: 20150702
---
This application is a continuation of co pending U.S. patent application Ser. No. 14 719 117 filed 21 May 2015 which claims the benefit of U.S. Provisional Application Ser. No. 62 001 461 filed on 21 May 2014 which is incorporated in its entirety by this reference.

This invention relates generally to the financial transaction field and more specifically to a new and useful system and method for facilitating programmatic verification of transactions in the financial transaction field.

Despite various technologies and services providing various financial transaction services and tools traditional ACH transfers remain a common mechanism for transferring funds between two accounts. Such transfers however have numerous problems. As a first problem the user experience requires a user to provide account number and routing number information. This is a cumbersome task for users who frequently do not know this information and may not have the proper documents to access such information. Additionally the entering of such information is very error prone and can lead to failed transfer which can result in financial repercussions for one if not more parties involved in the transaction. Beyond that a common approach to verifying account ownership includes the use of micro deposits. The micro deposit adds significant delays to transferring funds and can additionally be a slow and confusing process for involved parties. Thus there is a need in the financial transaction field to create a new and useful system and method for facilitating programmatic verification of transactions. This invention provides such a new and useful system and method.

The following description of preferred embodiments of the invention is not intended to limit the invention to these preferred embodiments but rather to enable any person skilled in the art to make and use this invention.

As shown in a method for facilitating programmatic verification of transactions of a preferred embodiment can include acquiring institution account credentials S receiving a transaction request associated with at least one endpoint S collecting transaction information of the endpoint S and returning a transaction response S. In some embodiments the method can include executing the transaction S which functions to process the transaction between two endpoints. In some embodiments the method does not perform execution of the transaction receiving the transaction request functions to initiate the retrieval of transaction addressing information of the at least one endpoint collecting transaction information of the endpoint includes collecting transaction addressing information of the endpoint and returning a transaction response functions to transmit the collected transaction addressing information of the endpoint. The method functions to leverage account access during the transaction process. Variations of the method can be used to add functionality such as verifying account information used in financial transfers programmatically transferring funds setting programmatic events catching errors and fraud performing conditional processing of a transaction and or other suitable operations. The method is preferably used within a financial API platform that provides features related to programmatic financial transaction. Preferably the financial transactions are automated clearing house ACH transactions but any suitable type of transaction may be used. In a first preferred implementation the method provides an API resource whereby developers can obtain verified ACH endpoint information. The account number and routing number are obtained as well as verification of ownership of the account. In this variation the method provides the information to execute the transaction. In another embodiment the method additionally executes the transaction having obtaining the required information and verification. The method is preferably performed by a system such as the one described below e.g. the system of but the method may alternatively be implemented by any suitable system.

Block S which includes acquiring institution account credentials functions to obtain login information for a financial institution e.g. the financial institution of . The institution account credentials preferably include a username and password. The account is preferably an account of an external financial institution. Additionally an institution may include additionally authentication challenges such as a pin code security questions single use passwords secondary device code verification biometric identification and or any suitable form of multi factor authentication MFA . Such additional authentication challenges may be collected at the same time of the account credentials but the MFA authentication process may alternatively be defined in the API protocol. For example if the primary account credentials are not sufficient the MFA challenge may returned in a response this additional credential request can be repeated as required before access to the account is obtained. The institution account credentials can additionally be stored and automatically used to complete subsequent access or login attempts.

The account credentials are preferably provided through an API request of a developer or application account. The API is preferably used in establishing setting up or enrolling a new user account. One end user will preferably have at least one associated financial account but may be linked or associated with multiple financial accounts. Account credentials are preferably obtained for each financial account.

Block S which includes receiving a transaction request associated with at least one endpoint functions to initiate the retrieval of transaction addressing information of an endpoint. The endpoint is preferably a transaction endpoint which may be any suitable endpoint from which funds may be withdrawn or deposited. In a common transaction there is a single withdrawal account and a single deposit account. The method can be used in obtaining information for one or more endpoints. In some variations there may be a plurality of withdrawal and or deposit accounts. In one variation the transaction request is identical to an enroll user request used to obtain the user credentials of block S. The account credentials may alternatively be previously obtained or obtained in response to the transaction request.

In one variation the transaction request is for information about an account the API request preferably specifies an institution and account credentials. Additional credentials may additionally be required such as a pin code state in which an account was created or MFA challenge answers. A second request with similar parameters may be submitted to obtain the account credentials for other involved transaction endpoints.

In another variation the transaction request may explicitly define the transaction details. The transaction request preferably includes at least one withdrawal account endpoint and deposit account endpoint. Account credentials are preferably specified for each endpoint. In one variation a single API request may include account credentials for both endpoints. In another variation a transaction resource is used such that withdrawal endpoint information deposit account information and transaction details can be specified asynchronous. For example a transaction resource is created through an API request. Later an API request hits the new transaction resource by specifying a transaction identifier to specify withdrawal information then deposit information and then the amount to be transferred. Once all the information is populated the transaction may be executed either automatically in response to an executed command or scheduled for a later time. Bulk aggregate or group transactions may additionally be specified in a request. If multiple entities are withdrawal endpoints then the division of funds may be specified e.g. a percentage breakdown or amount break down . Similarly funds for multiple deposit endpoints may be specified.

Block S which includes collecting transaction information of the endpoint functions to access and determine properties of a transaction endpoint. Collecting transaction information of the endpoint preferably involves using the account credentials to gain account access in a financial institution. Preferably the account access is facilitated by using a proxy application which simulates an application accessing the system of an external institution such as in the system and method described in U.S. Provisional Application No. 62 001 452 filed on 21 May 2014 which is hereby incorporated in its entirety by this reference. The proxy application preferably appears as a first party application instance of the institution but is actually programmatically controlled communication of the system. The headers body encryption communication protocol negotiation are preferably configured to approximate application communication. The account access can be used to request and obtain account documents that include endpoint information. The account documents may include bank statements or other suitable documents. If the documents are in pdf or other alternative formats the content is preferably scraped to identify transaction information.

Block S which includes collecting transaction information of the endpoint preferably includes collecting transaction addressing information of the endpoint. The account addressing information is preferably the account number and the routing number of an account. Billing address wire routing number and or other account information can additionally be pulled. In one variation the account number and routing number are available in banking statements. An extraction script may be used to pull the document and then isolate the information from the document. Accessing the account number and the routing number in an automated fashion preferably avoids chances of error. As a first benefit access to the account provides evidence of that the owner of the account participated in providing the transaction endpoint information. As another benefit the information is automatically pulled which avoids human error.

Collecting transaction information of the endpoint S may additionally include collecting transaction status information of the endpoint which can include indication of fund requirements account fraud checks and other status information. Various stages can be built into providing the transaction information which provide different safeguards and or features into financial transactions.

In a first optional stage the transaction status information can determine a sufficient funds status. The sufficient funds status is preferably applied to a withdrawal account to ensure that the account has funds to complete the transaction. Transaction history and or current fund value may be accessed through the account access. In one variation the fund amount is returned in the response such that the developer application can respond appropriately. In another variation the transaction amount is compared to available funds. If sufficient funds are not found then an error or warning may be raised.

In another optional stage the account may be processed for fraud patterns. For example the age of the account may be accessed. Newly created accounts may be less trustworthy than established accounts with significant history. Similarly transaction history may be assessed for fraudulent behavior. If the account is used for a diverse range of transactions indicative of normal behavior then the account may be identified as normal. If the account only participates in repeated high value transactions or other fraud patterns then the account may be flagged as fraudulent. Additionally the entities involved in the transaction may be indicative of fraud.

The method may additionally include verifying transaction conditions during one or more stage. Transaction conditions may be used to take any suitable action. The available actions can include permitting a transaction or preventing a transaction. Additionally the action can include sending a notification. The notification can include an email text message a platform message a phone call or any suitable notification. The action may additionally include triggering a programmatic event. In one variation the programmatic event is a callback event wherein and HTTP message is sent to a destination. Conditions may be customized or selected from a set of provided conditions. Exemplary conditions can include a condition that triggers a notification for transactions over a particular amount a condition based on available funds after the transaction to alert a user to funds below a threshold and a condition based on the frequency of transactions or the entities involved in the transaction account. Conditions can be scoped for a developer account a particular institution account or for any suitable scope of entities.

Block S which includes returning a transaction response functions to transmit the results of the transaction request. The transaction response is preferably made in a synchronous API message that is sent in response to an initial request. Alternatively a status API resource may be used such that an application service can periodically check the status API resource to determine the processing status and or the results. Alternatively any suitable approach may be used to provide the results to the initial request.

In one preferred implementation the response provides the addressing information used for a financial endpoint. If there are no errors or warnings with respect to the account then account information is preferably NACHA compliant as the financial endpoint information was accessed and obtained in a manner that validates the ownership of the account e.g. by providing credentials and optionally multi factor authentication responses . The transaction response can include the account number the routing number and or any additional information for the endpoint that is used in executing the transaction. The transaction response may additionally include the available funds such that the requesting entity can check for sufficient funds. The response may additionally indicate if sufficient funds are available if the transaction amount was provided which functions to hide the available funds from the requesting entity while preventing overdraft transaction. The transaction response can additionally include other fields such as a status field where the account may be labeled according to any categorization of the account. For example the status may indicate that the account is normal or fraudulent.

Additionally or alternatively the method can include executing the transaction S which functions process the transaction between two endpoints. In this variation a request to execute a transaction between at least two endpoints is received. Additionally returning a transaction response may include returning results of the transaction in the response. In another preferred implementation the method includes executing the transaction. The transaction response can include information about the status of the transaction when the transaction is submitted being processed and or completed. Transactions may not be instantaneous and as such the initial transaction response may indicate if the transaction was successfully initiated. Successfully initiated means that the transaction endpoint information was successfully retrieved that any conditional stages such as a sufficient funds stage a fraud check stage and custom conditions are satisfied. A subsequent response or status resource may be updated that reflects the status of the transaction. A transaction resource may be updated with a pending process when the transaction is initiated and proceeding normally. The transaction resource can be updated with a completed status possibly indicating the time of completion. If an error or issue is encountered the status of the transaction resource may be updated to reflect the error or issue. The method may additionally include monitoring status of transaction and triggering programmatic event according to the status.

In one variation executing the transaction can include establishing proxy accounts in at least two institutions and expediting transactions between the two institutions through a an internal deposit to a first proxy account in a first institution and a second internal deposit from a second proxy account in the second institution. In some cases transactions between institutions are slower than transactions made within an institution. By establishing cross institution account network transactions can be facilitated between two accounts in different institutions with similar speeds of internal transactions. The proxy accounts preferably include a funds reserve which may be periodically balanced between proxy accounts to maintain an operational reserve of funds.

Additionally the method may be applied to create an abstraction between a user and the underlying account. A transaction endpoint can be abstracted to a user entity which may be associated with multiple optional transactional endpoints e.g. different bank accounts . Accordingly the method may include selecting a financial institution which functions to dynamically select a connected financial account to participate in a transaction. Various conditions may be set to respond to events when receiving a transaction request collecting information for the transaction and or executing a transaction. In one variation one financial institution is set as a primary account and another account managed by the same entity is set as a secondary account. If the primary account is not able to complete a transaction the method preferably detects an error condition and automatically fails over to the secondary account. In another variation a set of accounts may be preconfigured to be used depending on properties of the request. In combination with the proxy transfer endpoint the identifying information for the proxy endpoint can be used but the underlying service automatically will use an automatically selected financial account to use for the funds. For example a set of entities and or category of entities transactions may be set to use particular accounts. Similarly transactions to one proxy account may be automatically split into transactions with multiple associated accounts. For example an account holder may set a proxy account to automatically split deposits between two accounts in a 30 70 balance.

As shown in a system for facilitating programmatic verification of transactions of a preferred embodiment can include an API system and institution integration . The system functions to provide an interface for applications and services that can facilitate the process of transferring funds. The system can more particular function to provide verified account information used in ACH transfers to execute transfer of funds to enable programmatic events during transfer process to mitigate risk and errors and or provide alternative financial transaction functionality. As a primary implementation the system is part of a larger financial API platform which may provide an application programming interface API to financial information. In some variations the system is part of a multi tenant API platform that enables a plurality of developers to create accounts and build applications and or services that leverage the API of the financial API platform. In alternative variations the system is part of a single tenant API platform and may provide an internal API for a dedicated set of products or services. For example a product may be built on top of the financial API platform that enables end users to create accounts to manage finances with one or more financial institutions banks credit card companies investment managers etc. .

The API service functions to provide an interface for accessing financial institution transaction endpoint information. The API service can additionally provide normalized customer user facing interface. In one preferred implementation the API service can be substantially similar to the API service and system described in U.S. Provisional Application No. 62 001 452 incorporated above. Preferably the API service leverages an application proxy instance which simulates a proprietary native application accessing a closed API of a financial institution e.g. the financial institution of . The system can include additional components or services that particularly facilitate the access of information relating to a financial transaction endpoint. For example a service script or module can be configured to access statements or other suitable documents that can contain endpoint information such as account number and routing number information. The statements or information may be contained in pdf or other suitable document formats. The system can include document readers that can access and extract the requested information from the statements.

The API service is preferably a RESTful API but may alternatively be any suitable API such as SOAP or custom protocol. The RESTful API works according to an HTTP request and response model. HTTP requests or any suitable request communication to the communication platform preferably observe the principles of a RESTful design. RESTful is understood in this document to describe a Representational State Transfer architecture as is known in the art. The RESTful HTTP requests are preferably stateless thus each message communicated contains all necessary information for processing the request and generating a response. The API service can include various resources which act as mechanisms for specifying requested information or requesting particular actions. The resources can be expressed as URI s or resource paths. The RESTful API resources can additionally be responsive to different types of HTTP methods such as GET PUT POST and or DELETE. Alternative implementations may use an internal interface and provide a user facing interface such as a graphical user interface in a web application or native application.

In one variation the API service allows an API request to specify an account and a response output provides the information related to executing a transaction with the endpoint. In one exemplary implementation the API service can include at least one API resource for interacting with transaction endpoint. As shown in an endpoint information request can include institution credentials of an account. The credentials can include username and password. The API protocol can additionally provide a mechanism for completing multi factor authentication challenges such as security questions or code based multi factor authentication. The API request may additionally include other properties such as developer account identifiers API authentication tokens institution type identifiers and other suitable parameters. The response is preferably a data object that includes at least automatically obtained information such as tracking number routing number and or wire routing number. Additional response information can include funds amount or alternatively a Boolean indicator of if the funds are sufficient an account status e.g. is the account fraudulent trusted etc. billing address of the account name of the institution type of account e.g. saving depository etc. and other suitable properties. Other API properties or features can include a mechanism to specify if endpoint information is requested or if the transaction should be executed.

An institution interface module institution integration system e.g. of functions to model the internal interface of at least one application with an external institution e.g. . The account credentials of a financial institution account and optionally multi factor authentication credentials can be used for an application proxy to gain access to an institution through the institution interface module. An institution interface module is preferably established for each institution e.g. with which the system can interface. For example an institution interface module may exist for each bank and or credit card company that is available in the system. The institution interface module e.g. is preferably a set of rules and processes of a particular institution. The institution interface module preferably includes a proxy sub module that defines how the institution recognizes and or authenticates a particular application. Some banks may depend on the MAC address of a device some depend on asymmetric cryptography tokens while others may generate encrypted tokens. The proxy sub module is preferably used in establishing the proxy instance information. The institution interface module can additionally include institution protocol sub module which defines a mapping between provided API functionality and the form and mode of communication with the external institution. The institution protocol sub module can define the headers body and other properties of messages sent to the associated institution. The protocol sub module may additionally define how data should be processed to form that message. In some cases the data may be encrypted in a standard or proprietary format which the protocol sub module can define. Additionally the protocol sub module can define the communication flow to fulfill a request. In some cases multiple requests may need to be made to complete a request objective. Other aspects of dealing with an interface of an external institution may additionally be built into the institution interface module such as multi factor authentication rules. An institution interface module e.g. is preferably constructed based on use of an actual application e.g. the application of . The communication and or the source code can be parsed and analyzed to establish some or all of an institution interface module.

The system may additionally include a transaction engine which can facilitate the transfer of funds between two accounts. The transaction engine can be integrated with the API service such that an API request can direct the execution of a transaction. The transaction engine preferably can execute ACH transactions but may alternatively or additionally use other financial tools to withdrawal funds and or deposit funds. With a transaction engine transactions can be executed between two accounts that have been configured with account credentials the API response may include the status of the transaction transaction errors a status URI or any suitable response to facilitate executing a transaction as shown in . In one variation proxy accounts can be used in different institutions. With sufficient reserves transfers between institutions can be expedited by transferring funds to and from the proxy accounts and then asynchronously updating the proxy accounts.

The system can additionally include other components such as a messaging notification system which can manage alerts and or triggering programmatic events e.g. callbacks . The system may additionally or alternatively include any suitable components

As shown in a multi tenant financial platform system of an embodiment includes an application programming interface API service an application proxy system and at least one institution interface module e.g. the modules of . The API service is similar to the API service . The application proxy system includes application proxy instances similar to the application proxy instance of . The institution interface modules of are similar to the institution interface module of .

In some implementations the financial platform system includes a transaction engine . In some implementations the transaction engine is similar to the transaction engine of .

In some implementations the financial platform system includes a document processing engine . In some implementations the document processing engine is constructed to process financial documents e.g. the financial documents of a financial institution system e.g. of a user account of the financial institution system to identify transaction information. In some implementations in a case where the financial documents are in a PDF format the document processing engine is constructed to scrape content of the PDF financial documents to identify the transaction information. In some implementations the document processing engine is an extraction script that is constructed to pull the financial document and then isolate the transaction information from the document e.g. as described above for block S of . In some implementations the financial platform system accesses the financial document stores the accessed financial document e.g. in a memory of a storage medium of and the like of the financial platform system and then controls the document processing engine to process the stored financial document to identify the transaction information.

As shown in the financial institution system includes a public Web browser interface for accessing the financial institution system via a Web Browser or any suitable Web client e.g. the web browser of the user device . As described below for the methods of provide access to the financial institution system via a private proprietary API e.g. as opposed to access via the public Web browser interface . In some implementations the Web browser interface is a web server that hosts a web site for access of the financial institution system via a Web browser over the Internet.

As shown in the application proxy system includes application proxy instances e.g. proxy instances for user accounts e.g. user accounts and of developer accounts e.g. Dev Account B and Dev Account A at the financial platform system . The application proxy system includes an application proxy instance management module that is constructed to generate application proxy instances configure application proxy instances and remove application proxy instances.

In some implementations each application proxy instance e.g. proxy instances specifies the developer account the user account of the developer account the associated financial institution system and credentials of the user account for the financial institution system as shown in . In some implementations some application proxy instances specify at least one token for access to a respective financial institution system. In some implementations the financial institution system provides the application proxy instance with a token for access to the financial institution system after establishment of a session between the application proxy instance and the financial institution system by using the credentials of the user account for the financial institution system. In some implementations each application proxy instance specifies properties of the application proxy instance. In some implementations properties include one or more of a unique user identifier code an authentication token a MAC address e.g. a MAC address of a user device or any suitable information.

In some implementations each proprietary API e.g. is different from a web browser interface e.g. used by a web browser e.g. .

As shown in the financial platform system is a multi tenant financial platform system and each financial application and is of an application system that is external to the financial platform system . In some implementations each external application system e.g. the application system of the application is associated with an account e.g. Dev Account A Dev Account B of of the financial platform system . In some implementations each application proxy instance e.g. of of the application proxy system is associated with an account e.g. Dev Account A Dev Account B of the financial platform system e.g. an account of the of the financial platform system that is associated with an external application system . depicts exemplary application proxy instances that are associated with respective accounts e.g. Dev Account A Dev Account B of the financial platform system . In some implementations each application proxy instance e.g. associated with an external financial application system is constructed to provide a proprietary financial API request to a respective external financial institution system e.g. on behalf of a user e.g. User A User B of of the external application system by simulating an application e.g. of of the external financial institution system.

In some implementations the financial platform system is a single tenant financial platform system and the financial applications are included in a financial application system of the financial platform system . Each application proxy instance is constructed to provide a proprietary financial API request to the respective external financial institution system on behalf of a user of the application system of the financial platform system by simulating an application of the external financial institution system.

As shown in a method for processing a normalized API request at a financial platform system e.g. the financial platform system includes receiving a normalized financial API request associated with at least one financial account endpoint the normalized financial API request being provided by an external financial application system e.g. a financial application system of the application of by using a financial platform API e.g. of of the financial platform system the normalized financial API request specifying account credentials of each financial account endpoint of the normalized financial API request process S . Responsive to the normalized financial API request transaction information of each financial account endpoint of the normalized financial API request is collected by using an application proxy instance e.g. a proxy instance of associated with the financial account endpoint to collect the transaction information from a corresponding financial institution system e.g. an external financial institution system of by using the associated account credentials specified by the normalized financial API request and a proprietary Application Programming Interface API e.g. one of the proprietary APIs of of the financial institution system process S and a normalized financial API response is provided to the external financial application system process S . The normalized financial API response provides the transaction information of each financial account endpoint of the normalized financial API request. Each application proxy instance is constructed to simulate an application e.g. application of of the corresponding external financial institution system.

In some implementations the collected transaction information for each financial account endpoint includes at least an account number and a corresponding routing number for use in automated clearing house ACH transactions.

In some implementations the transaction information is collected by processing at least one financial statement accessed from the corresponding external financial institution system.

In some implementations the financial platform system includes an institution interface module e.g. of for each external financial institution system e.g. each institution interface module models the proprietary API of the external financial institution system and each application proxy instance e.g. uses a corresponding institution interface module to collect the transaction information from the external financial institution system.

In some implementations the financial platform system generates each institution interface module e.g. of by at least one of parsing source code of the application e.g. the application of of the associated external financial institution system and parsing communication between the application and the associated external financial institution system.

In some implementations each institution interface module defines headers of messages sent to the associated external financial institution system.

In the example embodiment of the method is implemented by the financial platform system . In the example embodiment the financial platform system is constructed to programmatically access transaction information as described herein for the method .

The process S which includes receiving a normalized financial API request associated with at least one financial account endpoint functions to control the financial platform system to receive the normalized financial API by using the API of the financial platform system . In the embodiment of the normalized financial API request is provided by an external financial application system e.g. a financial application system of the application of . In other embodiments the normalized financial API request is provided by an internal financial application system of the financial platform system . The normalized financial API request specifies account credentials of each financial account endpoint of the normalized financial API request.

In some implementations the normalized financial API request is received as described above for the process S of .

The process S which includes collecting transaction information of each financial account endpoint of the normalized financial API request is performed responsive to the normalized financial API request. The process S functions to control the financial platform system to use an application proxy instance associated with a financial account endpoint of the normalized API request to collect the transaction information from a corresponding financial institution system. The application proxy instance collects the transaction information by using the associated account credentials specified by the normalized financial API request and a proprietary API e.g. one of the proprietary APIs of of the financial institution system.

In the example embodiment the application proxy system includes application proxy instances for each financial institution system corresponding to the normalized financial API request.

In some implementations the transaction information is collected as described above for the process S of .

In some implementations the financial platform system collects the transaction information by using an application proxy instance e.g. of associated with a financial account endpoint of the normalized API request to access a financial document e.g. one of the financial documents of that specifies the requested transaction information. The application proxy instance accesses the financial document by using the associated account credentials specified by the normalized financial API request and a proprietary API e.g. one of the proprietary APIs of of a financial institution system e.g. that manages the financial document e.g. one of the documents . The financial platform system stores the accessed financial document e.g. in a memory of a storage medium of and controls the document processing engine to process the stored financial document e.g. one of the stored documents of to identify the transaction information. In some implementations the document processing engine processes the stored financial document by scraping content of financial document to identify the transaction information. In some implementations the document processing engine performs OCR optical character recognition to identify the transaction information included in the financial document.

In the example embodiment of each application proxy instance is generated by the management module of . In some implementations the application proxy instance management module generates each application proxy instance as described above for the process S of . In some implementations the application proxy instance management module generates each application proxy instance responsive to a normalized API request for enrolling a new user account as described above for the process S of .

In some implementations the application proxy instance management module generates the application proxy instance responsive to a request to generate an application proxy instance. In some implementations the request to generate an application proxy instance specifies information identifying an external financial institution system and a user account of an application system e.g. a user account of an application system of the application of . In some implementations the request to generate an application proxy instance specifies user credentials for the financial institution system. In some implementations the request to generate an application proxy instance specifies information identifying an account of the financial platform system associated with the application system. In some implementations the request to generate an application proxy instance specifies properties for the application proxy instance. In some implementations properties for the application proxy instance include at least one of a unique user identifier code an authentication token a MAC address e.g. a MAC address of a user device financial accounts of the corresponding financial institution system and any other suitable information.

In some implementations the application proxy instance management module stores the generated application proxy instance in association with a user account of an application system e.g. a user account of an application system of the application of e.g. User B of . In some implementations the application proxy instance management module stores the generated application proxy instance in association with an account e.g. Dev Account B of of the financial platform system associated with an application system e.g. an application system of the application of . In some implementations the application proxy instance management module stores the generated application proxy instance in association with an account of the financial platform system associated with an application system and a user account of the application system. In some implementations the application proxy instance management module stores the generated application proxy instance in association with an account of the financial platform system associated with an application system e.g. Dev Account B of a user account of the application system e.g. User B of and information identifying the financial institution system of the application proxy instance e.g. Bank2 . In some implementations the application proxy instance management module stores the generated application proxy instance in association with an account of the financial platform system associated with an application system a user account of the application system information identifying the financial institution system of the application proxy instance and information identifying financial accounts of the application proxy instance.

In some implementations generating the application proxy instance includes controlling the application proxy instance management module to construct the application proxy instance to simulate communication of an application e.g. application of of the external financial institution system of the application proxy instance with the financial institution system on behalf of the user account of the application system.

In some implementations generating the application proxy instance includes controlling the application proxy instance management module to register the generated application proxy instance with the external financial institution system.

In some implementations generating the application proxy instance includes controlling the application proxy instance management module to negotiate registration of the application proxy instance with the financial institution system.

In some implementations the request to generate an application proxy instance is provided by an application system e.g. an external application system of the application of . In some implementations the request to create an application proxy instance is provided by an application system e.g. an external application system of the application of responsive to user input received at a user device e.g. executing machine readable instructions of an application e.g. of of the application system.

The process S which includes providing a normalized financial API response to the external financial application system is performed responsive to the normalized financial API request. The process S functions to control the financial platform system to provide the normalized financial API response which includes the transaction information of each financial account endpoint of the normalized financial API request.

In some implementations the transaction information is provided as described above for the process S of .

As shown in a method for processing a normalized API request at a financial platform system e.g. the financial platform system includes receiving a normalized financial API request associated with at least one financial account endpoint process S . The normalized financial API request is provided by an external financial application system by using a financial platform API of the financial platform system. The normalized financial API request specifies a financial transaction and at least one of an account token and account credentials of each financial account endpoint of the normalized financial API request.

Responsive to the normalized financial API request transaction information of each financial account endpoint of the normalized financial API request is collected process S . The transaction information is collected by using an application proxy instance associated with the financial account endpoint to collect the transaction information from a corresponding financial institution system by using at least one of an associated account token and associated account credentials specified by the normalized financial API request and by using a proprietary API of the financial institution system. The transaction specified by the normalized financial API request is executed by using the collected transaction information process S . A normalized financial API response is provided to the external system process S . The normalized financial API response provides results of the transaction. Each application proxy instance is constructed to simulate an application of the corresponding external financial institution system.

In some implementations the collected transaction information for each financial account endpoint includes at least an account number and a corresponding routing number for use in automated clearing house ACH transactions.

In some implementations the transaction information is collected by processing at least one financial statement accessed from the corresponding external financial institution system.

In some implementations the financial platform system includes an institution interface module e.g. of for each external financial institution system e.g. each institution interface module models the proprietary API of the external financial institution system and each application proxy instance e.g. uses a corresponding institution interface module to collect the transaction information from the external financial institution system.

In some implementations the financial platform system generates each institution interface module e.g. of by at least one of parsing source code of the application e.g. the application of of the associated external financial institution system and parsing communication between the application and the associated external financial institution system.

In some implementations each institution interface module defines headers of messages sent to the associated external financial institution system.

In some implementations the normalized financial API request is received as described above for the process S of . In some implementations the transaction information is collected as described above for the process S of . In some implementations the transaction information is provided as described above for the process S of . In some implementations the transaction information is executed as described above for the process S of .

In the example embodiment of the method is implemented by the financial platform system . In the example embodiment the financial platform system is constructed to programmatically access transaction information as described herein for the method .

The process S includes using at least one application proxy instance e.g. associated with the normalized API request to collect transaction information from a corresponding financial institution system by providing the financial institution system with a proprietary financial API request that specifies at least account credentials associated with the user information specified by the normalized financial API request. The transaction information is included in at least one proprietary financial API response provided by the financial institution system.

The process S includes generating a normalized financial API response based on the collected transaction information. The process S includes providing the normalized financial API response to the financial application system.

Each application proxy instance is constructed to simulate an application e.g. of of the corresponding financial institution system on behalf of a user associated with the application proxy instance.

In some implementations each proprietary API e.g. is a private API of the respective financial institution system and each proprietary API is different from a web browser interface e.g. of .

In some implementations the normalized financial API request is provided on behalf of a user account of the financial application system e.g. the application system of the application of and the specified user information includes information associated with the user account.

In some implementations the normalized financial API request is provided on behalf of a user account of the financial application system and the specified user information includes information associated with a user that is different from a user of the user account of the financial application system.

In some implementations the normalized financial API request is a request for financial account endpoint information and each proprietary financial API request is a request for financial account endpoint information and wherein the transaction information includes financial account endpoint information.

In some implementations the normalized financial API request is a request to transfer funds from at least one withdrawal account endpoint to at least one deposit account endpoint and the normalized financial API request specifies an amount of funds to be transferred.

In some implementations the collected transaction information for each financial account endpoint includes at least an account number and a corresponding routing number for use in automated clearing house ACH transactions.

In some implementations the transaction information is collected by processing at least one financial statement accessed from the corresponding external financial institution system.

In some implementations the financial platform system includes an institution interface module e.g. of for each external financial institution system e.g. each institution interface module models the proprietary API of the external financial institution system and each application proxy instance e.g. uses a corresponding institution interface module to collect the transaction information from the external financial institution system.

In some implementations the financial platform system generates each institution interface module e.g. of by at least one of parsing source code of the application e.g. the application of of the associated external financial institution system and parsing communication between the application and the associated external financial institution system.

In some implementations each institution interface module defines headers of messages sent to the associated external financial institution system.

In some implementations the normalized financial API request is received as described above for the process S of . In some implementations the transaction information is collected as described above for the process S of . In some implementations the transaction information is collected as described above for the process S of . In some implementations the transaction information is provided as described above for the process S of .

In the example embodiment of the method is implemented by the financial platform system . In the example embodiment the financial platform system is constructed to programmatically access transaction information as described herein for the method .

The process S which includes using at least one application proxy instance associated with the normalized API request to collect transaction information from a corresponding financial institution system functions to control the financial platform system to use at least one application proxy instance e.g. associated with the normalized API request to collect transaction information from a corresponding financial institution system e.g. by providing the financial institution system with a proprietary financial API request that specifies at least account credentials associated with the user information specified by the normalized financial API request. The transaction information is included in at least one proprietary financial API response provided by the financial institution system e.g. .

In some implementations each proprietary financial API response provides a financial document e.g. one of the financial documents of a user corresponding to the account credentials of the associated proprietary financial API request and each financial document includes the requested transaction information. The financial platform system stores the financial documents of each proprietary financial API response e.g. in a memory of a storage medium of and controls the document processing engine to process each stored financial document e.g. one of the stored documents of to identify the transaction information. In some implementations the document processing engine processes the stored financial document by scraping content of financial document to identify the transaction information. In some implementations the document processing engine performs OCR optical character recognition to identify the transaction information included in the financial document.

In some implementations the financial platform system determines application proxy instances e.g. associated with the normalized financial API request. In some implementations the financial platform system determines application proxy instances e.g. associated with the normalized financial API request by using the application proxy system .

In some implementations the financial platform system determines application proxy instances e.g. associated with the normalized financial API request based on the user information specified by the normalized financial API request.

The process S which includes generating a normalized financial API response based on the collected transaction information functions to control the financial platform system to generate a normalized financial API response to the normalized financial API request. In some implementations the financial platform system generates the normalized financial API response to include the transaction information collected from each proprietary financial API response provided by an external financial institution system. In some implementations the financial platform system generates the normalized financial API response based on parameters included in the normalized financial API request. In some implementations the financial platform system generates the normalized financial API response based on properties of the application proxy instances used to collect the transaction information.

In some implementations in a case where the normalized financial API request is a request to transfer funds from at least one withdrawal account endpoint to at least one deposit account endpoint the process S includes using a transaction engine e.g. of of the financial platform system to execute an ACH transaction to transfer a specified amount of funds from at least one withdrawal account endpoint to at least one deposit account endpoint by using transaction information collected at the process S. In some implementations the transaction information includes financial account endpoint information. The financial platform system generates the normalized financial API response to include at least one of a status of the transfer and results of the transfer.

In some implementations in a case where the normalized financial API request is a request to transfer funds from at least one withdrawal account endpoint to at least one deposit account endpoint the transaction information collected from each proprietary financial API response provided by an external financial institution system corresponds to financial account endpoint information of each withdrawal account endpoint and deposit account endpoint of the normalized financial API request. The application platform system uses the transaction engine to perform the transfer of funds from each withdrawal account endpoint to each respective deposit account endpoint by using the collected financial account endpoint information. The financial platform system generates the normalized financial API response to include at least one of a status of the transfer and results of the requested transfer of funds.

In some implementations the process S which includes providing the normalized financial API response to the financial application system functions to control the financial platform system to provide the normalized financial API response by using the API . In some implementations the financial platform system provides the normalized financial API response as described above for .

In some implementations the normalized financial API request is a request for transaction information. In some implementations the normalized financial API request is a request for transaction information for one user for one external financial intuition. In some implementations the normalized financial API request is a request for transaction information for one user for more than one external financial intuition. In some implementations the normalized financial API request is a request for transaction information for more than one user for one or more respective external financial intuitions.

In some implementations the user information of the normalized financial API request includes a user account identifier for each user account of the application system e.g. the application system of the financial application of corresponding to the normalized financial API request.

In some implementations the normalized financial API request includes parameters as shown in Table 1.

In some implementations the is used to select at least one corresponding application proxy instance e.g. and each selected application proxy instance includes user credentials e.g. as depicted in to access the associated financial institution system.

In some implementations the financial platform system determines an application proxy instance e.g. associated with the normalized API request based on the parameter the parameter and the parameter. In some implementations the financial platform system identifies an application proxy instance of the application proxy system that is managed in association with the parameter the parameter and the parameter and uses the identified application proxy instance to collect the transaction information.

For example in a case where the application proxy system manages application proxy instances as shown in for a normalized financial API request that specifies Dev Account B as the parameter User A as the parameter and Bank 1 as the parameter the financial platform system selects the application proxy instance and uses the as the user credentials for the proprietary financial API request provided to the external financial system Bank 1 of .

In some implementations each proprietary financial API request includes parameters as shown in Table 2.

In some implementations the user information of the normalized financial API request includes at least one set of user credentials for each user account of the application system e.g. the application system of the financial application of corresponding to the normalized financial API request.

In some implementations the normalized financial API request includes parameters as shown in Table 3.

In some implementations the financial platform system determines an application proxy instance e.g. associated with the normalized API request based on the parameter and the parameter. In some implementations the financial platform system identifies an application proxy instance of the application proxy system that is managed in association with the parameter and the parameter and uses the identified application proxy instance to collect the transaction information.

In some implementations in which the normalized financial API request includes at least one set of user credentials rather than using an application proxy instance the financial platform system identifies an institution interface module e.g. of the financial institution system identified by the parameter and uses the identified institution interface module to collect the transaction information.

In some implementations each proprietary financial API request includes parameters as shown in Table 4.

In some implementations the user information of the normalized financial API request includes a user account token for each user account of the application system e.g. the application system of the financial application of corresponding to the normalized financial API request.

In some implementations the normalized financial API request includes parameters as shown in Table 5.

In some implementations each application proxy instance is stored in association with a respective user account token. In some implementations each application proxy instance is stored in association with information that identifies a respective user account token. In some implementations each account token is stored at the financial platform system in association with a user account identifier.

In some implementations the is used to select at least one corresponding application proxy instance e.g. and each selected application proxy instance includes user credentials e.g. as depicted in to access the associated financial institution system. In some implementations a user account identifier corresponding to the is determined and the determined user account identifier is used to select at least one corresponding application proxy instance e.g. and each selected application proxy instance includes user credentials e.g. as depicted in to access the associated financial institution system.

In some implementations the financial platform system determines an application proxy instance e.g. associated with the normalized API request based on the parameter the parameter and the parameter. In some implementations the financial platform system identifies an application proxy instance of the application proxy system that is managed in association with the parameter the parameter and the parameter and uses the identified application proxy instance to collect the transaction information.

In some implementations the financial platform system determines a user account identifier associated with the user account token and identifies an application proxy instance of the application proxy system that is managed in association with the parameter the determined user account identifier and the parameter and uses the identified application proxy instance to collect the transaction information.

For example in a case where the application proxy system manages application proxy instances as shown in for a normalized financial API request that specifies Dev Account B as the parameter a parameter associated with User A and Bank 1 as the parameter the financial platform system selects the application proxy instance and uses the as the user credentials for the proprietary financial API request provided to the external financial system Bank 1 of .

In some implementations each proprietary financial API request includes parameters as shown in Table 6.

In some implementations the normalized financial API request is a request to transfer funds from at least one withdrawal account endpoint to at least one deposit account endpoint. In some implementations each endpoint is identified by user information specified by the normalized financial API transfer request. In some implementations user information for an endpoint includes at least one of a user account identifier a user account token and user credentials. In some implementations one or more endpoints are identified by financial account endpoint information e.g. an account number and corresponding routing number specified by the normalized financial API transfer request and one or more endpoints are identified by user information specified by the normalized financial API transfer request. In some implementations the normalized financial API request specifies an amount of funds to be transferred. In some implementations the normalized financial API request specifies an originating financial institution system that initiates the transfer of funds.

In some implementations the financial platform system processes a normalized financial API request to transfer funds by determining withdrawal account endpoints and deposit account endpoints specified by the normalized financial API request to transfer funds. For each endpoint identified by user information of the normalized financial API request the financial platform system collects transaction information as described above for processes S of S of S of and S of . Responsive to collection of the transaction information for each endpoint identified by user information a transaction engine e.g. the transaction engine of of the financial platform system is used to execute the transfer of funds in accordance with one or more parameters e.g. amount of funds originating financial institution system and the like of the normalized financial API request to transfer funds. In some implementations the funds are transferred by executing an ACH transaction to transfer the specified amount of funds from one or more withdrawal account endpoints to one or more deposit account endpoints. In some implementations the transaction engine initiates the transfer of funds from an originating financial institution system specified by the normalized financial API request. In some implementations a normalized financial API response to the normalized financial API request to transfer funds includes at least one of a status of the transfer and results of the transfer of funds.

In some implementations in a case where more than one withdrawal account endpoint is specified by the normalized financial API transfer request the financial platform system selects one or more of the withdrawal account endpoints for the transfer based on at least one of capabilities of the withdrawal account endpoints availability of the withdrawal account endpoints configuration for the withdrawal account endpoints and parameters of the normalized financial API request.

In some implementations in a case where more than one deposit account endpoint is specified by the normalized financial API transfer request the financial platform system selects one or more of the deposit account endpoints for the transfer based on at least one of capabilities of the deposit account endpoints availability of the deposit account endpoints configuration for the deposit account endpoints and parameters of the normalized financial API request.

In some implementations in a case where a user identified by a user account identifier a user account token or a set of user credentials specified by the normalized financial API transfer request is associated with multiple account endpoints e.g. a user has accounts at different financial institution systems or multiple accounts at one financial institution system the financial platform system selects one or more of the endpoints associated with the user for the transfer based on at least one of capabilities of the account endpoints availability of the account endpoints configuration for the account endpoints and parameters of the normalized financial API request.

In some implementations one endpoint of a user is configured as a primary account and another account of the user is configured as a secondary account. In a case where the transaction engine cannot complete the transfer by using the primary account the transaction engine selects the secondary account for use in execution of the transfer.

In some implementations a set of accounts may be preconfigured to be used depending on properties of the normalized financial API transfer request. In some implementations the normalized financial API transfer request specifies user information that identifies a proxy transfer endpoint and the financial platform system automatically selects a financial account to use for the transfer of funds based on configuration information of the proxy transfer endpoint.

In some implementations during processing of a normalized financial API transfer request that specifies a proxy transfer endpoint the financial platform system automatically splits the requested transaction into multiple sub transactions by using multiple accounts associated with the proxy transfer endpoint in accordance with configuration for the proxy transfer endpoint. For example an account holder may set a proxy transfer endpoint to automatically split deposits between two accounts in a 30 70 balance.

In some implementations the transaction engine executes the transfer by establishing proxy accounts in at least two institutions and expedites transactions between the two institutions through a an internal deposit to a first proxy account in a first institution and a second internal deposit from a second proxy account in the second institution. In some implementations the proxy accounts include a funds reserve which may be periodically balanced between proxy accounts to maintain an operational reserve of funds.

The bus interfaces with the processors A N the main memory e.g. a random access memory RAM a read only memory ROM a processor readable storage medium a display device a user input device and a network device .

In some implementations the system e.g. includes at least one of a central processing unit processor and a multi processor unit MPU .

The processors A N and the main memory form a processing unit . In some embodiments the processing unit includes one or more processors communicatively coupled to one or more of a RAM ROM and machine readable storage medium the one or more processors of the processing unit receive instructions stored by the one or more of a RAM ROM and machine readable storage medium via a bus and the one or more processors execute the received instructions. In some embodiments the processing unit is an ASIC Application Specific Integrated Circuit . In some embodiments the processing unit is a SoC System on Chip . In some embodiments the processing unit includes one or more of an API Service an application proxy system one or more instance interface modules financial documents a transaction engine and a document processing engine.

The network adapter device provides one or more wired or wireless interfaces for exchanging data and commands between the system e.g. and other devices such as financial institution systems e.g. user devices e.g. . Such wired and wireless interfaces include for example a universal serial bus USB interface Bluetooth interface Wi Fi interface Ethernet interface near field communication NFC interface and the like.

Machine executable instructions in software programs such as an operating system application programs and device drivers are loaded into the memory of the processing unit from the processor readable storage medium the ROM or any other storage location. During execution of these software programs the respective machine executable instructions are accessed by at least one of processors A N of the processing unit via the bus and then executed by at least one of processors A N. Data used by the software programs are also stored in the memory and such data is accessed by at least one of processors A N during execution of the machine executable instructions of the software programs. The processor readable storage medium is one of or a combination of two or more of a hard drive a flash drive a DVD a CD an optical disk a floppy disk a flash storage a solid state drive a ROM an EEPROM an electronic circuit a semiconductor memory device and the like. The processor readable storage medium includes an operating system software programs device drivers the API Service the application proxy system the institution Interface modules and financial documents . In some implementations the processor readable storage medium includes the transaction engine and the document processing engine .

The system and methods of the preferred embodiment and variations thereof can be embodied and or implemented at least in part as a machine configured to receive a computer readable medium storing computer readable instructions. The instructions are preferably executed by computer executable components preferably integrated with the financial application programming interface platform. The computer readable medium can be stored on any suitable computer readable media such as RAMs ROMs flash memory EEPROMs optical devices CD or DVD hard drives floppy drives or any suitable device. The computer executable component is preferably a general or application specific processor but any suitable dedicated hardware or hardware firmware combination device can alternatively or additionally execute the instructions.

As a person skilled in the art will recognize from the previous detailed description and from the figures and claims modifications and changes can be made to the preferred embodiments of the invention without departing from the scope of this invention defined in the following claims.

