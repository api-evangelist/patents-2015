---

title: Enabling enforcement of licensing terms in distributing content in containers by including a key in the container containing the pertinent licensing terms
abstract: A method, system and computer program product for enforcing licensing terms when distributing content via a container image running in a container. Upon receiving a request for a service from the container by the isolation code, where the isolation code limits, accounts and isolates resource usage of process groups, the commerce code application programming interfaces (APIs) of the isolation code read a key of the container. The key contains licensing terms applied to the component(s) (e.g., applications) of the container. The commerce code APIs will then confirm that the container is in compliance with those licensing terms. If the container is in compliance with the licensing terms, the container will be allowed to execute. Otherwise, the container will be prevented from executing. In this manner, the commerce code APIs can enforce the licensing terms, including restrictions and enforcement of payment to the licensor upon distributing content in the container.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09626491&OS=09626491&RS=09626491
owner: International Business Machines Corporation
number: 09626491
owner_city: Armonk
owner_country: US
publication_date: 20150515
---
The present invention relates generally to assembling applications within a container and more particularly to enabling enforcement of licensing terms in distributing content in containers by including a key in the container containing the pertinent licensing terms.

Currently developers may assemble applications within a container. The contents of the container e.g. applications may then be copied into an image file which can later be used to create an exact duplicate of the container from which the image was created. Once the image is created operations to build another container from that image and the container commands such as to run start stop commit and search are the same regardless of the container contents.

Images can be instantiated into containers on a system such as a Linux system. The distributed content in these images may have licensing restrictions including licensing terms that require compensation to licensors when such content is distributed such as when an image of the contents of the container is copied or distributed to another container. However there is not currently a means for enforcing the licensing restrictions when distributing the content in the containers including enforcement of payment to the licensor upon distributing the content in the containers.

In one embodiment of the present invention a method for enforcing licensing terms when distributing content via a container image running in a container comprises receiving a request for a service from the container where contents of the container comprise an assemble of applications. The method further comprises reading a key of the container in response to receiving the request for the service where the key comprises licensing terms applied to the contents of the container. The method additionally comprises allowing by a processor the container to execute in response to confirming the container is in compliance with the licensing terms. In this manner the licensing restrictions can be enforced when distributing the content in the containers including enforcement of payment to the licensor upon distributing the content in the containers.

In another embodiment of the present invention a computer program product for enforcing licensing terms when distributing content via a container image running in a container the computer program product comprising a computer readable storage medium having program code embodied therewith the program code comprises the programming instructions for receiving a request for a service from the container where contents of the container comprise an assemble of applications. The program code further comprises the programming instructions for reading a key of the container in response to receiving the request for the service where the key comprises licensing terms applied to the contents of the container. The program code additionally comprises the programming instructions for allowing the container to execute in response to confirming the container is in compliance with the licensing terms. In this manner the licensing restrictions can be enforced when distributing the content in the containers including enforcement of payment to the licensor upon distributing the content in the containers.

In a further embodiment of the present invention a system comprises a memory unit for storing a computer program for enforcing licensing terms when distributing content via a container image running in a container. The system further comprises a processor coupled to the memory unit where the processor is configured to execute the program instructions of the computer program comprising receiving a request for a service from the container where contents of the container comprise an assemble of applications. The program instructions of the computer program further comprise reading a key of the container in response to receiving the request for the service where the key comprises licensing terms applied to the contents of the container. The program instructions of the computer program additionally comprise allowing the container to execute in response to confirming the container is in compliance with the licensing terms. In this manner the licensing restrictions can be enforced when distributing the content in the containers including enforcement of payment to the licensor upon distributing the content in the containers.

The foregoing has outlined rather generally the features and technical advantages of one or more embodiments of the present invention in order that the detailed description of the present invention that follows may be better understood. Additional features and advantages of the present invention will be described hereinafter which may form the subject of the claims of the present invention.

The present invention comprises a method system and computer program product for enforcing licensing terms when distributing content via a container image running in a container. A container is an operating system process that is assigned to an application program and is isolated from all the other processes by code running within the operating system. This code is called process isolation code or simply isolation code an example of which is control groups or cgroups in Linux . In one embodiment of the present invention upon receiving a request for a service from a container by the isolation code where the isolation code is a program to limit account and isolate resource usage e.g. CPU memory disk input output etc. of process groups the commerce code application programming interfaces APIs of the isolation code read a key of the container. The key contains licensing terms applied to one or more components e.g. applications of the container. The commerce code APIs will then confirm that the container is in compliance with those licensing terms. If the container is in compliance with the licensing terms the container will be allowed to execute. Otherwise the container will be prevented from executing. In this manner the commerce code APIs can enforce the licensing terms including restrictions and enforcement of payment to the licensor upon distributing content in the container.

In the following description numerous specific details are set forth to provide a thorough understanding of the present invention. However it will be apparent to those skilled in the art that the present invention may be practiced without such specific details. In other instances well known circuits have been shown in block diagram form in order not to obscure the present invention in unnecessary detail. For the most part details considering timing considerations and the like have been omitted inasmuch as such details are not necessary to obtain a complete understanding of the present invention and are within the skills of persons of ordinary skill in the relevant art.

Referring now to the Figures in detail illustrates a network system configured in accordance with an embodiment of the present invention. Network system includes a computing device connected to a licensing server via a network . Computing device may be any type of computing device e.g. portable computing unit Personal Digital Assistant PDA smartphone laptop computer mobile phone navigation device game console desktop computer system workstation Internet appliance and the like configured with the capability of connecting to licensing server via network . A hardware configuration of a computing device is discussed below in connection with .

Network may be for example a local area network a wide area network a wireless wide area network a circuit switched telephone network a Global System for Mobile Communications GSM network Wireless Application Protocol WAP network a WiFi network an IEEE 802.11 standards network various combinations thereof etc. Other networks whose descriptions are omitted here for brevity may also be used in conjunction with system of without departing from the scope of the present invention.

Licensing server is configured to manage licenses as well as used to validate licenses such as validating a license code applied to a licensing provision as discussed further below in connection with .

Referring now to illustrates a hardware configuration of a computing device for practicing the principles of the present invention in accordance with an embodiment of the present invention.

As illustrated in computing device has a processor coupled to various other components by system bus . An operating system runs on processor and provides control and coordinates the functions of the various components of . An application in accordance with the principles of the present invention runs in conjunction with operating system and provides calls to operating system where the calls implement the various functions or services to be performed by application . Application may include for example an application for enforcing licensing terms when distributing content in containers as discussed below in association with .

Referring again to read only memory ROM is coupled to system bus and includes a basic input output system BIOS that controls certain basic functions of computing device . Random access memory RAM and disk adapter are also coupled to system bus . It should be noted that software components including operating system and application may be loaded into RAM which may be computing device s main memory for execution. Disk adapter may be an integrated drive electronics IDE adapter that communicates with a disk unit e.g. disk drive. It is noted that the program for enforcing licensing terms when distributing content in containers as discussed below in association with may reside in disk unit or in application .

Computing device may further include a communications adapter coupled to bus . Communications adapter interconnects bus with an outside network e.g. network of thereby enabling computing device to communicate with other devices such as licensing server .

I O devices may also be connected to computing device via a user interface adapter and a display adapter . Keyboard mouse and speaker may all be interconnected to bus through user interface adapter . A display monitor may be connected to system bus by display adapter . In this manner a user is capable of inputting to computing device through keyboard or mouse and receiving output from computing device via display or speaker .

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media having computer readable program instructions thereon for causing a processor to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions for use by an instruction execution device. The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions described herein can be downloaded to respective computing processing devices from a computer readable storage medium or to an external computer or external storage device via a network for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card or network interface in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions.

These computer readable program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions may also be loaded onto a computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

As stated in the Background section currently developers may assemble applications within a container. The contents of the container e.g. applications may then be copied into an image file which can later be used to create an exact duplicate of the container from which the image was created. Once the image is created operations to build another container from that image and the container commands such as to run start stop commit and search are the same regardless of the container contents. Images can be instantiated into containers on a system such as a Linux system. The distributed content in these images may have licensing restrictions including licensing terms that require compensation to licensors when such content is distributed such as when an image of the contents of the container is copied or distributed to another container. However there is not currently a means for enforcing the licensing restrictions when distributing the content in the containers including enforcement of payment to the licensor upon distributing the content in the containers.

The principles of the present invention provide a means for enforcing licensing terms including restrictions and enforcement of payment to the licensor upon distributing content in containers by including a key in the container that is used by the application programming interface of the commerce code in the isolation code isolation code is a program to limit account and isolate resource usage of process groups to ensure compliance with the licensing terms as discussed below in connection with . is a diagram of the software components used in connection with enforcing licensing terms when distributing content in containers. is a flowchart of a method for validating the key in the container with the commerce code in the isolation code. is a flowchart of a method for enforcing the licensing terms when distributing content in containers.

As stated above is a diagram of the software components used in connection with enforcing licensing terms when distributing content in containers in accordance with an embodiment of the present invention.

Referring to a conventional operating system usually segregates the virtual memory into user space and kernel space . User space is the memory area where all user mode applications work whereas kernel space is strictly reserved for running the kernel kernel extensions and most device drivers.

User space includes a container whose contents include an assemble of applications identified as Application . . . Application N where N is a positive integer number in . Container as used herein is an operating system process that is assigned to an application program and is isolated from all the other processes by code running within operating system . This code is called process isolation code or simply isolation code an example of which is control groups or cgroups in Linux .

Container further includes a key containing a checksum licensing terms and a manifest . Checksum which is a small sized datum from an arbitrary block of digital data is used to confirm that the contents such as applications of container have not changed. Licensing terms refer to the licensing terms such as the licensing restrictions and payment requirements for distributing the contents such as applications of container . In addition to the licensing terms relating to the payment terms for distributing applications licensing terms may include restrictions such as the amount of resources e.g. CPU cycles memory and disk storage to be utilized based on the price paid. In one embodiment licensing terms may apply to one or more particular components e.g. applications of container . In one embodiment each component e.g. application of container is associated with a particular licensing term stored in key . Manifest refers to a file that lists the contents of container as well as the security credentials of container thereby effectively proving the identity of container . In one embodiment key may further contain information directed to the preferred provisioning of applications such as the type of database security authority etc.

Furthermore container may optionally include boot code which is the container s execution entry point. Boot code is executed upon loading container which then communicates with an application programming interface of the commerce code of the isolation code discussed further below to determine if the respective container is eligible for execution as discussed further below in connection with . In one embodiment boot code is replaced by adding a field to key that the commerce code in isolation code would use to decrypt portions or the entirety of applications in container . Consequently the image would be prevented from being executed on a system without an isolation code with the embedded commerce code .

Kernel space includes a software component referred to as isolation code . Isolation code e.g. control groups or cgroups of Linux is a program running on the kernel to limit account and isolate resource usage e.g. CPU memory disk input output etc. of process groups. A process group denotes a collection of one or more processes.

In one embodiment isolation code includes commerce code with application programming interfaces also referred to as commerce code APIs which are used to validate key of container as well as enforce licensing terms as discussed further below in connection with . In one embodiment the commands from container are encrypted discussed further below in connection with where the encrypted commands are decrypted by application programming interfaces of commerce code .

Isolation code may interact with a file system referred to herein as an another union file system . Another union file system takes an existing filesystem and transparently overlays it on a newer filesystem. It allows files and directories of separate filesystems to co exist. Furthermore another union file system can merge several directories and provide a single merged view of it.

Kernel space further includes namespaces which provide a level of direction to specific identifiers thus making it possible to distinguish between identifiers with the same exact name. In one embodiment namespaces are employed for the purpose of grouping symbols and identifiers around a particular functionality. In one embodiment namespaces provide isolation where groups of processes are separated such that they cannot see resources in other groups. For example a PID namespace provides a separate enumeration of process identifiers within each namespace. Another example includes a network namespace that isolates the network interface controllers physical or virtual iptables firewall rules routing tables etc. Network namespaces can be connected with each other using the veth virtual Ethernet device. A further example includes the UTS namespace that allows changing the hostname. In another example the mount namespace allows creating a different file system layout or making certain mount points read only. In a further example the IPC namespace isolates the System V inter process communication between namespaces. In another example the user namespace isolates the user IDs between namespaces.

As discussed above in the embodiment with container containing boot code boot code is executed upon loading container which then communicates with an application programming interface of commerce code of isolation code to determine if the respective container is eligible for execution as discussed further below in connection with .

In step a determination is made by boot code as to whether key of container is validated with commerce code . In one embodiment boot code includes code that communicates with an application programming interface API of commerce code to determine whether container is eligible for execution. API of commerce code determines whether container is eligible for execution based on validating key .

If key cannot be validated including the scenario when boot code cannot locate the commerce code API in isolation code then in step boot code logs an error and terminates container .

Upon container executing container requests to be serviced by isolation code as discussed further below. The licensing terms associated with executing container can be enforced as discussed below in connection with .

Referring to in conjunction with in step commerce code APIs receive a request for service from container after container is executed.

If container does not have a key then in step container is executed without interface from commerce code APIs . In this manner non commerce enabled images i.e. those images of container that do not possess a key that needs to be validated by commerce code may be able to run unhindered.

If however container has a key then in step commerce code APIs read key of container to retrieve checksum to confirm that the contents such as applications have not changed.

In step a determination is made by commerce code APIs as to whether the contents of container such as applications have changed.

If the contents of container have changed then in step commerce code APIs does not allow container to execute and logs an error code.

If however the contents of container have not changed then in step commerce code APIs read key of container to retrieve manifest to confirm container is allowed to be serviced by isolation code . As discussed above manifest includes a list of the contents of container as well as the security credentials of container thereby effectively proving the identity of container .

In step a determination is made by commerce code APIs as to whether container s credentials were validated. For example the security credentials of container in manifest may include a security code that needs to be matched with a code accessed by commerce code APIs such as a code stored in memory or storage of computing device e.g. memory or disk unit .

If container s credentials are not validated then commerce code APIs does not allow container to execute and logs an error code in step .

If however container s credentials are validated then in step commerce code APIs read key of container to retrieve licensing terms to confirm container is in compliance with licensing terms . In one embodiment commerce code APIs validate licensing terms with licensing server such as over network by validating a license code applied to licensing terms . In another embodiment commerce code APIs validate licensing terms locally such as by processor . Once licensing terms are validated commerce code APIs determines whether container is in compliance with those terms.

In step a determination is made by commerce code APIs as to whether container is in compliance with licensing terms . In this manner commerce code APIs can enforce licensing terms including restrictions and enforcement of payment to the licensor upon distributing content in container .

If container is not in compliance with licensing terms then in step commerce code APIs do not allow container to execute. In this manner commerce code APIs prevent container from executing if container is not in compliance with licensing terms thereby providing a means for enforcing licensing terms .

If however container is in compliance with licensing terms then in step commerce code APIs allow container to execute.

The descriptions of the various embodiments of the present invention have been presented for purposes of illustration but are not intended to be exhaustive or limited to the embodiments disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the described embodiments. The terminology used herein was chosen to best explain the principles of the embodiments the practical application or technical improvement over technologies found in the marketplace or to enable others of ordinary skill in the art to understand the embodiments disclosed herein.

