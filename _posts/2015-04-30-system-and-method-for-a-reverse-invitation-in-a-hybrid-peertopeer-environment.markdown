---

title: System and method for a reverse invitation in a hybrid peer-to-peer environment
abstract: An improved system and method are disclosed for peer-to-peer communications. In one example, the method enables an endpoint to send a reverse invitation in response to an incoming call. The reverse invitation may be used to set up an alternate communication session rather than maintaining the incoming call.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09497127&OS=09497127&RS=09497127
owner: DAMAKA, INC.
number: 09497127
owner_city: Richardson
owner_country: US
publication_date: 20150430
---
This application is a continuation of U.S. patent application Ser. No. 14 293 646 filed Jun. 2 2014 entitled SYSTEM AND METHOD FOR A REVERSE INVITATION IN A HYBRID PEER TO PEER ENVIRONMENT now U.S. Pat. No. 9 031 005 issued May 12 2015 which is a continuation of U.S. patent application Ser. No. 12 902 107 filed Oct. 11 2010 and entitled SYSTEM AND METHOD FOR A REVERSE INVITATION IN A HYBRID PEER TO PEER ENVIRONMENT now U.S. Pat. No. 8 743 781 issued Jun. 3 2014 the specifications of which are incorporated herein in their entirety.

The present application incorporates by reference in their entirety U.S. Pat. No. 7 570 636 filed on Aug. 30 2005 and entitled SYSTEM AND METHOD FOR TRAVERSING A NAT DEVICE FOR PEER TO PEER HYBRID COMMUNICATIONS and U.S. patent application Ser. No. 12 705 925 filed on Feb. 15 2010 and entitled SYSTEM AND METHOD FOR STRATEGIC ROUTING IN A PEER TO PEER ENVIRONMENT.

Current packet based communication networks may be generally divided into peer to peer networks and client server networks. Traditional peer to peer networks support direct communication between various endpoints without the use of an intermediary device e.g. a host or server . Each endpoint may initiate requests directly to other endpoints and respond to requests from other endpoints using credential and address information stored on each endpoint. However because traditional peer to peer networks include the distribution and storage of endpoint information e.g. addresses and credentials throughout the network on the various insecure endpoints such networks inherently have an increased security risk. While a client server model addresses the security problem inherent in the peer to peer model by localizing the storage of credentials and address information on a server a disadvantage of client server networks is that the server may be unable to adequately support the number of clients that are attempting to communicate with it. As all communications even between two clients must pass through the server the server can rapidly become a bottleneck in the system.

The present disclosure is directed to a system and method for peer to peer hybrid communications. It is understood that the following disclosure provides many different embodiments or examples. Specific examples of components and arrangements are described below to simplify the present disclosure. These are of course merely examples and are not intended to be limiting. In addition the present disclosure may repeat reference numerals and or letters in the various examples. This repetition is for the purpose of simplicity and clarity and does not in itself dictate a relationship between the various embodiments and or configurations discussed.

Referring to one embodiment of a peer to peer hybrid system is illustrated. The system includes an access server that is coupled to endpoints and via a packet network . Communication between the access server endpoint and endpoint is accomplished using predefined and publicly available i.e. non proprietary communication standards or protocols e.g. those defined by the Internet Engineering Task Force IETF or the International Telecommunications Union Telecommunications Standard Sector ITU T . For example signaling communications e.g. session setup management and teardown may use a protocol such as the Session Initiation Protocol SIP while actual data traffic may be communicated using a protocol such as the Real time Transport Protocol RTP . As will be seen in the following examples the use of standard protocols for communication enables the endpoints and to communicate with any device that uses the same standards. The communications may include but are not limited to voice calls instant messages audio and video emails and any other type of resource transfer where a resource represents any digital data. In the following description media traffic is generally based on the user datagram protocol UDP while authentication is based on the transmission control protocol internet protocol TCP IP . However it is understood that these are used for purposes of example and that other protocols may be used in addition to or instead of UDP and TCP IP.

Connections between the access server endpoint and endpoint may include wireline and or wireless communication channels. In the following description it is understood that the term direct means that there is no endpoint or access server in the communication channel s between the endpoints and or between either endpoint and the access server. Accordingly the access server endpoint and endpoint are directly connected even if other devices e.g. routers firewalls and other network elements are positioned between them. In addition connections to endpoints locations or services may be subscription based with an endpoint only having access if the endpoint has a current subscription. Furthermore the following description may use the terms user and endpoint interchangeably although it is understood that a user may be using any of a plurality of endpoints. Accordingly if an endpoint logs in to the network it is understood that the user is logging in via the endpoint and that the endpoint represents the user on the network using the user s identity.

The access server stores profile information for a user a session table to track what users are currently online and a routing table that matches the address of an endpoint to each online user. The profile information includes a buddy list for each user that identifies other users buddies that have previously agreed to communicate with the user. Online users on the buddy list will show up when a user logs in and buddies who log in later will directly notify the user that they are online as described with respect to . The access server provides the relevant profile information and routing table to each of the endpoints and so that the endpoints can communicate directly with one another. Accordingly in the present embodiment one function of the access server is to serve as a storage location for information needed by an endpoint in order to communicate with other endpoints and as a temporary storage location for requests voicemails etc. as will be described later in greater detail.

With additional reference to one embodiment of an architecture for the access server of is illustrated. The architecture includes functionality that may be provided by hardware and or software and that may be combined into a single hardware platform or distributed among multiple hardware platforms. For purposes of illustration the access server in the following examples is described as a single device but it is understood that the term applies equally to any type of environment including a distributed environment in which at least a portion of the functionality attributed to the access server is present.

In the present example the architecture includes web services e.g. based on functionality provided by XML SOAP .NET MONO web server using for example Apache or IIS and database using for example mySQL or SQLServer for storing and retrieving routing tables profiles and one or more session tables . Functionality for a STUN Simple Traversal of UDP through NATs Network Address Translation server is also present in the architecture . As is known STUN is a protocol for assisting devices that are behind a NAT firewall or router with their packet routing. The architecture may also include a redirect server for handling requests originating outside of the system . One or both of the STUN server and redirect server may be incorporated into the access server or may be a standalone device. In the present embodiment both the server and the redirect server are coupled to the database .

Referring to one embodiment of an architecture for the endpoint which may be similar or identical to the endpoint of is illustrated. It is understood that that term endpoint may refer to many different devices having some or all of the described functionality including a computer a VoIP telephone a personal digital assistant a cellular phone or any other device having an IP stack upon which the needed protocols may be run. Such devices generally include a network interface a controller coupled to the network interface a memory coupled to the controller and instructions executable by the controller and stored in the memory for performing the functions described in the present application. Data needed by an endpoint may also be stored in the memory. The architecture includes an endpoint engine positioned between a graphical user interface GUI and an operating system . The GUI provides user access to the endpoint engine while the operating system provides underlying functionality as is known to those of skill in the art.

The endpoint engine may include multiple components and layers that support the functionality required to perform the operations of the endpoint . For example the endpoint engine includes a softswitch a management layer an encryption decryption module a feature layer a protocol layer a speech to text engine a text to speech engine a language conversion engine an out of network connectivity module a connection from other networks module a p commerce e.g. peer commerce engine that includes a p commerce agent and a p commerce broker and a cellular network interface module .

Each of these components layers may be further divided into multiple modules. For example the softswitch includes a call control module an instant messaging IM control module a resource control module a CALEA Communications Assistance to Law Enforcement Act agent a media control module a peer control module a signaling agent a fax control module and a routing module.

The management layer includes modules for presence i.e. network presence peer management detecting peers and notifying peers of being online firewall management navigation and management media management resource management profile management authentication roaming fax management and media playback recording management.

The encryption decryption module provides encryption for outgoing packets and decryption for incoming packets. In the present example the encryption decryption module provides application level encryption at the source rather than at the network. However it is understood that the encryption decryption module may provide encryption at the network in some embodiments.

The feature layer provides support for various features such as voice video IM data voicemail file transfer file sharing class features short message service SMS interactive voice response IVR faxes and other resources. The protocol layer includes protocols supported by the endpoint including SIP HTTP HTTPS STUN RTP SRTP and ICMP. It is understood that these are examples only and that fewer or more protocols may be supported.

The speech to text engine converts speech received by the endpoint e.g. via a microphone or network into text the text to speech engine converts text received by the endpoint into speech e.g. for output via a speaker and the language conversion engine may be configured to convert inbound or outbound information text or speech from one language to another language. The out of network connectivity module may be used to handle connections between the endpoint and external devices as described with respect to and the connection from other networks module handles incoming connection attempts from external devices. The cellular network interface module may be used to interact with a wireless network.

With additional reference to the cellular network interface module is illustrated in greater detail. Although not shown in the softswitch of the endpoint architecture includes a cellular network interface for communication with the cellular network interface module . In addition the cellular network interface module includes various components such as a call control module a signaling agent a media manager a protocol stack and a device interface. It is noted that these components may correspond to layers within the endpoint architecture and may be incorporated directly into the endpoint architecture in some embodiments.

Referring to a traditional softswitch architecture is illustrated with two endpoints and neither of which includes a softswitch. In the present example an external softswitch maintains a first signaling leg dotted line with the endpoint and a second signaling leg dotted line with the endpoint . The softswitch links the two legs to pass signaling information between the endpoints and . Media traffic solid lines may be transferred between the endpoints and via a media gateway .

With additional reference to the traditional softswitch architecture of is illustrated with a third endpoint that also does not include a softswitch. The external softswitch now maintains a third signaling leg dotted line with the endpoint . In the present example a conference call is underway. However as none of the endpoints includes a softswitch a media bridge connected to each endpoint is needed for media traffic. Accordingly each endpoint has at most two concurrent connections one with the softswitch for signaling and another with the media bridge for media traffic.

Referring to in one embodiment unlike the traditional architecture of two endpoints e.g. the endpoints and of each include a softswitch e.g. the softswitch of . Each endpoint is able to establish and maintain both signaling and media traffic connections both virtual and physical legs with the other endpoint. Accordingly no external softswitch is needed as this model uses a distributed softswitch method to handle communications directly between the endpoints.

With additional reference to the endpoints and are illustrated with another endpoint that also contains a softswitch. In this example a conference call is underway with the endpoint acting as the host. To accomplish this the softswitch contained in the endpoint enables the endpoint to support direct signaling and media traffic connections with the endpoint . The endpoint can then forward media traffic from the endpoint to the endpoint and vice versa. Accordingly the endpoint may support multiple connections to multiple endpoints and as in no external softswitch is needed.

Referring again to in operation the softswitch uses functionality provided by underlying layers to handle connections with other endpoints and the access server and to handle services needed by the endpoint . For example as is described below in greater detail with respect to incoming and outgoing calls may utilize multiple components within the endpoint architecture .

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may initiate a call to the endpoint using various components of the architecture . Prior to step a user not shown initiates a call via the GUI . In step the GUI passes a message to the call control module of the softswitch to make the call. The call control module contacts the peer control module softswitch in step which detects the peer if not already done goes to the routing table softswitch for the routing information and performs similar operations. It is understood that not all interactions are illustrated. For example the peer control module may utilize the peer management module of the management layer for the peer detection. The call control module then identifies a route for the call in step and sends message to the SIP protocol layer of the protocol layer to make the call in step . In step the outbound message is encrypted using the encryption decryption module and the message is sent to the network via the OS in step .

After the message is sent and prior to receiving a response the call control module instructs the media control module softswitch to establish the needed near end media in step . The media control module passes the instruction to the media manager of the management layer in step which handles the establishment of the near end media.

With additional reference to the message sent by the endpoint in step is received by the endpoint and passed from the OS to the SIP protocol layer in step . The message is decrypted in step and the call is offered to the call control module in step . The call control module notifies the GUI of an incoming call in step and the GUI receives input identifying whether the call is accepted or rejected e.g. by a user in step . In the present example the call is accepted and the GUI passes the acceptance to the call control module in step . The call control module contacts the peer control module in step which identifies a route to the calling endpoint and returns the route to the call control module in step . In steps and the call control module informs the SIP protocol layer that the call has been accepted and the message is encrypted using the encryption decryption module. The acceptance message is then sent to the network via the OS in step .

In the present example after the call control module passes the acceptance message to the SIP protocol layer other steps may occur to prepare the endpoint for the call. For example the call control module instructs the media control module to establish near end media in step and the media control module instructs the media manager to start listening to incoming media in step . The call control module also instructs the media control module to establish far end media step and the media control module instructs the media manager to start transmitting audio in step .

Returning to the message sent by the endpoint step is received by the OS and passed on to the SIP protocol layer in step and decrypted in step . The message indicating that the call has been accepted is passed to the call control module in step and from there to the GUI in step . The call control module then instructs the media control module to establish far end media in step and the media control module instructs the media manager to start transmitting audio in step .

The following figures are sequence diagrams that illustrate various exemplary functions and operations by which the access server and the endpoints and may communicate. It is understood that these diagrams are not exhaustive and that various steps may be excluded from the diagrams to clarify the aspect being described.

Referring to and using the endpoint as an example a sequence diagram illustrates an exemplary process by which the endpoint may authenticate with the access server and then communicate with the endpoint . As will be described after authentication all communication both signaling and media traffic between the endpoints and occurs directly without any intervention by the access server . In the present example it is understood that neither endpoint is online at the beginning of the sequence and that the endpoints and are buddies. As described above buddies are endpoints that have both previously agreed to communicate with one another.

In step the endpoint sends a registration and or authentication request message to the access server . If the endpoint is not registered with the access server the access server will receive the registration request e.g. user ID password and email address and will create a profile for the endpoint not shown . The user ID and password will then be used to authenticate the endpoint during later logins. It is understood that the user ID and password may enable the user to authenticate from any endpoint rather than only the endpoint .

Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. As the endpoint is currently offline the buddy list will reflect this status. The access server then sends the profile information e.g. the buddy list and a routing table to the endpoint in step . The routing table contains address information for online members of the buddy list. It is understood that steps and represent a make and break connection that is broken after the endpoint receives the profile information and routing table.

In steps and the endpoint and access server repeat steps and as described for the endpoint . However because the endpoint is online when the endpoint is authenticated the profile information sent to the endpoint will reflect the online status of the endpoint and the routing table will identify how to directly contact it. Accordingly in step the endpoint sends a message directly to the endpoint to notify the endpoint that the endpoint is now online. This also provides the endpoint with the address information needed to communicate directly with the endpoint . In step one or more communication sessions may be established directly between the endpoints and .

Referring to a sequence diagram illustrates an exemplary process by which authentication of an endpoint e.g. the endpoint may occur. In addition after authentication the endpoint may determine whether it can communicate with the endpoint . In the present example the endpoint is online when the sequence begins.

In step the endpoint sends a request to the STUN server of . As is known the STUN server determines an outbound IP address e.g. the external address of a device i.e. a firewall router etc. behind which the endpoint is located an external port and a type of NAT used by the device. The type of NAT may be for example full cone restricted cone port restricted cone or symmetric each of which is discussed later in greater detail with respect to . The STUN server sends a STUN response back to the endpoint in step with the collected information about the endpoint .

In step the endpoint sends an authentication request to the access server . The request contains the information about endpoint received from the STUN server . In step the access server responds to the request by sending the relevant profile and routing table to the endpoint . The profile contains the external IP address port and NAT type for each of the buddies that are online.

In step the endpoint sends a message to notify the endpoint of its online status as the endpoint is already online and in step the endpoint waits for a response. After the expiration of a timeout period within which no response is received from the endpoint the endpoint will change the status of the endpoint from online as indicated by the downloaded profile information to unreachable. The status of a buddy may be indicated on a visual buddy list by the color of an icon associated with each buddy. For example when logging in online buddies may be denoted by a blue icon and offline buddies may be denoted by a red icon. If a response to a notify message is received for a buddy the icon representing that buddy may be changed from blue to green to denote the buddy s online status. If no response is received the icon remains blue to indicate that the buddy is unreachable. Although not shown a message sent from the endpoint and received by the endpoint after step would indicate that the endpoint is now reachable and would cause the endpoint to change the status of the endpoint to online. Similarly if the endpoint later sends a message to the endpoint and receives a response then the endpoint would change the status of the endpoint to online.

It is understood that other embodiments may implement alternate NAT traversal techniques. For example a single payload technique may be used in which TCP IP packets are used to traverse a UDP restricted firewall or router. Another example includes the use of a double payload in which a UDP packet is inserted into a TCP IP packet. Furthermore it is understood that protocols other than STUN may be used. For example protocols such as Internet Connectivity Establishment ICE or Traversal Using Relay NAT TURN may be used.

Referring to a sequence diagram illustrates an exemplary process by which the access server may aid the endpoint in establishing communications with the endpoint which is a buddy . After rendering aid the access server is no longer involved and the endpoints may communicate directly. In the present example the endpoint is behind a NAT device that will only let a message in towards the endpoint if the endpoint has sent a message out. Unless this process is bypassed the endpoint will be unable to connect to the endpoint . For example the endpoint will be unable to notify the endpoint that it is now online.

In step the endpoint sends a request to the STUN server of . As described previously the STUN server determines an outbound IP address an external port and a type of NAT for the endpoint . The STUN server sends a STUN response back to the endpoint in step with the collected information about the endpoint . In step the endpoint sends an authentication request to the access server . The request contains the information about endpoint received from the STUN server . In step the access server responds to the request by sending the relevant profile and routing table to the endpoint . In the present example the access server identifies the NAT type associated with the endpoint as being a type that requires an outbound packet to be sent before an inbound packet is allowed to enter. Accordingly the access server instructs the endpoint to send periodic messages to the access server to establish and maintain a pinhole through the NAT device. For example the endpoint may send a message prior to the timeout period of the NAT device in order to reset the timeout period. In this manner the pinhole may be kept open indefinitely.

In steps and the endpoint sends a STUN request to the STUN server and the STUN server responds as previously described. In step the endpoint sends an authentication request to the access server . The access server retrieves the buddy list for the endpoint and identifies the endpoint as being associated with a NAT type that will block communications from the endpoint . Accordingly in step the access server sends an assist message to the endpoint . The assist message instructs the endpoint to send a message to the endpoint which opens a pinhole in the NAT device for the endpoint . For security purposes as the access server has the STUN information for the endpoint the pinhole opened by the endpoint may be specifically limited to the endpoint associated with the STUN information. Furthermore the access server may not request such a pinhole for an endpoint that is not on the buddy list of the endpoint .

The access server sends the profile and routing table to the endpoint in step . In step the endpoint sends a message e.g. a ping packet to the endpoint . The endpoint may then respond to the message and notify the endpoint that it is now online. If the endpoint does not receive a reply from the endpoint within a predefined period of time it may close the pinhole which may occur simply by not sending another message and letting the pinhole time out . Accordingly the difficulty presented by the NAT device may be overcome using the assist message and communications between the two endpoints may then occur without intervention by the access server .

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may request that it be added to the endpoint s buddy list. In the present example the endpoints and both remain online during the entire process.

In step the endpoint sends a registration and or authentication request message to the access server as described previously. Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. As the endpoint is not currently on the buddy list it will not be present. The access server then sends the profile information and a routing table to the endpoint in step .

In steps and the endpoint and access server repeat steps and as described for the endpoint . The profile information sent by the access server to the endpoint will not include the endpoint because the two endpoints are not buddies.

In step the endpoint sends a message to the access server requesting that the endpoint be added to its buddy list. The access server determines that the endpoint is online e.g. using the session table in step and sends the address for the endpoint to the endpoint in step . In step the endpoint sends a message directly to the endpoint requesting that the endpoint be added to its buddy list. The endpoint responds to the endpoint in step with either permission or a denial and the endpoint also updates the access server with the response in step . For example if the response grants permission then the endpoint informs the access server so that the access server can modify the profile of both endpoints to reflect the new relationship. It is understood that various other actions may be taken. For example if the endpoint denies the request then the access server may not respond to another request by the endpoint with respect to the endpoint until a period of time has elapsed.

It is understood that many different operations may be performed with respect to a buddy list. For example buddies may be deleted blocked unblocked buddy status may be updated and a buddy profile may be updated. For block unblock as well as status and profile updates a message is first sent to the access server by the endpoint requesting the action e.g. the endpoint . Following the access server update the endpoint sends a message to the peer being affected by the action e.g. the endpoint .

Buddy deletion may be handled as follows. If the user of the endpoint wants to delete a contact on a buddy list currently associated with the online endpoint the endpoint will first notify the access server that the buddy is being deleted. The access server then updates the profile of both users so that neither buddy list shows the other user as a buddy. Note that in this instance a unilateral action by one user will alter the profile of the other user. The endpoint then sends a message directly to the endpoint to remove the buddy the user of the endpoint from the buddy list of the user of endpoint in real time. Accordingly even though the user is online at endpoint the user of the endpoint will be removed from the buddy list of the endpoint .

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may request that it be added to the endpoint s buddy list. In the present example the endpoint is not online until after the endpoint has made its request.

In step the endpoint sends a registration and or authentication request message to the access server as described previously. Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. The access server then sends the profile information and a routing table to the endpoint in step .

In step the endpoint sends a message to the access server requesting that the endpoint be added to its buddy list. The access server determines that the endpoint is offline in step and temporarily stores the request message in step . In steps and the endpoint and access server repeat steps and as described for the endpoint . However when the access server sends the profile information and routing table to the endpoint it also sends the request by the endpoint including address information for the endpoint .

In step the endpoint responds directly to the endpoint with either permission or a denial. The endpoint then updates the access server with the result of the response in step and also instructs the access server to delete the temporarily stored request.

Referring to a sequence diagram illustrates an exemplary process by which the endpoint may request that it be added to the endpoint s buddy list. In the present example the endpoint is not online until after the endpoint has made its request and the endpoint is not online to receive the response by endpoint .

In step the endpoint sends a registration and or authentication request message to the access server as described previously. Upon authentication the access server updates a session table residing on the server to indicate that the user ID currently associated with the endpoint is online. The access server also retrieves a buddy list associated with the user ID currently used by the endpoint and identifies which of the buddies if any are online using the session table. The access server then sends the profile information and a routing table to the endpoint in step .

In step the endpoint sends a message to the access server requesting that the endpoint be added to its buddy list. The access server determines that the endpoint is offline in step and temporarily stores the request message in step . In step the endpoint notifies the access server that it is going offline.

In steps and the endpoint and access server repeat steps and as described for the endpoint . However when the access server sends the profile information and routing table to the endpoint it also sends the request by the endpoint . Endpoint sends its response to the access server in step and also instructs the access server to delete the temporarily stored request. After the endpoint s next authentication process its profile information will include endpoint as a buddy assuming the endpoint granted permission .

Referring to in one embodiment a system includes a stateless reflector and two endpoints and such as the endpoints and described with respect to the preceding figures. In the present example each of the endpoints and are behind a device respectively that monitors and regulates communication with its respective endpoint. Each device in the present example is a firewall having NAT technology. As described previously a NAT device may present an obstacle in establishing a peer to peer connection because it may not allow unsolicited messages e.g. it may require a packet to be sent out through the NAT device before allowing a packet in . For example the NAT device positioned between the endpoint and network may only let a message in towards the endpoint if the endpoint has sent a message out. Unless the NAT device s status is shifted from not soliciting messages from the endpoint to soliciting messages from the endpoint the endpoint will be unable to connect to the endpoint . For example the endpoint will be unable to notify the endpoint that it is now online.

As will be described below in greater detail the stateless reflector is configured to receive one or more packets from an endpoint and reflect the packet to another endpoint after modifying information within the packet. This reflection process enables the endpoints and to communicate regardless of the presence and type of the NAT devices and . The stateless reflector is stateless because state information e.g. information relating to how an endpoint is to connect with other endpoints is stored by the endpoints as described previously. Accordingly the stateless reflector processes header information contained within a packet without access to other information about the network or endpoints such as the database of . Although only one stateless reflector is illustrated in it is understood that multiple stateless reflectors may be provided and that the endpoints and may each use a different stateless reflector. For example an endpoint may be configured to use a particular stateless reflector or may select a stateless reflector based on location NAT type etc.

Although each endpoint is shown with a separate NAT device it is understood that multiple endpoints may be connected to the network via a single NAT device. For example a LAN may access the network via a single NAT device and all communications between the endpoints connected to the LAN and the network must pass through the NAT device. However communications between the endpoints within the LAN itself may occur directly as previously described because the endpoints are not communicating through the NAT device. Furthermore if one of the endpoints or does not have a NAT device then communications with that endpoint may occur directly as described above even if the endpoints are not in the same network.

Each NAT device and includes an internal IP address on the side coupled to the endpoint for the NAT device and the side coupled to the endpoint for the NAT device and an external IP address on the side coupled to the network for both NAT devices . Each connection is also associated with an internal port and an external port. Therefore each connection includes both internal IP address port information and external IP address port information.

Generally a NAT device may be defined as full cone restricted cone port restricted cone or symmetric. A full cone NAT is one where all requests from the same internal IP address and port are mapped to the same external IP address and port. Therefore any external host can send a packet to the internal host by sending a packet to the mapped external address.

A restricted cone NAT is one where all requests from the same internal IP address and port are mapped to the same external IP address and port. Unlike a full cone NAT an external host can send a packet to the internal host only if the internal host has previously sent a packet to the external host s IP address.

A port restricted cone NAT is like a restricted cone NAT but the restriction includes port numbers. More specifically an external host can send a packet with source IP address X and source port P to the internal host only if the internal host has previously sent a packet to the external host at IP address X and port P.

A symmetric NAT is one where all requests from the same internal IP address and port to a specific destination IP address and port are mapped to the same external IP address and port. If the same host sends a packet with the same source address and port but to a different destination a different mapping is used. Only the external host that receives a packet can send a UDP packet back to the internal host.

Referring to a table illustrates one embodiment of a communication structure that may be used to traverse one or both of the NAT devices and of . The table provides five possible types for the NAT devices and no NAT full cone restricted cone port restricted cone and symmetric. It is understood that no NAT may indicate that no device is there that a device is there but does not include NAT functionality or that a device is there and any NAT functionality within the device has been disabled. Either of the NAT devices and may be on the originating side of the communication or on the terminating side. For purposes of convenience the endpoint is the originating endpoint and the endpoint is the terminating endpoint and the NAT device is the originating NAT device and the NAT device is the terminating NAT device. It is understood that the terms endpoint and NAT device may be used interchangeably in some situations. For example sending a packet to the endpoint generally involves sending a packet to the NAT device which then forwards the packet to the endpoint after performing the network address translation. However the following discussion may simply refer to sending a packet to the endpoint and it will be understood that the packet must traverse the NAT device .

As illustrated by the table there are twenty five possible pairings of NAT types and establishing communication between different NAT types may require different steps. For purposes of convenience these twenty five pairings may be grouped based on the required steps. For example if the originating NAT type is no NAT full cone restricted cone or port restricted cone then the originating NAT can establish communication directly with a terminating NAT type of either no NAT or full cone.

If the originating NAT type is no NAT or full cone then the originating NAT can establish communications with a terminating NAT type of either restricted cone or port restricted cone only after using the stateless reflector to reflect a packet. This process is described below with respect to .

Referring to the endpoint wants to inform the endpoint which is already logged on that the endpoint has logged on. The NAT device is either a no NAT or a full cone type and the NAT device is either a restricted cone or a port restricted cone type. Accordingly the endpoint wants to send a message to the endpoint but has not received a message from the endpoint that would allow the endpoint to traverse the NAT device .

Although not shown in prior to or during authentication the endpoints and both sent a request to a STUN server e.g. the STUN server of not shown in . The STUN server determined an outbound IP address an external port and a type of NAT for the endpoints and in this example for the NAT devices and . The STUN server then sent a STUN response back to the endpoints and with the collected information. The endpoints and then sent an authentication request to an access server e.g. the access server of not shown in . The request contains the information about endpoints and received from the STUN server . The access server responds to the requests by sending the relevant profile and routing table to the endpoints and . In addition each NAT device and may have a pinhole to the STUN server .

In the present example the NAT device has an external address port of 1.1.1.1 1111 and the NAT device has an external address port of 2.2.2.2 2222. The STUN server has an address port of 3.3.3.3 3333 and the stateless reflector has an address port of 4.4.4.4 4444. It is understood that the STUN server and or stateless reflector may have multiple addresses ports.

Referring to and with additional reference to in step the endpoint sends a packet to the stateless reflector . The packet contains header information identifying the source as the endpoint or rather the external IP address of the NAT device and the destination as the stateless reflector . The packet also contains custom or supplemental header information identifying the source as the STUN server and the destination as the endpoint . Accordingly the IP UDP header of the packet sent from the endpoint via the NAT device identifies its source as 1.1.1.1 1111 and its destination as 4.4.4.4 4444.

In step the stateless reflector modifies the packet header by replacing the IP UDP header with the source and destination from the custom header. In the present example the stateless reflector will modify the IP UDP header to identify the packet s source as 3.3.3.3 3333 and its destination as 2.2.2.2 2222. Identifying the packet s source as the STUN server enables the stateless reflector to send the packet through the pinhole in the NAT device that was created when the endpoint logged on. After modifying the header the stateless reflector sends the packet to the endpoint via the NAT device in step .

In step the endpoint sends an acknowledgement e.g. a 200 OK directly to the endpoint . The address of the endpoint is contained within the payload of the packet. The endpoint is able to send the acknowledgement directly because the NAT device is either a no NAT or a full cone type. Because the endpoint has opened a pinhole through the restricted or port restricted NAT device to the endpoint by sending a message to the endpoint the endpoint is now able to communicate directly with the endpoint as indicated by step .

Referring again to table of if the originating NAT type is either a no NAT type or a full cone type then the originating NAT can establish communications with a terminating NAT type that is symmetric only after using the stateless reflector to reflect a packet and then performing a port capture. This process is described below with respect to .

Referring to steps and are similar to the reflection process described with respect to and will not be described in detail in the present example. Because the terminating NAT type is symmetric the originating NAT needs the port of the terminating NAT in order to send packets through the NAT device . Accordingly in step the endpoint will capture the external port used by the NAT device to send the acknowledgement in step . This port along with the address of the NAT device may then be used when communicating with the endpoint as indicated by step .

Referring again to table of if the originating NAT type is either a restricted cone type or a port restricted cone type then the originating NAT can establish communications with a terminating NAT type that is either restricted or port restricted by using a fake packet and then using the stateless reflector to reflect a packet. This process is described below with respect to .

Referring to in step the endpoint sends a fake packet to the endpoint . Because the originating NAT type is a restricted cone type or a port restricted cone type the fake packet opens a pinhole to the terminating NAT that will allow a response from the terminating NAT to penetrate the originating NAT. After sending the fake packet the sequence proceeds with steps and which are similar to the reflection process described with respect to and will not be described in detail in the present example. The endpoints and may then communicate directly as indicated by step .

Referring again to table of if the originating NAT type is a symmetric type then the originating NAT can establish communications with a terminating NAT type that is either no NAT or full cone after a port capture occurs. This process is described below with respect to .

Referring to in step the endpoint symmetric NAT type sends a message to the endpoint . In step the endpoint captures the external port used by the NAT device in sending the message. This port along with the address of the NAT device may then be used when communicating with the endpoint directly as indicated by step .

Referring again to table of if the originating NAT type is a restricted cone type then the originating NAT can establish communications with a terminating NAT type that is symmetric by using a fake packet reflecting a packet using the stateless reflector and then performing a port capture. This process is described below with respect to .

Referring to in step the endpoint sends a fake packet to the endpoint . Because the originating NAT type is a restricted cone type the fake packet opens a pinhole to the terminating NAT that will allow a response from the terminating NAT to penetrate the originating NAT. After sending the fake packet the sequence proceeds with steps and which are similar to the reflection process described with respect to and will not be described in detail in the present example. In step the endpoint captures the external port used by the NAT device in sending the acknowledgement in step . This port along with the address of the NAT device may then be used when communicating with the endpoint directly as indicated by step .

Referring again to table of if the originating NAT type is a symmetric type then the originating NAT can establish communications with a terminating NAT type that is a restricted cone type by using a reflect a fake packet and a port capture. This process is described below with respect to .

Referring to steps and are similar to the reflection process described with respect to and will not be described in detail in the present example. In step in response to the reflected message from the endpoint the endpoint sends a fake packet to the endpoint . Because the terminating NAT type is a restricted cone type the fake packet opens a pinhole to the endpoint to allow messages from the endpoint to traverse the NAT device . Accordingly in step the endpoint can send the next message directly to the endpoint through the pinhole. In step the endpoint captures the external port used by the NAT device to send the message in step . This port along with the address of the NAT device may then be used by the endpoint when communicating directly with the endpoint as indicated by step .

Referring again to table of if the originating NAT type is a symmetric type and the terminating NAT type is a port restricted cone or if the originating NAT type is a port restricted cone and the terminating NAT type is symmetric then all signaling between the two NAT devices is relayed via the stateless reflector while media is transferred via peer to peer as described previously. If both the originating and terminating NAT types are symmetric then all signaling and media are relayed via the stateless reflector .

Accordingly the peer to peer communications described herein may be achieved regardless of the NAT type that may be used by an endpoint. The stateless reflector need not know the information for each client but instead reflects various packets based on information contained within the packet that is to be reflected. Both the custom header and payload may be encrypted for security purposes. However the stateless reflector may only be able to decrypt the custom header and the payload itself may only be decrypted by the terminating endpoint. This enables the stateless reflector to perform the reflection functionality while maintaining the security of the payload itself. As described above not all processes for traversing a NAT device may use the stateless reflector .

Referring to in another embodiment a peer to peer environment includes the two endpoints and the two NAT devices and and the stateless reflector of and another endpoint . Also illustrated are three possible routes between endpoints a private pr route a public pu route and a reflected rl route . illustrates the routes and between the endpoint and the endpoint and illustrates the routes between the endpoint and the endpoint . As will be discussed below in detail the endpoints and may contain logic that allows one of the three routes and to be selected in a dynamic and flexible manner rather than relying on the rule based system described above.

A rule based system may be fairly inflexible as such a system generally has a clear set of rules that are defined for various NAT situations and the current relationship between the two endpoints is handled according to those rules. Network configuration changes and other modifications may require revisions to the rules which is not convenient and may prevent the endpoints from communicating until the rules are revised. Accordingly in some embodiments the flexibility described below may enable the endpoints and to adapt to new network configurations without requiring updated rules as would be required in a strictly rule based system. In still other embodiments the logic within the endpoints and may be updated to handle new network configurations which also provides flexibility not found in strictly rule based systems.

Each endpoint and may include one or more virtual interfaces for communication with other endpoints. In the present example there are three virtual interfaces including a private virtual interface corresponding to the private route a public virtual interface corresponding to the public route and a relay virtual interface corresponding to the relay route . It is understood that the term virtual interface is used only for purposes of description to clarify that there are multiple possible routes. Accordingly the term virtual interface need not denote separate physical network interfaces on an endpoint but may use a single physical network interface.

As described above each endpoint and is generally associated with two IP address port pairs. The first IP address port pair may be the local i.e. private IP address port information that represents each of the endpoints and in the network that is inside the corresponding NAT device or . For example the first IP address port pair for the endpoint may be the physical address assigned to the endpoint by the corresponding NAT device . This first IP address port pair corresponds to the private virtual interface and may provide access via the private route to the endpoint by endpoints in the same local network e.g. the endpoint . The second IP address port pair may be the public IP address port information that represents each of the endpoints and in the network that is outside the corresponding NAT device or . For example the second IP address port pair for the endpoint may be the address that is returned to the endpoint by the STUN server as previously described e.g. the NAT s external IP address port pair assigned to the endpoint . This second IP address port pair for the endpoint corresponds to the public virtual interface and may provide access via the public route to the endpoint by endpoints both inside and outside the endpoint s local network. Each endpoint and is also aware of the address information of the reflector as described in previous embodiments which corresponds to the relay virtual interface of the endpoints. The relay route may be used in 5 4 4 5 and or 5 5 conditions according to the table of where one endpoint must send a packet first but is unable to do so because the other endpoint must send a packet first.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur between the endpoints and of when identifying which of the routes i.e. the private route the public route and the relay route will be used for communications. In the present example the endpoints and are in a local i.e. private network such as an Enterprise network a local area network LAN a virtual LAN VLAN or a home network. This local network is isolated from the public network by the NAT device or a similar network component. Although shown as a single NAT device it is understood that the NAT device may be a separate NAT device for each of the endpoints and . In contrast the endpoint is in a separate network that is only accessible by the endpoints and via a public network that forms all or part of the packet network .

The present example uses a SIP messaging model over UDP and so accommodates the transaction based SIP model within connection less UDP messaging. Because UDP is not transaction based certain message handling processes may be used to conform to SIP standards such as discarding multiple messages when the SIP model expects a message belonging to a specific transaction. However it is understood that the sequence may be implemented using many different messaging models. In the present example neither endpoint is online at the beginning of the sequence and the endpoints and are buddies. As described above buddies are endpoints that have both previously agreed to communicate with one another.

In steps and the endpoints and respectively send STUN requests to obtain their corresponding public IP address port pairs NATIP NATPort . In the present example the reflector is serving as a STUN server but it is understood that the STUN server may be separate from the reflector. The reflector responds to the STUN requests with the public IP address and port information for each of the endpoints and in steps and respectively.

As the two endpoints and are not logged in when the present example begins they must both authenticate with the access server . In step the endpoint sends an authentication request to the access server with its private and public IP address port pairs. In step the access server responds to the authentication request and as described previously returns information that includes the private and public IP addresses of any buddy endpoints that are currently logged in. However as the endpoint has not yet logged in the information received by the endpoint from the access server will not include any address information for the endpoint .

In step the endpoint sends an authentication request to the access server with its private and public IP address port pairs. In step the access server responds to the authentication request and as described previously returns information that includes the private and public IP addresses of any buddy endpoints that are currently logged in. As the endpoint is currently logged in the information received by the endpoint from the access server will include the private and public address information for the endpoint . Although not shown the endpoint may then send a message to the endpoint informing the endpoint that the endpoint is currently online. This message may contain the private and public address information of the endpoint . The message may be sent via the three different routes as described below with respect to later messaging or may be sent via one or more selected routes. For example the message may only be relayed i.e. sent via the relay route due to the high chance of success of that route.

At this point the endpoint wants to establish a communication session with the endpoint but does not know which of the three routes i.e. pr pu and rl should be used. In the previously described rule based system the endpoint would publish its NAT information which enables the endpoint to determine how to establish a connection. However in the present example such information is not published and the endpoint does not know whether the endpoint is in the same private network as the endpoint whether the endpoint is only accessible via a public network whether the endpoint is behind a NAT device or if the endpoint is behind a NAT device the settings of the NAT device full cone port restricted etc. . Accordingly the endpoint needs to dynamically determine which of the three routes to use with the endpoint .

Accordingly in step the endpoint interacts with the endpoint to determine which of the three routes should be used to send messages to the endpoint . Similarly in step the endpoint interacts with the endpoint to determine which of the three routes should be used to send messages to the endpoint which may not be the same route as that used by the endpoint to send messages to the endpoint . Steps and are illustrated in greater detail below with respect to . In step the two endpoints communicate via the determined route s .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur during steps and of in order to determine which of the routes are to be used. The endpoint may keep a table containing each buddy that is online and the route to be used for that buddy. For example when the route is unknown the table may have the information shown in Table 1 below 

The endpoint which is the originating endpoint in the present example sends out three presence messages in steps and . As the current example uses SIP messaging transported via UDP the message is a SIP INFO message. More specifically in step the endpoint sends a SIP INFO message to the private IP address port pair of the endpoint i.e. via the private route with an identifier such as a pr tag to indicate the route. In step the endpoint sends a SIP INFO message to the public NAT IP address port pair of the endpoint i.e. via the public route with an identifier such as a pu tag to indicate the route. In step the endpoint sends a SIP INFO message to the endpoint via the reflector i.e. via the relay route with an identifier such as an rl tag to indicate the route which is reflected to the endpoint in step .

The order in which the messages are sent may vary but the order follows a hierarchy of desired routes in the present embodiment that places the private route first i.e. most desirable the public route next and the relay route last i.e. least desirable . However it is understood that the order in which the messages are sent may vary or if the endpoint is capable of sending multiple messages simultaneously the messages may be sent at the same time.

The present example assumes that the endpoint receives one or more of the messages sent in steps and . If more than one message is received the endpoint may respond only to the first one received. So for example if the message sent via the private route is received before the messages sent via the public and relay routes the endpoint will respond only to the private route message and the later messages will be ignored. This reduces network traffic and provides for SIP compliance as the endpoint from a SIP perspective expects to receive a single 200 OK message in response to its SIP INFO message. Furthermore the response message may be sent back along the same route as the presence message to which the response is directed. So a response to the private route message will be sent back along the private route. Accordingly only one of steps A B and C may occur in the present example. Step C is dependent on the occurrence of step C because the response message will not be reflected unless the relay route is used.

The response message returned by the endpoint is a SIP 200 OK message that may include the tag extracted from the received INFO message to identify which of the routes was successful e.g. which route carried the message that was received first . For purposes of example the private route was successful and the table may then be updated as shown in Table 2 below 

It is noted that since the private route is successful the two endpoints and are in the same private network.

It is understood that the response message e.g. the SIP 200 OK may never be received by the endpoint . For example the private route may not be available from the endpoint to the endpoint due to network configuration settings. Accordingly if the SIP 200 OK is not received by the endpoint the endpoint may execute a retransmission process that resends the presence messages along the three routes. The resending may occur a set number of times for a set period of time or until some other limit is reached. For example the first set of presence messages may be sent 0.5 seconds after the initial messages are sent the second set of messages may be sent one second after that and each additional set of messages may be sent at time periods that are double the previous delay until a total of seven sets of messages are sent. At this time the endpoint may stop sending messages. If a response is received during the retransmission process the endpoint will stop retransmitting. However the response message will generally be received by the endpoint .

The outbound SIP INFO messages and the received SIP 200 OK message inform the endpoint of which route to use when sending communications to the endpoint . However this route may not work in reverse. In other words just because the endpoint can reach the endpoint via the private route to continue the example it does not necessarily follow that the endpoint can reach the endpoint using the same route. For example differences in the configurations of NAT devices or other network differences may mean one endpoint can be reached via a particular route even if the reverse route is not available.

Accordingly the endpoint sends out three presence messages in steps and . As the current example uses SIP messaging transported via UDP the message is a SIP INFO message. More specifically in step the endpoint sends a SIP INFO message to the private IP address port pair of the endpoint i.e. via the private route . In step the endpoint sends a SIP INFO message to the public NAT IP address port pair of the endpoint i.e. via the public route . In step the endpoint sends a SIP INFO message to the endpoint via the reflector i.e. via the relay route which is reflected to the endpoint in step .

The present example assumes that the endpoint receives one or more of the messages sent in steps and . If more than one message is received the endpoint may respond only to the first one received. Accordingly only one of steps A B and C may occur in the present example. Step C is dependent on the occurrence of step C because the response message will not be reflected unless the relay route is used. The response message returned by the endpoint is a SIP 200 OK message that identifies which of the routes was successful e.g. was received first .

If the first or only SIP INFO message received by the endpoint from the endpoint is received via the same route as that used by the endpoint to send messages to the endpoint e.g. the private route then the communication session is established with messages going both ways on that route. At this point the table may then be updated as shown in Table 3 below 

However the first or only SIP INFO message received by the endpoint from the endpoint may be received on a different route than that used by the endpoint to send messages to the endpoint . When this occurs the endpoint flags this as the endpoint responded to the INFO message via one route but is now communicating via another route. For example the endpoint responded on the private route but is now using the public route. One possibility for this discrepancy is that there is a router or other network device interfering with the return path i.e. the path used by the endpoint to send messages to the endpoint . Another possibility is that a message went faster one way than another way. For example while the endpoint may have received the private message from the endpoint i.e. the message of step of before the other messages the endpoint may have received the public message from the endpoint i.e. the message of step of before the public and relay messages.

When this occurs the endpoint may transition from the private route to the public route. This results in sending and receiving routes of pu pu as illustrated by Table 4 below 

The endpoint may also be configured to confirm that this transition is correct. To confirm the transition the endpoint executes a confirmation process and sends a confirmation message to the endpoint on the private route i.e. the route that the endpoint thinks it should be using to send messages to the endpoint . In the present example the confirmation message may include a SIP field named MAX FORWARDS that defines a maximum number of hops that a packet can take before being dropped. The MAX FORWARDS field has a standard default value of seventy but the endpoint may set the value to one i.e. MAX FORWARDS 1 . If the response message from the endpoint is received by the endpoint and has set the MAX FORWARDS field to 0 then the endpoint transitions back to the private route and uses that route for sending future messages. This results in different sending and receiving routes as illustrated by Table 5 below 

However if the endpoint does not receive a response message to its confirmation message it continues using the public route. This results in sending and receiving routes of pu pu as illustrated by Table 4 above.

Communications between the endpoints and as illustrated in may follow the same sequence of presence messages and responses as that described above with respect to . However since the endpoints and are in separate networks i.e. not the same local network the private route is not available and the private presence messages will fail to reach their destination. The presence messages may still be sent each way on the private route as the endpoints and do not know the location of the other endpoint but the messages will be dropped. For example the NAT devices and may both be routers that have an address of 192.168.1.1 in their respective home networks. The NAT device may assign a private address of 192.168.1.10 to the endpoint and the NAT device may assign a private address of 192.168.1.15 to the endpoint . Although these addresses appear to be in the same local network they are not. However as the endpoints and have no way of knowing whether the private addresses are in the same local network until they perform their strategic routing sequences they may both send their private presence messages along the private route even though the messages will both fail. Accordingly the endpoints and will use the public route and or the relay route when communicating.

Referring to a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of establishes a connection with another endpoint as described with respect to above.

In step the endpoint sends outbound presence messages on the private public and relay routes. The presence messages may contain identifiers such as tags or other route indicators or the receiving endpoint may simply note which virtual interface i.e. pr pu or rl received a particular presence message and correlate the message with the route upon receipt. In step the endpoint receives a response message that indicates which of the presence messages was received first. For example the response message may include the tag from the presence message to identify the route corresponding to the received presence message. In step the endpoint selects the identified route as the initial outbound route for messages being sent to the other endpoint.

In step the endpoint receives one or more inbound presence messages from the other endpoint. In step the endpoint sends a response to the first received inbound presence message.

In step the endpoint determines whether the inbound route of the message received in step is the same route as the initial outbound route selected in step . If the routes are the same the method continues to step and uses the initial outbound route to send messages to the other endpoint. If the routes are not the same the method moves to step and sends a confirmation message to the other endpoint using only the initial outbound route. In step the endpoint determines whether a response to the confirmation message has been received. If no response to the confirmation message has been received the method moves to step and transitions to the inbound route as the new outbound route for messages being sent to the other endpoint. If a response to the confirmation message has been received the method continues to step and uses the initial outbound route to send messages to the other endpoint.

In step the endpoint may begin sending keep alive messages to the other endpoint to ensure that the outbound route remains open. For example one of the networks or NAT devices involved in the established session may undergo a configuration change or a failure while the two endpoints are online and so an existing route may become unusable. In such a case the endpoint may detect that the keep alive messages are failing and so may return to step to re establish a valid route. It is noted that the other endpoint may not need to re establish its outbound route. For example if the inbound and outbound routes for the endpoint are different the inbound route may remain valid even though the outbound route is invalid. Accordingly some steps of the method may be skipped in some scenarios.

It is noted that many different variations of the method may exist. For example the endpoint may transition to the inbound route as the new outbound route if it is determined in step that the routes are not the same rather than remaining on the initial outbound route. Then if a response is received to the confirmation message the endpoint may transition back to the initial outbound virtual interface. Furthermore as stated previously the response message may never be received by the endpoint and so some steps of the method may not occur or may occur in a different order as there may be no response message available to determine the initial outbound route. It is also noted that some steps of the method may be performed in a different order than shown. For example step may occur before step depending on network latency and other factors.

Referring to in another embodiment the endpoints and the two NAT devices and and the stateless reflector of are illustrated with a tunneling server or other access device and another endpoint . The tunneling server may provide access to other endpoints for an endpoint that does not have UDP access or access to another expected protocol. For example if the endpoint performs a STUN request and the request fails the network within which the endpoint is positioned may not support UDP e.g. the network may be an Enterprise network that has disabled UDP . For purposes of illustration the endpoints and are in a private network and not separated by the NAT device and the endpoint is separated from the endpoint by the NAT devices and .

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of to establish a connection between the endpoints and . As with the previous discussion of the endpoints and may each maintain a table although this is not shown in the present example.

In step the endpoint sends a STUN request that fails. Based on the failure of the STUN request the endpoint determines that the network e.g. the NAT device has disabled UDP. It is understood that other indicators may be used to determine that UDP is not available. In step based on the unavailability of UDP the endpoint opens a TCP IP connection i.e. a tunnel with the tunneling server . This connection may use a port such as port of the NAT device which is the default TCP port for HTTP Secure HTTPS connections using the Transport Layer Security TLS or Secure Socket Layer SSL protocols. However it is understood that port is only an example and that other available ports may be used. In step the endpoint requests a shadow IP address and shadow port on the tunneling server . In step the tunneling server creates the shadow IP address and port and returns this information to the endpoint in step .

The shadow IP address and shadow port serve as the public address and port of the endpoint for other endpoints. In other words the shadow IP address port replace the NAT IP address port that would serve as the public contact information for the endpoint in an environment in which UDP is available to the endpoint e.g. as in . In some embodiments the shadow IP address port pairs may be placed on a shadow list as they are provisioned and the shadow list may be available to the access server and or endpoints. In other embodiments the access server and or endpoints may have a list or range of IP addresses ports that are known to be shadows. In still other embodiments the knowledge of whether an IP address port is a shadow is not available to the access server and or endpoints.

In step the endpoint authenticates with the access server via the tunnel using its local IP address port and shadow address port information. In step the access server authenticates the endpoint and sends the endpoint the contact information of online buddies including corresponding private public and shadow IP address port information.

Although not shown in the endpoint sends a request to a STUN server and receives its public IP address port information as described with respect to the endpoints and in . Since the endpoint is successful with its STUN request it does not need to use the tunneling server . In steps and the endpoint authenticates with the access server and receives the private IP address port and shadow IP address port of the endpoint . As discussed above the endpoint may or may not know that the endpoint is using a shadow depending on the particular implementation of the shadow list.

In steps and the endpoints and may establish a communication session as described previously with respect to . However the communications between the two endpoints and will use the tunnel between the endpoint and the tunneling server and the corresponding shadow IP address and port for the endpoint .

In embodiments where the endpoint knows that the endpoint is using a shadow the endpoint may not send a presence message via the private route as the endpoint knows that the private route is not available. In other embodiments the endpoint may send a presence message via the private route even though the route is not available.

Communications between the endpoints and as illustrated in may follow a similar sequence of presence messages and responses as that described above with respect to . However since the endpoints and are in the same local network the private route is available and the private presence messages may reach their destinations. The endpoint may not use a relay message to try to reach the endpoint since its failed STUN request will inform the endpoint that UDP is not available. In order to use the public and relay routes the endpoint will create a tunnel with the tunneling server as described above with respect to the endpoint . The public and relay messages may still work via the respective tunnels of the endpoints and .

Referring to in another embodiment an environment is illustrated in which an endpoint e.g. the endpoint of may communicate with a device that is not an endpoint. For example the device may not contain the endpoint engine described with respect to and may be unable to login to a peer to peer network associated with the access server and or may be unable to communicate directly with the endpoint due to the lack of required endpoint functionality. In some embodiments the device may be in a restricted environment in which case it may not be possible to provide the endpoint engine to the device due to the restrictions. For example the device may be a television set top box and such boxes are generally restricted environments that are closed to applications such as are needed for endpoint functionality. In other embodiments the device may not be capable of supporting the endpoint engine . For example the device may lack sufficient memory and or processing power for the endpoint engine and or may not have a suitable communications link. For example the device may be a television that is not capable of providing the needed environment for the endpoint engine .

In the present example a third party system handles communications to and from the device . The third party system may be any type of system and need not be ordinarily configured for communications with a device such as the endpoint . For example the device may be a television or a television set top box a tablet such as those commonly used by delivery services a cellular telephone or any other device capable of interacting with a user to receive input data from the user and or send output data to the user. The device may also represent a combination of other devices such as a television and television set top box combination with the television providing display and audio output for the set top box and input occurring via a remote control or other input device. It is understood that if the device does not have an output component e.g. a screen and or speaker and or some type of input device then the third party system may provide such functionality to the device.

The third party system may be a black box from the perspective of the peer to peer network components such as the endpoint and the access server . However although the third party system may be a black box in terms of its internal operation it may provide an Application Programming Interface API that enables an exterior system to communicate with the third party system. In some embodiments the third party system may be a proprietary system in which case the API may be provided by an operator of the third party system .

As is described below in greater detail the API of the third party system enables external systems and devices e.g. the endpoint to communicate with the third party system and devices internal to the third party system such as the device . Because the API is known communications between the endpoint and the device may be converted i.e. reformatted as needed. The third party system and or components within the peer to peer network may handle such conversions. This allows the device to behave as an endpoint without actually having the endpoint functionality that is on an endpoint such as the endpoint .

To facilitate communications between the endpoint and the device a peer to peer shadow server is provided. Although the shadow server may be configured in many different ways in the present example the shadow server may include a virtualized endpoint management module VEMM . The VEMM may maintain a list of mapped endpoints that represent devices that are not themselves endpoints such as the device . The mapped endpoints may be controlled in many different ways. For example the mapped endpoints may only include devices that are registered with the VEMM . In another example the mapped devices may be any devices that are accessible via the third party system . In still another example the mapped devices may be any devices that are accessible via the third party system that meet certain criteria e.g. have defined input and output capabilities or are subscribers of a service .

Each of the mapped endpoints represents a device that is able to interact with a real endpoint e.g. the endpoint that contains the needed functionality to perform as an endpoint such as the endpoint engine via the VEMM . For each of the mapped endpoints the VEMM provides a virtual endpoint that represents the mapped endpoint in the peer to peer network. Accordingly in the present example the device is a mapped endpoint that is represented by a virtual endpoint . It is understood that in the present embodiment the device may exist without a corresponding mapped endpoint but the mapped endpoint may not exist without the device . As the device may be one of many different devices or combinations of devices as described above it will frequently be referred to as the mapped endpoint in the following examples. From an operational perspective the VEMM may deal with the mapped endpoint rather than with the device .

The shadow server may be coupled to other components of a peer to peer environment such as the access server of a reflector STUN server such as the reflector of and a tunneling server such as the tunneling server of . As these are described in detail above and or in the text as incorporated by reference they are not described further in the present example. It is understood that the shadow server has access to servers just as the endpoint has access to such servers and the shadow server may use these servers when needed e.g. to authenticate a user or to perform NAT traversal functions .

In the present example the shadow server e.g. via the VEMM is coupled to the third party system via a signaling media interface that provides a head end signaling interface for handling signaling and a media transfer interface for handling media e.g. video audio and or data . Although shown as a separate component of the environment the signaling media interface may be part of the shadow server or part of the third party system . It is understood that the signaling media interface may not be configured as shown but provides the functionality needed to handle the signaling and media traffic of an endpoint as described previously.

In some embodiments the media signaling interface may not be needed and may be bypassed for some or all communications. In this case the following embodiments may be similar except that the media signaling interface may be removed. In still other embodiments the VEMM may only instantiate the virtual endpoint and may not be part of the communications after the instantiation is complete. In this case the following embodiments may be similar except that the VEMM may be removed except for virtual endpoint instantiation.

The VEMM may handle virtual client instantiation and management and may also handle traffic to and from the mapped endpoint . In some embodiments all signaling and media traffic may pass through the VEMM to and from the signaling media interface while in other embodiments one or both of the signaling and media traffic may pass directly between the virtual endpoint and the signaling media interface without passing through the VEMM . For example signaling traffic between the virtual endpoint and the signaling media interface may pass through the VEMM while media traffic may bypass the VEMM and go directly between the virtual endpoint and the signaling media interface .

In the following examples the peer to peer network may be based on a SIP messaging model over UDP while the third party system may use an entirely different proprietary or non proprietary protocol or set of protocols that is incompatible with the SIP UDP model. For example if the device is a television and is responsive only to satellite or cable television signals provided by the third party system then the device is not compatible with messaging using the SIP UDP model. Accordingly the signaling media interface or another component of the peer to peer network and or the third party system may handle the conversions and formatting needed in order for the peer to peer network and the third party system to communicate despite the differing protocols.

Although single components of the peer to peer network are illustrated in it is understood that multiple components may be used. For example multiple shadow servers may be used for load balancing and or other purposes and so the present disclosure is not limited to the configuration shown.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of when the device logs into the peer to peer network. In the present example the endpoint is a buddy to the mapped endpoint and or the virtual endpoint and so each has already authorized communications from the other buddy as described in previous embodiments. Furthermore the endpoint has already logged into the peer to peer network and is online prior to the initial step of the message sequence or at least prior to step . It is understood that all of the communications between the VEMM and the mapped endpoint may go through the third party system although the third party system is not explicitly shown in . Accordingly the communications may be converted or otherwise manipulated as needed in order to provide output to and to receive input from the device .

In step the mapped endpoint sends a login request to the signaling interface . In step the signaling interface passes the request to the VEMM . The signaling interface may simply pass the request on to the VEMM or may reformat the request as needed. It is understood that in some embodiments the mapped endpoint may not actually be mapped until the request is received by the VEMM . For example the device may send the request and when the request is received by the VEMM the VEMM may then map the device . Alternatively the mapping may exist prior to the request and the VEMM may view the request as being received from the mapped endpoint .

In step the VEMM determines whether a virtual endpoint already exists for the mapped endpoint . For example the mapped endpoint may have lost communication and may log in after restoring communication. If the virtual endpoint has remained alive during this time the VEMM may associate the current login request with the existing virtual endpoint and not create a new endpoint. If no virtual endpoint exists as determined in step the VEMM creates the virtual endpoint assuming sufficient memory and other technical requirements are met in step and receives confirmation of its creation in step . In the present example the virtual endpoint is an instanced endpoint that exists in the memory of the server once instantiated by the VEMM .

The virtual endpoint may return a value or other indicator to the VEMM indicating that it was successfully instantiated and is ready for use. If the instantiation fails a message may be returned to the device that the virtual endpoint cannot be created. This message may indicate simply that the login failed or may provide more detailed information. The instance may be destroyed when the mapped endpoint logs off or may be maintained based on settings of the VEMM . In the present example the virtual endpoint has the same capabilities as a real endpoint and so may perform the same functions as the endpoints described in previous embodiments. It is understood however that in some embodiments the functionality of the virtual endpoint may be limited by configuration or security settings of the shadow server and or the third party system .

In steps and the VEMM may send a message to the mapped endpoint to display a login screen. For example the message from the VEMM may notify the third party system that it needs to provide a particular display to the mapped endpoint . The third party system may then provide the needed display. This may happen in environments where the device is a device such as a television where the login window may be a video overlay that appears on the television screen. The instructions may prompt the cable or satellite operator to provide the video overlay using the cable or television equipment coupled to the television and controlled by the operator. In other embodiments the VEMM may send instructions to the mapped endpoint instructing the mapped endpoint to display the login screen. Accordingly the actual display process and the particular instructions may depend on the implementation of the device and the third party system .

In steps and the mapped endpoint provides login information e.g. user name and authentication information as previously described to the VEMM . In step the VEMM provides the login information to the virtual endpoint .

In step the virtual endpoint contacts the reflector and requests the public IP address and port information of the virtual endpoint. The process of obtaining this information and possible uses for this information are described in previous embodiments and are not described in detail in the present example. It is noted that step may occur without input from mapped endpoint as this step may rely on endpoint functionality of which the mapped endpoint is unaware. In step the virtual endpoint receives the public IP address and port information from the reflector .

In step the virtual endpoint logs into the access server by providing its username password local NAT IP address and port information and public IP address and port information to the access server. If the authentication fails a message may be sent by the virtual endpoint to the mapped endpoint indicating that the login has failed. In step the access server sends the buddy list associated with the login information to the virtual endpoint as described previously. In step the virtual endpoint sends the buddy list to the VEMM .

In steps and the VEMM sends a message to the mapped endpoint via the signaling interface to display the buddy list. For example the message from the VEMM may be used by the third party system to display the buddy list based on user interface elements provided or controlled by the third party system or the mapped endpoint .

In step the virtual endpoint sends a presence message to the endpoint to inform the endpoint that the mapped endpoint is online. In the present example the message is a SIP presence message and in step the endpoint responds with a 200 OK to the virtual endpoint . Although SIP is used for purposes of example it is understood that many different types of messaging may be used and the presence message and reply may not be SIP messages. In step the virtual endpoint informs the VEMM that the endpoint is online and in steps and the VEMM sends a message to the mapped endpoint via the signaling interface to indicate that the endpoint is online. In some embodiments steps and may not occur as the endpoint is online prior to the login of the mapped endpoint and will be in the buddy list with an online status when the buddy list is returned to the mapped endpoint.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of after the mapped endpoint is logged into the peer to peer network via the virtual endpoint . In the present example the mapped endpoint and the endpoint are buddies and have already approved communications as described in previous embodiments. In the present example the mapped endpoint is to place an audio call to the endpoint .

In steps and the mapped endpoint sends a message to the VEMM via the signaling interface to place the call. In step the VEMM forwards the message with or without additional formatting to the virtual endpoint . In step the virtual endpoint places the call by sending a message to the endpoint . In the present example the message is a SIP INVITE message. In step the endpoint responds to the virtual endpoint with a 200 OK message or another type of response message depending on the messaging type used to accept the call. If the call were to be rejected by the endpoint the following steps would denote rejection rather than acceptance.

In step the virtual endpoint sends a message to the VEMM notifying the VEMM that the call has been accepted by the endpoint . The message sent by the virtual endpoint may be the 200 OK message itself or may be another message. In steps and the VEMM sends a message to the mapped endpoint via the signaling interface that the call has been accepted and this is displayed on a user interface of the mapped endpoint.

In the present example the call may then proceed with audio encapsulated data passing between the mapped endpoint and the media interface as shown by arrow audio encapsulated packets passing between the media interface and the virtual endpoint as shown by arrow and data based on the real time transport protocol RTP or another suitable protocol passing between the virtual endpoint and the endpoint as shown by arrow . In some embodiments the audio encapsulated data may be in packet format depending on the messaging system used by the third party system and the device . For example if the device is a television and the third party system is a cable television company the messaging type for arrow would be compatible with cable television and may include overlays generated by a set top box or other controller for display on the television. If the device is a cellular telephone e.g. a phone based on a network protocol such as the Global System for Mobile Communications GSM or Code Division Multiple Access CDMA or another device that uses a cellular network and the third party system is a cellular telephone provider the messaging type would be compatible with the network type and the particular device.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of after the mapped endpoint is logged into the peer to peer network. In the present example the mapped endpoint and the endpoint are buddies and have already approved communications as described in previous embodiments. In the present example the mapped endpoint is to receive an audio call placed by the endpoint .

In step the endpoint sends a SIP invite message or other message depending on the messaging type being used to the virtual endpoint . In step the virtual endpoint sends the call request to the VEMM . The call request may be the SIP message itself or may be another message indicating that a call request has been received from the endpoint . In steps and the call request is forwarded to the mapped endpoint .

In step the mapped endpoint responds to the call request by rejecting or accepting the call. In the present example the request is accepted and the acceptance is passed to the virtual endpoint via the signaling interface and VEMM in steps and . In step the virtual endpoint sends a 200 OK message to the endpoint indicating that the mapped endpoint has accepted the call.

In the present example the call may then proceed with audio encapsulated data passing between the mapped endpoint and the media interface as shown by arrow audio encapsulated packets passing between the media interface and the virtual endpoint as shown by arrow and data based on RTP or another suitable protocol passing between the virtual endpoint and the endpoint as shown by arrow .

Referring again to in another embodiment three devices and correspond to mapped endpoints and respectively. The mapped endpoints are associated with virtual endpoints and respectively. As illustrated in the mapped endpoints and may communicate with one another via their respective virtual endpoints and . This enables the devices and which are not real endpoints to communicate via the peer to peer network in a manner similar to that of the device . The connection between the virtual endpoints and may route out of and back into the shadow server as illustrated by line or may occur internally as illustrated by line . It is understood that generally only one of lines or would exist. In the environment of the virtual endpoint is also coupled to the endpoint . For example the virtual endpoint may be anchoring a conference call with the virtual endpoint and the endpoint . Accordingly a virtual endpoint may behave like a real endpoint and have many different connections to other virtual and real endpoints.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of after the mapped endpoints and are logged into the peer to peer network. In the present example the mapped endpoints and are buddies and have already approved communications as described in previous embodiments. In the present example the mapped endpoint is to place a call to the mapped endpoint .

In steps and the mapped endpoint sends a message to the VEMM via the signaling interface to place the call. In step the VEMM forwards the message with or without additional formatting to the virtual endpoint . In step the virtual endpoint places the call by sending a message to the virtual endpoint . In the present example the message is a SIP INVITE message.

In step the virtual endpoint sends the call request to the VEMM . The call request may be the SIP message itself or may be another message indicating that a call request has been received from the virtual endpoint . In steps and the call request is forwarded to the mapped endpoint .

In step the mapped endpoint responds to the call request by rejecting or accepting the call. In the present example the request is accepted and the acceptance is passed to the virtual endpoint via the signaling interface and VEMM in steps and . In step the virtual endpoint sends a 200 OK message to the virtual endpoint indicating that the mapped endpoint has accepted the call.

In step the virtual endpoint sends a message to the VEMM notifying the VEMM that the call has been accepted by the virtual endpoint . The message sent by the virtual endpoint may be the 200 OK message itself or may be another message. In steps and the VEMM sends a message to the mapped endpoint via the signaling interface that the call has been accepted and this is displayed on a user interface of the mapped endpoint.

In the present example the call may then proceed with audio encapsulated data passing between the mapped endpoint and the media interface as shown by arrow and audio encapsulated packets passing between the media interface and the virtual endpoint as shown by arrow . Similarly audio encapsulated data passes between the mapped endpoint and the media interface as shown by arrow and audio encapsulated packets pass between the media interface and the virtual endpoint as shown by arrow . Data based on RTP or another suitable protocol passes between the virtual endpoint and the virtual endpoint as shown by arrow .

Although not shown in the virtual endpoint may add the endpoint to the call as described with respect to . This enables the virtual endpoint to establish a conference call with both virtual and or real endpoints.

Accordingly described above are embodiments illustrating how one or more virtual endpoints can be provided in a peer to peer network so that devices that are not themselves endpoints can communicate as peers within the network. Each virtual endpoint may have the same capabilities as a real endpoint and so may perform the same functions described in previous embodiments. Examples of such endpoint functions are described herein and in previously incorporated U.S. Pat. No. 7 570 636 and U.S. patent application Ser. No. 12 705 925. A mapped endpoint may send messages to the virtual endpoint that are to be passed to other endpoints but the virtual endpoint generally handles all endpoint functionality. In such embodiments the mapped endpoint may be viewed as a dumb terminal from the perspective of the peer to peer network that provides a user interface but provides no actual endpoint functionality.

Referring to in another embodiment an environment is illustrated in which an endpoint e.g. the endpoint of may establish a communication session with another endpoint e.g. the endpoint of using a reverse invitation. As will be described in greater detail below the reverse invitation represented by arrow may enable the endpoint to switch an incoming call represented by arrow from a first network such as a PSTN or cellular network to a second network such as an IP network e.g. WiFi before the call is established on the first network.

In the present example each endpoint and is a mobile handset associated with a telephone number as defined in the E.164 ITU T recommendation used in networks such as the PSTN. For example the endpoint may be associated with the telephone number 214 555 1212 and the endpoint may be associated with the telephone number 972 555 1212. Each endpoint and may be accessed by other devices when its associated number is dialed. Each endpoint and is also associated with a unique Electronic Serial Number ESN or an International Mobile Equipment Identity IMEI number.

It is understood that the endpoints and represent many different devices and that mobile handsets are used for purposes of illustration only. For example an endpoint may be personal computing device with a modem card having an RJ 11 connection that can receive phone calls via TDM or a wireless card for cellular or Wi Fi based calls. In such embodiments the device may be capable of handling two communications e.g. an IP session and a PSTN call on the same line. It is understood that many different configurations are possible for a personal computing device such as having an RJ 11 and an RJ 45 connection access via a wireless router having a 3G card etc. An endpoint may also be a laptop a PDA or any other device capable of executing the endpoint functionality described herein.

Each endpoint and includes a background process and respectively that runs on the device hosting the endpoint. The background processes and provide certain functions that enable each respective endpoint and to function as an endpoint within a hybrid peer to peer network. For example when the background process launches the background process may determine whether the corresponding endpoint has connectivity to a data network such as a WiFi network a 3G or 4G data network or any other data network that enables the endpoint to send and receive data. The background process may also perform previously described functions such as authentication and presence notification.

In the present example if the access server does not already have the E.164 number and the ESN IMEI number of the endpoint the background process may also register the E.164 number and the ESN IMEI number with the access server . The access server may then store the information in the profile or elsewhere and may provide the information to other endpoints. For example if the endpoint logs on after the endpoint the endpoint may receive the E.164 number and the ESN IMEI number of the endpoint following the authentication process.

It is understood that one or both of the background processes and may be executed by their respective endpoints and at different privilege levels and or using different configurations that may in turn determine whether the background process runs automatically or must be launched by a user. For example in the mobile handset containing the endpoint the background process may run automatically when the handset is turned on or may require that the user select and launch the background process as an application.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of . Steps and are similar or identical to steps described in previous embodiments e.g. steps and of and are not described in detail in the present example. It is noted that registration of the E.164 number and the ESN IMEI number of an endpoint may occur during this time and that the received profile may include the E.164 number and the ESN IMEI number of buddy endpoints identified in the profile. In the present example the endpoints and are buddies and both endpoints are online e.g. have a visible presence to buddy endpoints .

In step the endpoint receives a series of digits e.g. 9725551212 representing an E.164 number. The endpoint identifies the E.164 number as corresponding to the endpoint and in step the endpoint initiates the call to the endpoint by dialing the E.164 number of the endpoint . Although the call may be initiated by the endpoint using many different call and or network types e.g. PSTN cellular such as GSM or CDMA or VoIP the call is a cellular call for purposes of illustration. In step the endpoint determines whether to switch to an IP network for the call instead of remaining on the network type used for the incoming call. For example the endpoint may determine whether an IP network is available or if available is suitable to support the call rather than remain on the cellular network through which the endpoint is making the call.

In the present example the endpoint determines that the call should be switched to the IP network and in step sends an invitation message to the endpoint . The invitation message is a request from the endpoint to the endpoint to establish an IP communication session. In step the endpoint accepts the request. For purposes of example the request includes a SIP INVITE message and the response includes a 200 OK message. The request may be auto accepted by the endpoint or may require acceptance by a user of the endpoint . In step assuming the request was accepted the endpoints and establish the IP communication session. The establishment of the IP communication session may occur as described in previous embodiments. For example the endpoints and may determine whether to use one or more private public or relay routes.

In steps and the non IP leg of the call that was initiated by the endpoint in step is torn down by the endpoints and respectively. It is understood that the call tear down may occur prior to or during the establishment of the IP communication session in step and that the order of steps and may be reversed or may occur simultaneously.

Accordingly the original cell call initiated by the endpoint in step may be transitioned to the IP communication session established in step . This process may occur seamlessly to the users. For example the user of the endpoint dials the desired E.164 number. The user of the endpoint does not need to establish a new call via an IP network but may set preferences to configure the behavior of the endpoint to automatically attempt to establish an IP call. The incoming E.164 may be put on hold allowed to ring or otherwise handled by the endpoint while the endpoint attempts to establish the IP communication session.

Referring to a sequence diagram illustrates one embodiment of a message sequence that may occur in the environment of . Steps and are similar or identical to steps described in previous embodiments e.g. steps and of and are not described in detail in the present example. It is noted that registration of the E.164 number and the ESN IMEI number of an endpoint may occur during this time and that the received profile may include the E.164 number and the ESN IMEI number of buddy endpoints identified in the profile. In the present example the endpoints and are buddies and both endpoints are online e.g. have a visible presence to buddy endpoints .

In step the endpoint initiates a call to the endpoint by dialing the E.164 number of the endpoint . Although the call may be initiated by the endpoint using many different call and or network types e.g. PSTN cellular VoIP the call is a cellular call for purposes of illustration. In step the endpoint determines whether to switch to an IP network for the call. For example the endpoint may determine whether an IP network is available or if available is suitable to support the call. In the present example the endpoint does not switch the call to the IP network and in step answers the call and continues the call as initiated by the endpoint .

It is noted that from the perspective of the endpoint the sequence may remain unchanged if the endpoint is not online or is not even an endpoint e.g. is a device such as a conventional telephone without endpoint capabilities or is a device that is capable of being an endpoint but is not configured as such . For example if the endpoint is a regular telephone rather than an endpoint the message sequence from the perspective of the endpoint may not change as it may still call the telephone and wait for a response. Similarly from the perspective of the endpoint the sequence may be the same if the endpoint is not online or is not an endpoint. In such embodiments step may include a decision to not establish an IP communication session as the endpoint would not see an available endpoint with which to establish the IP communication session.

Referring to a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of establishes a connection with the endpoint as described with respect to above. At the beginning of the method the endpoint is active and has logged into a peer to peer network as previously described.

In step the endpoint receives a plurality of digits as input. Additional input such as a call or talk indicator may also be received to initiate a call. Accordingly in step the endpoint initiates a call to the destination identified by the digits. It is understood that the destination may be an endpoint such as the endpoint or a conventional device such as a telephone. If the destination is an endpoint the endpoint may have additional information regarding the endpoint and may have preferences configured to control the behavior of the endpoint with respect to the endpoint . In the present example the call is a cellular call but it is understood that that the call may be made over many different types of networks.

In step the endpoint determines whether a request has been received from the destination for an IP communication session. For example the endpoint may receive a message over one or more of the private public and relay routes previously described. This may occur prior to the call of step being answered by the destination. If no IP session request has been received the method continues to step where the call initiated in step continues. For example the endpoint may wait for the destination to answer the call normally the call may ring until the endpoint hangs up or the call may be routed to voicemail.

If an IP session request is received as determined by step the method moves to step . In step a determination may be made as to whether the IP session request is accepted by the endpoint . For example the endpoint may be online as seen by the endpoint but may have a slower connection than is needed or desired for an IP communication session with the endpoint may be on a data plan that will occur undesirable costs or may not want to establish an IP connection for other reasons. Accordingly even though the endpoint is online and may receive the IP communication session request the endpoint may reject the request. If the endpoint rejects the request the method continues to step where the call initiated in step continues. Although not shown the endpoint may send a message to the endpoint rejecting the request. In some embodiments the endpoint may be configured to automatically accept the request.

If the endpoint accepts the request as determined in step the method continues to step . In step a determination is made as to whether the endpoint is a buddy of the endpoint . If the endpoint is a buddy of the endpoint the request received in step may be a regular message for the IP communication session and the method continues to step . If the endpoint is not a buddy of the endpoint as determined by step the method continues to step .

In the present example a determination is made in step as to whether a temporary buddy request received from the endpoint is to be approved or denied. Approval may happen automatically if the endpoint is so configured. For example the endpoint may be configured to automatically approve temporary buddy requests received from an endpoint that the endpoint has just dialed. If the temporary buddy request is approved the method continues to step . If the temporary buddy request is denied the method continues to step where the call initiated in step continues. It is understood that if the endpoints and are buddies and either the endpoint or the endpoint is offline then the call may continue in step as at least one of the endpoints will be unavailable for an IP session and there would be no request in step .

It is understood that steps and may be performed in a different order may be combined or particular steps may be omitted in some embodiments. For example the endpoint may be configured to ignore whether the endpoint is a buddy since the endpoint initiated the call. In another example the buddy check may be part of the initial request of step or the determination of step .

In step the IP communication session is established with the endpoint . This may include identifying one or more or more of the previously described private public and relay routes or may involve other routing. In step the call leg for the call initiated in step is torn down although this may happen earlier than shown.

Referring to a flowchart illustrates one embodiment of a method that may represent a process by which an endpoint such as the endpoint of establishes a connection with the endpoint as described with respect to above. At the beginning of the method the endpoint is active and has logged into a peer to peer network as previously described.

In step the endpoint receives an incoming call from the endpoint . The call may be any type of call but is a cellular network call for purposes of illustration. In step a determination is made as to whether the endpoint is a buddy. It is understood that the endpoint may not know whether the endpoint is even an endpoint initially as the incoming call is a normal cellular call. However the endpoint may match the originating number e.g. using caller ID against the profile downloaded from the access server and determine if the originating number corresponds to a buddy of the endpoint . If the endpoint is a buddy the method moves to step .

If the endpoint is not a buddy which may include cases where the originating number is not even an endpoint the method moves to step . In step a determination is made as to whether to send a temporary buddy request to the endpoint . If no temporary buddy request is to be sent the method continues to step where the incoming call is continued. For example the endpoint may answer the incoming call. If a temporary buddy request is to be sent the method sends the request and moves to step .

It is understood that step may not occur in some embodiments. It is also understood that this step may include determining whether the originating number is associated with an endpoint. For example the endpoint may query the access server for IP address information corresponding to an endpoint registered with the originating number if the endpoint is not a buddy. If the access server has no such number registered the endpoint may conclude that the originating number is not an endpoint. For example the originating number may be associated with a device that is capable of endpoint functionality but is not configured as an endpoint or may be a device that is not capable of being an endpoint e.g. a conventional telephone .

In step whether the method moves directly from step or from step a determination is made as to whether the endpoint is online. For example the endpoint may be a buddy but may have a status of offline. If the endpoint is not online the method continues to step where the incoming call is continued. If the endpoint is online the method continues to step . In step a determination is made as to whether to send an IP communication session request to the endpoint . For example the endpoint may determine that an IP network currently available to the endpoint is incapable of adequately supporting the IP communication session or the endpoint may be configured to not make such requests due to data plan limitations or other configuration parameters. Accordingly the endpoint may not send the request even if the endpoint is available. If no request is sent the method continues to step where the incoming call is continued.

If a request for an IP communication session is to be sent as determined in step the endpoint sends the request in step . In step a determination may be made as to whether the request has been accepted by the endpoint . If the request is not accepted the method continues to step where the incoming call is continued. If the request is accepted the IP communication session is established with the endpoint in step . This may include identifying one or more or more of the previously described private public and relay routes or may involve other routing. In step the call leg for the call initiated in step is torn down although this may happen earlier than shown.

Accordingly the endpoint may determine whether to send the reverse invitation of step based on one or more parameters that may be handled automatically by the endpoint or may be configured by a user. For example signal strength of an available IP connection time remaining on a data plan and similar parameters may be set to handle the behavior of the endpoint .

It is understood that the use of a reverse invitation may provide cost savings by offloading calls from PSTN cellular networks to IP networks in a manner that is seamless to the users of the endpoints aside from parameters that may be user defined . For example if the endpoint is in the United States and the endpoint is in England the user of the endpoint may simply dial the telephone number of the endpoint including any country regional codes. The endpoint receives the incoming call and sends the reverse invitation to switch to an IP network. The endpoints and establish the IP communication session and their users can communicate normally without having to handle the transition themselves.

Referring to a sequence diagram illustrates another embodiment of a message sequence that may occur in the environment of . In the present example the endpoint may request the switch to the IP network. In such embodiments the initial request would be sent from the endpoint to the endpoint after the call was placed. Accordingly is similar to except that step is performed by the endpoint and the arrows for steps and are reversed from their counterparts in .

Referring to in another embodiment an environment is illustrated in which an endpoint e.g. the endpoint of may establish communication sessions such as a conference call or multiple separate sessions with multiple endpoints e.g. the endpoint of and an endpoint . In the present example the endpoint calls the endpoint as illustrated by arrow and receives a reverse invitation as illustrated by arrow . This results in an IP communication session between the endpoints and rather than the initial call as illustrated by arrow . Similarly the endpoint calls the endpoint as illustrated by arrow and receives a reverse invitation as illustrated by arrow . This results in an IP communication session between the endpoints and rather than the initial call as illustrated by arrow . Accordingly the initial call request may switched from a first network such as a PSTN or cellular network to a second network such as an IP network e.g. WiFi before the call is established on the first network. The process of establishing the IP communication sessions and may be similar or identical to the message sequence of .

Referring to in another embodiment an environment is illustrated in which an endpoint e.g. the endpoint of may establish communication sessions such as a conference call or multiple separate sessions with multiple endpoints e.g. the endpoint of and an endpoint . In the present example the endpoint calls the endpoint as illustrated by arrow and receives a reverse invitation as illustrated by arrow . This results in an IP communication session between the endpoints and rather than the initial call as illustrated by arrow . However the endpoint calls the endpoint as illustrated by arrow and instead of receiving a reverse invitation receives a signal indicating that the call has been answered as illustrated by arrow . This results in a regular call e.g. a cellular or PSTN based call between the endpoints and as illustrated by arrow . Accordingly for the endpoint the initial call request may switched from a first network such as a PSTN or cellular network to a second network such as an IP network e.g. WiFi before the call is established on the first network. For the endpoint the call may stay on the first network. The process of establishing the IP communication sessions may be similar or identical to the message sequence of while the process of establishing the regular call may be similar or identical to the message sequence of .

It is understood that the reverse invitation process described herein may be used to provide various services to the endpoints and . For example the network and or protocol supporting the initial call may not provide for video data such as streaming video information. The reverse invitation may be used to seamlessly switch the call to an IP network that can support streaming video thereby not only providing cost savings in some cases but also expanding the services that may be provided. In some embodiments signaling may occur over the original call channel while data may be transferred via the reverse invitation channel.

The reverse invitation process described herein relies on presence awareness. For example the endpoint needs presence information about the endpoint before the endpoint can send the reverse invitation to the endpoint . While the preceding reverse invitation embodiments use a presence model based on direct presence notification as described for example with respect to step of other presence models may be used. For example in some embodiments the direct peer to peer communication of presence information between endpoints such as the endpoints and of may be unavailable. In such cases endpoints may not be allowed to directly communicate may be in different parts of a network or in different networks or other reasons may prevent direct presence notifications. Alternatively or additionally the endpoints may be configured to leverage existing network architectures and services to obtain presence information. An enterprise network for example may treat all devices in a similar manner and may provide presence information to all devices within the enterprise network rather than allowing some devices to directly notify others of their online status as described with respect to .

Accordingly it is understood that presence information may be obtained in many different ways including through system architectures having presence notification functions included therein. For example in one embodiment an endpoint may obtain presence information via a subscribe publish notify model as described in detail in RFC 3265 which is incorporated herein by reference in its entirety. In another example an endpoint may obtain presence information via a query model as described in detail in RFC 3680 which is incorporated herein by reference in its entirety. Although these examples use SIP as a messaging protocol it is understood that presence may be obtained using messaging other than SIP. Accordingly once presence information is obtained the reverse invitation process may occur as described above without regard for how the presence information was obtained. For example the endpoint may receive the incoming call from the endpoint and communicate with the system e.g. a PBX or other system component to determine a presence status of the endpoint . The endpoint may then continue as described previously after obtaining information that the endpoint is available or unavailable.

In some embodiments calling patterns may be used to determine where to store information. For example the endpoint may store frequently called numbers and information corresponding to those numbers in the endpoint s memory while less frequently called numbers and information corresponding to those numbers is stored elsewhere such as on the access server . This allows optimization to occur without the need for the endpoint to look up all information and also without the need to store all information on the endpoint .

Referring to one embodiment of a computer system is illustrated. The computer system is one possible example of a system component or device such as an endpoint an access server or a shadow server. The computer system may include a central processing unit CPU a memory unit an input output I O device and a network interface . The components and are interconnected by a transport system e.g. a bus . A power supply PS may provide power to components of the computer system such as the CPU and memory unit . It is understood that the computer system may be differently configured and that each of the listed components may actually represent several different components. For example the CPU may actually represent a multi processor or a distributed processing system the memory unit may include different levels of cache memory main memory hard disks and remote storage locations the I O device may include monitors keyboards and the like and the network interface may include one or more network cards providing one or more wired and or wireless connections to the packet network . Therefore a wide range of flexibility is anticipated in the configuration of the computer system .

The computer system may use any operating system or multiple operating systems including various versions of operating systems provided by Microsoft such as WINDOWS Apple such as Mac OS X UNIX and LINUX and may include operating systems specifically developed for handheld devices personal computers and servers depending on the use of the computer system . The operating system as well as other instructions e.g. for the endpoint engine of if an endpoint may be stored in the memory unit and executed by the processor . For example if the computer system is the endpoint the memory unit may include instructions for performing the methods described with respect to .

Accordingly in one embodiment a method for a reverse invitation comprises receiving by a first endpoint an inbound call from a second endpoint wherein the inbound call is received via one of a cellular network and a public switched telephone network sending by the first endpoint an invitation message to the second endpoint via an Internet Protocol IP peer to peer network in response to the inbound call wherein the invitation message requests that the second endpoint establish a peer to peer communication session with the first endpoint via the peer to peer network determining by the first endpoint whether an acknowledgement message has been received from the second endpoint in response to the invitation message and continuing by the first endpoint the inbound call with the second endpoint on the one of the cellular network and the public switched telephone network on which the inbound call was received if the acknowledgement message has not been received by the first endpoint. The method may further comprise establishing by the first endpoint the peer to peer communication session with the second endpoint if the acknowledgement message has been received by the first endpoint and releasing by the first endpoint resources of the first endpoint reserved for the inbound call on the one of the cellular network and the public switched telephone network. The method may further comprise determining by the first endpoint whether the second point is available via the peer to peer network prior to sending the invitation message to the second endpoint. The determining whether the second point is available may occur based on a presence notification sent directly between the first endpoint and the second endpoint. The determining whether the second point is available may occur by obtaining by the first endpoint presence information of the second endpoint from a system accessible to the first endpoint. The method may further comprise determining by the first endpoint whether the second endpoint is a buddy of the first endpoint prior to sending the invitation message to the second endpoint. The determining whether the second endpoint is a buddy of the first endpoint may be based on an E.164 number corresponding to the second endpoint wherein the first endpoint extracts the E.164 number of the second endpoint from the inbound call. The first endpoint may read the E.164 number in reverse order and any digits past ten may be viewed by the first endpoint as one of a country code and a region code. The determining whether the second endpoint is a buddy of the first endpoint may be based on one of an Electronic Serial Number ESN and an International Mobile Equipment Identity IMEI number corresponding to the second endpoint. The method may further comprise sending by the first endpoint a temporary buddy request to the second endpoint if the second endpoint is not a buddy of the first endpoint wherein the temporary buddy request establishes a buddy relationship between the first and second endpoints for the duration of the peer to peer communication session. The method may further comprise sending by the first endpoint a information request message to an access server of the peer to peer network if the second endpoint is not a buddy of the first endpoint and receiving by the first endpoint address information of the second endpoint from the access server. The method may further comprise determining by the first endpoint that an IP network providing access for the first endpoint for the peer to peer communication session is capable of supporting the peer to peer communication session prior to sending the invitation message. The method may further comprise formatting by the first endpoint the invitation message as a Session Initiation Protocol SIP message.

In another embodiment a method for establishing a communication session by a first endpoint comprises receiving by the first endpoint a first plurality of digits identifying a first destination device initiating by the first endpoint an outbound call to the first destination device based on the first plurality of digits wherein the outbound call is initiated via one of a cellular network and a public switched telephone network receiving by the first endpoint an invitation message from the first destination device via an Internet Protocol IP peer to peer network wherein the invitation message requests that the first endpoint establish a peer to peer communication session with the first destination device sending by the first endpoint an acknowledgement message to the first destination device in response to the invitation message establishing by the first endpoint the peer to peer communication session with the first destination device and releasing by the first endpoint resources of the first endpoint reserved for the outbound call via the one of the cellular network and the public switched telephone network. The method may further comprise determining by the first endpoint whether to accept the request for the peer to peer communication session with the first destination device. The request may be automatically accepted by the first endpoint. The method may further comprise determining by the first endpoint whether the first destination device is a second endpoint that is a buddy. The step of determining whether to accept the request for the peer to peer communication session may include determining that an IP network providing access for the first endpoint for the peer to peer communication session is capable of supporting the peer to peer communication session. The method may further comprise receiving by the first endpoint a second plurality of digits identifying a second destination device initiating by the first endpoint an outbound call to the second destination device based on the second plurality of digits wherein the outbound call is initiated via one of the cellular network and the public switched telephone network receiving by the first endpoint an indication that the second destination device has answered the outbound call and maintaining by the first endpoint the outbound call with the second destination device via the one of the cellular network and the public switched telephone network wherein the outbound call with the second destination device via the one of the cellular network and the public switched telephone network is supported by the first endpoint simultaneously with the peer to peer communication session with the first destination device. The method may further comprise coupling by the first endpoint the outbound call with the second destination device via the one of the cellular network and the public switched telephone network and the peer to peer communication session with the first destination device.

In still another embodiment an endpoint comprises a network interface configured to send and receive communications via at least first and second networks wherein the first network is one of a cellular network and a public switched telephone network and the second network is an internet protocol IP based peer to peer network a controller coupled to the network interface and a memory coupled to the controller the memory having a plurality of instructions stored thereon for execution by the controller the instructions including instructions for receiving an inbound call from a calling endpoint via the first network identifying that the calling endpoint is accessible via the second network sending an invitation message to the calling endpoint via the second network in response to the inbound call wherein the invitation message requests that the calling endpoint establish a peer to peer communication session via the second network establishing the peer to peer communication session with the calling endpoint and releasing resources reserved for the inbound call. The endpoint may further comprise instructions for determining whether an acknowledgement message has been received from the second endpoint in response to the invitation message. The endpoint may further comprise instructions for determining that the second network is capable of supporting the peer to peer communication session prior to sending the invitation message. The endpoint may be a mobile handset. The endpoint may include an E.164 number that is used by the calling endpoint to initiate the inbound call. The peer to peer communication session may be established via Session Initiation Protocol SIP signaling.

While the preceding description shows and describes one or more embodiments it will be understood by those skilled in the art that various changes in form and detail may be made therein without departing from the spirit and scope of the present disclosure. For example various steps illustrated within a particular sequence diagram or flow chart may be combined or further divided. In addition steps described in one diagram or flow chart may be incorporated into another diagram or flow chart. Furthermore the described functionality may be provided by hardware and or software and may be distributed or combined into a single platform. Additionally functionality described in a particular example may be achieved in a manner different than that illustrated but is still encompassed within the present disclosure. Therefore the claims should be interpreted in a broad manner consistent with the present disclosure.

