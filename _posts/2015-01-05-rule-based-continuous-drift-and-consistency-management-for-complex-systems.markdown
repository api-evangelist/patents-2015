---

title: Rule based continuous drift and consistency management for complex systems
abstract: Techniques are for rule-based continuous drift and consistency management for target systems. In one embodiment, a set of rules is stored in volatile or non-volatile store. The set of rules may include one or more drift rules and/or one or more consistency rules. A rule may be applied to one or more associated targets to detect drift or inconsistency. A drift rule identifies a set of one or more attributes and a source and may be applied by comparing a first configuration of the set of one or more attributes on an associated target with a second configuration of the set of one or more attributes on the source. A consistency rule may be applied to a composite target by comparing member targets that are grouped by target type. Notification data may be output if target drift or inconsistency is detected to alert a user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09378461&OS=09378461&RS=09378461
owner: Oracle International Corporation
number: 09378461
owner_city: Redwood Shores
owner_country: US
publication_date: 20150105
---
This application is related to U.S. Appln. No. 62 056 412 filed Sep. 26 2014 the entire contents of which is hereby incorporated by reference as if fully set forth herein.

The present disclosure relates to managing drift and consistency in complex systems. The disclosure relates more specifically to computer implemented techniques for maintaining and evaluating rules to detect drift or inconsistencies within a complex system.

The approaches described in this section are approaches that could be pursued but not necessarily approaches that have been previously conceived or pursued. Therefore unless otherwise indicated it should not be assumed that any of the approaches described in this section qualify as prior art merely by virtue of their inclusion in this section.

Many datacenters undergo two major types of transformations over time. First a typical datacenter experiences significant growth with an ever increasing number of software deployments. Second the software and hardware resources within the datacenter are typically improved or updated with advancements in technology or changes to the underlying deployment models. These transformations may lead to resource deployments that are siloed dispersed varied and complex. Some enterprise deployments have thousands of software applications and hardware resources. The ever increasing and divergent nature of software and hardware deployments within a datacenter may lead to significant challenges in updating and maintaining system resources.

One challenge that datacenter administrators face is maintaining optimal configurations across a large number of software and hardware resources. As resources are updated and improved over time some targets may begin to drift from business best practice guidelines or other gold standards. For example some resources may not receive recommended updates or may have updates applied that are not part of the gold standard. Resource drift may cause complex system to function incorrectly or may otherwise adversely affect system functionality and performance. Therefore administrators are tasked with minimizing and mitigating the effects of resource drift. In large datacenter environments drift may be particularly difficult for administrators to manage and contain given the number of different resources and configurations.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of the disclosure. It will be apparent however that the present invention may be practiced without these specific details. In other instances structures and devices are shown in block diagram form in order to avoid unnecessarily obscuring the present invention.

In various embodiments computer systems stored instructions and technical steps are described for rule based continuous drift and consistency management for complex systems. Various embodiments provide a flexible and customizable rule based approach and framework through which drift and or inconsistency is managed. The rules based approach provides continuous monitoring of complex systems allowing users to quickly detect and efficiently manage configuration drift and inconsistency in both small and large scale environments.

In one embodiment the rule based approach includes maintaining a set of one or more drift rules. A drift rule identifies a set of parameters for detecting drift including a set of one or more attributes to compare and a source for comparison. A drift rule is applied to an associated target by comparing a first configuration of the set of one or more attributes on the particular target to a second configuration of the one or more attributes on the source. If the first and the second configurations do not match then the associated target has drifted from the source. If the first and the second configuration match then there is no drift with respect to the rule although drift may be identified by applying other rules as described further below.

In one embodiment the rule based approach includes maintaining a set of one or more consistency rules. A consistency rule identifies a set of parameters for detecting whether a composite target is consistent including a set of one or more attributes to compare between members of the composite target that belong to a same grouping classification. The attribute configurations of members that belong to the same grouping classification are compared to determine whether the configurations of any of the members differ. If a difference is detected then the group is inconsistent. Otherwise if the configurations are the same then the groups are consistent with respect to the consistency rule although the members may be inconsistent with respect to a different consistency rule.

In one embodiment composite templates are used to specify the attributes to compare for different classifications of member targets within a composite target. The composite template may include a plurality of sub templates including a first sub template that identifies a first set of one or more attributes to compare for member targets of a first target type and a second sub template that identifies a second set of one or more attributes to compare for member target of a second target type. For a composite target that includes a first set of members of the first target type and a second set of members of the second target type configurations of the first set of one or more attributes on the first set of members may be compared per the first sub template and configurations of the second set of one or more attributes on the second set of members may be compared per the second sub template. If the configurations of the first set of attributes are different between the first set of member targets or configurations of the second set of attributes are different between second set of member targets then the composite target is not consistent. If the configurations match then the target may be consistent assuming other consistency groups that belong to the composite target if any are also consistent. The composite templates may also be used to detect drift for a composite target as described further below.

In one embodiment different rules for application to the same source target pairing may be assigned different weights for use in determining a compliance score. In another embodiment the different rules may be assigned the same weights or no weights at all. The compliance score indicates a degree by which a target has drifted become inconsistent or remained consistent. If more rules indicate consistency than inconsistency for example the compliance score may indicate a lower degree of drift. If more rules indicate inconsistency on the other hand then the compliance score may indicate a higher degree of drift.

In some embodiments notifications are sent to alert a user when configuration drift or inconsistency is detected. Timely notifications may allow the user to take corrective actions or otherwise address configuration issues before system functionality and performance is adversely affect. The notifications may include a compliance score and or other information that may be useful for the user to take corrective action.

Hosts to represent a set of one or more network hosts and generally comprise targets to and agents to . Hosts to are communicatively coupled with configuration management services and may send receive messages according to one or more communication protocols. Example communication protocols that may be implemented include without limitation the hypertext transfer protocol HTTP secure shell SSH and or other communication protocols of the internet protocol suite.

A target or target system in this context refers to a particular hardware resource software resource or some combination thereof. A target may include a host machine itself a set of one or more hardware components on the host machine and or a set of one or more software resources running on the host machine. As an example a target may be a particular software deployment such as a set of one or more database systems middleware applications operating systems virtual machine components software registered with an operating system or some other software application or set of software applications. In another example a target may comprise hardware infrastructure components such as a set of one or more network switches storage appliances routers ports processors or some other device within a network topology.

A target may comprise a number of related targets that are managed as a group. A target that is composed of a number of other related targets is hereby referred to as a composite target. A target that is part of the group that forms a composite target is hereby referred to as a child or sub target of the composite target and as a member target within the group. With reference to target is a composite target that includes member targets to . Each of member targets to are managed as part of the same group corresponding to target and are children of target . For example target may correspond to a group of related software applications such as middleware or database system software and each of member targets to may correspond to individual software applications or other sub components that are part of the target system. As another example target may correspond to a redundancy group or a cluster software group where member targets to are a series of related targets that are managed as a single composite entity. Although member targets to are depicted as residing on the same host the member targets may reside on different host machines. Each individual member target may also be managed separately in addition to being managed as part of the group corresponding to target

A member target may be a composite target with multiple children targets. For example one or more of member targets to may be a composite target composed of multiple sub targets not shown . Thus composite target may comprise a hierarchical set of member targets that may include children grandchildren and so on.

Agents to periodically or continuously send data collected from targets to and member targets to to configuration management services . The data collected by agents to may generally comprise attribute data that identifies the current configuration state of the corresponding targets. Example attribute data that may be collected may include without limitation 

Although only one target and one agent is illustrated per host the number of targets and agents per host may vary from implementation to implementation. For example multiple targets and or agents may be deployed on a single host. Furthermore in a clustered environment a single target may logically be spread across a plurality of hosts. As an example a target may comprise a cloud database with multiple sub target database nodes spanning more than one compute node with each database node running a database server having the same configuration.

Configuration management services generally comprise collection logic rule management logic rule evaluation logic and control console . Each of these logic units is configured to perform a distinct set of functions with respect to drift and consistency management. The term logic as used herein includes computer or electrical hardware component s firmware a non transitory computer readable medium that stores instructions and or combinations of these components configured to perform one or more functions or actions and or to cause one or more functions or actions from another logic method and or system. Logic may include a microprocessor controlled by executable code a discrete logic e.g ASIC an analog circuit a digital circuit a programmed logic device a memory device containing instructions that when executed perform an algorithm and so on. Logic may include one or more gates combinations of gates or other circuit components. Where multiple logic units are described it may be possible to incorporate the multiple logic units into one physical logic component. Similarly where a single logic unit is described it may be possible to distribute the single logic unit between multiple physical logic components.

Collection logic is configured to receive attribute data from agents to and to store the collected in repository . Collection logic may collect data on a continuous or periodic basis. As an example one or more of agents to may send updated attribute data to collection logic in response to detecting that configuration information has changed. As another example one or more of agents to may send configuration profiles each night or on some other periodic basis.

Rule management logic includes logic for managing drift and or consistency rules. For example rule management logic may be configured to generate and store rule data in repository associate targets to rules maintain group based associations between targets and rules and or trigger rule evaluation with respect to one or more targets. Techniques for managing drift and consistency rules are described in further detail in the sections below.

Rule evaluation logic includes logic for evaluating drift and or consistency rules. Rule evaluation logic may further be configured to generate notification data to indicate a result of a rule evaluation. The rule evaluation results and notification data may be stored in repository sent over a network displayed to a user via control console and or otherwise output. Techniques for evaluating drift and consistency rules and generating notification data are described in further detail in the sections below.

Control console provides a user interface that allows a user to monitor and administer locally or from a remote network location the drift and consistency management processes described herein. The user interface may comprise without limitation a graphical user interface GUI an application programming interface API a command line interface CLI or some other means of interacting with a user. A user in this context may include without limitation an application or a human user such as a system administrator.

Repository comprises computer data storage that stores data for configuration management services . For example repository may include without limitation a set of one or more disks memories storage appliances storage servers databases and or other non transitory volatile or non volatile storage mediums. Repository stores data that is used by configuration management services including without limitation attribute data rule data and association data .

Attribute data stores configuration attribute values collected from targets to . As an example for a target software resource attribute data may store the name version installed patches and patch sets initialization parameters software instance properties licensing information and or other values that identify the current configuration of the target resource. The stored set of configuration attributes for a given target is referred to herein as a configuration profile of the target. Attribute data may map the targets e.g. using a target identifier to their corresponding configuration profiles.

Rule data stores drift rules and or consistency rules. A drift rule in this context refers to a set of data that controls how drift is detected. A consistency rule refers to a set of data that controls how consistency is detected. Examples of drift and consistency rules are given in the sections below.

Association data stores mappings between targets and rules. For example association data may map a target identifier such as a target name or other data that uniquely identifies a respective target to one or more rule identifiers that uniquely identify a set of one or more respective rules with which the respective target is associated.

In one embodiment rule management logic maintains a set of one or more drift rules. Generally drift rule data identifies a set of one or more attributes to compare and a source with respect to which the attribute comparison is performed. The source identified by the drift rule may correspond to a particular golden target or saved configuration profile as described in further detail in the section below and represents a standard or recommended level of configuration also referred to as a gold standard . A target drifts from the source if the set of configuration attributes at the target are configured differently e.g. have different attribute values than the set of configuration attributes at the source.

The set of attributes that are identified by a particular rule may vary from implementation to implementation and between different drift rules. As an example different rules may be used to capture different standards. A first rule may be defined for a first standard that specifies a first set of attributes to compare and a first source. A second rule may then be defined for a second standard. The second rule may differ from the first rule in the following respects 

Configuration attributes that are not specified in the rule are not compared when the rule is evaluated. A configuration profile for a target may include hundreds or even thousands of different configuration attributes. Some of the configuration attributes may not be useful in the determination of whether the target has drifted from business best practice guidelines or some other standard. For example the host on which a target is installed may be expected to vary from target to target in some implementations and does not necessarily imply that there is drift. By specifying which set of attributes to compare the rule allows for a subset of pertinent configuration attributes to be captured for drift comparisons and for non relevant configuration attributes to be ignored.

In one embodiment a configuration template is used to store data that identifies a set of attributes. A configuration template is associated with a respective rule to capture a list of configuration attributes to compare for the respective rule. The configuration template may be associated with a single rule or with multiple rules. For example a particular configuration template may be created for a first rule to capture the set of attributes to compare with a first source. The particular configuration template may then be used with a second rule to compare the same set of attributes to a second source.

A composite template may be used to capture the configuration attributes for a set of one or more corresponding composite targets. A composite template in this context refers to a configuration template that is composed of a plurality of sub templates. The composite template may comprise a root template corresponding to the composite target and a plurality of sub templates with each sub template capturing configuration attributes to compare for a corresponding class of targets.

The hierarchical structure of the composite template may be based on hierarchical structure of a composite target. For a composite target that has multiple member of different target types a corresponding composite target may include sub templates for each member target type according to an embodiment. A target type in this context refers to a target classification and may also be referred to herein as a target classification . The manner in which a target is classified may vary from implementation to implementation. In one embodiment the classification is made based on a set of characteristics associated with the target. As an example a target type for a particular software resource may be classified according to a product name and release date such as an Oracle database target type. As another example a target type may be classified according to the type of a function performed by the target. Continuing with the present example HTTP servers may be associated with a first target type database a second target type middleware a third target type and so on. Other examples of target types include without limitation high availability service a database service a database machine an application service a domain discovery service and user defined target types. Each of these target types may be associated with a different sub template to capture configuration attributes for corresponding targets that match the target type. Thus HTTP servers may be associated with a first sub template capturing a first set of configuration attributes to compare for members matching this target type database systems may be associated with a different sub template capturing a different set of configuration attributes to compare and so on.

As previously indicated the source that is identified by a drift rule represents the business best practice guidelines or recommended standard level of configuration. In order to identify the source rule data stores source identification data that identifies the source for each respective rule. The source that is associated with a rule may vary from implementation to implementation and may include without limitation 

Source identification information that represents a target with a gold configuration herein referred to as the gold target may generally comprise a target identifier e.g. name path etc. for the gold target and or a configuration profile for the current configuration attribute values of the gold target. When the gold target is used as a source the current configuration state of the gold target is captured and used to detect drift. As attribute values at the gold target are changed the standard for detecting drift also changes. For example a new patch that is applied at the gold target corresponds to an update in the gold standard such that the updated gold standard includes the new patch. During drift rule evaluation a target is compared against the current state of the gold target to detect drift. If a target does not include the new patch then the target may be identified as having drifted from the source. Any of targets to may be selected and used as a gold target source.

Source identification information that represents a gold configuration saved snapshot may generally comprise a snapshot identifier e.g. name and path for a saved configuration snapshot file and or a configuration profile with the saved attribute values that are part of the configuration snapshot. The gold configuration saved snapshot differs from the gold target in that the corresponding standard may or may not represent the latest state of a gold target and does not automatically change as a gold target s attributes are updated. The gold configuration saved snapshot may be created manually by a user e.g. the user may input the attribute values through control console or may be created by saving the configuration profile from one of targets to

Source identification information that represents a baseline configuration snapshot for a target may generally comprise a snapshot identifier for a configuration snapshot file and or a configuration profile with saved attribute values that were collected from a target at a previous point in time when the target was functioning correctly. The baseline configuration snapshot allows an administrator to determine how a target has drifted with respect to the target s own baseline configuration. As an example a baseline snapshot of a target may be taken at time T. Subsequently different patches may be installed as a target evolves over days months or even years. At a later point in time T two or more patches may have been installed on the target that do not work in conjunction with each other. The target may be compared against the baseline snapshot to determine that the target has drifted from the baseline snapshot and how the target has drifted from the baseline snapshot.

In one embodiment rule evaluation logic is configured to apply drift rules to determine whether targets have drifted from a source. A target to which a rule is applied is referred to herein as a destination target . To apply a particular drift rule to a destination target rule evaluation logic compares the destination target with the rule s source as per the configuration attributes specified in the rule s configuration template. Drift is detected if any attribute value for a relevant attribute at the destination target differs from the corresponding value at the source. Relevant in this context refers to an attribute value that is specified by the rule e.g. in a configuration template and compared during rule evaluation.

For a target that has drifted rule evaluation logic may maintain data that indicates how the target has drifted from the source. In one embodiment rule evaluation logic maintains a list of differences between the target and source. For each attribute value of the target that differs from the corresponding value in the source rule evaluation logic adds an entry to the list of differences that identifies the differing attribute. Thus the list of differences may be used to determine how many and which attributes differ between a source and a target that has drifted.

In one embodiment rule evaluation logic computes a compliance score for a target when a drift rule is applied to the respective target. The compliance score may be computed and assigned to the target as follows 

If the destination target is a composite target then mapping data may be maintained that specifies which member of the source maps to which member of the destination target. The mapping may be one to one where one member target within the destination target maps to one source members or many to one where multiple member targets within the destination target map to a single source member. illustrates an example mapping between members of a composite target and members of a source golden configuration. Composite target includes member targets and which belong to target class and member targets and which belong to target class .

Drift rule includes or is otherwise associated with composite template and source . Composite template includes sub template which specifies configuration attributes to compare for member targets of target class and sub template which specifies configuration attributes to compare for member targets of target class . Source specifies golden configuration information for source members and which belong to target class and source member which belongs to target class . To determine which golden configuration information should be applied to which member target mapping data is maintained.

During rule evaluation the configuration of relevant attributes those specified in sub template on member target are compared to golden configuration information maintained for source member . Similarly the configuration of the relevant attributes on member target are compared to golden configuration information maintained for source member and the configuration of the relevant attributes on member target are compared to golden configuration information maintained for source member . Thus different standards may be maintained for different member targets. The configuration of member targets and are both compared to golden configuration information maintained for source member for the configuration attributes identified by sub template .

The compliance score for a composite target may be computed and assigned to a destination target as follows 

Configuration attributes that are not specified in a drift rule are ignored during drift evaluation. As an example a particular drift rule may be associated with a configuration template that lists installed patches as a relevant configuration attribute but does not list initialization parameters. During rule evaluation the installed patches between the destination and the source are compared but the initialization parameters are not compared. Thus if the configuration of installed patches between a source and a destination are different then the destination target has drifted and the compliance score will be less than 100 . However if the initialization parameters in the present example differ there is no effect on the compliance score since these parameters are not compared. Even if the initialization parameters differ the destination target may not have drifted if the configuration attributes listed by the configuration template are the same between the source and destination.

In one embodiment rule management logic maintains a set of one or more consistency rules. Similar to drift rules consistency rules include data that identifies what attributes to compare. However unlike drift rules consistency rules do not specify a source for comparison since consistency evaluation does not involve inter target comparisons between a golden target and a destination target. Rather consistency evaluation involves intra target comparisons where the configurations of member targets are of the same target type i.e. target classification and that are descendants e.g. children grandchildren and so on of the same root target are compared for consistency.

A consistency rule captures the attributes for comparison on a per consistency group basis. A consistency group in this context refers to a group of member targets that are checked for consistency by an associated consistency rule. As an example a root target may comprise a cluster group of database server instances and or a redundancy group of storage appliances. The cluster and redundancy group in the preceding example correspond to different consistency groups and the database server instances and storage appliances correspond to the member targets of the respective consistency groups. A root target may have one or more consistency groups.

The set of attributes that are identified by a particular consistency rule may vary between different consistency rules. For instance different rules and corresponding standards may be used for different geographic locations different lines of business or different target types. Example configuration attributes that may be captured by a consistency rules may include the same attributes listed above with respect to drift rules.

In one embodiment a consistency rule is associated with a composite template where the composite template captures the list of configuration attributes to compare for one or more consistency groups. Given that a root target has multiple member targets to compare for consistency the root target is a composite system. The composite templates described above may thus be used to determine which attributes to compare for a given consistency group. Consistency groups that belong to the same root target may have different configuration templates resulting in different configuration attributes being used to determine consistency for each group. With reference to each of sub templates to may capture a different set of configuration attributes for a respective consistency group.

In one embodiment consistency groups within a composite target correspond to different member target types. As an example a first consistency group may comprise member targets of a first type e.g. database nodes a second consistency group may comprise member targets of a second target type e.g. middleware nodes and so on.

In one embodiment each consistency group is associated with a reference target. A reference target in this context is used as a source to perform comparisons with each of the other targets in the group. When the consistency groups correspond to different member target types the reference target is specified on a per target type basis. The reference target for a group may be selected by a user or may be automatically selected by rule management logic .

In one embodiment rule evaluation logic is configured to apply consistency rules to determine whether a composite target has any inconsistencies. To apply a particular consistency rule to a destination target rule evaluation logic compares the configuration of relevant attributes as per the configuration attributes specified in the corresponding sub template within the rule on the reference target with the configuration of the relevant attributes on members that belong to the same consistency group. This process may be repeated for each consistency group within the composite target. A target is inconsistent if a relevant attribute value of the reference target differs from a corresponding value of another member of the same consistency group.

For a target that has become inconsistent rule evaluation logic may maintain data that indicates where the target has become inconsistent and to what degree the target has become inconsistent. In one embodiment rule evaluation logic maintains a list of configuration attributes that are inconsistent. When a composite target is associated to the consistency rule rule evaluation logic compares the members of the composite target of same target type as per the sub template with respect to the reference target per member target type. If any of the members configuration attributes of certain sub target type is different from other members or the reference member then a difference is registered and the configuration attribute is added to the list of inconsistent attributes.

In one embodiment rule evaluation logic computes a compliance score for a target when a consistency rule is applied to the respective target. The compliance score may be computed and assigned to the target as follows 

The compliance score for a target may take into account multiple consistency groups that belong to the same target. As an example a composite target may have the following consistency groups 

In one embodiment rule evaluation logic generates notifications upon detecting drift or inconsistencies. The notification data may generally comprise evaluation results for a drift rule and or consistency rule evaluation that alerts an administrator or other user of a detected drift or inconsistency. For example a notification may comprise the evaluation result generated in response to applying a drift or consistency rule to a target. The evaluation result may include without limitation data that identifies 

Once generated rule evaluation logic outputs the notification data to the user. The manner in which the notification data is output may vary from implementation to implementation and may include without limitation sending the notification via email to a registered email address storing the notification data in repository transmitting the notification over a computer data network and or causing display of the notification data through a user interface such as control console .

In one embodiment association data maintains mappings between groups of targets and respective rules. When a rule is associated with a group of targets rule evaluation logic applies the rule across the targets that belong to the group. Target grouping allows drift and consistency standards to be defined once and applied across multiple targets. A group or policy group in this context differs from the consistency groups discussed above in that that targets of a policy group may include targets that do not belong to the same composite target.

The targets may be grouped into policy groups according to one or more grouping criteria. Example grouping criteria may include without limitation target location line of business lifecycle status and or one or more other target characteristics. As an example targets that belong to a datacenter at a first geographic location may be grouped separately and associated with a different rule than targets that belong to a datacenter at a different geographic location. This grouping allows different standards to be maintained on a per location basis. As another example targets that belong to a first line of business e.g. finance may be grouped and associated with a different rule than targets that belong to a second line of business e.g. sales. As another example targets that have a first lifecycle status e.g. production targets may be grouped separately and associated with a different rule than targets that have a second lifecycle status e.g. test targets .

In one embodiment multiple rules may be associated with a particular group or target. When a group is associated with two or more drift rules each drift rule may have a different configuration template and or a different source. Similarly when a group is associated with two or more consistency rules each consistency rule may have a different configuration template. A particular group or target may be also associated with both a drift rule and a consistency rule. By allowing multiple rules to be mapped a group may be managed according to multiple policies and standards.

In one embodiment a target may be associated with multiple policy groups. For example the target may belong to a first policy group that is grouped based on geographic location and a second policy group that is grouped based on line of business or some other grouping criteria. By allowing a target to be mapped to multiple groups the target may be managed according to multiple group policies standards.

A target that is associated with multiple rules either by virtue of belonging to multiple policy groups or belonging to a group associated with multiple rules may drift or become inconsistent with respect to one associated standard without drifting or becoming inconsistent with respect to another associated standard. In other words evaluation of a first rule applied to a target may yield a compliance ratio of 100 while evaluation of a second rule may yield a compliance ratio of less than 100 . In other instances the target may be 100 compliant with a plurality of rules or non compliant with all associated rules.

In one embodiment policy groups maintain a set of rules that are associated with different member types. For example a particular policy group may include first drift rule that is associated with a first target type e.g. databases a second drift rule that is associated with a second target type e.g. middleware and so on. Rule evaluation logic then selects which rule or set of rules to apply to a target within the group based on the target type. Continuing with the previous example rule evaluation logic would apply the first drift rule to targets of the first target type and the second drift rule to targets of the second target type.

When a new target is added to or otherwise becomes part of a group the rules that are associated with a group are automatically associated with the new target. In addition rule evaluation logic automatically evaluates the new target against the drift consistency rules that are associated with the group. If the new target is inconsistent or drifts from the recommend gold standard rule evaluation logic may generate and send a notification to an administrator. When a target is removed from the group the association and evaluation results for the corresponding drift consistency rules are also removed for that target.

A target may be dynamically or manually added to a group depending on the particular implementation. Dynamic addition may be performed automatically based on the configuration profile of a target. As an example a new target may be added to a datacenter at a particular geographic location for a particular line of business. Rule management logic may analyze such properties in the configuration profile of the new target to determine with which groups the new target should be associated. Continuing with the previous example rule management logic may assign the new target to a first group of targets that share the same geographic location and a second group of targets that share the same line of business. Rule evaluation logic may then apply the associated rules for these groups to the new target.

Configuration management services may provide continuous drift monitoring with respect to targets to . When a configuration attribute is modified for a target or a drift rule source rule management logic triggers rule re evaluation for an associated rule if any of the configuration attributes specified in the modified configuration attribute is specified in the rule s configuration template. If the result of the comparison is different from the previous rule evaluation then the compliance score is recomputed and a notification is sent with the difference report. The difference report may identify the configuration attribute that has drifted and a previous value of the attribute in the target and or source.

In addition or alternatively configuration management services may provide continuous consistency monitoring with respect to targets to . When a configuration attribute of a member target is modified that matches a configuration attribute as per any sub template inside the composite template the member target is compared with the corresponding reference target within the composite target and if the number of configuration differences changes then the compliance score is modified. If compliance score is 

In one embodiment rule target associations are used to determine which targets to apply a rule to in response to detecting a change. The following scenarios may trigger application of a rule to one or more targets that are associated with a respective rule 

In response to detecting the change at block rule management logic identifies and reads a set of one or more rules to evaluate based on the change. The set of rules identified at this step comprise rules that are associated with the target or source that had the attribute changed and that include the changed attribute in the configuration template. For example if an initialization parameter was changed on a target then rule management logic may search for all drift and or consistency rules that are mapped to the target or group to which the target belongs and that include the initialization parameter as a configuration attribute. If the changed attribute is not included in any rules associated with the target then the process may end without execution of the following steps.

At block rule evaluation logic evaluates the set of one or more rules to determine whether any drift or inconsistency has resulted from the attribute change. Rule evaluation logic may determine a compliance percentage and which attributes if any have drifted or become inconsistent as described above.

At block rule evaluation logic outputs one or more sets of evaluation results generated based on the rule evaluation at block . As previously indicate outputting the set of evaluation results may comprise sending a notification to an administrator storing the result set in repository and so on.

In one embodiment rule management logic allows users to create edit and or otherwise customize drift rules. For example the user may define and modify the set of configuration attributes source and member target to source member mappings for a drift rule. Similarly the user may define and modify the set of configuration attributes and reference target s for a consistency rule. By allowing users to create and modify drift rules configuration management services provide a flexible and editable platform through which the user may manage drift and inconsistency with respect to targets to . The platform further allows the user to efficiently define and customize standards via the rules and to monitor targets to with respect to those standards.

At block rule management logic receives from the user association data for the new rule. The association data indicates to which target or group of targets the rule is mapped and should be applied. The rule may be mapped to a single target a group of targets or multiple groups of targets.

At block rule management logic stores the new rule including the received parameter values and the association data in repository . Rule evaluation logic may then apply the rule to the associated target s or group s to determine whether the associated target s are drifted from a gold standard or are inconsistent.

After a rule has been stored at block a user may subsequently edit the parameters within the rule. For example the user may add or remove configuration attributes from the configuration profile change the source reference target or modify the targets or groups with which the rule is associated. In response to a rule modification rule evaluation logic may reapply the updated rule to the associated targets.

According to one embodiment the techniques described herein are implemented by one or more special purpose computing devices. The special purpose computing devices may be hard wired to perform the techniques or may include digital electronic devices such as one or more application specific integrated circuits ASICs or field programmable gate arrays FPGAs that are persistently programmed to perform the techniques or may include one or more general purpose hardware processors programmed to perform the techniques pursuant to program instructions in firmware memory other storage or a combination. Such special purpose computing devices may also combine custom hard wired logic ASICs or FPGAs with custom programming to accomplish the techniques. The special purpose computing devices may be desktop computer systems portable computer systems handheld devices networking devices or any other device that incorporates hard wired and or program logic to implement the techniques.

For example is a block diagram that illustrates a computer system upon which an embodiment of the invention may be implemented. Computer system includes a bus or other communication mechanism for communicating information and a hardware processor coupled with bus for processing information. Hardware processor may be for example a general purpose microprocessor.

Computer system also includes a main memory such as a random access memory RAM or other dynamic storage device coupled to bus for storing information and instructions to be executed by processor . Main memory also may be used for storing temporary variables or other intermediate information during execution of instructions to be executed by processor . Such instructions when stored in non transitory storage media accessible to processor render computer system into a special purpose machine that is customized to perform the operations specified in the instructions.

Computer system further includes a read only memory ROM or other static storage device coupled to bus for storing static information and instructions for processor . A storage device such as a magnetic disk optical disk or solid state drive is provided and coupled to bus for storing information and instructions.

Computer system may be coupled via bus to a display such as a liquid crystal display LCD or a light emitting diode LED display for displaying information to a computer user. An input device including alphanumeric and other keys is coupled to bus for communicating information and command selections to processor . Another type of user input device is cursor control such as a mouse a trackball or cursor direction keys for communicating direction information and command selections to processor and for controlling cursor movement on display . This input device typically has two degrees of freedom in two axes a first axis e.g. x and a second axis e.g. y that allows the device to specify positions in a plane.

Computer system may implement the techniques described herein using customized hard wired logic one or more ASICs or FPGAs firmware and or program logic which in combination with the computer system causes or programs computer system to be a special purpose machine. According to one embodiment the techniques herein are performed by computer system in response to processor executing one or more sequences of one or more instructions contained in main memory . Such instructions may be read into main memory from another storage medium such as storage device . Execution of the sequences of instructions contained in main memory causes processor to perform the process steps described herein. In alternative embodiments hard wired circuitry may be used in place of or in combination with software instructions.

The term storage media as used herein refers to any non transitory media that store data and or instructions that cause a machine to operate in a specific fashion. Such storage media may comprise non volatile media and or volatile media. Non volatile media includes for example optical disks or magnetic disks such as storage device . Volatile media includes dynamic memory such as main memory . Common forms of storage media include for example a floppy disk a flexible disk hard disk solid state drive magnetic tape or any other magnetic data storage medium a CD ROM any other optical data storage medium any physical medium with patterns of holes a RAM a PROM and EPROM a FLASH EPROM NVRAM any other memory chip or cartridge.

Storage media is distinct from but may be used in conjunction with transmission media. Transmission media participates in transferring information between storage media. For example transmission media includes coaxial cables copper wire and fiber optics including the wires that comprise bus . Transmission media can also take the form of acoustic or light waves such as those generated during radio wave and infra red data communications.

Various forms of media may be involved in carrying one or more sequences of one or more instructions to processor for execution. For example the instructions may initially be carried on a magnetic disk or solid state drive of a remote computer. The remote computer can load the instructions into its dynamic memory and send the instructions over a telephone line using a modem. A modem local to computer system can receive the data on the telephone line and use an infra red transmitter to convert the data to an infra red signal. An infra red detector can receive the data carried in the infra red signal and appropriate circuitry can place the data on bus . Bus carries the data to main memory from which processor retrieves and executes the instructions. The instructions received by main memory may optionally be stored on storage device either before or after execution by processor .

Computer system also includes a communication interface coupled to bus . Communication interface provides a two way data communication coupling to a network link that is connected to a local network . For example communication interface may be an integrated services digital network ISDN card cable modem satellite modem or a modem to provide a data communication connection to a corresponding type of telephone line. As another example communication interface may be a local area network LAN card to provide a data communication connection to a compatible LAN. Wireless links may also be implemented. In any such implementation communication interface sends and receives electrical electromagnetic or optical signals that carry digital data streams representing various types of information.

Network link typically provides data communication through one or more networks to other data devices. For example network link may provide a connection through local network to a host computer or to data equipment operated by an Internet Service Provider ISP . ISP in turn provides data communication services through the world wide packet data communication network now commonly referred to as the Internet . Local network and Internet both use electrical electromagnetic or optical signals that carry digital data streams. The signals through the various networks and the signals on network link and through communication interface which carry the digital data to and from computer system are example forms of transmission media.

Computer system can send messages and receive data including program code through the network s network link and communication interface . In the Internet example a server might transmit a requested code for an application program through Internet ISP local network and communication interface .

The received code may be executed by processor as it is received and or stored in storage device or other non volatile storage for later execution.

The techniques described herein are implemented using one or more processing solutions examples of which include distributed systems clustered computing systems and cloud computing systems. In an embodiment configuration management services are part of a cloud computing system. A cloud computing system implements one or more of cloud storage cloud processing cloud communication and any other kind of cloud computing service. Further cloud computing systems may operate under a pay for what you use as you use it model under a fixed subscription model etc. In this embodiment any part or the whole of the functionality attributed to system or to other entities within this description is controllable via an interface that is exposed at a cloud computing system.

In the foregoing specification embodiments of the invention have been described with reference to numerous specific details that may vary from implementation to implementation. The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. The sole and exclusive indicator of the scope of the invention and what is intended by the applicants to be the scope of the invention is the literal and equivalent scope of the set of claims that issue from this application in the specific form in which such claims issue including any subsequent correction.

