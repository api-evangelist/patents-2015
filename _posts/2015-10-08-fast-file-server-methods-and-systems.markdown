---

title: Fast file server methods and systems
abstract: The invention provides, in one aspect, an improved system for data access comprising a file server that is coupled to a client device or application executing thereon via one or more networks. The server comprises static storage that is organized in one or more directories, each containing, zero, one or more files. The server also comprises a file system operable, in cooperation with a file system on the client device, to provide authorized applications executing on the client device access to those directories and/or files. Fast file server (FFS) software or other functionality executing on or in connection with the server responds to requests received from the client by transferring requested data to the client device over multiple network pathways. That data can comprise, for example, directory trees, files (or portions thereof), and so forth.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09531789&OS=09531789&RS=09531789
owner: PME IP PTY LTD
number: 09531789
owner_city: Richmond
owner_country: AU
publication_date: 20151008
---
This application is a continuation of U.S. application Ser. No. 14 279 755 filed May 16 2014 which issued Oct. 20 2015 as U.S. Pat. No. 9 167 027 which is a continuation of U.S. application Ser. No. 13 755 366 filed Jan. 31 2013 which issued Jul. 8 2014 as U.S. Pat. No. 8 775 510 which is a continuation of U.S. application Ser. No. 11 845 511 filed Aug. 27 2007 which issued Mar. 5 2013 as U.S. Pat. No. 8 392 529 the teachings of which are explicitly incorporated herein by reference in their entireties.

The invention pertains to digital data processing and more particularly to methods and apparatus for accessing and or delivering data in a client server environment. The invention has application in improving file and data access over local area networks the Internet and other networks.

Traditional file servers or network attached storage NAS devices support access requests received from networked client devices e.g. PCs workstations and the like using network file system capabilities built in to the server operating system which may be for example Linux or Microsoft Windows Server. Typically these file systems e.g. SMB CIFS allow the clients to access files and directories maintained on the server as if they were local to the requesting clients themselves albeit the transfers take place via the network and as a result are traditionally much slower.

Thus for example file transfers from a NAS to a client device may be as slow as 10 50 Mbyte s even if Gigabit Ethernet which has a theoretical peak bandwidth of about 110 Mbyte s is used as the network. The discrepancy is more pronounced when actual transfer speeds of 10 50 Mbyte s are measured against the read performance delivered by fast RAID systems of the type often attached to high performance file servers. Those RAID systems are capable of delivering at rates of 200 300 MByte s or even higher for sufficiently large sequential reads.

Data input output I O performance is a critical component in data intensive applications such as by way of non limiting example signal processing applications visualization applications and the like.

An object of the invention is to provide improved methods and systems for digital data processing and more particularly by way of non limiting example for accessing and or delivering data in a client server environment.

A related object of the invention is to provide such methods and systems as improve the speed of data transfer between file servers and client devices.

A still further related object of the invention is to provide such methods and systems as reduce the gap between high RAID performance and the performance usable at the application level e.g. when a network is disposed in between.

The foregoing are among the objects attained by the invention which provides in one aspect an improved system for data access comprising a file server that is coupled to a client device via one or more networks. The server comprises static storage that is organized in one or more directories each containing zero one or more files. The server also comprises a file system operable in cooperation with a file system on the client device to provide authorized applications executing on the client device access to those directories and or files. Fast file server FFS software or other functionality executing on or in connection with the server responds to requests received from the client device or an application executing thereon collectively client by transferring requested data to the client in parallel over multiple network pathways. That data can comprise for example directory trees files or portions thereof and so forth.

Related aspects of the invention provide systems as described above in which the server stores a configuration file that is accessible by authorized clients e.g. authorized applications executing on the client device and that identifies one or more network interfaces over which the requested data can be transferred. Further related aspects of the invention provide systems as described above in which the configuration file additionally contains one or more security keys that can be used by the client and the server in connection with a requested data transfer.

Yet still further related aspects of the invention provide systems as described above in which the file system of the server controls access to the configuration file by the client. Such control can be based for example on access permissions associated with the configuration file and with the executing application.

Still further aspects of the invention provide systems as described above in which the client e.g. an application executing on the client device requests access to the configuration file and if successful generates a request for further data on the server. According to related aspects of the invention the application generates such a request along with one or more of the security keys provided in the configuration file. In further related aspects of the invention the application generates such a request on one or more network interfaces identified in that file. As noted above the further data that is the subject of such a request can comprise for example directory trees files or portions thereof and so forth.

Further aspects of the invention provide systems as described above in which the FFS functionality executing on or in connection with the server listens for requests on network interfaces identified in the configuration file. According to further related aspects of the invention it listens only on those network interfaces that are connected to physically independent networks. Still further related aspects of the invention provide systems as described above in which the FFS functionality uses security keys provided with requests to validate those requests.

According to still further aspects of the invention the FFS functionality responds to requests received from the client device by transferring requested data with the client via the multiple network connections over which those requests were received.

Further aspects of the invention provide systems as described above in which the server is coupled to multiple client devices via one or more networks. In such systems the server responds to requests received from each client device by transferring requested data to that client device over multiple network pathways. According to related aspects of the invention the configuration file specifies a different subset of network interfaces for each client e.g. each client device and or application executing thereon .

Still other aspects of the invention provide methods for transferring data between a server and one or more client devices paralleling the foregoing.

These and other aspects of the invention are evident in the drawings and in the description that follows.

Server may comprise a conventional file server and or network attached storage NAS collectively server or file server of the type conventionally known in the art as adapted in accord with the teachings hereof. Although only one server is shown in the drawing it will be appreciated that the invention can be practiced with more such servers.

The server includes static storage that maintains user application enterprise or other data organized in the conventional manner known in the art here in one or more directories each containing zero one or more files. In other embodiments such data may be organized as serialized objects and or in other manners known in the art. Storage device typically comprises one or more disk drives as shown and preferably one or more high speed RAID devices though in other embodiments tape drives ROM RAM Flash Memory and or CD ROM devices may be used instead or in addition. Regardless such storage device s are of the type conventionally known in the art as adapted in accord with the teachings hereof.

The server also comprises a file system that forms part of and or cooperates with a native operating system . Both of these components are of the type conventionally known in the art as adapted in accord with the teachings hereof. Thus for example operating system may comprise Linux or Microsoft Windows Server both by way of non limiting example and file system may comprise NTFS EXT3 or XFS again by way of non limiting example and by be exported by the operating system using a protocol such as SMB CIFS or NFS again by way of non limiting example. By way of said export protocols the file system operates in cooperation with file systems discussed below on the client devices to provide authorized applications executing on the client device access to those directories and or files.

Server further comprises a fast file server FFS module here embodied in software executing on server but in other instantiations embodied in hardware executing in conjunction with server that responds to requests received from a client device by transferring requested data e.g. directory trees files or portions thereof and so forth with that client device over multiple networks .

Server further comprises one or more configuration files that store identities of one or more network interfaces over which the clients devices may request data transfers. In preferred embodiments the configuration file s additionally store one or more security keys that can be used to validate and or identify each requested data transfer. In the illustrated embodiment the configuration files are maintained in the conventional manner on storage unit though in other embodiments they may be stored elsewhere. The file s may be text based e.g. XML binary or otherwise.

In the illustrated embodiment file system of the server controls access to the configuration file s in the conventional manner e.g. using permissions or other access controls set so that only authorized users or applications hereinafter collectively applications executing on the client devices can access the file s .

Networks comprise local area networks LANs wide area networks WANs metropolitan area networks MANs or other networks of the type commonly known in the art supporting communications between client and server devices and including conventional infrastructure such as switches . These may be based in the Internet Protocol IP or other protocols and they may include wireless wired satellite and or other communication mechanisms of the type known in the art. The networks may of the same variety e.g. both megabit Ethernet by way of non limiting example or of mixed varieties e.g. megabit Ethernet and conventional Ethernet again by way of non limiting example . Though two such networks are shown in the illustration the invention contemplates a greater or lesser number thereof.

Client devices comprise personal computers workstations embedded processors single board computers personal digital assistants or other digital data processing device conventional in the art capable of cooperating in a client server network and of executing software here referred to as applications or software applications requiring access to storage unit . In the illustrated embodiment those devices are remotely disposed from the server and coupled for communications with it via network media operating in accord with the TCP IP protocol. In other embodiments one or more of the client devices are coupled with the sever via a combination of network media e.g. Ethernet and so forth as well as via direct wired or wireless media e.g. USB interconnect firewire interconnect Bluetooth infrared and so forth . Those applications labeled respectively executing on the respective client devices may comprise signal processing applications visualization applications and so forth. The client devices may be of the same and or mixed varieties. And though shown in the drawing coupled to server via a common set of networks may be so coupled on sets of disparate and or possibly overlapping networks.

Like server client devices comprise respective file systems that form part of and or cooperate with respective native operating system . These too are of the type conventionally known in the art as adapted in accord with the teachings hereof. Thus for example operating systems may comprise Linux or Microsoft Windows XP both by way of non limiting example and file systems may comprise SMB CIFS or NFS clients again by way of non limiting example.

In step client device mounts storage device or a volume therein as a share in Windows terminology or otherwise. This can be effected by a user of device application executing thereon and or by the operating system e.g. as part of a start up routine though for purposes of the discussion that follows mounting will be assumed to be effected by the application . Mounting proceeds in the conventional manner as mediated by the operating system file system of the client device and file system of the server. Per convention any and or all of these may prohibit mounting unless the requesting user and or application has appropriate security permissions.

Assuming mounting is successful client application requests access to configuration file on storage device . See step . In the illustrated embodiment this is for READ access to the file though other embodiments may provide for WRITE LOCK or other access to that file . Regardless processing of the request for read access proceeds in the conventional manner as mediated by the operating system file system of the client device and file system of the server. As above and per convention any and or all of these may prohibit access unless the requesting user and or client application has appropriate security permissions.

Assuming access to file is granted the client application obtains from that file identifications of network interfaces e.g. ports and security keys. The client application then generates a request for access to data e.g. a directory tree file or portion thereof using those IDs and keys. See step . In the discussion that follows this is assumed to be a request for READ access although requests for OPEN CLOSE SEEK WRITE DELETE FILE RENAME FILE MOVE FILE and so forth access are similarly handled. The commands are issued in the conventional ordering e.g. READ WRITE OR CLOSE following OPEN and can specify a previously opened file or a file name.

Although in some embodiments the access request of step can be made via the respective file systems in the illustrated embodiment that request is made directly by client application to the FFS module of the server . To this end the protocol for communications between the client application and FFS module can be simpler and or more specialized than traditional file system access requests thereby facilitating higher performance than standard network file systems. Moreover that protocol can be implemented on top of physical or logical network layers which are not supported in a straight forward way by standard network file systems. An example is DAPL on Infiniband networks.

The request specifies the data structure e.g. directory tree file etc. to be accessed as well as the security keys identified in the configuration file for identifying and validating the request. In the illustrated embodiment the request is transferred in parallel over each network interface identified in the configuration file over which the client application specifies access to occur though in other embodiments the request may be transmitted by remote procedure call RPC COM DCOM CORBA or otherwise and may include identifiers for each such network interface.

In step the FFS module which in the illustrated embodiment listens for requests on network interfaces identified in the configuration file validates the request received in step . This includes verifying that the security keys provided in the request are valid that the application has permission per the file system for access to the requested data e.g. directory tree and or file and that network interfaces specified for the request are available for the transfer. In some embodiments the FFS module listens for and or validates requests only for transfers on physically independent networks. In some embodiments the FFS module can implement validation independently of the file system . In other embodiments it utilizes the operating system and file system for at least some of these purposes.

Assuming the FFS module validates the request the module mediates the data transfer as between the storage device via the server s file system and the client application via the specified interfaces to networks . For example in the case of a READ operation the FFS module obtains the requested data e.g. file blocks or directory tree and transmits it to the application concurrently over the multiple network pathways specified by those interfaces. See step . Thus typically for example the FFS module transmits the requested data to the client application over two or more separate networks however it may depending on the specified interfaces send the data over two separate channels on the same network e.g. as where per channel bandwidth is rate limited . In the case of WRITE or other operations the FFS exchanges the requisite information with the client application over those interfaces and duly writes it to the storage device .

Once the FFS module has validated access to a given file directory tree and so forth the application may continue making requests e.g. successive read or write requests without further validation. This is reflected in steps .

Although the discussion focuses on responses by FFS module to requests from client application executing on device the module responds similarly to other applications on that device as well as to other applications on other devices . Thus the FFS module of the illustrated embodiment responds to requests received from each such client by transferring requested data to that client over multiple network interfaces and therefore network pathways specified in the request. These may be common sets of pathways partially overlapping sets of pathways or entirely disparate sets of pathways.

An example of an implementation of system for medical visualization is as follows. In the implementation described here the client devices are presumed to be visualization servers which process large medical image studies stored on the file server . Upon selection of a study by a user the data has to be loaded as fast as possible to minimize waiting time.

FFS module is implemented as a process e.g. a Windows service running on file server subsequently referred to as Service. Upon startup the Service writes a file configuration file into each directory tree to be exported i.e. available for access by a client device . Those directory trees are exported as standard Microsoft Windows Shares. The configuration file has read permissions which are as restrictive as the most restrictive read permissions of any of the files in that directory tree. The configuration file contains an access key randomly generated by the Service as well as IP addresses of the network interfaces of the file server and the TCP IP port on which the Service listens for incoming connections.

Each client device which has access to the Windows Share and has permission to read the configuration file can use the FFS module for fast file transfer. It connects to the network interfaces and port specified in the configuration file . It transmits the contents of the access key thereby proving that it had read permission to the configuration file . On the connection linked to each of the network interfaces the same session key is transmitted thereby associating these links with one logical connection.

A data read command is satisfied by the Service using multiple simultaneous threads and double buffering. One thread reads the data from the disk or RAID device. One thread per network interface transmits the data. Thereby effectively parallelizing disk read and concurrent data transmission on all network interfaces.

Described above are systems and methods meeting the aforesaid objects among others. It will be appreciated that the embodiments shown and described herein are merely examples of the invention and that other embodiments incorporating changes therein fall within the scope of the invention. Thus by way of non limiting example it will be appreciated that the invention can be practiced with peer to peer networks grid networks and so forth wherein the role of server is played by a set of one or more devices in such networks and the role of client is played by a set possibly overlapping of one or more other devices in the network.

