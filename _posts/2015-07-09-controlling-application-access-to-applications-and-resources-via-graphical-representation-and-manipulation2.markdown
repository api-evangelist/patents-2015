---

title: Controlling application access to applications and resources via graphical representation and manipulation
abstract: An approach is provided for controlling a first application's access of a second application of a mobile device. Attributes are assigned to a graphical element displayed by the mobile device. Manipulations of first and second icons representing first and second applications, respectively, are detected as placing the first and second icons into the graphical element. One of the assigned attributes specifying an exchange of information permitted between the first and second applications is obtained. If access control settings of the first application are automatically configurable, the access control settings are automatically configured based on the obtained attribute; otherwise, the obtained attribute is applied to the first application by utilizing resource controls of the mobile device operating system. Based on the configured access control settings or the attribute applied to the first application, an access of the second application by the first application is controlled.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09591489&OS=09591489&RS=09591489
owner: International Business Machines Corporation
number: 09591489
owner_city: Armonk
owner_country: US
publication_date: 20150709
---
The present invention relates to managing access to computer resources and more particularly to controlling application to application or resource to resource relationships which provide data and resource sharing on a computing device.

Non technical users of mobile devices and other computing devices with highly graphical interaction do not know or do not understand how to control how applications interact with other applications or resources. An app i.e. application being installed on a mobile device or other computing device may ask the user for permission to access another app or resource at the time of the first launch of the app. Unless the user knows how to change the access permissions using current techniques based on lists of access rights or text rules indicating all of the access rights of the app the app will maintain its access to the other app or resource subsequent to the first launch of the app. The non technical user often finds the current list or text rule based access permission management techniques to be confusing.

Further the user often installs an app grants permissions at the time of installation where the permissions are nested or buried under several setting options uses the app only once and then forgets about the app until space is needed to install another app. In the meantime while the app remains installed but unused the app may have been granted permission to 1 utilize cellular data which is expensive for the user 2 heavily use the central processing unit of the device thereby significantly reducing battery life or 3 access data from other apps where the user wants that data to be unavailable to the app.

Still further the user of the mobile device is typically concerned about a small subset of all of the access rights of an app installed on the device. For example a user may be concerned about the battery life of the device and therefore has concern about whether an app has access to the Global Positioning System GPS chip which causes a drain on the battery whereas the same user may not be concerned about the app accessing other hardware e.g. the Secure Digital SD card of the device. As another example a user may value privacy and thus be concerned about what type of information the device sends out to social networks. Accordingly there is a need to provide an access control representation that is easily understood by the non technical user.

In a first embodiment the present invention provides a method of controlling an access by a first application installed on a computer of a second application installed on the computer. The method includes the computer assigning attributes to a graphical element included in a graphical user interface GUI of the computer. The method further includes the computer detecting a manipulation on the GUI of a first icon representing the first application so that the first icon is moved towards and subsequently placed into the graphical element included in the GUI. The method further includes the computer detecting a manipulation on the GUI of a second icon representing a second application so that the second icon is moved towards and subsequently placed into the graphical element. The method further includes based on the first and second icons representing the first and second applications respectively having been placed into the graphical element the computer obtaining one of the assigned attributes which specifies an interaction between the first and second applications. The interaction specifies information that is permitted to be exchanged between the first and second applications based on the first and second icons having been both placed in the graphical element. The method further includes the computer determining whether access control settings of the first application are automatically configurable. The method further includes 1 if the access control settings of the first application are automatically configurable the computer automatically configuring the access control settings based on the obtained attribute specifying the interaction between the first and second applications or 2 if the access control settings of the first application are not automatically configurable the computer applying the obtained attribute to the first application by utilizing resource controls of an operating system of the computer. The method further includes based on the computer automatically configuring the access control settings or the computer applying the obtained attribute to the first application by utilizing the resource controls of the operating system the computer controlling the access of the second application by the first application.

In a second embodiment the present invention provides a computer program product including a computer readable storage device and a computer readable program code stored in the computer readable storage device. The computer readable program code includes instructions that are executed by a central processing unit CPU of a computer system to implement a method of controlling an access by a first application installed on a computer system of a second application installed on the computer system. The method includes the computer system assigning attributes to a graphical element included in a graphical user interface GUI of the computer system. The method further includes the computer system detecting a manipulation on the GUI of a first icon representing the first application so that the first icon is moved towards and subsequently placed into the graphical element included in the GUI. The method further includes the computer system detecting a manipulation on the GUI of a second icon representing a second application so that the second icon is moved towards and subsequently placed into the graphical element. The method further includes based on the first and second icons representing the first and second applications respectively having been placed into the graphical element the computer system obtaining one of the assigned attributes which specifies an interaction between the first and second applications. The interaction specifies information that is permitted to be exchanged between the first and second applications based on the first and second icons having been both placed in the graphical element. The method further includes the computer system determining whether access control settings of the first application are automatically configurable. The method further includes 1 if the access control settings of the first application are automatically configurable the computer system automatically configuring the access control settings based on the obtained attribute specifying the interaction between the first and second applications or 2 if the access control settings of the first application are not automatically configurable the computer system applying the obtained attribute to the first application by utilizing resource controls of an operating system of the computer system. The method further includes based on the computer system automatically configuring the access control settings or the computer system applying the obtained attribute to the first application by utilizing the resource controls of the operating system the computer system controlling the access of the second application by the first application.

In a third embodiment the present invention provides a computer system including a central processing unit CPU a memory coupled to the CPU and a computer readable storage device coupled to the CPU. The storage device includes instructions that are executed by the CPU via the memory to implement a method of controlling an access by a first application installed on the computer system of a second application installed on the computer system. The method includes the computer system assigning attributes to a graphical element included in a graphical user interface GUI of the computer system. The method further includes the computer system detecting a manipulation on the GUI of a first icon representing the first application so that the first icon is moved towards and subsequently placed into the graphical element included in the GUI. The method further includes the computer system detecting a manipulation on the GUI of a second icon representing a second application so that the second icon is moved towards and subsequently placed into the graphical element. The method further includes based on the first and second icons representing the first and second applications respectively having been placed into the graphical element the computer system obtaining one of the assigned attributes which specifies an interaction between the first and second applications. The interaction specifies information that is permitted to be exchanged between the first and second applications based on the first and second icons having been both placed in the graphical element. The method further includes the computer system determining whether access control settings of the first application are automatically configurable. The method further includes 1 if the access control settings of the first application are automatically configurable the computer system automatically configuring the access control settings based on the obtained attribute specifying the interaction between the first and second applications or 2 if the access control settings of the first application are not automatically configurable the computer system applying the obtained attribute to the first application by utilizing resource controls of an operating system of the computer system. The method further includes based on the computer system automatically configuring the access control settings or the computer system applying the obtained attribute to the first application by utilizing the resource controls of the operating system the computer system controlling the access of the second application by the first application.

Embodiments of the present invention simplify the control of application to application application to application data and application to resource interactions in a mobile device or other computing device by using the advanced graphical user interface GUI of the device to visually illustrate relationships between 1 applications 2 applications and application data and 3 applications and resources and allow direct graphical manipulation by GUI methods to permit or restrict interaction or access in the aforementioned relationships. The visual illustration and direct graphical manipulation by the GUI provides an approach that is more intuitive less error prone and easier to use than known list and text rule based access permission management techniques.

Embodiments of the present invention provide a GUI on a touch screen mobile device or other computing device that 1 visually illustrate relationships between applications and or between applications and resources where the resources include application data and hardware installed in the device and 2 allow direct manipulation by graphic methods to permit or restrict an application s ability to interact with the device s hardware other applications installed on the device and data managed by other applications installed on the device. In one embodiment the aforementioned graphic methods to permit or restrict an application s interaction with device s hardware other applications and application data include dragging and dropping an icon representing the application into a folder or other graphical element or a defined region on the GUI of the device. In one embodiment the folder other graphical element or defined region specify i how applications in the folder other graphical element or defined region interact with other applications in the same folder other graphical element or defined region i.e. specifying application to application relationships by inclusion om the folder other graphical element defined region ii how hardware of the device or other applications that are not included in the folder other graphical element or defined region interact with applications in the folder other graphical element or defined region i.e. specifying application to application or application to resource relationships by exclusion from the folder other graphical element or defined region or iii device resource behaviors environmental behaviors and or technical functions to which applications included in the folder other graphical element or defined region must conform. An application icon may be placed into a single folder or into multiple folders. Alternatively a single graphical element such as a single folder or a single defined region may be assigned attributes to specify a combination of i ii and iii listed above.

Attributes assigned to folder specify how any application whose graphical representation is included in folder is permitted to interact or restricted from interacting with any other application whose graphical representation is placed in folder . Attributes assigned to folder specify how any application whose graphical representation is placed in folder is permitted to interact or restricted from interacting with other applications or device resources whose graphical representations are not included in folder . Attributes assigned to folder specify how any application whose graphical representation is placed in folder is permitted to interact or restricted from interacting with device resource s or technical function s of computer or is required to conform to environmental behavior s of computer .

In other embodiments folders and are replaced by other graphical elements rendered in GUI or by respective regions or pages displayed in GUI .

GUI also includes graphical representations i.e. icons . . . N of N applications also known as apps where N is an integer greater than one. Computer includes a first software based application graphically represented by icon on GUI and a second software based application graphically represented by icon on GUI . Computer also includes a device resource i.e. a hardware based device or system installed on the computer such as a GPS device installed on a mobile device and a data repository that includes application data i.e. data managed by applications and . Device resource is one of the resources whose interaction with application may be specified based on graphical representation of application being place in folder and a graphical representation not shown of device resource not being placed in folder . Device resource may include for example one of the following components of computer a battery GPS receiver security chip SD card or a hardware component providing radio wave based communications e.g. a Near Field Communication NFC component or access to a 4G Long Term Evolution LTE network.

Access control tool detects a user utilizing graphic manipulation of one or more icons of applications e.g. icon and icon to move the icon s towards and subsequently placing the icon s in one or more of folders and . Access control tool obtains attributes assigned to folders and assigns the attributes to application based on which of the folders includes icon and assigns the attributes to application based on which of the folders includes icon . For any attribute that is not applied to an application access control tool generates and displays to a user of computer a notification about the attribute s that were not applied.

In embodiments of the present invention access control tool may be included in hardware or software security products and in other products such as identity management systems that provide resource access control.

The functionality of the components shown in is described in more detail in the discussion of and presented below.

In step access control tool see retrieves first attributes from data repository see and assigns the retrieved first attributes to folder see . The first attributes specify permitted or restricted interactions between an application whose icon is moved and placed into folder see and other application s whose icon s are moved and placed into folder see where the applications are installed on computer see .

In one or more embodiments icon see representing application see and icon see representing application see are placed into folder see and the first attributes include for example a combination of 

In other embodiments the aforementioned first attributes may include one or more other attributes not listed above. In one embodiment the first attributes include a combination of the attributes listed above.

In step access control tool see retrieves second attributes from data repository see and assigns the retrieved second attributes to folder see . The second attributes specify permitted or restricted interactions between an application whose icon is moved and placed into folder see and other application s or resource s whose icon s are not moved and placed into folder see .

In one or more embodiments icon see representing application see is placed into folder see icon see representing application see is not placed into folder see and the second attributes include for example a combination of 

In other embodiments the aforementioned second attributes may include one or more other attributes not listed above. In one embodiment the second attributes include a combination of the attributes listed above.

In one or more embodiments icon see representing application see is placed into folder see another icon not shown in representing device resource see is not placed into folder see and the second attributes include for example a combination of 

In other embodiments the aforementioned second attributes may include one or more other attributes not listed above. In one embodiment the second attributes include a combination of the attributes listed above.

In step access control tool see retrieves third attributes from data repository see and assigns the third attributes to folder see . The third attributes specify behavior s or technical function s of hardware based resource s of computer see or environmental behavior s of computer see to which an application must conform where the icon of the application is moved and placed into folder see .

In one or more embodiments icon see representing application see is placed into folder see and the third attributes include for example a combination of 

In other embodiments the third attributes may include one or more other attributes not listed above. In one embodiment the third attributes include a combination of the attributes listed above.

In step access control tool see detects a user of computer see utilizing graphic manipulation method s to move icon s of application s towards and subsequently place the icon s of the application s into respective folder s included in the group consisting of folder see folder see and folder see . The process of ends at step .

As one example the user of computer see is concerned about the battery life of computer see and therefore assigns first attributes to folder see where the first attributes specify that only those applications whose icons are moved and placed into folder see are permitted to utilize the GPS chip which in this example is device resource see . The user sets up folder see to control access to the GPS chip because usage of the GPS chip causes a significant decrease in battery life. In step the user drags and drops only icon see into folder see . Because icon see represents application see and icon see is the only icon that has been dragged and dropped into folder see only application see is permitted to utilize the GPS chip in this example. Since icon see representing application see and all other icons representing other applications not shown in installed on computer were not dragged and dropped into folder see application see and the other applications not shown in are prevented from using the GPS chip.

In one embodiment one or more gestures recognized by GUI see opens up one of the folders e.g. folder in displays an area that indicates the access permissions or restrictions i.e. rules the folder is enforcing and or displays icons that have been dragged and dropped into the folder.

In step access control tool see determines if the application is automatically configurable. If access control tool see in step determines that the application is automatically configurable then the Yes branch of step is taken and step is performed. In one embodiment access control tool see determines the application is automatically configurable by determining that the application provides an application programming interface API that allows an external entity to make changes to access control settings of the application.

In step access control tool see automatically configures the application with the attributes obtained in step for the application.

Returning to step if access control tool see determines that the application is not automatically configurable then the No branch of step is taken and step is performed.

In step access control tool see attempts to utilize resource controls of the operating system OS of computer see to apply the attributes obtained in step to the application.

Step follows step and step . In step access control tool see determines whether attempts to apply attributes to the application in step or step results in no attribute being applied to the application. If access control tool see in step determines that no attribute was applied to the application then the Yes branch of step is taken and step is performed.

In step access control tool see generates and displays a notification or a graphical element to the user of computer see where the notification or graphical element indicates that no attributes were applied to the application and access control policies were not fully applied. After step the user may manually apply the access control policies that were not fully applied to the application in step or step and subsequently access control tool see determines that that access control policies have been manually applied. In response to the determination that the policies have been manually applied access control tool see stops displaying the aforementioned notification or graphical element that had been displayed in step .

Returning to step if access control tool see determines that at least one attribute was applied to the application in step or step then the No branch of step is taken and step is performed.

In step which follows step and the No branch of step access control tool see determines whether there is a next application in application s whose placement s into respective folder s were detected in step see and which has not yet been processed in step . If access control tool see determines in step that there is a next application then the Yes branch of step is taken and the process loops back to step which processes the next application. If access control tool see determines in step that there is no other application whose placement into a corresponding folder was detected in step see and which has not yet been processed in step then the No branch of step is taken and the process of Figure ends at step .

In an alternate embodiment instead of determining in step that the application is not automatically configurable before attempting to utilize resource controls of the OS of computer see in step step is replaced with access control tool see determining whether resource controls of the OS of computer see can be used to apply the attributes to the application. If resource controls of the OS can be used to apply the attributes then access control tool see utilizes the resource controls to apply the attributes to the application otherwise access control tool see initiates automatically configuring the application with the attributes.

In step access control tool see detects an initial installation of application see onto computer see .

In step based on the initial installation being detected in step access control tool see automatically places icon see of application see into the second folder which provides a predetermined sufficient amount of restrictions against attempts by application see to access other applications application data i.e. data managed by the other applications and hardware resources of computer see while the behavior of the newly installed application see is not yet well understood by the user of computer see .

In step access control tool see monitors usage of application see or detects a lack of usage of application see and determines an amount of usage of application see over a predetermined amount of time.

In step access control tool see determines whether the amount of usage determined in step is a sufficient amount i.e. greater than a predetermined threshold amount and whether the user of computer see is indicating a want or need to permit application see to access other application s installed on computer see data managed by the other application s and or hardware based device resource s included in computer see .

If access control tool see determines in step that amount of usage is sufficient and the user indicates a want or need to permit application see to access the other application s the application data and or hardware based device resource s in computer see then the Yes branch of step is taken and step is performed otherwise the No branch of step is taken and the process continues in .

In step access control tool see automatically moves an icon see of application see from the second folder to the third folder which permits application see to increase its access to the other application s the application data and or the hardware based device resource s . After step the process of ends at step .

Returning to the No branch of step step in is performed after the No branch of step is taken. In step access control tool see determines whether the usage of application see during a predetermined amount of time after the initial installation of application see is less than a predetermined threshold amount. If access control tool see determines in step that the usage of application see during the predetermined amount of time after the initial installation is less than the threshold amount then the Yes branch of step is taken and step is performed.

In step access control tool see automatically moves icon see of application see from the second folder to the first folder which increases the restrictions on the access of application see to the other application s the application data and or the hardware based device resource s included in computer see . The movement of icon see to the first folder i.e. a more restrictive folder prevents application see from performing certain actions that have negative effects on the user data privacy or computing resources such as the CPU of computer see the batter of computer see or data networks accessed by computer see . After step the process of ends at step .

Returning to step if access control tool see determines that the usage of application see during the predetermined amount of time after the initial installation is not less than the threshold amount then the No branch of step is taken and the process of ends at step .

In a first example User C has a smartphone which is computer see . User C has three apps installed on the smartphone which interact with people a contacts app i.e. User C s address book and a SN1 app and a SN2 app where SN1 and SN2 are two online social networking sites. User C wants to allow the SN1 and SN2 apps to interact with each other to share contact information status updates etc. Utilizing GUI see User C drags and drops the icons see and see of the SN1 and SN2 apps respectively into folder see where the icons being placed in folder see allows the applications represented by the icons to interact and share data with each other. User C also wants the SN1 and SN2 apps to be allowed to use the cellular data of the smartphone to push or receive updates. In another folder i.e. folder see User C drags and drops an icon of the contacts app not shown . Folder allows applications whose icons have been placed in folder see to receive WiFi updates but does not allow those applications to use cellular data which keeps costs down for User C. User C then wants to install a new app the SN3 app where SN3 is a business oriented social networking site. User C wants to allow the SN3 app to access the contacts app and the SN1 and SN2 apps as well as allow the SN3 app to use cellular data. User C drags and drops the icon of the SN3 app into both folder see and folder see thereby creating a shortcut in both of the folders. The placement of the icon of the SN3 app in folders and see causes the SN3 app to inherit the permissions in all the folders in which its icon is placed. Therefore the SN3 app is allowed access to the people stores in the three previously installed apps and is permitted to receive WiFi updates and to use cellular data.

Viewed from the technical side in an OS of a mobile device e.g. an OS sold under the trademark ANDROID which is a registered trademark owned by Google Inc. all communications to and from an application is performed via messages which can be sent without specifying a target destination. For example an application can send a message which indicates the current GPS coordinates the contents of the address book the prescriptions in the user s current prescription list the history of when the user spoke on the phone and the phone numbers the user called or the message can turn on the camera or turn off the light that indicates the camera is on without specifying the component within the phone which will respond to the message. The OS then routes the message to a component which responds with the information or status or makes the changes in the phone. Thus an app does not need to know what other apps or resources are in the system and either an app designed with malicious intent from the beginning an app that has been hacked and into which malware has been placed or an app that will leak out information that the user does not want to be exposed can easily be installed onto a system without the user being aware of the interactions involving the app.

Known configuration screens by which a user defines that an app does or does not have access to certain resources apply to only those apps that have not been hacked or designed from the beginning to be malware whereas other apps will ignore the user supplied configuration or the subject communication will not have a corresponding configurable user control.

Thus the user needs a very simple straightforward way to represent in their mind the information access or resource access restrictions. Icons placed in folders e.g. icon see being placed in folder see is an effective way for the user to understand and apply these restrictions.

In one example the user has a game app e.g. application in installed on the user s smartphone e.g. computer see . The game app has a hidden or hacked code to make a copy of all the phone numbers that the user calls and a copy of all the text messages and to send this copied information to a malicious entity. The user places the icon see of the game app into folder see that represents no access to any smartphone related data and no communication outside of the smartphone. By placing the game app into the folder the game app could not be able to make a copy of the phone numbers called by the user and the user s text messages.

In another example a WiFi location app e.g. application see installed on computer see is supposed to notify the user of WiFi hotspots based on an inventory that can be accessed by the app. Unknown to the user the app also starts up the smartphone s radio every five minutes and profiles any WiFi it can observe including the user s home WiFi. The app then sends the profiled information to a central location where the information is stored in a database. In addition to having the user s personal WiFi characterized and listed in an unauthorized database the app runs down the battery of computer see by turning on the radio every five minutes. The user prevents the profiling of the user s personal WiFi the listing of the profiled information in the database and the battery drain by placing the icon of the app in a folder e.g. folder in that represents no access to the services of the computer see including no access to the radio of the computer see .

Memory includes a known computer readable storage medium which is described below. In one embodiment cache memory elements of memory provide temporary storage of at least some program code e.g. program code in order to reduce the number of times code must be retrieved from bulk storage while instructions of the program code are executed. Moreover similar to CPU memory may reside at a single physical location including one or more types of data storage or be distributed across a plurality of physical systems in various forms. Further memory can include data distributed across for example a local area network LAN or a wide area network WAN .

I O interface includes any system for exchanging information to or from an external source. I O devices include any known type of external device including a display device keyboard etc. Bus provides a communication link between each of the components in computer and may include any type of transmission link including electrical optical wireless etc.

I O interface also allows computer to store information e.g. data or program instructions such as program code on and retrieve the information from computer data storage unit or another computer data storage unit not shown . Computer data storage unit includes a known computer readable storage medium which is described below. In one embodiment computer data storage unit is a non volatile data storage device such as a magnetic disk drive i.e. hard disk drive or an optical disc drive e.g. a CD ROM drive which receives a CD ROM disk .

Memory and or storage unit may store computer program code that includes instructions that are executed by CPU via memory to control application access of applications and resources via graphical representation and manipulation. Although depicts memory as including program code the present invention contemplates embodiments in which memory does not include all of code simultaneously but instead at one time includes only a portion of code .

Further memory may include an operating system not shown and may include other systems not shown in .

Storage unit and or one or more other computer data storage units not shown that are coupled to computer may include any combination of data repository for attributes see and data repository for application data see .

As will be appreciated by one skilled in the art in a first embodiment the present invention may be a method in a second embodiment the present invention may be a system and in a third embodiment the present invention may be a computer program product.

Any of the components of an embodiment of the present invention can be deployed managed serviced etc. by a service provider that offers to deploy or integrate computing infrastructure with respect to controlling application access of applications and resources via graphical representation and manipulation. Thus an embodiment of the present invention discloses a process for supporting computer infrastructure where the process includes providing at least one support service for at least one of integrating hosting maintaining and deploying computer readable code e.g. program code in a computer system e.g. computer including one or more processors e.g. CPU wherein the processor s execute instructions contained in the code causing the computer system to control application access of applications and resources via graphical representation and manipulation. Another embodiment discloses a process for supporting computer infrastructure where the process includes integrating computer readable program code into a computer system including a processor. The step of integrating includes storing the program code in a computer readable storage device of the computer system through use of the processor. The program code upon being executed by the processor implements a method of controlling application access of applications and resources via graphical representation and manipulation.

While it is understood that program code for controlling application access of applications and resources via graphical representation and manipulation may be deployed by manually loading directly in client server and proxy computers not shown via loading a computer readable storage medium e.g. computer data storage unit program code may also be automatically or semi automatically deployed into computer by sending program code to a central server or a group of central servers. Program code is then downloaded into client computers e.g. computer that will execute program code . Alternatively program code is sent directly to the client computer via e mail. Program code is then either detached to a directory on the client computer or loaded into a directory on the client computer by a button on the e mail that executes a program that detaches program code into a directory. Another alternative is to send program code directly to a directory on the client computer hard drive. In a case in which there are proxy servers the process selects the proxy server code determines on which computers to place the proxy servers code transmits the proxy server code and then installs the proxy server code on the proxy computer. Program code is transmitted to the proxy server and then it is stored on the proxy server.

Another embodiment of the invention provides a method that performs the process steps on a subscription advertising and or fee basis. That is a service provider such as a Solution Integrator can offer to create maintain support etc. a process of controlling application access of applications and resources via graphical representation and manipulation. In this case the service provider can create maintain support etc. a computer infrastructure that performs the process steps for one or more customers. In return the service provider can receive payment from the customer s under a subscription and or fee agreement and or the service provider can receive payment from the sale of advertising content to one or more third parties.

The present invention may be a system a method and or a computer program product. The computer program product may include a computer readable storage medium or media memory and computer data storage unit having computer readable program instructions thereon for causing a processor e.g. CPU to carry out aspects of the present invention.

The computer readable storage medium can be a tangible device that can retain and store instructions e.g. program code for use by an instruction execution device e.g. computer . The computer readable storage medium may be for example but is not limited to an electronic storage device a magnetic storage device an optical storage device an electromagnetic storage device a semiconductor storage device or any suitable combination of the foregoing. A non exhaustive list of more specific examples of the computer readable storage medium includes the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory a static random access memory SRAM a portable compact disc read only memory CD ROM a digital versatile disk DVD a memory stick a floppy disk a mechanically encoded device such as punch cards or raised structures in a groove having instructions recorded thereon and any suitable combination of the foregoing. A computer readable storage medium as used herein is not to be construed as being transitory signals per se such as radio waves or other freely propagating electromagnetic waves electromagnetic waves propagating through a waveguide or other transmission media e.g. light pulses passing through a fiber optic cable or electrical signals transmitted through a wire.

Computer readable program instructions e.g. program code described herein can be downloaded to respective computing processing devices e.g. computer from a computer readable storage medium or to an external computer or external storage device e.g. computer data storage unit via a network not shown for example the Internet a local area network a wide area network and or a wireless network. The network may comprise copper transmission cables optical transmission fibers wireless transmission routers firewalls switches gateway computers and or edge servers. A network adapter card not shown or network interface not shown in each computing processing device receives computer readable program instructions from the network and forwards the computer readable program instructions for storage in a computer readable storage medium within the respective computing processing device.

Computer readable program instructions e.g. program code for carrying out operations of the present invention may be assembler instructions instruction set architecture ISA instructions machine instructions machine dependent instructions microcode firmware instructions state setting data or either source code or object code written in any combination of one or more programming languages including an object oriented programming language such as Smalltalk C or the like and conventional procedural programming languages such as the C programming language or similar programming languages. The computer readable program instructions may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider . In some embodiments electronic circuitry including for example programmable logic circuitry field programmable gate arrays FPGA or programmable logic arrays PLA may execute the computer readable program instructions by utilizing state information of the computer readable program instructions to personalize the electronic circuitry in order to perform aspects of the present invention.

Aspects of the present invention are described herein with reference to flowchart illustrations e.g. and and or block diagrams e.g. and of methods apparatus systems and computer program products according to embodiments of the invention. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer readable program instructions e.g. program code .

These computer readable program instructions may be provided to a processor e.g. CPU of a general purpose computer special purpose computer or other programmable data processing apparatus e.g. computer to produce a machine such that the instructions which execute via the processor of the computer or other programmable data processing apparatus create means for implementing the functions acts specified in the flowchart and or block diagram block or blocks. These computer readable program instructions may also be stored in a computer readable storage medium e.g. computer data storage unit that can direct a computer a programmable data processing apparatus and or other devices to function in a particular manner such that the computer readable storage medium having instructions stored therein comprises an article of manufacture including instructions which implement aspects of the function act specified in the flowchart and or block diagram block or blocks.

The computer readable program instructions e.g. program code may also be loaded onto a computer e.g. computer other programmable data processing apparatus or other device to cause a series of operational steps to be performed on the computer other programmable apparatus or other device to produce a computer implemented process such that the instructions which execute on the computer other programmable apparatus or other device implement the functions acts specified in the flowchart and or block diagram block or blocks.

The flowchart and block diagrams in the Figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various embodiments of the present invention. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of instructions which comprises one or more executable instructions for implementing the specified logical function s . In some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or carry out combinations of special purpose hardware and computer instructions.

While embodiments of the present invention have been described herein for purposes of illustration many modifications and changes will become apparent to those skilled in the art. Accordingly the appended claims are intended to encompass all such modifications and changes as fall within the true spirit and scope of this invention.

