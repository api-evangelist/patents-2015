---

title: Providing messages for a Java message service
abstract: Providing messages for Java message service (JMS) is disclosed. A described method includes determining timestamp information associated with a first Javaâ„¢ message service (JMS) message. The timestamp information represents a time when the JMS message is either generated or received by a processing device. The method also includes determining destination information associated with the JMS message. The method further includes converting the JMS message into a first key-value data pair having a key data and a value data. The key data includes the timestamp information and the value data includes the destination information of the first JMS message.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09454589&OS=09454589&RS=09454589
owner: Red Hat, Inc.
number: 09454589
owner_city: Raleigh
owner_country: US
publication_date: 20150918
---
This application is a divisional of U.S. patent application. Ser. No. 13 688 698 filed Nov. 29 2012 and hereby incorporated by reference.

The embodiments of the disclosure relate generally to a computer system and more specifically relate to systems and methods for providing messages for Java message service.

Messaging is a method of communication between software components or applications. A messaging system provides for the communication such that a messaging client can send messages to and receive messages from any other client. Each client connects to a messaging agent that provides facilities for creating sending receiving and reading messages.

Many messaging systems exist as part of a set of published enterprise wide standards known as Enterprise Messaging System EMS . EMS systems are a set of published enterprise wide standards that allows organizations to send messages between computer systems. An example of a specific application programming interface API that implements an EMS system is the Java message service JMS . JMS allows applications to create send receive and read messages.

The messaging systems that are created in the EMS system are very complex as the developers not only have to cope with the Enterprise standards but also create a stable scalable and low maintenance messaging system. Although JMS is an API it encounters many similar issues as those involved in setting up a full EMS.

Embodiments of the disclosure provide for systems and methods for providing messages to a Java message service JMS . A method of embodiments of the disclosure includes receiving by a Java message service JMS server executed by a processing device key value data pair. key value data pair is sent by a client. The method also includes extracting by the processing device destination information of a JMS message from the value data of the key value data pair. The destination information is either a JMS queue or a JMS topic. The method further includes storing by the processing device the key value data pair in a column family of not only structured query language NoSQL database when one of the JMS queue or the JMS topic associated with the received key value data pair exists in the column family of the NoSQL database. The column family includes a plurality of stored key value data pairs.

In one embodiment a method of the disclosure includes receiving a request to retrieve the key value data pair associated with the JMS queue from the JMS server. The request sent to the JMS server from the client. The method also includes retrieving the key value data pair associated with the JMS queue. The .the key value data pair associated with the JMS queue is retrieved from the column family of the NoSQL database.

In another embodiment a method of the disclosure includes receiving a request to subscribe to the JMS topic from the JMS server. The request is sent to the JMS server from the client. The method further includes creating a column family of the key value data pairs in the NoSQL database. The column family includes the JMS topic for the client subscribed to the JMS topic.

In a further embodiment a a second key value data pair associated with the JMS topic is received from the JMS server. In other embodiments the second key value data pair is replicated in the column family of the NoSQL database subscribing to the JMS topic.

A single client and a single JMS sever are illustrated and described for sake of clarity however embodiments of the disclosure are not limited to such a depiction. Network may be any type of communication network including but not limited to a local area network LAN a wide area network WAN e.g. the Internet or similar communications network. The network can include any number of network devices and computing devices that are in communication over any combination of wired and wireless communication lines.

In one embodiment client is a JMS client that functions to receive or generate a JMS message. In one embodiment a JMS message is an object that contains the data being transferred between JMS clients. The JMS message may include but is not limited to text message bytes message stream message object message map message and so on.

JMS server may be any type of computing device including a server device a plurality of server devices or similar computing device. The network architecture may include any number of JMS servers that communicate over the network with any number of clients . The JMS server may hosts a NoSQL driver and a NoSQL database . In some embodiments the NoSQL database may reside in a separate server machine than the JMS server machine .

In one embodiment the client executes a set of applications not shown . A set as used herein refers to any positive whole number of items including a single item. The applications may be any computer executable program capable of communicating with a server of the JMS server . In one embodiment the application is a client applicant processing interface API stub . A stub in distributed computing is a piece of code used for converting parameters passed during a Remote Procedure Call RPC . The RPC functions to allow a local computer client to remotely call procedures on a remote computer server . Client API stub functions to convert the JMS message into a key value data pair form. In some embodiments the client API stub sends the key value data pair to the JMS server as an ordinary storage request. As such the client is not aware of the fact that the JMS message is being stored as the key value data pair into the NoSQL database .

The key data of the key value data pair may include timestamp information of the JMS message. In one embodiment the key data represents the time when the JMS message was received by the client . In another embodiment the key data represents the time when the JMS message was generated by the client . In one embodiment the key value data pairs are stored in the column family of the NoSQL database based on the key data such that the JMS message with the oldest timestamp is initially stored followed by the JMS message having the timestamp immediately after the oldest timestamp until the JMS message with the newest timestamp.

The value data of the key value data pair may include destination information of the JMS message. In one embodiment the destination is a JMS queue. The JMS queue is a data construct that stages messages that have been sent and are waiting to be read. In one embodiment the JMS queue supports a one to one messaging model such as point to point messaging. In another embodiment the destination is a JMS topic. The JMS topic may be a distribution mechanism for publish subscribe messaging for publishing JMS messages to a particular message topic that are delivered to multiple subscribers.

In one embodiment the NoSQL driver functions to receive the key value data pair from the client API stub . In some embodiments the key value data pair is received as ordinary NoSQL storage request. The NoSQL driver may extract the destination information from the value data of the key value data pair. As discussed above the destination is either a JMS queue or JMS topic associated with the key value data pair.

In other embodiments the NoSQL driver searches the NoSQL database for either the JMS queue or the JMS topic associated with the received key value data pair. The NoSQL database stores a column family of plurality of key value data pairs. In some embodiments if either the JMS queue or the JMS topic associated with the received key value data pair exists in the stored plurality of the key value data pairs in the NoSQL database then the NoSQL driver stores the received key value data pair with the corresponding stored key value data pairs in the column family of the NoSQL database . As such the key value data pairs are grouped based on the destination information of either the JMS queue or the JMS topic.

In other embodiments if either of the JMS queue or the JMS topic associated with the received key value data pair does not exist in the plurality of the key value data pairs in the NoSQL database then a column family is created for the received key value data pair. In one embodiment for the JMS queue as the destination in the received key value data pair the NoSQL driver creates a column family for the JMS queue in the NoSQL database and stores the received key value data pair in the column family of the NoSQL database .

In another embodiment for the JMS topic as the destination in the received key value data pair the NoSQL driver creates a number of column families of the key value data pairs for the JMS topic in the NoSQL database . In one embodiment the NoSQL driver creates the number of column families based on number of clients as subscribers to the JMS topic. As such for each client as subscriber to the JMS topic a column family is created for the JMS topic. In further embodiment the NoSQL driver replicates the received key value data pair for each of the column families and stores the replicated key value data pairs in each of the column families. In one embodiment the column families are created when the clients subscribe to the JMS topic.

In some embodiments the client stub of the client requests to the JMS sever to retrieve key value data pair associated with the JMS queue. The client API stub functions to receive the key value data pair associated with the JMS queue from the JMS server . In one embodiment the client API stub receives the key value data pair associated with the JMS queue upon request. In some embodiments the client stub converts the retrieved key value data pair associated with the JMS queue to the JMS message associated with the JMS queue for the client . In other embodiment the client API stub subscribes via the JMS server to the JMS topic associated with a key value data pair. In some embodiments the client stub converts the retrieved key value data pair associated with the JMS topic to the JMS message associated with the JMS topic for the client .

In one embodiment the NoSQL driver receives a request from the client API stub to retrieve key value data pair associated with the JMS queue. Such key value data pair associated with JMS queue may exist in the column families of the key value data pairs in the NoSQL database . In some embodiments the NoSQL driver functions to retrieve the key value data pairs from the JMS queue stored in the NoSQL database .

In another embodiment the NoSQL driver receives a request from the client API stub to subscribe to the JMS topic associated with the key value data pair. As discussed above the JMS topic represents publish subscribe messaging for publishing JMS messages to a particular message topic that are delivered to multiple subscribers. Such key value data pair associated with JMS topic may exist in the column families of the key value data pairs in the NoSQL database . In some embodiments the NoSQL driver creates column families of the key value data pairs in the NoSQL database for the JMS topic based on the number of clients as subscribers to the JMS topic. y. As such for each client subscribed to the JMS topic a column family is created for the JMS topic.

In other embodiments a new JMS message in the form of new key value data pair is received from the client API stub . In one embodiment upon receipt of new key value data pair related to the JMS topic the NoSQL driver replicates the new key value data pair for all each of the column families subscribed to the JMS topic. In some embodiments the NoSQL driver automatically sends the replicated key value data pairs to the clients in the column families subscribed to the JMS topic.

In one embodiment the client API stub of the client converts a JMS message into a key value data pair and submits a key value data pair to the NoSQL driver of the JMS server as an ordinary storage request. As discussed above the key data of the key value data pair includes the timestamp information of the JMS message and the value data of the key value data pair is the destination information of the JMS message. In one embodiment the destination is a JMS queue of the JMS server . In another embodiment the destination is a JMS topic associated with the JMS message and maintained by the JMS server . In some embodiments the JMS message is generated by the client . In other embodiments the JMS message is received by the client .

The NoSQL driver extracts the destination information from the value data of the received key value data pair and searches the NoSQL database to determine if either a JMS queue or a JMS topic associated with the received key value data pair exists in the stored plurality of the key value data pairs in column family of the NoSQL database . The NoSQL driver stores the received key value pair with the corresponding stored key value data pairs in the column family of the NoSQL database if either the JMS queue or the JMS topic associated with the received key value data pair exists in the stored plurality of the key value data pairs in the NoSQL database . The NoSQL driver creates a column family and stores the received key value data pair in the column family if either the JMS queue or the JMS topic of the received key value data pair does not exist in the NoSQL database . In another embodiment the client API stub of the client sends a request to retrieve a key value data pair associated with the JMS queue to the NoSQL driver of the JMS server . In some embodiments the NoSQL driver searches for the key value data pair associated with the JMS queue stored in column families of the key value data pairs in the NoSQL database . The NoSQL driver retrieves the key value data pair from the JMS queue The NoSQL driver sends the retrieved key value data pair associated with the JMS queue to the client stub of the client . The client stub converts the retrieved key value data pair associated with the JMS queue to the JMS message for the client .

In one embodiment the client API stub of the client sends a request to subscribe to a JMS topic associated with the JMS messages to the NoSQL driver of the JMS server . The NoSQL driver creates a column family subscribed to the JMS topic in the NoSQL database . In some embodiments the NoSQL driver creates a column family of the key value data pairs in the NoSQL database for the JMS topic. As discussed above the column family subscribes the JMS topic for the client subscribed to the JMS topic.

In another embodiment the client API stub of the client converts a new JMS message related to the JMS topic into a new key value data pair related to the JMS topic and sends the new key value data pair related to the JMS topic to the NoSQL driver of the JMS server . The NoSQL driver replicates the new key value data pair in the column families in the NoSQL database for all the clients subscribed to the JMS topic. The NoSQL driver then retrieves the replicated key value data pair in the column family from the NoSQL database and automatically sends the replicated key value data pair to the client API stub of the client subscribed to the JMS topic. The client API stub converts the replicated key value data pair to the replicated JMS message to the clients subscribed to the JMS topic.

Method begins at block where a key value data pair is received by the NoSQL driver of the JMS server from the client . In one embodiment the JMS server receives the key value data pair as part of a ordinary storage request. As discussed above the key data of the received key value data pair may include a timestamp of the JMS message. The value data of the received key value data pair may include the destination information of the JMS message. The destination of the JMS message may include one of a JMS queue associated with the JMS message or a JMS topic associated with the message. As discussed above the JMS queue is a data structure construct that represents one to one messaging i.e. it supports point to point messaging . The JMS topic may include a distribution mechanism that represents publish subscribe messaging for publishing JMS messages to a particular message topic that are delivered to multiple subscribers. At block the NoSQL driver of the JMS server extracts the destination information from the value data of the received key value data pair.

At block the NoSQL driver searches the NoSQL database for either the JMS queue or the JMS topic associated with the received key value data pair. As discussed above the NoSQL database stores a column family including a plurality of key value data pairs. At block the NoSQL driver determines if either the JMS queue or the JMS topic associated with the received key value data pair exists in the stored plurality of the key value data pairs in the NoSQL database . If at block it is determined that one of the JMS queue or JMS topic exists then at block the NoSQL driver stores the received key value data pair with the corresponding stored key value data pairs in the column family of the NoSQL database . If at block it is determined that the neither the destination queue nor the destination topic for the received key value data pair exists then at block the NoSQL driver creates a column family in the NoSQL database for the received key value data pair. At block the NoSQL driver stores the received key value data pair in the column family of the NoSQL database .

Method begins at block where the NoSQL driver of the JMS server receives a request from a client API stub of the client to retrieve key value data pair associated with the JMS queue. At block the NoSQL driver searches the NoSQL database for the key value data pairs from the JMS queue. In one embodiment the JMS queue is associated with the column family of the same name. At block the NoSQL driver retrieves the key value data pairs from the JMS queue in the NoSQL database . At block the NoSQL driver sends the retrieved key value to the client .

Method begins at block where the NoSQL driver of the JMS server receives from a client a request to subscribe to a JMS topic. As discussed above the JMS topic represents publish subscribe messaging for publishing JMS messages to a particular message topic that are delivered to multiple subscribers. Such JMS messages may be associated with JMS topics that exist in the column families of the key value data pairs in the NoSQL database . At block the NoSQL driver creates a column family of the key value data pairs in the NoSQL database that subscribes to the JMS topic for the client subscribed to the JMS topic. As such for each subscribed to the JMS topic a column family is created for the JMS topic. At block the NoSQL driver receives a new JMS message in the form of new key value data pair associated with the JMS topic. At block the NoSQL driver replicates the new key value data pair for the column family subscribed to the JMS topic. In some embodiments a the new key value data pair is replicated for all the column families subscribed to the JMS topic At block the NoSQL driver sends the replicated key value data pair to the client of the column family subscribed to the JMS topic. In some embodiments the NoSQL driver sends the replicated key value data pair to all the clients of the column families subscribed to the JMS topic.

Method begins at block where the client API stub of the client device receives a JMS message. The client API stub may generate the JMS message itself for transmission to a JMS server . At block the client API stub of the client determines the timestamp information associated with the JMS message. At block the client API stub determines the destination information associated with the JMS message. At block the client API stub of the client converts the JMS message into a key value data pair form. As discussed above key data may include the time stamp information of the JMS message representing for example the time when the JMS message was received by the client . Also as discussed above the value data include destination information of the JMS message. In one embodiment the destination is a JMS queue of the JMS server . In other embodiment the destination is a JMS topic of the JMS server . At block the client API stub sends the key value data pair to the JMS server .

The example computer system includes a processing device a main memory e.g. read only memory ROM flash memory dynamic random access memory DRAM such as synchronous DRAM SDRAM or Rambus DRAM RDRAM etc. a static memory e.g. flash memory static random access memory SRAM etc. and a data storage device which communicate with each other via a bus .

Processing device represents one or more general purpose processing devices such as a microprocessor central processing unit or the like. More particularly the processing device may be complex instruction set computing CISC microprocessor reduced instruction set computer RISC microprocessor very long instruction word VLIW microprocessor or processor implementing other instruction sets or processors implementing a combination of instruction sets. Processing device may also be one or more special purpose processing devices such as an application specific integrated circuit ASIC a field programmable gate array FPGA a digital signal processor DSP network processor or the like. The processing device is configured to execute NoSQL processing logic including the NoSQL driver of for performing the operations and steps discussed herein.

The computer system may further include a network interface device . The computer system also may include a video display unit e.g. a liquid crystal display LCD or a cathode ray tube CRT an alphanumeric input device e.g. a keyboard a cursor control device e.g. a mouse and a signal generation device e.g. a speaker .

The data storage device may include a machine accessible storage medium or more specifically a computer readable storage medium on which is stored one or more sets of instructions e.g. NoSQL processing logic embodying any one or more of the methodologies of functions described herein e.g. NoSQL driver of . The NoSQL processing logic may also reside completely or at least partially within the main memory and or within the processing device during execution thereof by the computer system the main memory and the processing device also constituting machine accessible storage media.

The machine readable storage medium may also be used to store the NoSQL processing logic persistently. While the machine accessible storage medium is shown in an example embodiment to be a single medium the term machine accessible storage medium should be taken to include a single medium or multiple media e.g. a centralized or distributed database and or associated caches and servers that store the one or more sets of instructions. The term machine accessible storage medium shall also be taken to include any medium that is capable of storing encoding or carrying a set of instruction for execution by the machine and that cause the machine to perform any one or more of the methodologies of the present disclosure. The term machine accessible storage medium shall accordingly be taken to include but not be limited to solid state memories and optical and magnetic media.

In the following description numerous details are set forth. It is apparent however to one skilled in the art that the present disclosure may be practiced without these specific details. In some instances well known structures and devices are shown in block diagram form rather than in detail in order to avoid obscuring the present disclosure.

Some portions of the detailed descriptions which follow are presented in terms of algorithms and symbolic representations of operations on data bits within a computer memory. These algorithmic descriptions and representations are the means used by those skilled in the data processing arts to most effectively convey the substance of their work to others skilled in the art. An algorithm is here and generally conceived to be a self consistent sequence of steps leading to a desired result. The steps are those requiring physical manipulations of physical quantities. Usually though not necessarily these quantities take the form of electrical or magnetic signals capable of being stored transferred combined compared and otherwise manipulated. It has proven convenient at times principally for reasons of common usage to refer to these signals as bits values elements symbols characters terms numbers or the like.

It should be borne in mind however that all of these and similar terms are to be associated with the appropriate physical quantities and are merely convenient labels applied to these quantities. Unless specifically stated otherwise as apparent from the following discussion it is appreciated that throughout the description discussions utilizing terms such as sending receiving extracting retrieving replicating creating storing or the like refer to the action and processes of a computer system or similar electronic computing device that manipulates and transforms data represented as physical electronic quantities within the computer system s registers and memories into other data similarly represented as physical quantities within the computer system memories or registers or other such information storage transmission or display devices.

The disclosure also relates to an apparatus for performing the operations herein. This apparatus may be specially constructed for the specific purposes or it may comprise a general purpose computer selectively activated or reconfigured by a computer program stored in the computer. Such a computer program may be stored in a machine readable storage medium such as but not limited to any type of disk including floppy disks optical disks CD ROMs and magnetic optical disks read only memories ROMs random access memories RAMs EPROMs EEPROMs magnetic or optical cards or any type of media suitable for storing electronic instructions each coupled to a computer system bus.

The algorithms and displays presented herein are not inherently related to any particular computer or other apparatus. Various general purpose systems may be used with programs in accordance with the teachings herein or it may prove convenient to construct more specialized apparatus to perform the specific method steps. The structure for a variety of these systems will appear as set forth in the description below. In addition the present disclosure is not described with reference to any particular programming language. It will be appreciated that a variety of programming languages may be used to implement the teachings of the disclosure as described herein.

The disclosure may be provided as a computer program product or software that may include a machine readable medium having stored thereon instructions which may be used to program a computer system or other electronic devices to perform a process according to the present disclosure. A machine readable medium includes any mechanism for storing or transmitting information in a form readable by a machine e.g. a computer . For example a machine readable e.g. computer readable medium includes a machine e.g. a computer readable storage medium e.g. read only memory ROM random access memory RAM magnetic disk storage media optical storage media flash memory devices etc. etc.

It is to be understood that the above description is intended to be illustrative and not restrictive. Many other embodiments will be apparent to those of skill in the art upon reading and understanding the above description. Although the present disclosure has been described with reference to specific examples of the embodiments it will be recognized that the disclosure is not limited to the embodiments described but can be practiced with modification and alteration within the spirit and scope of the appended claims. Accordingly the specification and drawings are to be regarded in an illustrative sense rather than a restrictive sense. The scope of the disclosure should therefore be determined with reference to the appended claims along with the full scope of equivalents to which such claims are entitled.

