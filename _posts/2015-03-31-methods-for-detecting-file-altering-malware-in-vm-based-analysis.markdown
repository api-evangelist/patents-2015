---

title: Methods for detecting file altering malware in VM based analysis
abstract: According to one embodiment, a threat detection platform is integrated with at least one virtual machine that automatically performs a dynamic analysis of a received object and monitors the processing during the dynamic analysis for a change to a file system within the virtual machine wherein the change involves a lure file placed in the file system. The file system is configured based on a received configuration file. Upon detection of a change in the file system associated with a lure file, the changes associated with the lure file during processing are compared to known file activity patterns of changes caused by file altering malware to determine whether the object includes file altering malware.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09483644&OS=09483644&RS=09483644
owner: FireEye, Inc.
number: 09483644
owner_city: Milpitas
owner_country: US
publication_date: 20150331
---
Embodiments of the disclosure relate to the field of cyber security. More specifically embodiments of the disclosure relate to a system for detecting anomalous or more specifically malicious behavior using one or more lure files and a file system within a virtual machine.

Over the last decade malicious software has become a pervasive problem for Internet users as many networked resources include vulnerabilities that are subject to attack. For instance over the past few years more and more vulnerabilities are being discovered in software that is loaded onto endpoint devices present on a network. These vulnerabilities may be exploited by allowing a third party e.g. through computer software to gain access to one or more areas within the network not typically accessible. For example a third party may exploit a software vulnerability to gain unauthorized access to email accounts and or data files.

While some software vulnerabilities continue to be addressed through software patches prior to the release of such software patches network devices will continue to be targeted for attack by exploits namely malicious computer code that attempts to acquire sensitive information adversely influence or attack normal operations of the network device or the entire enterprise network by taking advantage of a vulnerability in computer software. Herein a network device may be any device with data processing and network connectivity such as for example a security appliance a server a mainframe a computer such as a desktop or laptop netbook tablet firewall smart phone router switch bridge etc.

In particular one type of malware may exhibit behaviors such as infecting encrypting deleting and or stealing files hereinafter generally referred to as file altering malware . File altering malware targets computer systems in order to at least i restrict access to one or more portions of a computer system and demand a payment for the removal of the restriction e.g. in some instances file altering malware may encrypt files within the computer system and in other instances may prohibit access to the entire computer system or ii infect computer systems with information theft routines which may seek to steal information such as login credentials to one or more applications e.g. Microsoft Outlook Google Chrome Spotify etc. 2 system information e.g. Windows product keys volume serial numbers etc. 3 file transport protocol FTP credentials or the like.

In some instances file altering malware may enter a computer system for example when a user of an endpoint device activates a uniform resource locator URL in an Internet browser application or downloads a file from a network or opens an e mail attachment. Subsequently the file altering malware may alter various files within the computer which may include encrypting one or more files thereby restricting access to the one or more files. The file altering malware may then request a payment for a key to decrypt one or more files.

In some cases the file altering malware may target particular data storage locations such as files and or folders containing sensitive personal or corporate information financial information or even content related to military services. Targeting particular files and or folders containing sensitive information creates a sense of urgency with the user of the infected endpoint device and or a corporation associated with the infected endpoint device to adhere to the requests of the malware writers.

Currently malware detection systems attempting to detect file altering malware have difficulty identifying files affected by file altering malware as non malicious applications may affect files and folders in a similar manner as file altering malware. For example non malicious file scanners or non malicious encryption programs may for example open rename encrypt and or password protect the same files and or folders affected by file altering malware e.g. files and or folders containing sensitive information . In one example a corporation deploying an enterprise network may propagate updates to a file encryption program that is intended to encrypt particular directories within a file system on each endpoint device e.g. a My Documents directory on all corporate computers . Upon receiving the updates and launching the corporate approved file encryption program current malware detection systems cannot distinguish between the approved file encryption program and file altering malware. Therefore current malware detection systems may return numerous false positives and or false negatives.

Various embodiments of the disclosure relate to a threat detection platform TDP that improves malware detection particularly in the case of malware including file altering malware. In one embodiment of the disclosure the TDP determines whether an object is associated with a malicious attack involving file altering malware through a dynamic analysis of an object within a virtual run time environment. Herein the virtual run time environment features one or more virtual machine instances VMs which may be provisioned with a guest image associated with a prescribed software profile. Each guest image may include a software application and or an operating system OS . Each guest image may further include one or more monitors namely software components that are configured to observe and capture run time behavior of an object under analysis during processing within the virtual machine. In another embodiment the TDP may also perform a static analysis of the object e.g. rules based analysis using heuristics and or comparisons of one or more signatures .

Herein each of the VMs may be configured with a guest image to simulate a particular endpoint device. Specifically each VM may be configured with different operating systems different applications different versions of a common operating system and or different versions of a common application. Additionally each VM may include a file system that is monitored during the dynamic processing. Herein one or more lure configuration files may be provided to the virtual run time environment wherein the configuration files set forth information that enables each VM to configure the file system therein. For example a lure configuration file may include but is not limited or restricted to the number of lure files that are to be placed in the file system prior to processing the object the location of the placement of each of the lure files time and date information for each VM etc. Additionally one or more lure files may be provided to each VM to be added to its file system. Alternatively each VM may generate one or more lure files according to the information set forth in the lure configuration file.

In one embodiment the TDP may receive an object via a network connection and one or more VMs may perform a dynamic analysis on the object to determine whether the object is associated with malware particularly file altering malware. Specifically a method for analyzing an object with the TDP may be divided into three phases A an installation phase B a configuration phase and C a processing and analysis phase.

The installation phase includes receiving at least a lure configuration file identifying lure file types and locations in the file system for which to place the lure files generating the lure files if not provided and placing the lure files in the file system. The configuration phase may include at least receiving an object to analyze selectively modifying the file names and or content of one or more lure files e.g. generating random or pseudo random file names for the lure files and optionally randomizing or pseudo randomizing the lure file contents . Third the processing and analysis phase may include capturing a snapshot of the file system prior to processing the object processing the object monitoring i the actions performed during processing associated with one or more of the lure files and ii changes to the file system and analyzing at least the changes to determine whether the object exhibits file altering behavior. Optionally a determination of the malware family to which the malware belongs may be made e.g. an object may be sub classified as an infector stealer cryptor or destructor . Additionally and also optionally an alert may be generated detailing the detection of the file altering malware. Throughout the specification claims and figures the term network traffic will be used in the discussion but any form of incoming data may be substituted.

Herein the phrase actions performed during processing associated with one or more of the lure files should be understood as being any direct or indirect interaction with the lure file. Additionally hereinafter the phrase changes to the file system should be interpreted as meaning one or more actions performed during processing of the object inclusive of changes to the file system.

In the following description certain terminology is used to describe features of the invention. For example in certain situations both terms logic and engine are representative of hardware firmware and or software that is configured to perform one or more functions. As hardware logic or engine may include circuitry having data processing or storage functionality. Examples of such circuitry may include but are not limited or restricted to a microprocessor one or more processor cores a programmable gate array a microcontroller a controller an application specific integrated circuit wireless receiver transmitter and or transceiver circuitry semiconductor memory or combinatorial logic.

Logic or engine may be software in the form of one or more software modules such as executable code in the form of an executable application an application programming interface API a subroutine a function a procedure an applet a servlet a routine source code object code a shared library dynamic link library or one or more instructions. These software modules may be stored in any type of a suitable non transitory storage medium or transitory storage medium e.g. electrical optical acoustical or other form of propagated signals such as carrier waves infrared signals or digital signals . Examples of non transitory storage medium may include but are not limited or restricted to a programmable circuit a semiconductor memory non persistent storage such as volatile memory e.g. any type of random access memory RAM persistent storage such as non volatile memory e.g. read only memory ROM power backed RAM flash memory phase change memory etc. a solid state drive hard disk drive an optical disc drive or a portable memory device. As firmware the executable code is stored in persistent storage.

An exploit may be construed broadly as information e.g. executable code data command s etc. that attempts to take advantage of a software vulnerability and or an action by a person gaining unauthorized access to one or more areas of a network device to cause the network device to experience undesirable or anomalous behaviors. The undesirable or anomalous behaviors may include a communication based anomaly or an execution based anomaly which for example could alter the functionality of an network device executing application software in an atypical manner a file is opened by a first process where the file is configured to be opened by a second process and not the first process 2 alter the functionality of the network device executing that application software without any malicious intent and or provide unwanted functionality which may be generally acceptable in another context.

According to one embodiment malware may be construed broadly as computer code that executes an exploit to take advantage of a vulnerability for example to harm or co opt operation of a network device or misappropriate modify or delete data. Conventionally malware is often said to be designed with malicious intent. Hereinafter reference to malware includes malware and or exploits.

The term object generally refers to a collection of data whether in transit e.g. over a network or at rest e.g. stored often having a logical structure or organization that enables classification for purposes of analysis. During analysis for example the object may exhibit a set of expected characteristics and during processing a set of expected behaviors. The object may also exhibit a set of unexpected characteristics and a set of unexpected behaviors that may evidence the presence of malware and potentially allow the object to be classified as malicious and more specifically as file altering malware. One type of object is a file that constitutes a self contained collection of data having a logical structure or organization that enables classification for purposes of analysis. A second example of an object is a flow generally refers to related packets that are received transmitted or exchanged within a communication session. For convenience a packet is broadly referred to as a series of bits or bytes having a prescribed format which may according to one embodiment include packets frames or cells. Further an object may also refer to collective payloads of a number of related packets e.g. a single webpage received over a network.

As an illustrative example a file may be a self contained element where different types of such files may include for example an executable file non executable file a document for example a Microsoft Office document a dynamically linked library DLL a Portable Document Format PDF document Zip file a Flash Video FLV file an electronic mail email message or a HyperText Markup Language HTML file.

The term file system may refer to any structural system for storing organizing and or retrieving data. Various file systems may be structured according to various structural and logical rules for storing organizing and or retrieving data. Examples of file systems may include but are not limited or restricted to disk file systems File Allocation Table FAT New File Technology File System NTFS Universal Disk Format UDF ZFS etc. optical disk file systems flash file systems and or database file systems wherein segments of data may be additionally stored organized and or retrieved according to one or more characteristics .

A platform generally refers to an electronic device with network connectivity that typically includes a housing that protects and sometimes encases circuitry with data processing and or data storage. Examples of a platform may include a server or an endpoint device that may include but is not limited or restricted to a stationary or portable computer including a desktop computer laptop electronic reader netbook or tablet a smart phone a video game console or wearable technology e.g. watch phone etc. .

The terms suspicious and malicious may both represent a probability or level of confidence that the object is associated with a malicious attack. For instance the probability may be based at least in part on i pattern matches ii analyzed deviations in messaging practices set forth in applicable communication protocols e.g. HTTP TCP etc. iii analyzed compliance with certain message formats established for the protocol e.g. out of order commands iv analyzed header or payload parameters to determine compliance v attempts to communicate with external servers during dynamic processing and or vi attempts to access predetermined e.g. secure locations in memory during dynamic processing.

The term snapshot should be interpreted as the capturing of the state of a file system at a particular point in time. For example a snapshot may be taken of a file system within a virtual machine by recording the file system structure and contents therein e.g. the contents of each directory within the file system including any sub directories folders and files located therein . The snapshot may be then stored within a storage device as for example a hash value.

The term interacting and all other tenses should be interpreted as any action taken during processing of an object that involves or is associated with a particular data e.g. represented as a file or folder within a file system . Examples of actions or events that may interact with a file or folder include but are not limited or restricted to opening the file or folder copying the file or folder renaming the file or folder encrypting the filer or folder password protecting the file or folder creating the file or folder editing the file or folder etc. In addition the interaction may be direct e.g. an action is performed on a file or folder or indirect e.g. an action is performed that results in an action being performed on a file or folder .

Lastly the terms or and and or as used herein are to be interpreted as inclusive or meaning any one or any combination. Therefore A B or C or A B and or C mean any of the following A B C A and B A and C B and C A B and C. An exception to this definition will occur only when a combination of elements functions steps or acts are in some way inherently mutually exclusive.

The invention may be utilized for detecting malware specifically malware typically known as file altering malware through the use of dynamic analysis in virtual machine. As this invention is susceptible to embodiments of many different forms it is intended that the present disclosure is to be considered as an example of the principles of the invention and not intended to limit the invention to the specific embodiments shown and described.

Referring to an exemplary block diagram of a network deploying a plurality of threat detection platforms TDPs N 1 where N 3 for this embodiment communicatively coupled to a management system via a network is shown. In general the management system is adapted to manage each TDP . For instance the management system may be configured to provide content updates e.g. updates to a lure configuration file upload new rules signatures or modified rules signatures delete rules signatures modify parameters that are utilized by the rules signatures to logic included within each TDP . Additionally content updates may be obtained as a result of information received through communications with the cloud computing services .

As shown in a first TDP is an electronic device that is adapted to analyze information associated with incoming data e.g. network traffic input data over a communication network input data from another type of transmission medium etc. from to one or more endpoint devices . In this illustrative embodiment the communication network may include a public network such as the Internet a private network e.g. a local area network LAN wireless LAN etc. or a combination thereof.

According to the embodiment of the first TDP may be communicatively coupled with one or more endpoint devices hereinafter referred to as endpoint device s . As shown the first TDP may be communicatively coupled with the network via the communication interface which directs signaling on the communication network to the scheduler which in turn directs signaling to the static analysis engine the dynamic analysis engine and or the storage device . The communication interface is configured to receive at least a portion of network traffic propagating to from the endpoint device s and provide information associated with the received portion of the network traffic to the first TDP . This information may include metadata and may be a portion of the received network traffic or a duplicated copy of the portion of the received network traffic. The metadata may be used at least in part to determine protocols application types and other information that may be subsequently used by logic such as the scheduler for example to configure one or more VM VM K 1 with selected software profiles. For instance the metadata may be used to determine which software images e.g. application s if any and or operating systems to be fetched from the storage device for configuring operability of the VM VM.

Alternatively although not shown the communication interface may be configured to receive files or other objects that are not provided over a network. For instance as an example the communication interface may be a data capturing device that automatically or on command accessing data stored in a storage system or another type of interface such as a port for receiving objects manually provided via a suitable dedicated communication link or from storage media such as portable flash drives. Additionally although not shown the communication interface may be integrated into an intermediary device in the communication path e.g. a firewall router switch or other networked electronic device or may be a standalone component such as a commercially available network tap.

As further shown in the first TDP comprises the communication interface the static analysis engine the dynamic analysis engine the classification engine and the reporting engine . Herein the communication interface receives an object from the network and converts the object into a format as needed or appropriate on which analysis by the static analysis engine may be conducted. This conversion may involve decompression of the object decompilation of the object extraction of specific data associated with the object and or emulation of the extracted data like Javascript .

The static analysis engine may include one or more controllers e.g. processing circuitry such as one or more processors that feature at least heuristics logic and signature matching logic . Further the static analysis engine may include one or more software modules that when executed by the controller s analyzes characteristics associated with the object which may be a portion of network traffic or downloaded data according to an embodiment of the disclosure. Such static analysis may include one or more checks being conducted on the object without its execution. Examples of the checks may include i heuristics performed by the heuristic logic which are based on rules or policies as applied to the object and may determine whether one or more portions of the object are associated with anomalous or suspicious characteristics associated with known malware e.g. a particular URL associated with known malware or a particular source or destination address etc. and or ii signature matching performed by the signature matching logic which may include determinative rule based analysis such as comparisons with entries on a blacklist and or a whitelist.

The static analysis engine may route the object to the virtual run time environment within the dynamic analysis engine . The virtual run time environment may include a virtual machine monitor VMM a monitoring logic an analysis logic storage device and the VM VM K 1 . The virtual run time environment provides for the processing of an object in one or more VM VMmanaged by the VMM .

The monitoring logic monitors the processing of the one or more VM VM. In particular the monitoring logic may monitor the launching process of the object within the VMand all changes to the file system while the object is processing. In one embodiment the monitoring logic may track the processing of each application by the process identification PID of the application. The monitoring logic may also monitor any effects processing the object may have on the operating system and application s .

The analysis logic is configured to analyze changes to the file system monitored by the monitoring logic during the processing of the object by VM. The analysis logic may operate in conjunction with the monitoring logic and compare one or more of i one or more changes to the file system associated with a lure file ii one or more changes to the file system conducted within the VMprior to the change associated with the lure file and or iii one or more changes to the file system conducted within the VMafter the change associated with the lure file with one or more known file activity patterns. The comparison may determine the extent to which the actions associated with a lure file match one or more known file activity patterns. In one embodiment actions associated with a lure file may include a singular change to the file system associated with a lure file e.g. copying of a lure file and or a series of changes to the file system that are associated with the lure file e.g. copying of a lure file placement of the copy of the lure file renaming of the copy of the lure file and encryption of the original lure file .

As shown the monitoring logic and the analysis logic are included within the virtual run time environment wherein the monitoring logic may monitor the processing and the analysis logic may analyze the results of the processing within each of the VM VM. In an alternative embodiment although not shown each of the VM VMmay include a separate instance of the monitoring logic and or the analysis logic . In such an embodiment for example an instance of the monitoring logic e.g. monitoring logic may monitor the processing within the VMand an instance of the analysis logic e.g. analysis logic may analyze the results of the processing within the VM. Furthermore an instance of the monitoring logic e.g. the monitoring logic may further monitor the processing within the VMand an instance of the analysis logic e.g. analysis logic may analyze the results of the processing within the VM.

The classification engine may be configured to receive the static analysis results e.g. results from a static analysis metadata associated with the incoming network traffic etc. and or the dynamic analysis results. According to one embodiment of the disclosure the classification engine comprises the prioritization logic and the score determination logic . The prioritization logic may be configured to apply weighting to results provided from dynamic analysis engine and or static analysis engine . The score determination logic is configured to determine a probability or level of confidence that the document object is part of a malicious attack. More specifically based on the dynamic analysis of the document object and one or more detected actions associated with one or more lure files the score determination logic generates a value that may be used in part to identify the likelihood that the object is part of a malicious attack in particular including file altering malware. Thereafter the classification engine may route classification results comprising the weighting and or prioritization applied to the static analysis results and or dynamic analysis results to the reporting engine . The classification results may include the classification of any malware detected into a family of malware describe the malware and further include the metadata associated with any object s within which the malware were detected.

As shown in the reporting engine includes an interface rendering logic an alert generation logic and a classification storage . The reporting engine is adapted to receive information from the classification engine and generate alerts that identify to a user of an endpoint device network administrator or an expert network analyst that the object is associated with a malicious attack. The alerts may include various types of messages which may include text messages and or email messages video or audio stream or other types of information over a wired or wireless communication path. The reporting engine features an optional user interface e.g. touch pad keyed inputs etc. for customization as to the reporting configuration. The interface rendering logic is configured to render and generate one or more graphical user interfaces GUIs to enable for example a network administrator to configure the virtual run time environment through one or more configuration files as will be discussed in detail below. In addition the reporting engine may store the classification results in the classification storage for future reference.

Although illustrates the TDP as a dedicated network device and the discussion of explains examples based on an object received by the communication interface the TDP may be implemented on an endpoint device. In such an embodiment prior to actual execution of the object the TDP may launch the object in a sandboxed environment and conduct simulated human interaction and simulated device controls. Responsive to non anomalous behaviors by the object the endpoint is allowed to utilize the object. In addition the TDP may be implemented in the cloud computing services where the below described simulated human and device control interactions may be fully or partially conducted therein.

Referring now to a block diagram of the dynamic analysis engine within the TDP of is shown. The dynamic analysis engine includes a virtual run time environment that as mentioned above provides for the processing of an object through one or more VM VM. As shown the VMmay be provisioned with an installation logic a configuration logic a snapshot logic a file system and operating system OS and one or more applications . In addition prior to beginning processing of the object the VMreceives the object to analyze and a lure configuration file . In some embodiments one or more lure files N 1 . Alternatively in one embodiment when one or more lure files are not provided to the VM the installation logic may generate the one or more lure files according to information included in the lure configuration file .

The lure files may be files of one or more various types that may be placed within the file system in order to entice or lure malware specifically file altering malware to interact with one or more of the lure files . Examples of file types include but are not limited or restricted to Microsoft Office documents files PDF documents text files help files such as a Microsoft Compiled HTML Help file CHM Extensible Markup Language XML files etc. . The lure files are placed within the file system such that typical non anomalous processing by the operating and applications does not result in an interaction with the lure files or that an interaction is non anomalous. For example when the VMis provisioned with Microsoft Windows XP operating system one or more of the lure files may be placed among the Program Files on the C drive e.g. C Program Files . In such an example it may be unlikely that the operating system and applications would interact with the one or more lure files . Therefore if an interaction with the lure files occurs the interaction may be indicative of the presence of file altering malware.

Alternatively an interaction with the one or more lure files placed among the Program Files on the C drive may be occur in a non anomalous manner. For example a non malicious file scanner and or a non malicious cryptor may interact with one or more of the files and or folders located among the Program Files on the C drive. Therefore as will be discussed below the dynamic processing of the one or more lure files includes an analysis of the changes to the file system that are associated with the one or more lure files when determining whether the object is malicious e.g. includes file altering malware .

The one or more lure files may include a specified file name a pseudo random file name or a random file name. The file name of each of the lure files is generated to entice malware such as file altering malware to interact with the one or more lure files . Similarly the lure files may include specified content no content pseudo randomized content or randomized content. In addition the lure files may be encrypted and or include a password protection system prior to processing per the information included in the lure configuration file wherein the malware may be enticed by files that include one or more security measures.

The lure configuration file includes configuration information associated with the one or more lure files and the file system . In one embodiment wherein the lure files are not received by the VM the lure configuration file includes information regarding attributes of the lure files such as file type content type security measures to include with one or more of the lure files and placement location s for the one or more lure files within in the file system . The placement of the one or more lure files within the file system will be described below in accordance with .

The file system may be configured based on information included in the lure configuration file . For example the lure configuration file may include details of the file system of a particular endpoint device. In such an example the file system may be configured prior to the processing of the object to replicate the file system of the particular endpoint device thereby providing tailored detection of malware specifically file altering malware.

The storage device may store a snapshot of the file system actions performed and events that occurred within the VM and one or more known file activity patterns of changes to the file system caused by malware such as file altering malware.

Referring to an exemplary block diagram of logic associated with the TDP of is shown. The TDP includes one or more processors that are coupled to the communication interface logic via a first transmission medium . Communication interface logic enables communication with the TDPs and management system of . According to one embodiment of the disclosure the communication interface logic may be implemented as a physical interface including one or more ports for wired connectors. Additionally or in the alternative communication interface logic may be implemented with one or more radio units for supporting wireless communications with other network devices.

The one or more processors are further coupled to the persistent storage via the transmission medium . According to one embodiment of the disclosure the persistent storage may include i the static analysis engine including the heuristics logic and the signature matching logic ii the virtual run time environment including the VM VM the virtual machine manager VMM the monitoring logic and the analysis logic iii the classification engine and iv the reporting engine . Of course when implemented as hardware such as circuitry and or programmable logic arrays one or more of these logic units could be implemented separately from each other. In addition one or more of these logic units may be implemented in hardware while one or more logic units may be implemented as software.

Referring to a flowchart illustrating an exemplary method for analyzing an object with the TDP of is shown. Each block illustrated in represents an operation performed in the method of detecting malware based on the use of TDP of wherein the object and a lure configuration file are received by the TDP for processing. At block the TDP receives the object to analyze and at block the TDP receives the lure configuration file . At block one or more lure files are placed in the file system of the VMwithin the TDP according to the contents of the lure configuration .

At block the file names of the lure files are randomized e.g. undergo random or pseudo random operations according to the lure configuration file . In addition the information included in the lure configuration file may also specify that the contents of the lure files are to be randomized or pseudo randomized. At block a snapshot of the file system is taken to preserve the state of the file system prior to processing. The snapshot is to be used in the analysis of changes to the file system that are associated with one or more of the lure files during or subsequent to the processing of the object.

In one embodiment the randomization of the lure file names is performed by the configuration logic generating a hash value e.g. MD5 hash based on a time and date included in the lure configuration file . The hash value is provided to a random number generator function included within the configuration logic . The output of the random number generator may then be used to pseudo randomize the names of the lure files . For example if the output of the random number generator is PO730 the configuration logic may pseudo randomize the lure file name Sensitive Corporate Financial Matters.docx to be Sensitive Corporate Financial MattersPO730.docx. In one embodiment in which the lure file names are pseudo randomized instead of completely randomized the processing of the object in the VMis done to entice the file altering malware to interact with the lure file based on at least in part the lure file name. As an additional note the time and date information that is included in the configuration file may not be the same for each of VM VM. When each of VM VMreceives a different time and date the random number generator of each of VM VMwill not generate the same random number because the hash value provided as an input to the random number generator of each of VM VMwill not be the same when the date and time are not the same for each of VM VM.

At block the received object is processed in the VMand the processing is monitored for changes to the file system specifically changes associated with one or more of the lure files . In particular the object is launched using an application and actions typical of processing using the application on an endpoint device are performed. For example the object may be a binary object such as an application .APK a batch file .BAT a command script .CMD an executable .EXE and or .DLL or the like. The monitoring logic monitors any effects on the run time environment within the VMthe processing of the object may have e.g. changes to the file system that are associated with one or more of the lure files .

At block the changes to the file system are analyzed by the analysis logic to determine whether the object includes malware such as file altering malware. In one embodiment the analysis logic may retrieve one or more known file activity patterns of one or more changes to the file system caused by file altering malware hereinafter referred to as known file activity patterns and compare the one or more known file activity patterns to the actions monitored by the monitoring logic . The analysis logic may determine whether the changes to the file system monitored in the VMis involved or associated with one or more of the lure files match at least a portion of the one or more of the known file activity patterns.

The analysis of the processing of the object and the effects on the file system may be performed in a plurality of methods. In a first embodiment the processing of the object in the VMand the analysis by the analysis logic may execute concurrently wherein the term concurrently should be interrupted as at least partially overlapping at the same time . For example upon detection of an action interacting with one or more of the lure files the analysis logic may begin to compare actions prior to the interaction with the one or more of the lure files the actual interaction with the one or more of the lure files actions subsequent to the interaction with the one or more of the lure files and any effects on the file system . In one embodiment the one or more lure files may include hooks that notify the monitoring logic and the analysis logic of any actions taken involving the one or more of the lure files .

In a second embodiment the processing of the object may be completed e.g. a predetermined number of actions were performed within the VM or the processing occurred for a predetermined amount of time prior to analysis by the analysis logic . In such an embodiment the snapshot of the file system and the changes to the file system monitored by the monitoring logic may be stored in the storage device . Upon completion of the processing of the object the analysis logic may retrieve the known file activity patterns the snapshot of the file system and the changes to the file system by the monitoring logic and compare the state of the file system after processing the object with the state of the file system captured by the snapshot e.g. analyze the changes made to the file system .

Additionally as discussed above the dynamic analysis results are provided to the classification engine wherein the dynamic analysis results may be combined with the static analysis results. Furthermore when the object is determined to include malware such as file altering malware the classification engine may classify the malware by malware family based on experiential knowledge. For example based on details of malware families stored within the storage device the classification engine may determine a threat level of the object based on the static analysis results and the dynamic results and determine the malware family of the file altering malware when applicable.

Still referring to at block when an object is determined to include file altering malware an optional alert may be generated by the reporting engine to notify one or more of a user of an endpoint device a network administrator and or an expert network analyst of the file altering malware included in the object and if applicable the family of malware to which the file altering malware belongs. Additionally the results of the processing and classification may be stored within the classification storage for future reference.

The method illustrated in may be divided into three phases A an installation phase B a configuration phase and C a processing and analysis phase. Each of the phases will be discussed in detail below in accordance with the discussion of .

Referring now to an illustration of an exemplary file system prior to placement of one or more lure files is shown. Herein the example file system includes a Home Directory folder that includes a My Documents folder a My Pictures folder a Confidential Matters folder and a Music folder . As is shown the My Documents folder includes a Recipe.docx file and the Confidential Matters folder includes a Training.pptx file .

Referring back to during the installation phase the lure configuration file is received by the VM. Assuming the lure files are not received by the VMand need to be generated the installation logic contains logic to analyze the lure configuration file and determine i the number of lure files that are to be generated ii the type of each lure file iii the characteristics of each e.g. contents security measures pseudo randomization of file name etc. and iv the location in the file system of each of the lure files to be generated. Further the installation logic may generate the lure files and place the lure files in the appropriate locations within the file system .

Referring now to an illustration of the exemplary file system of following placement of the lure files N 5 for this embodiment is illustrated. Herein the lure file is a PDF document titled Bank Statement.PDF the lure file is a Microsoft Excel file titled Passwords.XLSX the lure file is a Microsoft Excel file titled Passwords.XLSX the lure file is a Microsoft Word file titled Top Secret Military Plans.DOCX and the lure file is a PDF document titled Tax Return.PDF. Although in the embodiment disclosed herein the lure files are illustrated as files a lure file may also be a folder itself that optionally includes one or more lure files.

During the configuration phase the VMmay receive the object to analyze. Referring back to once the lure files are present within the VM whether they were received or generated therein and placed in the appropriate locations within the file system the file names may be randomized or pseudo randomized in addition the content may be randomized or pseudo randomized as well . By randomizing or pseudo randomizing the file names malware writers will be unable to merely identify a file by name that is routinely part of the file system that detects the malware. For example when a malware writer attempts to determine that a detection system is being used to detect malware the malware writer may attempt to identify a particular file name that is always present and thereby develop malware that avoids the particular file name. Therefore by randomizing or pseudo randomizing the file names of one or more of the lure files detection by the malware that it is being processed in a VM becomes more difficult as a singular file name will not continually reoccur.

Referring to an illustration of the exemplary file system of following the pseudo randomization of the names of the lure files is shown. Herein the lure files of the example file system of that were added to the file system during the installation phase are seen to be configured with pseudo randomized file names. Herein the lure file is titled Bank Statement A2CF.PDF the lure file is titled Passwords 6LP2.XLSX the lure file is titled Passwords 20FB.XLSX the lure file is titled 742 Top Secret Military Plans.DOCX and the lure file is titled Tax Return 084.PDF. 

Referring now to a flowchart illustrating a first exemplary method for analyzing a file system after processing an object with the TDP of is shown. Each block illustrated in represents an operation performed in the method A of processing the object based on the use of TDP wherein the processing of the object and the analysis of one or more changes to the file system associated with one or more lure files are done concurrently. At block the TDP begins processing the object in the VM. At block a determination is made as to whether a change to the file system associated with a lure file is detected. When a change to the file system is detected but the change is not associated with one or more of the lure files no at block a determination is made as to whether the processing is complete block . When the processing is complete e.g. and no change associated with a lure file was detected yes at block a determination is made that the object does not include file altering malware block .

When a change to the file system associated with a lure file is detected yes at block the processing performs two concurrent steps 1 at block the processing of the object continues and the monitoring logic continues to monitor for additional changes to the file system associated with a lure file and 2 the detected change associated with the lure file is monitored block . Referring to 1 the processing of the object continues at block and the method A subsequently returns to block to determine whether a change to the file system associated with a lure file is detected. Referring to 2 the detected change associated with the lure file is monitored block and subsequently a determination is made as to whether the detected change s associated with the one or more lure files matches one or more known file activity patterns block .

When the one or more change to the file system associated with the one or more lure files do not match one or more known file activity patterns no at block a determination is made as to whether the processing is complete block and if so it is determined that the object does not include file altering malware block or if not no at block the processing continues at block .

Additionally when one or more changes to the file system that are associated with a lure file are not determined to match one or more known file activity patterns the one or more changes to the file system may be provided to for example an expert network analyst for further analysis. In such an instance a new pattern may be developed if it is determined by the network analyst that the one or more changes to the file system that did not match any known file activity patterns is a result of file altering malware. Alternatively the change to the file system that is associated with a lure file but does not match a known pattern may be the result of a non malicious file scanner a non malicious encryption application and or another non malicious application.

When the one or more change to the file system associated with the one or more lure files matches a known pattern yes at block a determination is made as to whether the object includes file altering malware based on the matched known pattern block . At block the analysis logic operating in conjunction with the monitoring logic compares one or more of i change to the file system associated with a lure file ii one or more changes to the file system conducted within the VMprior to the change associated with the lure file and or iii one or more changes to the file system conducted within the VMafter the change associated with the lure file with the known pattern. The comparison may determine the extent to which the actions associated with a lure file match the known pattern. The comparison of the known pattern with the information associated with the detected change to the file system may be included in the dynamic analysis results provided to the classification engine . In one embodiment the dynamic analysis results may include at least one or more of the extent to which one or more detected actions associated with a lure file match one or more known file activity patterns information associated with the detected actions associated with a lure file and or metadata associated with the each detected action.

Subsequently the score determination logic may determine i a score for each detected change to the file system and ii whether one or more of the scores exceeds a predetermined threshold wherein the predetermined threshold represents a threat level e.g. suspicious malicious or benign . Alternatively a score may be a certain threat level e.g. suspicious malicious or benign being an indication of the likelihood of including file altering malware or a value that signifies a likelihood of including file altering malware that may be compared to one or more predefined thresholds to determine the likelihood of including file altering malware.

Optionally when the object is determined to include file altering malware the family of malware to which the object belongs may be determined block . Herein the classification logic may compare the one or more changes to the file system associated with the one or more lure files with information pertaining to malware families stored in for example the storage device . Finally and also optionally an alert may be generated to notify one or more of a user of an endpoint device a network administrator and or an expert network analyst of the detection of the inclusion of file altering malware within the object block .

Referring now to a flowchart illustrating a second exemplary method for analyzing a file system after processing an object with the configuration of the TDP of is shown. Each block illustrated in represents an operation performed in the method B of processing an object based on the use of the TDP of wherein the processing of the object is completed prior to the analysis of one or more changes to the file system associated with one or more lure files. At block a snapshot is taken of a configured file system that will be used to process the object as discussed above. At block the object is processed in the VMuntil completion and changes to the file system conducted during the processing e.g. as monitored by the monitoring logic are stored in a storage medium. At block the state of the file system captured in the snapshot is compared with the state of the file system after processing the object e.g. the changes made to the file system during processing are analyzed to determine whether an interaction with one or more lure files occurred .

At block a determination is made as to whether a change to the file system caused an interaction with a lure file. When the action did not interact with a lure file no at block a determination is made as to whether all changes to the file system that were detected and stored have been analyzed block .

When all changes have not been analyzed no at block the next change detected during processing is analyzed block . When all changes have been analyzed i.e. and none of the analyses resulted in a determination that the object includes file altering malware yes at block it is determined the object does not include file altering malware block .

When a change involved an interaction with a lure file yes at block a determination is made as to whether the detected change s associated with the lure file match one or more known file activity patterns block . When the change s associated with the lure file do not match one or more known file activity patterns no at block a determination is made as to whether all actions monitored and stored have been analyzed at block as discussed above.

Additionally when one or more changes to the file system that are associated with a lure file are not determined to match one or more known file activity patterns the one or more changes to the file system may be provided to for example an expert network analyst for further analysis. In such an instance a new pattern may be developed if it is determined by the network analyst that the one or more changes to the file system that did not match any known file activity patterns is a result of file altering malware. Alternatively the change to the file system that is associated with a lure file but does not match a known pattern may be the result of a non malicious file scanner a non malicious cryptor and or another non malicious application.

When the one or more changes to the file system associated with the one or more lure files match one or more known file activity patterns yes at block a determination is made as to whether the object includes file altering malware based on the match with one or more known file activity patterns block . Subsequently the dynamic analysis results may be provided to the classification engine such that a determination as to whether the object includes file altering malware based on at least the dynamic analysis results can be made. For example a score or threat level indicating the likelihood of the inclusion of file altering malware within the object may be determined by the score determination logic .

Optionally a determination of the malware family to which the malware belongs may be made block . Additionally and also optionally an alert may be generated detailing the detection of the file altering malware block .

Referring now to an illustration of an exemplary graphical user interface associated with the configuration of the TDP of is shown. Herein rendered by the interface rendering logic the display screen features a plurality of display areas P 1 where P 3 for this embodiment that illustrates information directed to configuring the file system and the lure files prior to the dynamic analysis of one or more objects within one or more of VM VM.

The display screen may be rendered in order to enable for example a network administrator to configure one or more of the VM VM. A network administrator may configure one or more of the VM VMaccording to the specifications of the file system of the endpoint device s or the file system of an enterprise.

According to one embodiment of the disclosure a first display area provides an option to include the directory path of the location to which the selected options of the display area are to apply. Assuming the TDP is to generate the lure files the display area may provide a plurality of configurable options such as i an option to place content in the lure files ii an option to randomize the content in the lure files and iii the file type of the lure files. In addition options to provide security measures may be provided e.g. password protection and or encryption . The display area may provide an option to use prepared lure files and one or more text boxes for the location of the one or more lure files . Finally the display area may provide an option to specify one or more lure file names. Additional display areas may provide one or more of the same options or provide alternate options.

In the foregoing description the invention is described with reference to specific exemplary embodiments thereof. It will however be evident that various modifications and changes may be made thereto without departing from the broader spirit and scope of the invention as set forth in the appended claims.

