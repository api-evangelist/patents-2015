---

title: Methods and systems for synchronizing data in a multi-tenant database environment
abstract: In accordance with embodiments, there are provided mechanisms and methods for synchronizing data in a database network system. These mechanisms and methods for synchronizing data in database network system can enable embodiments to provide users a synchronization button on a UI or synchronization field through an API for specifying data for synchronization. The ability of embodiments to provide users a synchronization button on a UI or synchronization field through an API for specifying data for synchronization can enable users to easily and efficiently change and update data in a database system.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09141684&OS=09141684&RS=09141684
owner: salesforce.com, inc.
number: 09141684
owner_city: San Francisco
owner_country: US
publication_date: 20150223
---
This application is a continuation of U.S. patent application Ser. No. 14 034 796 titled METHODS AND SYSTEMS FOR SYNCHRONIZING DATA IN A MULTI TENANT DATABASE ENVIRONMENT filed Sep. 24 2013 which is a continuation of U.S. patent application Ser. No. 13 118 539 titled METHODS AND SYSTEMS FOR SYNCHRONIZING DATA IN A MULTI TENANT DATABASE ENVIRONMENT filed May 30 2011 now U.S. Pat. No. 8 572 029 issued Oct. 29 2013 which claims the benefit of U.S. Provisional Patent Application 61 349 991 entitled METHODS AND SYSTEMS FOR SYNCHRONIZING DATA IN A MULTI TENANT DATABASE ENVIRONMENT filed May 31 2010 and the contents of all the applications listed above are incorporated herein by reference in their entirety.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The following commonly owned co pending or other United States patents and patent applications including the present application are related to each other. Each of the other patents applications listed below are incorporated by reference herein in its entirety 

U.S. Provisional Patent Application 61 349 991 entitled METHODS AND SYSTEMS FOR SYNCHRONIZING DATA IN A MULTI TENANT DATABASE ENVIRONMENT filed May 31 2010 U.S. patent application Ser. No. 13 118 539 titled METHODS AND SYSTEMS FOR SYNCHRONIZING DATA IN A MULTI TENANT DATABASE ENVIRONMENT filed May 30 2011 now U.S. Pat. No. 8 572 029 issued Oct. 29 2013 and U.S. patent application Ser. No. 14 034 796 titled METHODS AND SYSTEMS FOR SYNCHRONIZING DATA IN A MULTI TENANT DATABASE ENVIRONMENT filed Sep. 24 2013.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional sales environments sales personnel use a variety of techniques to keep track of customer and or business information. One way sales personnel organize and keep track of customer and or business information is to store the information on an electronic database. The stored customer and or business information may include for example general customer and or company information customer contact information potential business opportunity information information regarding quoted product pricing a list of pricing of various products offered to the customer etc. Some of the stored customer and or business information may be duplicated in different portions of an electronic database.

Unfortunately synchronizing specific portions of business information associated with a customer and or business may conflict with existing database logic. Triggers and other database logic may result in infinite loop issues when synchronizing portions of business information on a database.

Accordingly it may be desirable to provide techniques enabling data synchronization in the database system to improve user efficiency of the database system.

In accordance with embodiments there are provided mechanisms and methods for synchronizing data in a database network system. These mechanisms and methods for synchronizing data in database network system can enable embodiments to provide users a synchronization function such as by providing a button on a User Interface UI or may provide a synchronization field through an Application Program Interface API for specifying data for synchronization. The ability of embodiments to provide users a synchronization function can enable users to easily and efficiently change and update data in a database system.

In an embodiment users may synchronize quote information with parent opportunity information by selecting a start synchronization button through a user interface UI or by setting a SyncedQuote field on the parent opportunity through an application programming interface API . In an embodiment during the synchronization of a quote with its parent opportunity quote line items may be copied to the parent opportunity as opportunity line items. In an embodiment the synchronization may be accomplished by running a series of operations to delete update and insert opportunity line items to match the line items of the quote.

In an embodiment the price book of the opportunity may also be synchronized with the price book of the quote. In an embodiment detection and prevention of infinite loops as a result of synchronizing quote information with parent opportunity information may be performed by employing a Boolean roll backable variable. The Boolean roll backable variable indicates when an object is currently being synced. In an embodiment if the Boolean roll backable variable is set a synced object cannot be synced again in the same transaction resulting in throwing an exception to avoid infinite loops and doing an attempted synchronization.

While one or more implementations and techniques are described with reference to an embodiment in which techniques for synchronizing data in a database network system are implemented in a system having an application server providing a front end for an on demand database service capable of supporting multiple tenants the present invention is not limited to multi tenant databases nor deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 by IBM and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at all in this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided for synchronizing data in a database network system. As used herein the term multi tenant database system refers to those systems in which various elements of hardware and software of the database system may be shared by one or more customers. For example a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers. As used herein the term query plan refers to a set of steps used to access information in a database system.

Next mechanisms and methods for providing data synchronization in a database network system will be described with reference to example embodiments.

Sales personnel need the ability to efficiently organize and track customer and sales data. One method of organizing and tracking customer and sales data is entering and storing the data in an electronic database. Sales personnel may enter and store a variety of customer data such as company name contact numbers prior sales history etc. Sales personnel may also need the ability to enter and store data related to potential customers and potential sales.

In this application an opportunity refers to stored information stored in a machine readable medium e.g. a computer readable medium about a potential customer potential sale or other potential business arrangement that a company may store. For example personnel such as sales personnel may be aware of opportunity information which may be entered into the portion of a database that is reserved for the company as a result of being a tenant in a multitenant database. An opportunity may have many types of data associated with it. For example an opportunity may have associated data representing a date of first contact by sales personnel or date that sales personnel first became aware of the opportunity. An opportunity may also have associated data about what products and quantities of products might be sold and at what price. An opportunity may include a price book. A price book may be a list of all or some of the products offered by sales personnel to a potential customer and prices for the offered products. Different potential customers may be offered different price books. For example a large corporation may be offered a price book reflecting discounted pricing due to the potential for large orders requiring a greater quantity of products. Alternatively a small company may be offered a price book reflecting higher pricing due to the smaller quantities of product required. Even if all customers are offered the same prices the prices may change with time and as a consequence different quotes may be associated with different price books depending on when the quote was offered.

A quote may be associated with an opportunity. A quote may include a price and or quantity stated to a potential customer that a salesperson may reference at a later date. For example from a given opportunity sales personnel may contact a potential customer associated with the opportunity. The potential customer may request a quote for pricing information based on various desired quantities of a product. At a later date the potential customer may contact sales personnel referencing the previously supplied pricing information to close a deal. The opportunity from which the quote originated from may be referred to as a parent opportunity of the quote. In an embodiment the opportunity is associated with a price book and the quote is only associated with a price book as a result of the opportunity being associated with the price book. Optionally a quote may also be associated with a price book which may be stored in association with the quote. For example a webpage having fields that display and or for entering information about the opportunity and or quote may have a link which when activated causes the price book to be displayed. The ability to rely on previously quoted information may facilitate the customer in making business decisions and may save the sales person from embarrassing moments in which the sales person inadvertently quotes a different price than quoted in a previous encounter.

With a large number of opportunities quotes and related data stored on an electronic database keeping all the data organized and consistent can become a challenge when changes are made to portions of data affecting other associated and or related data. For example sales personnel may need to provide a revised quote to a potential customer or the sales representative may give several different quotes to the same customer which depend on which features the user desires. Once the customer selects an option and a final quote is accepted the opportunity may need to be synchronized with the final quote. A revised quote may necessitate editing the quote data and in an embodiment may in some cases also necessitate editing the price book data e.g. by changing the pricebook and opportunity data associated with the quote. Keeping quote data and opportunity data in synchronization may be necessary in order to provide consistent information. By providing a method for initially synchronizing data as well as ongoing data synchronization in the electronic database editing and or revising associated information and or data is simplified and kept accurate in an efficient manner.

Application platform may be a framework that allows the execution of applications on a system e.g. an operating system. PL SOQL may provide a programming language style interface extension for invocations to developer applications. Application setup mechanism may be used to setup and support the creation and management of developer applications. Save routines may be used to save developer applications created for application platform . Save routines may include hooks that are activated by a call to a save routine where the hooks are for synchronizing opportunities with quotes and or for checking that the opportunities and quotes have been properly synchronized with one another. Application platform PL SOQL save routines and application setup mechanism will be further described below in conjunction with a description of the environment where they may be used.

Synchronization algorithm may be instructions for the synchronization of data. It should be understood the word instruction may be used interchangeably herein with the words code and function. In an embodiment synchronization algorithm may be composed and organized into subsets or classes of instructions for handling data synchronization tasks. For example synchronization algorithm may be organized into subsets of instructions each subset of instructions intended to perform specified tasks such as synchronizing data validating synchronized data detecting infinite loops specifying data sets for synchronization etc. QuoteSynchronizer may be one or more functions used for synchronizing opportunity and quote data. In an embodiment QuoteSynchronizer may be used as part of an API or other interface for defining the methods used for performing synchronization of quote and opportunity data. In an embodiment QuoteSynchronizer may be used for performing both the initial synchronization of a quote and opportunity data as well as the ongoing synchronization of the quote and opportunity data.

QuoteSynchronizerImpl may be the implementation of the quote synchronization functions of QuoteSynchronizer used for performing synchronization of quote and opportunity data. In an embodiment the QuoteSynchronizerImpl class cannot be instantiated directly by the user. In an embodiment a public static get method may be called by QuoteSynchronizer which returns a main implementation class of the quote or a disabled version of the main implementation class of the quote for the returned quotes that are disabled. In an embodiment a main implementation class may be structured data associated with the quote. During a synchronization of an opportunity in response to recent changes in a quote line items in the opportunity are found that correspond to line items in the quote that were changed and each line item is updated. The updating may occur by creating a line item for the opportunity with the new information deleting the original line item and replacing the original line item with the newly created line item. Alternatively the values in individual fields in the line item may be deleted and replaced with the new values of the quote. Synchronization Validator may be one or more functions used to verify whether data synchronization was executed properly. For example in an embodiment Synchronization Validator may execute at the end of a transaction to validate whether synchronized opportunity data properly corresponds to related quote data before allowing a commit to execute. If not all line items have been synchronized the line items not yet synchronized may then be synchronized prior to committing a change to the quote.

LineItemSyncHelper may be one or more functions for synchronizing line items. In an embodiment a line item may be data associated with a quote or opportunity. More specifically a line item may be data representing a product or service offered to a customer stored as a record in a database. In an embodiment a line item may belong to an opportunity or a quote. A line item may have additional associated data such as the unit price of each product or service quantity of each product or service the discount given etc. LineItemSyncHelper may be used for ongoing synchronization of the individual line items of a quote with its parent opportunity. For example if the unit price line item of a quote has a value of five dollars and is synchronized with its parent opportunity unit price line item if the quote unit price line item is revised to six dollars the value of the opportunity unit price line item is also revised to six dollars. LineItemSyncHelper functions for ongoing synchronization may also be used for synchronizing line items during initial synchronization. In an embodiment to ensure that every line item is synchronized there may be a function which may have a name such as LineItemSyncHelper.checkLineItemsAreSyncing that checks that all of the line items e.g. line item by line item have been synchronized when a quote and an opportunity have been designated as requiring synchronization with one another. In an embodiment the function that checks that each line item is synchronized performs a check that each line item is synchronized that is separate from the check that each line item is synchronized that is performed by synchronization validator .

LineItemSyncHelperImpl may be the implementation of the line item synchronization functions used for performing synchronization of quote line item and opportunity line item data. In an embodiment the LineItemSyncHelperImpl class cannot be instantiated directly by the user. In an embodiment a public static get method may be called by LineItemSyncHelper which returns a main implementation class or a disabled version if returned quotes are disabled.

SyncUtil may include methods functions and logic being performed in different places consolidated into one convenient location. For example SyncUtil may contain static methods for common functions and logic used for data synchronization. Infinite loop detector may be one or more functions for verifying triggers for performing data synchronization do not point to each other resulting in repeating synchronization cycles. RollupSummary may be one or more functions used for calculating values from a set of related records summarizing the content of those records e.g. as a minimum value maximum value total and or average . For example RollupSummary may be used to calculate the total sum pricing of all products that a customer may be potentially interested in purchasing given as part of a quote. RollupSummary may also be used to determine the highest and lowest value from a set of related records and or count the number of records.

Quote may be a database table that represents reference pricing and quantity information given by sales personnel to a customer. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. In an embodiment quote may be representative of a database table the database table having multiple records the fields of each record may be line items representing and or associated with various types of information given by sales personnel to potential customers. For example each record may contain multiple columns of the database table and each column may represent different types of quote data such as product types product quantity unit price customer contact date etc.

IsSyncing may be a Boolean field of Quote . In an embodiment IsSyncing may be a flag indicating whether data is currently being synchronized or has been synchronized. In an embodiment IsSyncing may contain a Boolean value of TRUE or FALSE. In order to mark a quote as currently being synchronized the IsSyncing Boolean field or flag may be added to the quote object. In an embodiment the IsSyncing Boolean field may be set to TRUE when a quote is initially synchronized with an opportunity. If the data is not currently being synchronized then the IsSyncing flag may be set to FALSE. In an embodiment if it is desirable to synchronize a particular quote with an object which may have the name Opportunity.SyncedQuote a pointer pointing to the Quote may be added. In an embodiment when IsSyncing is set to true so that IsSyncing TRUE a pointer is added to Opportunity.SyncedQuote pointing to the quote to indicate to synchronize the quote.

Optionally IsSyncing may be used to prevent infinite loops by checking whether IsSyncing is set to TRUE prior to performing synchronization. If upon checking prior to performing a synchronization it is determined that IsSyncing is set to TRUE then the synchronization is not performed because a synchronization is already in progress and allowing the synchronization to be performed may lead to an infinite loop. If upon checking prior to performing synchronization that IsSyncing is FALSE then the synchronization is performed because no other synchronization is being performed and consequently there is little danger of causing an infinite loop. Additionally after determining that IsSyncing is FALSE as a result of checking the value of IsSyncing just prior to performing synchronization IsSyncing is set to TRUE while the synchronization is being performed.

Quote Line Items may be objects representative of certain information given to a potential customer when providing a quote. Quote Line Items may represent products and or services a customer is interested in purchasing. In an embodiment a Quote may have multiple Quote Line Items . In an embodiment Quote Line Items may contain data about products and or services including quantity unit price discount and service date and Quote Line Items may be associated with HasRevSchedule and HasQtySchedule . It should be understood the use of the term quote line item may refer to Quote Line Items and or to the data contained in Quote Line Items such as Quantity unit price discount and service date .

Quantity may represent the number of units of a product or length of services that a customer is interested in purchasing. Unit price may represent the cost for a unit of a product such as the cost of a piece of a product or an hourly cost of a service that a customer is interested in purchasing. Discount may represent the markdown that a customer can expect to receive from the list price for a product or service. For example a customer may receive a greater discount for ordering a product in large quantities and or at regular intervals. Service date may represent the date a quote was provided to a customer. HasRevSchedule may be a variable that indicates whether the opportunity for the quote has a revenue schedule. The revenue represents the expected revenue from the sale of a product based on a predetermined delivery schedule. For example the revenue schedule may include the dollar amount expected from the monthly delivery of a particular subscription service. In an embodiment if the quote or opportunity has a revenue schedule the system may prevent the updating of the total price and quantity of the quote. HasQtySchedule may be a variable that indicates whether a quantity schedule was created for the quote. The quantity schedule represents the quantity of one or more products a customer is scheduled to receive at regular intervals. For example an individual may have a subscription service for monthly wine deliveries. The quantity schedule may represent the number of bottles a customer would receive the first of each month. In an embodiment the user has the option of changing the quantity and updating the unit price to keep the total price the same or of keeping the unit price the same and updating the total price to reflect the change in quantity. Other line items may represent other data associated with quote line items but which are not kept in synchronization with related parent opportunity line items.

Total price may represent the sum of the cost of all products and or services related to the quote provided to a customer. Total price may be calculated using RollupSummary to sum the cost of all products and or services that are part of the quote. Price book contains the list of products and or services and fees for a variety of products and or services offered by the tenant. A company may choose to keep multiple price books to better organize their products and services. Different divisions of a company may have price books containing the same products and or services but at different prices. In an embodiment a quote can have a given quote line item only if the quote has a price book. In an embodiment a given quote line item must correspond to a product or service that is listed in price book .

Opportunity may be a database object that represents information related to potential deals. Opportunity may include potential deal information such as total deal value other competing suppliers what stage the deal is in etc. Opportunity may also include similar and or related data as quote . For example Opportunity may contain line items that represent data that is similar to the opportunity data such as product and service types product and service quantity discount unit price etc.

SyncedQuote indicates which particular quote an opportunity is being synchronized with. To allow performing initial synchronization through an API a lookup field called SyncedQuote may be added to Opportunity . In an embodiment setting SyncedQuote field to a different quote would synchronize an opportunity with the quote indicated in the SyncedQuote field. If the opportunity was already synchronizing with another quote the opportunity would unsynchronize with the quote first.

An opportunity may have multiple quotes associated with the opportunity . For example from a given opportunity multiple packages may have been offered to a potential client so that the client may assess which package best suits their needs. A given item may be priced differently in different packages quotes. For example in one quote the potential customer may be offered a volume discount for the item that is not available in another quote based on purchasing a larger number of that item than would be purchased in the other quote. In an embodiment a particular organization may require opportunity to reach a particular stage prior to sending a quote to a customer. In an embodiment SyncedQuote may allow a user to determine which quote an opportunity is synchronized with.

Opportunity Line Items which may also be referred to as opportunity line items may be objects representative of certain data relating to an opportunity . Similar to Quote Line Items Opportunity Line Items may represent products and or services a customer is interested in. In an embodiment an opportunity may have multiple Opportunity Line Items . Opportunity Line Items may be associated and or related to data about products or services including quantity unit price discount and service date which have similar descriptions as quantity unit price discount and service date respectively except that quantity unit price discount and service date relate to a opportunity line item and quantity unit price discount and service date relate to a quote line item which were described previously in conjunction with Quote Line Items and therefore the description of quantity unit price discount and service date will not be repeated here. Similarly HasRevSchedule HasQtySchedule total price and price book have similar descriptions as HasRevSchedule HasQtySchedule total price and price book respectively except that HasRevSchedule HasQtySchedule total price and price book apply of a quote and HasRevSchedule HasQtySchedule total price and price book apply to an opportunity which were also previously described in conjunction with Quote and therefore the description of HasRevSchedule HasQtySchedule total price and price book will not be repeated here.

Sales personnel and or users of the database system may initially synchronize a quote with the quote s parent opportunity either through the user interface UI by clicking a Start Sync button or through the application programming interface API by setting the SyncedQuote field on the parent opportunity . During the initial synchronization of a quote quote line items may be copied to an opportunity as opportunity line items . The copying of the line items may be accomplished by running a series of operations to delete update and insert opportunity line items to match the line items on the quote . In addition optionally the price book of the opportunity may be changed to match the price book of the quote . For example a given company may have a standard price book and another price book with high volume discounts built in. At the time the opportunity was created the opportunity may have designated the standard price book as price book . Then when a quote is offered the high volume discount price book may have been designated as price book . In an embodiment if the synchronizing is activated in response to price book being set to the high volume discount price book price book may be updated by changing price book from the standard price book to the high volume discount price book.

In an embodiment Opportunity Line Items and associated data may be synchronized with Quote Line items and respective associated data. In an embodiment changes made to Quote Line items may result in changes to Opportunity Line Items by way of LineItemSyncHelper which may be used for ongoing synchronization of the individual line items of a quote with its parent opportunity .

In an embodiment QuoteSynchronizer QuoteSynchronizerImpl LineItemSyncHelper LineItemSyncHelperImpl and SyncUtil may be the main synchronization classes. The main synchronization classes may contain most of the logic for performing opportunity and quote data synchronization. The code may be structured such that most synchronization logic is in a central place. The interfaces may also be created such that the interfaces are easy to understand and easy to determine what the interfaces accomplish.

Synchronization logic may also be placed in various save delete undelete hooks for Opportunity Opportunity Line Items Quote Quote Line Items objects. The hooks may intercept or otherwise detect functions calls to save delete undelete functions associated with Opportunity Opportunity Line Items Quote Quote Line Items objects and in response activate synchronization logic prior to in association with and or just after implementing a save delete undelete associated with associated Opportunity Opportunity Line Items Quote and Quote Line Items objects. The custom component allows developers to quickly reuse commonly used functions. For example a save hook may be an often used function for saving data. In these locations the synchronization logic may be mainly directed to calling the methods implemented in one or more of the main synchronization classes for performing ongoing synchronization. The initial synchronization may be more segmented as there are more steps and therefore more logic in the Opportunity save hook as well as in QuoteSynchronizer the initial synchronization is discussed below in conjunction with .

Once a quote is synchronized with the parent opportunity in an embodiment the system may keep the quote and opportunity synchronized with each other such that quote is synchronized to opportunity when opportunity is altered and opportunity is synchronized to quote when quote is altered. In an embodiment when quote line items or opportunity line items are updated fields on the corresponding opportunity or quote line items are kept in synchronization. In other embodiments other items may also be synchronized. In an embodiment when quote line items or opportunity line items are deleted the corresponding opportunity or quote line items respectively may be automatically deleted. When quote or opportunity line items are inserted equivalent line items may be inserted on the opportunity or quote respectively.

The price book of the quote and price book of the opportunity may also be kept in synchronization. In an embodiment if the opportunity has line items the price book is not synchronized and consequently in a further embodiment the only time the price book is synchronized during ongoing synchronization is when neither the opportunity nor the quote has any line items. In an embodiment after synchronization prior to committing the resulting change a synchronization validation is performed.

In an embodiment ensuring all line items of a quote and opportunity pair that are marked as requiring synchronization SyncValidator may further ensure that each of quote line items and the opportunity line items are synchronized.

Once a quote is synchronized with an opportunity synchronized quote lines may be linked with the corresponding opportunity lines the quote lines are synchronizing with. Opportunity line item may be associated with a foreign key that may be included in quote line item that may point the quote line item to the corresponding opportunity line item that needs to be synchronized. Similarly a foreign key field QuoteLineItem may be included in an opportunity line item that points the opportunity line item to a corresponding quote line item to which the opportunity line item is being synchronized. The foreign keys in quote line item and opportunity line item may be set during the initial synchronization with the opportunity. In addition the foreign key in quote line item associated with an opportunity line item may be set when quote is created based on opportunity . In an embodiment linking the quote line items to corresponding opportunity line items when creating quote enables synchronization of the quote without having to recreate all the opportunity line items.

A system side method for synchronizing data in a database network system may begin with insert row . In step in an embodiment a row may be inserted into a first table for storing data if the data to be stored or updated requires a new record because a record did not already exist previously. In step a row may be deleted from the first table if the data update deletes data and results in an extra record in the first table containing no data and or if the update is an express deletion of a particular row that is no longer necessary or applicable. In step if data in a row needs to be changed the row is updated by changing adding and or filling the row with data representing the update. The update may be a change to default data in a newly created row to more useful data or may be a change in data in a previously existing row. In step a row may be inserted into a second table which is being synchronized to reflect the changes in the first table that corresponds to a newly inserted row in the first table. Alternatively if a record does not exist in the second table that corresponds to a record in the first table the previously corresponding record may be added to the second table whether or not the corresponding record of the first table was updated.

In step updates to any rows of the first table are copied to the corresponding rows of the second table. In step if an extra row is present in the second table that does not exist in the first table e.g. because that row was deleted from the first table the extra row is deleted from the second table to agree with the first table. In step the synchronization of the two tables may be validated. For example validation may be performed by performing a comparison to verify the two tables contain the same number of rows and or the rows contain the same field values. Step may be performed in response to activating a save command which in turn as a result of a hook activates the validation of the synchronization of step . If in step it is determined that the two tables have not been properly synchronized in an embodiment the transaction is aborted. In an embodiment the changes to the original record are stored and if the transaction does not commit the changes are undone and the records are restored to their original state. In an alternative embodiment the original records are not actually changed unless the transactions commits. Upon verification in step the tables are synchronized and a commit of the transaction in which the synchronization occurred is performed to apply the changes to the database.

A method for synchronizing related opportunity and quote data in a database network system may begin with receive change . In receive change a database network system may receive a request to make a change to opportunity or quote data from a user. In step a determination is made whether a parent opportunity and a related quote to which the requested change is to be applied are currently being synchronized. In an embodiment the determination may be made by examining whether a logical variable which may be referred to as the SyncedQuote field of the parent opportunity indicates that the parent opportunity is being synchronized. For example if the SyncedQuote field does not indicate that the parent items are to be synchronized then there is no data to synchronize and the synchronization process terminates. If the SyncedQuote field indicates that the parent opportunity is being synchronized then in step a determination is made whether a synchronization was performed in the present transaction. The determination may be made by checking whether the IsSynching flag has been set. If the IsSynching flag has been set to TRUE then a synchronization has already been performed during the present transaction and therefore the synchronization process terminates to avoid an infinite loop. If the IsSynching flag has been set to FALSE then in step a determination is made whether the price book of the parent opportunity has changed. The determination may be made while determining if there are other differences between the quote and opportunity by calling a method which may be referred to SQuote.syncDiff PL SQL that returns the difference between quotes and opportunities. In an embodiment the method that checks for differences between quotes and opportunities returns a list of quotes where the price book is different from their opportunity parents a list of opportunity lines that point to existing quote lines a list of quote lines that point to existing opportunity lines a list of opportunity lines that do not point to existing quote lines and a list of quote lines that do not point to existing opportunity lines. In an embodiment opportunity line items that do not point to existing quote line items are deleted which in some cases may remove all of the opportunity line items for the opportunity allowing the price book of the opportunity to be changed. If the price book of the parent opportunity and the related quote has been changed in step a determination is made whether the related quote has line items. If the quote has no line items in step the quote price book is synchronized with the changed price book of the parent opportunity. Specifically the price book of the quote is changed to the price book of the parent opportunity. If the opportunity already has line items then the method moves from step to step and skips the synchronization of the price book. In step the line items of the related quote are checked for differences with the parent opportunity line items. For example in an embodiment quantity unit price discount service date HasQtySchedule and or HasRevSchedule line items of the quote are synchronized with their respective opportunity line item counterparts. Once the quote line items and opportunity line items are synchronized the synchronization process terminates.

Method for initial synchronization of opportunity and quote data may begin with SyncedQuote changes . In step initial synchronization may be initiated by a function that is activated by a save hook that is associated with an opportunity that is performed once before the rest of the workflow which may be referred to as OpportunityFunctions.saveHook BeforeWorkflowOnce which may identify opportunities by checking changed SyncedQuote fields and determining where the SyncedQuote fields point. In step settings of opportunities that are not being synchronized according to steps that follow are performed. In step a determination may be made to determine which opportunities should be unsynchronized. In step for those opportunities that need to be unsynchronized the logical variable e.g IsSyncing that indicates whether the opportunity is being synced is set to false the IsSyncing field to FALSE for quotes that are to be unsynchronized. In step the foreign keys of quote line items that point to the opportunity line items are unset. In step the function triggered by a save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce may unset schedule flags on the quote lines.

In step the settings of the opportunities determined to need synchronization are set. In step for the opportunities to be synchronized by a function triggered by a save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce may retrieve the quotes set by SyncedQuote field. In step the IsSyncing field may be set to TRUE by a function triggered by a save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce for quotes that need to be synchronized.

In step the function triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce may then call a function that synchronizes a quote e.g. QuoteSynchronizer.sync to the corresponding opportunities. In step the function that synchronizes the quote e.g. QuoteSynchronizer.sync may call the method that returns the difference between the quote and the opportunity SQuote.syncDiff pl sql . The method that returns the difference between the quote and the opportunity may return five lists. The lists may include 1 quotes where the price book is different from the quote s opportunity parents 2 opportunity lines that point to existing quote lines 3 quote lines that point to existing opportunity lines 4 opportunity lines that do not point to existing quote lines and 5 quote lines that do not point to existing opportunity lines. In step if there are quote lines that point to existing opportunity lines the function that was triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce may synchronize the quote lines that point to existing opportunity lines by calling another function that synchronizes individual lines of the quote e.g. LineItemHelper.syncExistingLineItemsInternal . In an embodiment the function that synchronizes individual lines of the quote e.g. LineItemHelper.syncExistingLineItemsInternal may get the corresponding opportunity lines and update them to match the quote lines.

In step a function that synchronizes individual lines of the quote e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce may check if there are any opportunity lines to delete by determining if there are any opportunity lines that do not point to existing quote lines. In an embodiment the function triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce loads these opportunity lines and deletes them.

In step in an embodiment after synchronizing quote lines that point to existing opportunity lines and checking if there are any opportunity lines to delete the function triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce synchronizes pricebooks if needed. The function triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce determines if there are any quotes where the price book is different from their opportunity parents and synchronizes the price books of the quotes and opportunities by calling a function for synchronizing the price book e.g. syncPricebookInternal . In an embodiment calling the function for synchronizing the price book e.g. syncPricebookInternal will get the corresponding opportunities and update their price books to match the quote price books. In an embodiment price books may not be changed until line items are deleted because changing price books on synchronized opportunities if there are line items is prohibited. In an alternative embodiment changing price books without changing line items is permitted and or changing the price book on synchronized opportunities when there are line items is permitted.

In step in an embodiment the function triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce checks if there are any opportunity lines to insert by determining if there are any quote lines that do not point to existing opportunity lines. In an embodiment the function triggered by the save hook e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce may load the quote lines that need to be inserted into the opportunity and may insert the corresponding opportunity lines to match the quote lines that were loaded.

In an embodiment the logic supports bidirectional synchronization from quote to opportunity or opportunity to quote and a function is included for specifying the direction of sysnchronization e.g. SyncDirection enum .

For the initial synchronization the logic may be implemented in the Opportunity entity save lifecycle because the synchronization is implemented using the synchronization quote e.g. SyncedQuote lookup field to synchronize the Opportunity as described previously. In one embodiment the initial synchronization logic is located in the same place as ongoing synchronization for the Opportunity e.g. in OpportunityFunctions.saveHook PostSummariesOnce . In an embodiment to avoid strange behavior such as items not rolling back properly e.g. an error may be thrown even though not everything in the transaction has been rolled back the synchronization logic may be located in a location that is associated with the hook that triggers the synchronization before the work flow begins e.g. OpportunityFunctions.saveHook BeforeWorkflowOnce . Executing a hook before the workflow begins may allow the initial synchronization logic to be executed in basically the same place that post triggers are executed. Executing the initial synchronization logic and post triggers in basically the same place may provide uniformity with the rest of entity save logic e.g. if the initial synchronization was implemented as a post trigger it should work the same way as when the initial synchronization is not a post trigger. Executing a hook before the workflow begins may also be consistent with keeping the initial synchronization within the recursive save detection boundaries which means the workflow will execute once on the Opportunity and the rollups from the Opportunity will also execute once. In an embodiment an opportunity or quote can only be synchronized once during the save process. Attempts to cause an additional synchronization to the same object opportunity or quote may result in the synchronization process failing. Executing a hook before workflow begins works similarly to implementing the initial synchronization as a post trigger and may be more intuitive to a user.

A method may begin with rollup . Rollup may include executing functions and instructions necessary to perform calculations for rollup summary fields. As explained previously a rollup summary field rsf may contain the total sum pricing of all products that a customer may be potentially interested in purchasing given as part of quote. Alternatively a rsf may contain the highest value from a set of related records the lowest value from a set of related records or a total count of the number of records.

In step scheduled workflow tasks may be handled. For example user specified processes such as updating data fields sending email notifications or any workflow actions that are to be completed when certain user specified conditions are met may be handled in workflow .

In an embodiment it may be desirable for implementation of the synchronization of opportunity and quote data produce a synchronization algorithm that performs well is easy to understand and debug handles errors properly maintains data integrity and integrates well with the existing entity save logic. A potential difficulty in synchronizing opportunity and quote data may be the initial synchronization and ongoing synchronization can both trigger additional logic through triggers workflow etc. that could cause recursion infinite looping and unexpected behavior. In an embodiment to avoid synchronization difficulties the ongoing synchronization logic may be positioned as late in the entity save lifecycle as possible preferably after rollup and workflow . For example if updating an opportunity line item the triggers and rollup to opportunity may occur before synchronizing changes to the quote line item. In an embodiment the method waits for quote line item saves to complete which includes waiting for rollup to complete before synchronizing the opportunity line item. Since the synchronization waits for the quote line items save to complete and for rollup to complete before synchronizing the opportunity line item all of the ongoing synchronization logic and save hooks occur after rollup and workflow have been completed.

In step the logic for ongoing synchronization may be implemented. In an embodiment the logic for ongoing synchronization may be located in routines that are triggered as a result of various save hooks in the objects that support synchronization which may be Opportunity OppLineItem Quote and QuoteLineItem. Having the logic for ongoing synchronization located in various save hooks in the objects that support synchronization may enable a determination of when these objects are updated inserted deleted in an embodiment only line items are deleted and undeleted in an embodiment only quote lines are undeleted . In an embodiment each of the save hooks or each of the save hooks that trigger the synchronization may occur after workflow and rollup have been completed for the object.

In step if the opportunity price book is different than the quote and there are no line items in the opportunity the save hook that occurs after rollup e.g OpportunityFunctions.saveHook PostSummariesOnce calls a function that synchronizes the quote during an update e.g. QuoteSynchronizer.syncOnUpdate to synchronize the opportunity price book with the quote. The save hook that occurs after rollup e.g. OpportunityFunctions.saveHook PostSummariesOnce may be part of an entity save framework and allow object specific customizations to the save flow. In step if the quote price book is different than the opportunity and there are no line items in the opportunity the save hook that occurs after rollup e.g QuoteFunctions.saveHook PostSummariesOnce calls a function that synchronizes the opportunity during an update e.g. QuoteSynchronizer.syncOnUpdate to synchronize the quote price book with the opportunity.

In step if opportunity line items were inserted or updated and have fields differing from the synchronizing quote line item the save hook that occurs after rollup e.g. OpportunityLineItemFunctions.saveHook PostSummariesOnce calls a function that synchronizes the quote line items during an update e.g. LineItemSyncHelper.syncLineItemsOnUpdateInsert to synchronize the opportunity line items with the quote line items.

In step if opportunity line items were deleted the delete hook that occurs after rollup e.g. OpportunityLineItemFunctions.deleteHook BeforeDeleteOnce calls a function that synchronizes quote line items e.g. LineItemSyncHelper.syncLineItemsOnDelete to delete the quote line items that correspond to the opportunity line items that got deleted.

In step if quote line items were inserted or if quote line items were updated resulting in one or more fields differing from the synchronizing opportunity line items the save hook that occurs after rollup e.g. QuoteLineItemFunctions.saveHook PostSummariesOncerice calls a function that synchronizes quote line items e.g. LineItemSyncHelper.syncLineItemsOnUpdateInsert to synchronize the inserted or updated quote line items.

In step if quote line items were deleted the delete hook that occurs after rollup e.g. QuoteLineItemFunctions.deleteHook BeforeDeleteOnce calls a function that synchronizes opportunity line items e.g. LineItemSyncHelper.syncLineItemsOnDelete to delete the opportunity line items that correspond to the quote line items that got deleted.

In step if quote line items were undeleted the undelete hook that occurs after rollup e.g. QuoteLineItemFunctions.undeleteHook AfterUndeleteOnce calls a function that synchronizes opportunity line items e.g. LineItemSyncHelper.syncQuoteLineItemsOnUndelete to insert opportunity line items to match the quote line items that were undeleted.

In an embodiment all of the methods may work in batch and expect to receive a collection of objects from the current dmlOperationState. Any errors caught during a save operation may be mapped back to the original source object. In an embodiment having access to the current dmlOperationState may allow calling setThrowable on the object desired to be error out. In an embodiment it may be desirable to ensure that the object that was the source of the synchronization errored out not the target of the synchronization. For example if an opportunity line item was updated it is the source an attempt is made to synchronize the opportunity line item s corresponding quote line item the target . If the attempt to synchronize the opportunity line item s corresponding quote line item fails it may be desirable to call setThrowable on the opportunity line item. See LineItemSyncHelper.handleSaveErrors . LineItemSyncHelper.handleSaveErrors may handle errors that occur during the synchronization process. In an embodiment LineItemSyncHelper.handleSaveErrors maps errors to the correct objects. For example if both quote 1 and quote 2 are being synchronized and quote 2 causes an error the error would only be mapped to quote 2.

Synchronization performance is another consideration in the synchronization process. In an embodiment all synchronization operations both for initial synchronization and ongoing synchronization may be compatible in batch so that API batch operations may perform and scale properly. In an embodiment in order for API batch operation to perform and scale properly all places executing synchronization logic may expect to receive a collection of objects from the current dml batch operation usually from the dmlOperationState . When loading objects from the dml batch operation assumptions may be made about when objects may already be in the current transaction map cache and use UddDb.getEntityObject to retrieve objects. In an embodiment if it is uncertain if an entity has already been loaded in the current transaction objects that are needed are bulk loaded upfront then UddDb.getEntityObject may be used to retrieve the objects once it is determined the objects are in the transaction map. For example when line items are updated it may be necessary to verify if the line items and the line item parents are synchronizing with each other. The parent ids are needed and therefore may be bulk loaded upfront then UddDb.getEntityObject may be used to retrieve the parent ids at a later time when necessary to check their synchronization state.

Another synchronization consideration is error handling. Because all operations may need to be compatible with batch the operations may also map errors back to the right objects so that the entity save framework can properly handle errors in the batch including handling partial failures.

Triggers and other working logic can cause infinite loops when synchronized quotes or opportunities are involved. For example triggers on both the quote and opportunity can cause the synchronization logic to continually synchronize back and forth. In an embodiment to prevent infinite loops due to continual back and forth synchronization when objects that support synchronization have already begun the synchronization process the object cannot be synchronized again during the same transaction.

In an embodiment four objects that support synchronization Opportunity OppLineItem Quote and QuoteLineItem may implement a Syncable interface. The Syncable interface may define the set getIsSyncInProgress methods. These methods set and get a boolean rollbackable variable e.g. isSyncInProgess on the objects supporting synchronization indicating when an object is currently being synchronized. In an embodiment a function may be called on an object that supports synchronization for indicating a synchronization is in progress e.g. syncSyncUtil.setSyncStateTolnProgress method . In an embodiment if the object is already in the process of synchronizing calling the function for indicating a synchronization is in progress e.g. SyncUtil.setSyncStateToInProgress may result in a RecursiveSyncException being thrown. A RecursiveSyncException indicates an error which may result in infinite loops if synchronization is allowed to execute.

A method illustrates when an infinite loop may occur and a RecursiveSyncException thrown. In step if the parent of an OppLineItem is being updated a Recursive SyncException may be thrown. Step illustrates the case of an object already in synchronization progress where the function for indicating a synchronization is in progress e.g. SyncUti.setSyncStateToInProgress may be attempted to be called resulting in a RecursiveSyncException being thrown. If the parent of an OppLineItem is not being updated then no error occurs.

In step QuoteLine1 True if Boolean rollbackable variable e.g. QuoteLine1.isSyncInProgress is set to TRUE and the quote line item is being updated with data from the parent opportunity line item then a RecursiveSyncException may be thrown. If the Boolean rollbackable variable is FALSE then no error occurs.

In step if an opportunity line item is updating itself due to a post trigger a RecursiveSyncException may be thrown. If an opportunity line item is not updating itself due to a post trigger then no error occurs.

In step if a quote line item is updating itself due to a post trigger a RecursiveSyncException may be thrown. If a quote line item is not updating itself due to a post trigger then no error occurs.

In step if a Boolean rollbackable variable e.g. OppLine1.isSyncInProgress is set to TRUE and the Opportunity line item is being updated with updated data from a quote line then a RecursiveSyncException may be thrown. If the Boolean rollbackable variable e.g. Oppline1.isSyncInProgress is set to FALSE or if Opportunity line item is not being updated with updated data from a quote line then no error occurs.

In step if the Boolean rollbackable variable e.g. QuoteLine1.isSyncInProgress is set to TRUE a RecursiveSyncException may be thrown. If the Boolean rollbackable variables are set to FALSE then no error occurs.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the one or more implementations might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs digital versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage spaces which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage space tenant data and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to tenant data . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage space . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned co pending U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled Custom Entities and Fields in a Multi Tenant Database System and which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

In step system is assembled which may include communicatively coupling one or more processors one or more memory devices one or more input devices e.g. one or more mice keyboards and or scanners one or more output devices e.g. one more printers one or more interfaces to networks and or one or more monitors to one another. Additionally assembling system may include installing application platform network interface tenant data storage system data storage system data program code process space UI API PL SOQL save routine application setup mechanism applications servers system process space tenant process spaces tenant management process space tenant space tenant data and application metadata .

In step user system is communicatively coupled to network . In step system is communicatively coupled to network allowing user system and system to communicate with one another . In step one or more instructions may be installed in system e.g. the instructions may be installed on one or more machine readable media such as computer readable media therein and or system is otherwise configured for performing the steps of methods for synchronizing data in a multi tenant database environment. For example as part of step one or more instructions may be entered into the memory of system for synchronizing data in a multi tenant database environment.

In another embodiment although depicted as distinct steps in steps may not be distinct steps. In other embodiments method may not have all of the above steps and or may have other steps in addition to or instead of those listed above. The steps of method may be performed in another order. Subsets of the steps listed above as part of method may be used to form their own method.

Each embodiment disclosed herein may be used or otherwise combined with any of the other embodiments disclosed. Any element of any embodiment may be used in any embodiment.

In an embodiment the initial synchronization logic may be within the save lifecycle of Opportunity object in saveHook BeforeWorkflowOnce . In another embodiment it may be beneficial to decouple the initial synchronization logic from the save process and move the initial synchronization logic into its own function similar to an API Method. Making the initial synchronization logic an API Method may also simply the API interface.

In an embodiment QuoteSynchronizerImpl and LineItemHelperImpl may both be implemented as singletons and therefore may be stateless e.g. none of the methods rely on the state of class variables. There may be instances where making QuoteSynchronizerImpl and LineItemHelperImpl stateful would allow for better caching of objects that have been bulk loaded and when the objects are known to have not been changed. In an embodiment the caching of objects in the transaction object map may be tasked to the UddDb and thus call UddDb.getEntityObject directly with the assumption that the object may already be in the transaction object map and therefore would not cause an additional database query i.e. see LineItemHelperImpl.checkLineItemsAreSyncing. In an embodiment it may be more efficient to implement caching without the use of the UddDb implementation.

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

