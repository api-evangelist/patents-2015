---

title: Large log file diagnostics system
abstract: An information handling system (IHS) diagnostic system includes a user IHS that is coupled to a network and operable to generate a log file that is associated with a user IHS error. A distributed processing IHS is coupled to the user IHS through the network and operable to receive the log file generated by the user IHS over the network. That log file is then stored on a plurality of node IHS's in the distributed processing IHS. When a job request is received from the user IHS over the network, a job associated with the job request is performed on the log file using the plurality of node IHS's to create a job result. The job result that includes at least one cause of the user IHS error is then provided to the user IHS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09430316&OS=09430316&RS=09430316
owner: Dell Products L.P.
number: 09430316
owner_city: Round Rock
owner_country: US
publication_date: 20150219
---
This is a Continuation application to U.S. Utility application Ser. No. 13 553 399 filed Jul. 19 2012 entitled Large Log File Diagnostics System the disclosures of which is incorporated herein by reference in their entirety.

The present disclosure relates generally to information handling systems IHS s and more particularly to diagnostics system for large log files generated by IHS s.

As the value and use of information continues to increase individuals and businesses seek additional ways to process and store information. One option is an IHS. An IHS generally processes compiles stores and or communicates information or data for business personal or other purposes. Because technology and information handling needs and requirements may vary between different applications IHSs may also vary regarding what information is handled how the information is handled how much information is processed stored or communicated and how quickly and efficiently the information may be processed stored or communicated. The variations in IHSs allow for IHSs to be general or configured for a specific user or specific use such as financial transaction processing airline reservations enterprise data storage or global communications. In addition IHSs may include a variety of hardware and software components that may be configured to process store and communicate information and may include one or more computer systems data storage systems and networking systems.

Some IHS s such as for example those that include the Advanced Infrastructure Manager AIM available from Dell Inc. log all events that occur within the system and can generate relatively large log files e.g. having sizes from tens to even hundreds of gigabytes of data and larger in a relatively short time span that are stored locally on the IHS as rolling logs . When an error occurs in the IHS the log files are sent to support technicians that review these hundreds and thousands of line log files line by line in order to determine the cause of the error which typically includes searching the log files using keywords to attempt to determine the events that may have caused the error. Due to the size of these log files diagnosis of errors with the IHS using its log files is difficult requires a large amount of time and conventionally is only plausible in a few specific circumstances.

According to one embodiment an information handling system IHS diagnostic system including a user IHS that is coupled to a network and operable to generate a log file that is associated with a user IHS error and a distributed processing IHS that is coupled to the user IHS through the network wherein the distributed processing IHS is operable to receive the log file generated by the user IHS over the network store the log file on a plurality of node IHS s receive a job request from the user IHS over the network perform a job associated with the job request on the log file using the plurality of node IHS s to create a job result and provide the job result to the user IHS wherein the job result includes at least one cause of the user IHS error.

For purposes of this disclosure an IHS may include any instrumentality or aggregate of instrumentalities operable to compute classify process transmit receive retrieve originate switch store display manifest detect record reproduce handle or utilize any form of information intelligence or data for business scientific control entertainment or other purposes. For example an IHS may be a personal computer a PDA a consumer electronic device a display device or monitor a network server or storage device a switch router or other network communication device or any other suitable device and may vary in size shape performance functionality and price. The IHS may include memory one or more processing resources such as a central processing unit CPU or hardware or software control logic. Additional components of the IHS may include one or more storage devices one or more communications ports for communicating with external devices as well as various input and output I O devices such as a keyboard a mouse and a video display. The IHS may also include one or more buses operable to transmit communications between the various hardware components.

In one embodiment IHS includes a processor which is connected to a bus . Bus serves as a connection between processor and other components of IHS . An input device is coupled to processor to provide input to processor . Examples of input devices may include keyboards touchscreens pointing devices such as mouses trackballs and trackpads and or a variety of other input devices known in the art. Programs and data are stored on a mass storage device which is coupled to processor . Examples of mass storage devices may include hard discs optical disks magneto optical discs solid state storage devices and or a variety other mass storage devices known in the art. IHS further includes a display which is coupled to processor by a video controller . A system memory is coupled to processor to provide the processor with fast storage to facilitate execution of computer programs by processor . Examples of system memory may include random access memory RAM devices such as dynamic RAM DRAM synchronous DRAM SDRAM solid state memory devices and or a variety of other memory devices known in the art. In an embodiment a chassis houses some or all of the components of IHS . It should be understood that other buses and intermediate circuits can be deployed between the components described above and processor to facilitate interconnection between the components and the processor .

Referring now to an embodiment of an IHS diagnostics system is illustrated. The IHS diagnostics system includes a plurality of user IHS s a provider IHS and a distributed processing IHS coupled together through a network . The distributed processing IHS includes a plurality of node IHS s and that are each coupled to the network . In an embodiment any of the user IHS s the provider IHS and the node IHS s may be the IHS and or include some of the components of the IHS described above with reference to . In an embodiment one or more of the user IHS s may include one or more applications that generate relatively large log files. For example one or more of the user IHS s may include an Advanced Infrastructure Manager AIM or AIM controller from Dell Inc. that generates multi gigabyte log files describing all the events that occur within the system. While in the illustrated embodiment two user IHS s are depicted one of skill in the art will recognize that any number of user IHSs may be included in the IHS diagnostic system . In an embodiment the provider IHS may include a web server that is operable to communicate over the network with the user IHS s and the distributed processing IHS .

The distributed processing IHS may include a distributed computing platform for performing batch processing. Thus while in the illustrated embodiment the distributed processing IHS includes three node IHS s and one of skill in the art will recognize that any number of node IHSs may be included in the distributed processing IHS including hundreds and even thousands or more node IHS s. In one example the plurality of node IHS s and are computationally independent and run the Apache Hadoop software framework to provide the distributed processing IHS . In an experimental embodiment a user IHS the provider IHS and the node IHS s and were each provided with at least two quad core processors and at least 500 gigabytes of hard drive space. The Community Enterprise Operating System CentOS version 6 described in detail at http www.centos.org was installed on the user IHS the provider IHS and at the node IHS s and . Apache Hadoop software was then installed on the user IHS the provider IHS and the node IHS s and as described at http hadoop.apache.org common docs r0.15.2 cluster setup.html. Cascading available at http www.concurrentinc.com downloads was then added as a software abstraction layer for Adache Hadoop. Jetty web server was then installed on the provider IHS . While the specific steps and elements detailed above were used to create an experimental embodiment of the diagnostic system of the present disclosure discussed below one of skill in the art will recognize that a variety of distributed computing platforms that perform batch processing along with associated operating systems software abstraction layers and web server software other than those described herein will fall within the scope of the present disclosure.

As described according the method below the node IHS s and in the distributed processing IHS are used work through volumes of complex data to clean and structure the data such that the cause of errors in the user IHS s may be determined. For example a plurality of Map Reduce jobs may be created e.g. using Cascading Application Programming Interfaces APIs in the experimental embodiment discussed above for use with the node IHS s and running Apache Hadoop in order to have receive log files distribute portions of the log files to the node IHS s and for processing and then collect the processed data in order to combine it into a job result discussed in further detail below. That processing may include parsing the data from the log file to clean and structure the data such that it may be stored in the distributed processing IHS followed by performing a variety of jobs as instructed by the user IHS s or the provider IHS in order to provide job result interfaces that allow the causes of errors in the user IHS s to be determined. In an embodiment processing by the distributed processing IHS may be performed in response to the uploading of log files and the provision of job requests through interfaces on a website provided by the provider IHS using Hypertext Markup Language HTML web pages with Java servlets and similar interfaces may be provided to allow the job results to be viewed to diagnose the cause of IHS errors. Alternatively the interfaces for uploading log files providing job requests and reviewing job results may be provided in an application running on the user IHS and administrator IHS connected to the user IHS.

Referring now to a method for diagnosing IHS errors is illustrated. The method begins at block where a log file is received. As discussed above the user IHS s may generate relatively large log files e.g. multi gigabyte log files during their operation as illustrated in the flow of . For example user IHS s running the AIM or AIM controller from Dell Inc. generate verbose log files that include a myriad of operations by the AIM controller and its components such as the creation of template operating systems and their deployment to servers the movement of workloads or personas from server to server and or a variety of other log file events known in the art.

In an embodiment the provider IHS may provide an upload interface that includes a log file upload web page having a log file input a browse button and an upload file button . In one example the log file upload web page is provided by the provider IHS over the network to at least one of the user IHS s and the at least one user IHS may be used to enter a location of a log file into the log file input or find a log file on the user IHS using the browse button and then upload the log file using the upload file button . In another embodiment the log file upload page may be provided to an administrator IHS connected to the user IHS s such that an administrator may provide log files from one or more of the user IHS s to the distributed processing IHS . In one example controller log files e.g. a log file from a controller of multiple user IHS s such as a AIM controller of multiple AIM systems may be sent to the distributed processing IHS . In other embodiments the user IHS s may be operable to automatically upload log files to the distributed processing IHS without the need for the log file upload web page e.g. log files from a user IHS may be uploaded weekly daily hourly etc. Furthermore at block of the method a plurality of log files generated from a plurality of different user IHS s may be sent to the distributed processing IHS .

Referring now to the method proceeds to block where the log files received by the distributed processing IHS are parsed. As discussed above the distributed processing IHS may be operable e.g. through one or more Map Reduce jobs to receive a log file and distribute portions of that log file to the plurality of node IHS s and . Those node IHS s may then provide a parser that allows each node IHS and in the distributed processing IHS to parse their respective portion of the log file to clean up that portion of the log file and introduce structure to the data in that portion of the log file . In an embodiment each node IHS and may clean their respective portion of the log file by removing data from the log file that is known to be unnecessary in the performance of jobs by the distributed processing IHS discussed in further detail below. For example data such as tags for each log that describe the severity of the log e.g. info warn error etc. may be removed from the portions of the log file at block of the method . In addition logs that were generated without any timestamp values e.g. stack traces may be separated and stored in an intermediate file separate from the log file. Furthermore in an embodiment each node IHS and may structure the data in their respective portion of the log file by placing data from the portion of the log file into a plurality of predefined locations in a data structure e.g. into predefined columns in a database. For example a data structure including predefined columns for a timestamp a component that generated the log file and the actual log message may be provided for data in the portion of the log file parsed by each of the node IHS s . The parsing of the data in the log file allows the distributed processing IHS to distinguish pertinent events from inconsequential events categorize spikes in system event activity create structure in the data so that the data may be consumed by jobs efficiently discussed in further detail below and or provides a variety of other benefits with respect to the log file data that would be appreciated by one of skill in the art.

The method then proceeds to block where the log file is stored. In an embodiment the portions of the log files that were parsed by the node IHS s and in block of the method to create semi structured log file data are then stored in storage that may include the node IHS s and . Thus blocks and of the method may be performed to collect and parse large log files from one or more IHS s using the distributed processing IHS such that the data in those large log files is cleaned and then stored in a structured format on the distributed processing IHS . The use of the distributed processing IHS allows the voluminous amounts of data generated by user IHS s in log files e.g. on the order of terabytes of log file data to be cleaned structured to a definite format and stored in a database. As discussed in detail below this allows the data in those large log files to be used for the diagnosis of user IHS errors that provides significant benefits over conventional diagnostic systems.

Referring now to and the method then proceeds to block where a job request is received. In an embodiment the provider IHS may provide a job interface including a run query web page having a plurality of configurable queries and that allow for the provision of a job request to the distributed processing IHS . For example the configurable query may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the events related to a system entity e.g. a persona with a particular ID to be shown. In another example the configurable query may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the events related to a system entity e.g. a persona with a particular ID and a particular component to be shown. In another example the configurable query may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the events in a particular time period to be shown. In another example the configurable query may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the events related to a particular ID and within a particular time period to be shown. In another example the configurable query may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the events related to a persona with a particular ID that was in a particular state to be shown. In another example the configurable query may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the events related to a persona that transitioned between two of particular states to be shown. While a plurality of examples of configurable queries and that allow for the provision of a job request to the distributed processing IHS are illustrated and described herein one of skill in the art will recognize that a variety of configurable queries may be created that will fall within the scope of the present disclosure. For example the Cascading API discussed above with respect to the experimental embodiment may be used to create configurable queries that cause the distributed processing IHS to perform a variety of different jobs on the stored log file data while remaining within the scope of the present disclosure. While a few examples of jobs are provided below those examples should not be interpreted as limiting as a wide variety of jobs will fall within the scope of the present disclosure.

For example a job might include searching by an identifier in order to allow a user to query a file based on a file identifier. Examples of identifiers may include persona identifiers server identifiers server names and or a variety of other identifiers known in the art. Input into an identifier search job may include the cleaned up data from a log parser job and the identifier search job may query the log file for information requested by the user based on the identifier. The job may include a plurality of parameters such as for example an input path an output path and a key value and the entries in the log file would be queried based on the key value e.g. using the Regex Filter . The output tuples of the identifier search job may then be merged with the rest of the fields and the file output file stored in the file server.

In another example a job might include showing all events that occur between two time periods. Input into a time interval event job may include the cleaned up data from a log parser job. The job may include a plurality of parameters such as for example a path to an input dataset a path where an output needs to be written to and two time stamp values. Date Parser a method in Cascading API that returns timestamp value in long format may be used to generate the timestamp in long format as a separate field. An expression filter may then be used to filter all logs that lie in the specified time interval and the resulting data may be stored in the file server.

In another example a job might include querying all events related to a specific persona in a given time interval. Input into a time interval event job may include the cleaned up data from a log parser job. The job may include a plurality of parameters such as for example a path to an input dataset a path where an output needs to be written to and the identifier or key value for the log that is being filtered. The job may use the Regex Filter to further clean the log file based on the supplied key value. Upon display in the user interface the user may be given an option to view detailed information regarding the persona or to look for related events in the entire log or within the specified time interval. In an embodiment additional parameters may be passed to this job to filter the log files based on more constraints a combination of different constraints etc.

In another embodiment the provider IHS may provide the job interface including a run reports web page having a plurality of configurable reports and that allow for the provision of a job request to the distributed processing IHS . For example the configurable report may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow the performance e.g. a maximum processing time of a particular component to be shown. In the illustrated embodiment the configurable report is providing a job request to the distributed processing IHS to perform a usage efficiency calculation by determining the maximum time minimum time average time etc. taken by a switch manager to process a request. In another example the configurable report may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow all the life cycle of a system entity e.g. a persona with a particular ID to be shown. In another example the configurable report may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will allow the life cycles of all system entities e.g. personas to be shown. In another example the configurable report may allow a job request to be created that instructs the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS that will generate an exception report e.g. to allow the tracking of any log file data in which an anomaly occurs . While a plurality of examples of configurable reports and that allow for the provision of a job request to the distributed processing IHS are illustrated and described herein one of skill in the art will recognize that a variety of configurable reports may be created that will fall within the scope of the present disclosure. For example the Cascading API discussed above with respect to the experimental embodiment may be used to create configurable reports that cause the distributed processing IHS to perform a job on the on the stored log file data.

For example a job might include creating an exception report by reviewing the entire log file to find probable exceptions such as discovery issues and collect the timestamps with exceptions for presentation to the user. Input into an exception report job may include the cleaned up data from a log parser job. The job may include a plurality of parameters such as for example a path to an input dataset and a path where an output needs to be written to. Commonly occurring exceptions may be studied and patterns extracted from those exceptions. The patterns may then be translated to regular expressions. The Regex Filter may be used to look through log files for the exceptions and the exceptions with the stack trace and time at which they were logged may be extracted and stored in a flat file in the file server.

In one example the job interface including the run query page or the run reports web page is provided by the provider IHS over the network to at least one of the user IHS s and the at least one user IHS may then be used to instruct the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS as discussed above. That job request may then be forwarded to the distributed processing IHS by the provider IHS . In another embodiment the job interface including the run query web page or the run reports web page may be provided to an administrator IHS connected to the user IHS s such that an administrator may instruct the distributed processing IHS to perform a job on the log file data stored in the distributed processing IHS as discussed above.

In other embodiments job requests may be automatically sent to the distributed processing IHS without the need for the job interface including web pages such as the run query web page or the run reports web page . In some embodiments a user IHS may generate a real time alert that is associated with an error occurring in the user IHS and that real time alert may be provided to the distributed processing IHS e.g. through the provider IHS or directly to the distributed processing IHS from the user IHS . In response to receiving that real time alert the distributed processing IHS may execute a job request to perform a job on the log file data stored in the distributed processing IHS . In some embodiments a log file may be sent to the distributed processing IHS in response to the real time alert being generated by the user IHS e.g. in response to an error occurring in the user IHS a real time alert may be generated that results in a current log file in the user IHS being automatically sent to the distributed processing IHS along with a job request that is directed to determining the cause of that error. Thus in some embodiments the diagnostic system analyzes log file data post mortum i.e. at some time after an error in the user IHS s has occurred. In other embodiments real time analysis may be enabled by the provision of a log file following an alert that is generated in response to an error occurring in the user IHS . Furthermore real time and historical log file data analysis may be combined to use log file data obtained in real time along with log file data previously stored in the distributed processing IHS in order to diagnose the cause of an error in the user IHS .

Referring now to the method then proceeds to block where a job is performed. In an embodiment the job request received by the distributed processing IHS may correspond to a job e.g. a Map Reduce job that may be divided up into sub jobs to be performed on at least a portion of the log file data stored on the distributed processing IHS . Those sub jobs may then be distributed to the node IHS s and for processing followed by the collection of the sub job results from the node IHS s and and then the combination of the sub job results into a job result. At block the node IHS s and may process the log file data in parallel and multiple jobs may be processed in parallel as well e.g. similar to the other jobs discussed herein .

Referring now to and the method then proceeds to block where a job result is returned. In an embodiment upon performing the job in block according to the job request received at block the distributed processing IHS provides the job result over the network to the provider IHS . At block the provider IHS may provide a result interface that includes a job result web page illustrated in . In the illustrated embodiment the job result web page is provided in response to a job request sent using the run query web page and includes a graphical display of user IHS events over time along with a event list for each event displayed in the graphical display . In one example the graphical display includes a plurality of points e.g. the points and that may be selected in order to display more information on the events that occurred at specific time and the event list includes a plurality of events e.g. the events and that include information about events in the log file. One of skill in the art will recognize that in the illustrated embodiment a time with more events occurring in the log file may correspond to an error occurring in the user IHS and thus a user may select the point the point corresponding to a time in the log file with a relatively high number of events occurring to review the events occurring at that time to determine the cause of an error.

In an embodiment upon performing the job in block according to the job request received at block the distributed processing IHS provides the job result over the network to the provider IHS . At block the provider IHS may provide result interface that includes job result web pages and illustrated in . In an embodiment a controller on one or more user IHS s e.g. an AIM controller discussed above manages a plurality of software images called personas that may include an OS image applications installed in the OS and configuration metadata such as network configuration attributes. In some instances personas may be simply referred to as operating system images even though they may contain an OS image applications configuration metadata etc. These personas or operating system images may be booted on any of the user IHS s in the diagnostic system and a data store may be provided to store and replicate these personas. In the illustrated embodiment the job result web pages and are provided in response to a job request sent using the run reports page and include graphical displays and of a persona life cycle. In one example the graphical display includes a visual timeline having a plurality of events and that may be selected in order to display more information on those events. As can be seen the persona in the illustrated embodiment was started at event booted at event and was runnable at event all occurring around approximately the same time. The persona of the illustrated embodiment then booted at event shortly after the events and . One of skill in the art will recognize that in the illustrated embodiment after becoming runnable at event the persona should not have booted at event . The event may then be selected such that the provider IHS provides the graphical display that includes an information window that includes information that allows a determination of the cause of the error that resulted in the booting at event . Thus if there is an on off state or startup shutdown in the system it may be represented in a timeline.

Thus a system and method have been described that provide the large log files from one or more user IHS s to a distributed processing IHS over a network parse those log files to clean and structure the data and the perform jobs on the parsed log file data to provide job results that may be used as a diagnostic tool for finding the cause of user IHS errors. The use of the distributed processing IHS allows for the entirety of these large log files to be used to generate queries and reports about the health of the user IHS the life cycle of personas running on the IHS and or a variety of other IHS diagnostic results known in the art. The diagnostic systems and methods allow a single user IHS to be diagnosed or a plurality of user IHS s to be diagnosed. Using the job results of the systems and methods described above a repository of reoccurring errors may be created along with any associated solutions. In addition to error diagnosis the log file data may be used for usage efficiency calculations tracking security breaches statistics such as processing times and or a variety of other log file data uses known in the art.

Although illustrative embodiments have been shown and described a wide range of modification change and substitution is contemplated in the foregoing disclosure and in some instances some features of the embodiments may be employed without a corresponding use of other features. Accordingly it is appropriate that the appended claims be construed broadly and in a manner consistent with the scope of the embodiments disclosed herein.

