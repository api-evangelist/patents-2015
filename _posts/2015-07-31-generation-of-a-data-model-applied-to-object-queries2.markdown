---

title: Generation of a data model applied to object queries
abstract: Embodiments include generating data models that may give semantic meaning for unstructured or structured data that may include data generated and/or received by search engines, including a time series engine. A method includes generating a data model for data stored in a repository. Generating the data model includes generating an initial query string, executing the initial query string on the data, generating an initial result set based on the initial query string being executed on the data, determining one or more candidate fields from one or results of the initial result set, generating a candidate data model based on the one or more candidate fields, iteratively modifying the candidate data model until the candidate data model models the data, and using the candidate data model as the data model.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09589012&OS=09589012&RS=09589012
owner: Splunk Inc.
number: 09589012
owner_city: San Francisco
owner_country: US
publication_date: 20150731
---
The present application is a Continuation of U.S. application Ser. No. 14 611 232 filed Jan. 31 2015 entitled GENERATION OF A DATA MODEL APPLIED TO QUERIES allowed on Jul. 27 2015 which is a Continuation of U.S. application Ser. No. 14 067 203 filed Oct. 30 2013 entitled GENERATION OF A DATA MODEL FOR SEARCHING MACHINE DATA allowed on Dec. 31 2014 which is a Continuation of U.S. application Ser. No. 13 607 117 filed Sep. 7 2012 entitled DATA MODEL FOR MACHINE DATA FOR SEMANTIC SEARCH now U.S. Pat. No. 8 788 525 issued 22 Jul. 2014 all of which applications are incorporated herein by reference in their entirety.

This invention relates generally to information organization data modeling search and retrieval and more particularly the generating and utilizing data models in search and retrieval of search engine data.

The rapid increase in the production and collection of machine generated data has created relatively large data sets that are difficult to search. The machine data can include sequences of time stamped records that may occur in one or more usually continuous streams. Further machine data often represents some type of activity made up of discrete events.

Often searching large data sets requires different ways to express search criteria. Search tools today typical allow users to search by the most frequently occurring terms or keywords within the data and generally have little notion of event based searching. Given the large volume and typically repetitive characteristics of machine data users often need to start by narrowing the set of potential search results using event based search mechanisms and then through examination of the results choose one or more keywords to add to their search parameters. Timeframes and event based metadata like frequency distribution and likelihood of occurrence are especially important when searching data but can be difficult to achieve with current search tools.

Also users often generate ad hoc queries to produce results from data repositories. In some cases generating queries sufficient for retrieving the desired results may require an undesirably high level of knowledge about the data domain and or the operation structure of the data repository. Thus systems related to the searching of relatively large sets of data are the subject of considerable innovation.

Various embodiments now will be described more fully hereinafter with reference to the accompanying drawings which form a part hereof and which show by way of illustration specific exemplary embodiments by which the invention may be practiced. The embodiments may however be embodied in many different forms and should not be construed as limited to the embodiments set forth herein rather these embodiments are provided so that this disclosure will be thorough and complete and will fully convey the scope of the embodiments to those skilled in the art. Among other things the various embodiments may be methods systems media or devices. Accordingly the various embodiments may take the form of an entirely hardware embodiment an entirely software embodiment or an embodiment combining software and hardware aspects. The following detailed description is therefore not to be taken in a limiting sense.

Throughout the specification and claims the following terms take the meanings explicitly associated herein unless the context clearly dictates otherwise. The phrase in one embodiment as used herein does not necessarily refer to the same embodiment though it may. Furthermore the phrase in another embodiment as used herein does not necessarily refer to a different embodiment although it may. Thus as described below various embodiments may be readily combined without departing from the scope or spirit of the invention.

In addition as used herein the term or is an inclusive or operator and is equivalent to the term and or unless the context clearly dictates otherwise. The term based on is not exclusive and allows for being based on additional factors not described unless the context clearly dictates otherwise. In addition throughout the specification the meaning of a an and the include plural references. The meaning of in includes in and on. 

For example embodiments the following terms are also used herein according to the corresponding meaning unless the context clearly dictates otherwise.

The term machine data as used herein may include server logs and other types of machine data i.e. data generated by machines . In at least one of the various embodiments machine data streams may be time stamped to create time stamped events. For example information processing environments such as firewalls routers web servers application servers and databases may generate streams of time series data in the form of events. In some cases events may be generated hundreds or thousands of times per second.

The term time series data as used herein is data where each data record has a timestamp associated with it. A Time Series Search Engine is a search engine which in at least one of the various embodiments can perform queries on the stored data limited by a time range such as between one time and another or data earlier than a given time or the like and or generates results ordered by time and or timestamps such as from earliest to latest or vice versa .

The term data repository as used herein refers to data sources that may contain unstructured or structured data such as databases file systems search engine indexes or the like. In at least one of the various embodiments data repository may be a live stream of data. In other cases data repository may be static data or combination of live data or static data. In at least one of the various embodiments data repositories may provide interfaces and or application programming interfaces API for receiving requests queries or searches regarding the data stored in the data repository.

The term query string as used herein refers to commands and or sequences of commands that are used for querying searching and or retrieving data from a data repository. Queries generally produce a result or results based on the form and structure of the particular query string. Query results may be sorted and grouped based on the structure and form of the query string. In at least one of the various embodiments query strings may include operators and functions for calculating values based on the stored records including functions that produce result sets that may include statistics and metrics about the data stored in data repository. Structured Query Language SQL is a well known query language often used to form queries for relational databases. However the various embodiments are not limited to using SQL like formatting for query strings. Accordingly other well known query languages and or custom query languages may be employed consistent with what is claimed herein.

The following briefly describes the embodiments of the invention in order to provide a basic understanding of some aspects of the invention. This brief description is not intended as an extensive overview. It is not intended to identify key or critical elements or to delineate or otherwise narrow the scope. Its purpose is merely to present some concepts in a simplified form as a prelude to the more detailed description that is presented later.

Briefly stated various embodiments are directed towards generating data models that may at least define semantic meaning for modeling unstructured data and or structured data that may be stored in a data repository. In at least one of the various embodiments unstructured data may include data generated and or received by search engines including a time series search engine. Also in at least one of the various embodiments unstructured data may be received and or stored absent pre defined data schemas or formats. In at least one of the various embodiments data models also may be generated to provide at least semantic meaning to structured data that may be stored in Structured Query Language SQL databases Extensible Markup Language XML files or the like.

In at least one of the various embodiments the data model may be determined such that it at least provides semantic meaning to unstructured data. In at least one of the various embodiments data models may be generated to provide at least semantic meaning to unstructured data without creating a static database schema. Further in at least one of the various embodiments one or more data models may be generated such that the organization of the unstructured may remain unmodified. Thus data models in at least one of the various embodiments may provide semantic meaning to unstructured data without modifying the unstructured data e.g. no side effects .

In at least one of the various embodiments a data model may be composed of one or more data model objects. In at least one of the various embodiments data model objects may have a hierarchy analogous to an object oriented programming class hierarchy. Further in at least one of the various embodiments data model objects may include fields filters constraints or the like that correspond to the data the data model object represents.

In at least one of the various embodiments users may employ a data modeling application to produce a report using search objects that may be part of or associated with the data model. The data modeling application may employ the search objects and the data model to generate a query string for searching a data repository to produce a result set. In at least one of the various embodiments the data modeling application may map the result set data to data model objects that may be used to generate reports.

In at least one of the various embodiments a search object may be an individual data model object selected by a user to generate search results. In this case a search object may be a data model object selected from among the data model objects that comprise a data model. Also in at least one of the various embodiments search objects may be specialized objects that may include one or more data model objects portions of one or more data model objects or the like. In some embodiments search objects may include fields filters constraints that may be separate from those comprising data model objects.

In at least one embodiment cloud network enables one or more network services for a user based on the operation of corresponding arrangements and of virtually any type of networked computing device. As shown the networked computing devices may include server data modeling server indexing server enclosure of blade servers enclosure of server computers super computer network device and the like. Although not shown one or more mobile devices may be included in cloud network in one or more arrangements to provide one or more network services to a user. Also these arrangements of networked computing devices may or may not be mutually exclusive of each other.

Additionally the user may employ a plurality of virtually any type of wired or wireless networked computing devices to communicate with cloud network and access at least one of the network services enabled by one or more of arrangements and . These networked computing devices may include tablet mobile device handheld mobile device wearable mobile device desktop network device and the like. Although not shown in various embodiments the user may also employ notebook computers desktop computers microprocessor based or programmable consumer electronics network appliances mobile telephones smart telephones pagers radio frequency RF devices infrared IR devices Personal Digital Assistants PDAs televisions integrated devices combining at least one of the preceding devices and the like.

One embodiment of a mobile device is described in more detail below in conjunction with . Generally mobile devices may include virtually any substantially portable networked computing device capable of communicating over a wired wireless or some combination of wired and wireless network.

In various embodiments network may employ virtually any form of communication technology and topology. For example network can include local area networks Personal Area Networks PANs LANs Campus Area Networks CANs Metropolitan Area Networks MANs Wide Area Networks WANs direct communication connections and the like or any combination thereof. On an interconnected set of LANs including those based on differing architectures and protocols a router acts as a link between LANs enabling messages to be sent from one to another. In addition communication links within networks may include virtually any type of link e.g. twisted wire pair lines optical fibers open air lasers or coaxial cable plain old telephone service POTS wave guides acoustic full or fractional dedicated digital communication lines including T1 T2 T3 and T4 and or other carrier and other wired media and wireless media. These carrier mechanisms may include E carriers Integrated Services Digital Networks ISDNs universal serial bus USB ports Firewire ports Thunderbolt ports Digital Subscriber Lines DSLs wireless links including satellite links or other communications links known to those skilled in the art. Moreover these communication links may further employ any of a variety of digital signaling technologies including without limit for example DS 0 DS 1 DS 2 DS 3 DS 4 OC 3 OC 12 OC 48 or the like. Furthermore remotely located computing devices could be remotely connected to networks via a modem and a temporary communication link. In essence network may include virtually any communication technology by which information may travel between computing devices. Additionally in the various embodiments the communicated information may include virtually any kind of information including but not limited to processor readable instructions data structures program modules applications raw data control data archived data video data voice data image data text data and the like.

Network may be partially or entirely embodied by one or more wireless networks. A wireless network may include any of a variety of wireless sub networks that may further overlay stand alone ad hoc networks and the like. Such sub networks may include mesh networks Wireless LAN WLAN networks Wireless Router WR mesh cellular networks pico networks PANs Open Air Laser networks Microwave networks and the like. Network may further include an autonomous system of intermediate network devices such as terminals gateways routers switches firewalls load balancers and the like which are coupled to wired and or wireless communication links. These autonomous devices may be operable to move freely and randomly and organize themselves arbitrarily such that the topology of network may change rapidly.

Network may further employ a plurality of wired and wireless access technologies e.g. 2nd 2G 3rd 3G 4th 4G 5 5G generation wireless access technologies and the like for mobile devices. These wired and wireless access technologies may also include Global System for Mobile communication GSM General Packet Radio Services GPRS Enhanced Data GSM Environment EDGE Code Division Multiple Access CDMA Wideband Code Division Multiple Access WCDMA Long Term Evolution Advanced LTE Universal Mobile Telecommunications System UMTS Orthogonal frequency division multiplexing OFDM Wideband Code Division Multiple Access W CDMA Code Division Multiple Access 2000 CDMA2000 Evolution Data Optimized EV DO High Speed Downlink Packet Access HSDPA IEEE 802.16 Worldwide Interoperability for Microwave Access WiMax ultra wide band UWB user datagram protocol UDP transmission control protocol Internet protocol TCP IP any portion of the Open Systems Interconnection OSI model protocols Short Message Service SMS Multimedia Messaging Service MMS Web Access Protocol WAP Session Initiation Protocol Real time Transport Protocol SIP RTP or any of a variety of other wireless or wired communication protocols. In one non limiting example network may enable a mobile device to wirelessly access a network service through a combination of several radio network access technologies such as GSM EDGE SMS HSDPA LTE and the like.

As shown in the figure enclosure contains power supply and input output interface rack logic several blade servers and and backplane . Power supply provides power to each component and blade server within the enclosure. The input output interface provides internal and external communication for components and blade servers within the enclosure. Backplane can enable passive and active communication of power logic input signals and output signals for each blade server.

Blade server includes processor which communicates with memory via bus . Blade server also includes input output interface processor readable stationary storage device and processor readable removable storage device . Input output interface can enable blade server to communicate with other blade servers mobile devices network devices and the like. Interface may provide wireless and or wired communication links for blade server. Processor readable stationary storage device may include one or more devices such as an electromagnetic storage device hard disk solid state hard disk SSD hybrid of both an SSD and a hard disk and the like. In some configurations a blade server may include multiple storage devices. Also processor readable removable storage device enables processor to read non transitive storage media for storing and accessing processor readable instructions modules data structures and other forms of data. The non transitive storage media may include Flash drives tape media floppy media and the like.

Memory may include Random Access Memory RAM Read Only Memory ROM hybrid of RAM and ROM and the like. As shown memory includes operating system and basic input output system BIOS for enabling the operation of blade server . In various embodiments a general purpose operating system may be employed such as a version of UNIX LINUX a specialized server operating system such as Microsoft s Windows Server and Apple Computer s IoS Server or the like.

Memory further includes one or more data storage which can be utilized by blade server to store among other things applications and or other data. Data stores may include program code data algorithms and the like for use by processor to execute and perform actions. In one embodiment at least some of data store might also be stored on another component of blade server including but not limited to processor readable removable storage device processor readable stationary storage device or any other processor readable storage device not shown . Data storage may include for example data models indexes or configurations .

Applications may include processor executable instructions which when executed by blade server transmit receive and or otherwise process messages audio video and enable communication with other networked computing devices. Examples of application programs include database servers file servers calendars transcoders and so forth. Applications may include for example data modeling application and indexing application .

Human interface components not pictured may be remotely associated with blade server which can enable remote input to and or output from blade server . For example information to a display or from a keyboard can be routed through the input output interface to appropriate peripheral human interface components that are remotely located. Examples of peripheral human interface components include but are not limited to an audio interface a display keypad pointing device touch interface and the like.

Mobile device includes processor in communication with memory via bus . Mobile device also includes power supply network interface audio interface display keypad illuminator video interface input output interface haptic interface global positioning systems GPS receiver Open air gesture interface temperature interface camera s projector pointing device interface processor readable stationary storage device and processor readable removable storage device . Power supply provides power to mobile device . A rechargeable or non rechargeable battery may be used to provide power. The power may also be provided by an external power source such as an AC adapter or a powered docking cradle that supplements and or recharges the battery. And in one embodiment although not shown a gyroscope may be employed within mobile device to measuring and or maintaining an orientation of mobile device .

Mobile device may optionally communicate with a base station not shown or directly with another computing device. Network interface includes circuitry for coupling mobile device to one or more networks and is constructed for use with one or more communication protocols and technologies including but not limited to protocols and technologies that implement any portion of the Open Systems Interconnection OSI model for mobile communication GSM code division multiple access CDMA time division multiple access TDMA user datagram protocol UDP transmission control protocol Internet protocol TCP IP Short Message Service SMS Multimedia Messaging Service MMS general packet radio service GPRS Web Access Protocol WAP ultra wide band UWB IEEE 802.16 Worldwide Interoperability for Microwave Access WiMax Session Initiation Protocol Real time Transport Protocol SIP RTP General Packet Radio Services GPRS Enhanced Data GSM Environment EDGE Wideband Code Division Multiple Access WCDMA Long Term Evolution Advanced LTE Universal Mobile Telecommunications System UMTS Orthogonal frequency division multiplexing OFDM Code Division Multiple Access 2000 CDMA2000 Evolution Data Optimized EV DO High Speed Downlink Packet Access HSDPA or any of a variety of other wireless communication protocols. Network interface is sometimes known as a transceiver transceiving device or network interface card NIC .

Audio interface is arranged to produce and receive audio signals such as the sound of a human voice. For example audio interface may be coupled to a speaker and microphone not shown to enable telecommunication with others and or generate an audio acknowledgement for some action. A microphone in audio interface can also be used for input to or control of mobile device e.g. using voice recognition detecting touch based on sound and the like.

Display may be a liquid crystal display LCD gas plasma electronic ink light emitting diode LED Organic LED OLED or any other type of light reflective or light transmissive display that can be used with a computing device. Display may also include a touch interface arranged to receive input from an object such as a stylus or a digit from a human hand and may use resistive capacitive surface acoustic wave SAW infrared radar or other technologies to sense touch and or gestures. Projector may be a remote handheld projector or an integrated projector that is capable of projecting an image on a remote wall or any other reflective object such as a remote screen.

Video interface may be arranged to capture video images such as a still photo a video segment an infrared video or the like. For example video interface may be coupled to a digital video camera a web camera or the like. Video interface may comprise a lens an image sensor and other electronics. Image sensors may include a complementary metal oxide semiconductor CMOS integrated circuit charge coupled device CCD or any other integrated circuit for sensing light.

Keypad may comprise any input device arranged to receive input from a user. For example keypad may include a push button numeric dial or a keyboard. Keypad may also include command buttons that are associated with selecting and sending images. Illuminator may provide a status indication and or provide light. Illuminator may remain active for specific periods of time or in response to events. For example when illuminator is active it may backlight the buttons on keypad and stay on while the mobile device is powered. Also illuminator may backlight these buttons in various patterns when particular actions are performed such as dialing another mobile device. Illuminator may also cause light sources positioned within a transparent or translucent case of the mobile device to illuminate in response to actions.

Mobile device also comprises input output interface for communicating with external peripheral devices or other computing devices such as other mobile devices and network devices. The peripheral devices may include an audio headset display screen glasses remote speaker system remote speaker and microphone system and the like. Input output interface can utilize one or more technologies such as Universal Serial Bus USB Infrared WiFi WiMax Bluetooth and the like. Haptic interface is arranged to provide tactile feedback to a user of the mobile device. For example the haptic interface may be employed to vibrate mobile device in a particular way when another user of a computing device is calling. Temperature interface may be used to provide a temperature measurement input and or a temperature changing output to a user of mobile device . Open air gesture interface may sense physical gestures of a user of mobile device for example by using single or stereo video cameras radar a gyroscopic sensor inside a device held or worn by the user or the like. Camera may be used to track physical eye movements of a user of mobile device .

GPS transceiver can determine the physical coordinates of mobile device on the surface of the Earth which typically outputs a location as latitude and longitude values. GPS transceiver can also employ other geo positioning mechanisms including but not limited to triangulation assisted GPS AGPS Enhanced Observed Time Difference E OTD Cell Identifier CI Service Area Identifier SAI Enhanced Timing Advance ETA Base Station Subsystem BSS or the like to further determine the physical location of mobile device on the surface of the Earth. It is understood that under different conditions GPS transceiver can determine a physical location for mobile device . In at least one embodiment however mobile device may through other components provide other information that may be employed to determine a physical location of the device including for example a Media Access Control MAC address IP address and the like.

Human interface components can be peripheral devices that are physically separate from mobile device allowing for remote input and or output to mobile device . For example information routed as described here through human interface components such as display or keyboard can instead be routed through network interface to appropriate human interface components located remotely. Examples of human interface peripheral components that may be remote include but are not limited to audio devices pointing devices keypads displays cameras projectors and the like. These peripheral components may communicate over a Pico Network such as Bluetooth Zigbee and the like. One non limiting example of a mobile device with such peripheral human interface components is a wearable computing device which might include a remote pico projector along with one or more cameras that remotely communicate with a separately located mobile device to sense a user s gestures toward portions of an image projected by the pico projector onto a reflected surface such as a wall or the user s hand.

A mobile device may include a browser application that is configured to receive and to send web pages web based messages graphics text multimedia and the like. The mobile device s browser application may employ virtually any programming language including a wireless application protocol messages WAP and the like. In at least one embodiment the browser application is enabled to employ Handheld Device Markup Language HDML Wireless Markup Language WML WMLScript JavaScript Standard Generalized Markup Language SGML HyperText Markup Language HTML eXtensible Markup Language XML HTMLS and the like.

Memory may include Random Access Memory RAM Read Only Memory ROM and or other types of memory. Memory illustrates an example of computer readable storage media devices for storage of information such as computer readable instructions data structures program modules or other data. Memory stores a basic input output system BIOS for controlling low level operation of mobile device . The memory also stores an operating system for controlling the operation of mobile device . It will be appreciated that this component may include a general purpose operating system such as a version of UNIX or LINUX or a specialized mobile computer communication operating system such as Windows Mobile or the Symbian operating system. The operating system may include or interface with a Java virtual machine module that enables control of hardware components and or operating system operations via Java application programs.

Memory further includes one or more data storage which can be utilized by mobile device to store among other things applications and or other data. For example data storage may also be employed to store information that describes various capabilities of mobile device . The information may then be provided to another device based on any of a variety of events including being sent as part of a header during a communication sent upon request or the like. Data storage may also be employed to store social networking information including address books buddy lists aliases user profile information or the like. Data storage may further include program code data algorithms and the like for use by a processor such as processor to execute and perform actions. In one embodiment at least some of data storage might also be stored on another component of mobile device including but not limited to non transitory processor readable removable storage device processor readable stationary storage device or even external to the mobile device. Data storage may include for example data models .

Applications may include computer executable instructions which when executed by mobile device transmit receive and or otherwise process instructions and data. Applications may include for example data modeling application . Other examples of application programs include calendars search programs email client applications IM applications SMS applications Voice Over Internet Protocol VOIP applications contact managers task managers transcoders database programs word processing programs security applications spreadsheet programs games search programs and so forth.

As shown in the figure network device includes a processor in communication with a memory via a bus . Network device also includes a power supply network interface audio interface display keyboard input output interface processor readable stationary storage device and processor readable removable storage device . Power supply provides power to network device .

Network interface includes circuitry for coupling network device to one or more networks and is constructed for use with one or more communication protocols and technologies including but not limited to protocols and technologies that implement any portion of the Open Systems Interconnection model OSI model global system for mobile communication GSM code division multiple access CDMA time division multiple access TDMA user datagram protocol UDP transmission control protocol Internet protocol TCP IP Short Message Service SMS Multimedia Messaging Service MMS general packet radio service GPRS WAP ultra wide band UWB IEEE 802.16 Worldwide Interoperability for Microwave Access WiMax Session Initiation Protocol Real time Transport Protocol SIP RTP or any of a variety of other wired and wireless communication protocols. Network interface is sometimes known as a transceiver transceiving device or network interface card NIC . Network device may optionally communicate with a base station not shown or directly with another computing device.

Audio interface is arranged to produce and receive audio signals such as the sound of a human voice. For example audio interface may be coupled to a speaker and microphone not shown to enable telecommunication with others and or generate an audio acknowledgement for some action. A microphone in audio interface can also be used for input to or control of network device for example using voice recognition.

Display may be a liquid crystal display LCD gas plasma electronic ink light emitting diode LED Organic LED OLED or any other type of light reflective or light transmissive display that can be used with a computing device. Display may be a handheld projector or pico projector capable of projecting an image on a wall or other object.

Network device also may also comprise input output interface for communicating with external devices not shown in . Input output interface can utilize one or more wired or wireless communication technologies such as USB Firewire WiFi WiMax Thunderbolt Infrared Bluetooth Zigbee serial port parallel port and the like.

Human interface components can be physically separate from network device allowing for remote input and or output to network device . For example information routed as described here through human interface components such as display or keyboard can instead be routed through the network interface to appropriate human interface components located elsewhere on the network. Human interface components include any component that allows the computer to take input from or send output to a human user of a computer.

Memory may include Random Access Memory RAM Read Only Memory ROM and or other types of memory. Memory illustrates an example of computer readable storage media devices for storage of information such as computer readable instructions data structures program modules or other data. Memory stores a basic input output system BIOS for controlling low level operation of network device . The memory also stores an operating system for controlling the operation of network device . It will be appreciated that this component may include a general purpose operating system such as a version of UNIX or LINUX or a specialized operating system such as Microsoft Corporation s Windows operating system or the Apple Corporation s IOs operating system. The operating system may include or interface with a Java virtual machine module that enables control of hardware components and or operating system operations via Java application programs.

Memory further includes one or more data storage which can be utilized by network device to store among other things applications and or other data. For example data storage may also be employed to store information that describes various capabilities of network device . The information may then be provided to another device based on any of a variety of events including being sent as part of a header during a communication sent upon request or the like. Data storage may also be employed to store social networking information including address books buddy lists aliases user profile information or the like. Data stores may further include program code data algorithms and the like for use by a processor such as processor to execute and perform actions. In one embodiment at least some of data store might also be stored on another component of network device including but not limited to non transitory media inside processor readable removable storage device processor readable stationary storage device or any other computer readable storage device within network device or even external to network device . Data storage may include for example indexes data models and configurations .

Applications may include computer executable instructions which when executed by network device transmit receive and or otherwise process messages e.g. SMS Multimedia Messaging Service MMS Instant Message IM email and or other messages audio video and enable telecommunication with another user of another mobile device. Other examples of application programs include calendars search programs email client applications IM applications SMS applications Voice Over Internet Protocol VOIP applications contact managers task managers transcoders database programs word processing programs security applications spreadsheet programs games search programs and so forth. Applications may include for example data modeling application and indexing application .

In at least one of the various embodiments if generating a data model the user may employ data modeling application to systematically encapsulate his or her knowledge of the data enabling data modeling application to provide the data model to other users. In at least one of the various embodiments these other users may employ the generated data model s to generate reports.

In at least one of the various embodiments a data model may be composed of one or more of data model objects. In at least one of the various embodiments data model objects may have a hierarchy analogous to an object oriented programming class hierarchy and may inherit either from a root object provided by the data modeling application or another data model object present in the current data model.

In at least one of the various embodiments a data model may be defined and or stored as a JavaScript Object Notation JSON file. In other cases in at least one of the various embodiments data models may be implemented using XML Python C Perl Java C or the like.

In at least one of the various embodiments a data model object corresponds to some type portion of data in stored in a data repository. In at least one of the various embodiments data model objects may correspond to events. In at least one of the various embodiments they may correspond to a transaction or an abstract concept such as user . In at least one of the various embodiments data model objects may have a set of fields. Some fields of a data model object may be required while other fields may be optional.

In at least one of the various embodiments fields may include types such as numerical string Boolean and timestamp as specified in the data model. In at least one of the various embodiments a data model object s fields may correspond directly to fields extracted from data in the data repository or they may be calculated by the data modeling application using formulas regular expressions or other built in commands.

In at least one of the various embodiments data model object may be arranged to support and or require certain attributes and or properties. In at least one of the various embodiments attribute ObjectName may include the name of the data model object. In at least one of the various embodiments if the data model is implemented using an object oriented programming language ObjectName may be a class type or class name supported by the underlying language.

In at least one of the various embodiments attribute parentName may include an identifier indicating the identity of a parent data model object data model object . In at least one of the various embodiments parentName may be employed by the data modeling application to determine if a data model object is a child object of another data model object.

In at least one of the various embodiments if a value is included for parentName the data modeling application may determine that the data model object derives from the parent data model object. In at least one of the various embodiments a child data model object may inherit characteristics such as fields constraints filters or the like from their corresponding parent data model objects.

In at least one of the various embodiments if parentName is not explicitly set the data modeling application may default to the parentName to an appropriate value that may correspond to a built in root base class e.g. Event or Transaction .

In at least one of the various embodiments fields may be a collection of name value pairs that may be employed to represent properties of the data model object. In at least one of the various embodiments fields may have various properties features or meta data that may be employed by the data modeling application to determine the characteristics of a particular field. See and its accompanying description. 

In at least one of the various embodiments fields may be determined and or associated with the data model object based on defaulting rules. Such rules may be included in one or more configuration files and or configuration stores. Also in at least one of the various embodiments fields may be determined by users through a user interface.

In at least one of the various embodiments data model objects may include additional properties and or behaviors such as Calculations Constraints or the like. In at least one of the various embodiments calculations may be employed to generate field values based on the operation of formulas functions custom scripts or the like. In at least one of the various embodiments constraints may be employed to exclude data from matching a data model object. In at least one of the various embodiments constraints may include regular expressions that may be employed to determine if data from a data repository matches and or maps to a data model object. For example in at least one of the various embodiments if a data repository includes web server log events a regular expression style constraint of uri .css may constrain a data model object to map to web server log events that correspond to HTTP requests for CSS style sheets e.g based on the style sheet having an file extension of .css .

Also in at least one of the various embodiments constraints may include logical and or arithmetic expressions such as bytes 2000 or code 404 or the like. Further in at least one of the various embodiments the rules or formulas included in calculations and or constraints may reference one or more fields or calculations or constraints.

As an example in at least one of the various embodiments data model object may be configured to represent a HTTP request event. HTTP REQUEST may be the data model object name. Further in at least one of the various embodiments http requests may be derived from an event data model object. Thus in at least one of the various embodiments EVENT may be the parent name.

In at least one of the various embodiments fields may include name value pairs that may be relevant to HTTP requests. Further in at least one of the various embodiments HTTP REQUEST data model objects may be defined with constraint such that eligible values for the status fields are less than .

In at least one of the various embodiments data models may be arranged to represent e.g. model unstructured data from various sources. Such sources may include web server logs networking system logs financial transaction events or the like.

In at least one of the various embodiments log record may be a HTTP request log record that data model object may be arranged to model. Data included in the log record may be mapped into fields of data model object . In at least one of the various embodiments the particular fields may be identified collected and extracted using a variety of techniques.

Also data models may be arranged to model data provided in a variety of formats and or stored in a variety of data repositories including SQL databases flat files fixed record length files comma separated files CSV extensible markup language XML or the like.

In at least one of the various embodiments a field may include owner fieldname required flag multi value flag type constraints or the like. In at least one of the various embodiments the data modeling application may employ at least a portion of the attributes and or meta data associated with a field if determining the mapping between the source data and the data model object.

In at least one of the various embodiments owner may indicate particular the data model object that may own the field. In at least one of the various embodiments fieldname may define the name of the field. In at least one of the various embodiments flags such as required and multi value may be Boolean style fields that may be true or false. In at least one of the various embodiments the values of the Boolean attributes may indicate if particular characteristics may be associated with a particular field. For example in at least one of the various embodiments required attribute may be interpreted by the data modeling application to indicate that the corresponding field is required to be filled populated with data. Likewise in at least one of the various embodiments field attribute may be interpreted by the data modeling application to indicate if the field may include multiple values.

In at least one of the various embodiments type attribute may be interpreted by the data modeling application to classify the field data based on the type of data expected. For example in at least one of the various embodiments common data types may include integer string numeric date time timestamp Boolean or the like.

Also in at least one of the various embodiments fields may be associated with constraints that may be applied by the data modeling application as part of determining eligible values for the field. For example in at least one of the various embodiments constraints may be employed by the data modeling application to determine that eligible valid data for field requires a length that is greater than four.

Further data model in may be a non limiting example embodiment of a data model that may be generated using at least one of the various embodiments. One of ordinary skill in the art will appreciate that a variety of data models may be generated using at least one the various embodiments for a variety of different application contexts. The particular model discussed in is presented in the interest of brevity and to provide additional clarity in the description of at least one of the various embodiments. Accordingly it should be obvious to one of ordinary skill in the art that the subject matter disclosed and or claimed herein enable the generation of data models other than the one depicted in .

In at least one of the various embodiments the data model in may represent a portion of a data model directed towards modeling events that may be related to HTTP servers and client interaction with HTTP servers.

In at least one of the various embodiments model object EVENT may be the root of the data model. In at least one of the various embodiments it may be a base data model object that provides core properties and behaviors that may be expected to be common to many events the data model may be expected model.

In at least one of the various embodiments data model object HTTP REQUEST may be derived from EVENT . In at least one of the various embodiments data model object may be specialization of EVENT that may include properties and fields that may be expected to be associated with a HTTP request events. In at least one of the various embodiments such properties may include a uniform resource identifier URI field a referrer field or the like. See . 

Further in at least one of the various embodiments data model object HTTP SUCCESS may be derived from HTTP REQUEST . In at least one of the various embodiments HTTP SUCCESS may be a data model object specialized to represent a HTTP request that had a successful outcome. In at least one of the various embodiments such specialization may include a constraint that requires the status of the request to be or the like e.g. success status codes that start with 2 .

In at least one of the various embodiments PAGE VIEW may be a further specialization derived from HTTP SUCCESS that models successful HTTP requests that may represent a client viewing a web page. Also in at least one of the various embodiments FAQ VIEW may be a further specialization of PAGE VIEW . In one embodiment FAQ VIEW may include one or more constraints that limit the data model object to representing successful HTTP views of a frequently asked question page FAQ .

In at least one of the various embodiments data model objects in a data model may have different and or separate root model objects. In at least one of the various embodiments EVENT SET may be a root data model object that may be arranged to model one or more events group based on criteria defined by the event set object. In at least one of the various embodiments event set objects may be employed to detect and or perform operations on groups of events. For example event set objects may be employed to run a clustering algorithm on the data in the data repository for determining groups of similar events.

In at least one of the various embodiments TRANSACTION OBJECT may be a specialization of an event set object that may be defined to model events that occur within a determined time period in a particular order having particular field values or the like.

In at least one of the various embodiments data model object VISIT may be a specialized transaction that may be arranged to model one or more particular sequence of events that represent a user visiting a portion of a website. Likewise data model object CLIENT may be defined to represent a sequence of events that represent a client visiting a website.

In at least one of the various embodiments users may employ the data modeling application to generate searches and or reports based on a data model. In at least one of the various embodiments search object may be defined by selecting one or more data model objects . In at least one of the various embodiments a search object may be defined to apply particular fields of one or more data model objects to implement a search that corresponds to the a desired report. Also in at least one of the various embodiments a search object may be defined to include its own fields that may be employed to produce format and or display portions of the data model objects that may be included the report.

In at least one of the various embodiments search objects may include one or more fields from one or more data model objects. Also in at least one of the various embodiments search objects may include aggregate fields that enable the computation and display of aggregate results such as sums maximum root mean square or the like to be determined as part of a report.

In at least one of the various embodiments the user may select and or generate search objects . In at least one of the various embodiments search objects may comprise search elements selected from one or more data models. In at least one of the various embodiments search objects may be retrieved from a set of previously generated search objects or it may be generated at the time the user generates the report.

In at least one of the various embodiments search objects may be generated based on data model objects selected from a data model. In at least one of the various embodiments the data model object constraints fields or constraints used to define a data model object may be sufficient for searching to generating the expected report results. In at least one of the various embodiments search objects may be processed by the data modeling application to generate query strings that may be executed against one or more data repositories.

For example in at least one of the various embodiments data model object FAQ VIEW may include a constraint that requires a uniform resource identifier URI field to match a particular page e.g. www.splunk.com faq.html to produce report results that include events representing page views of a FAQ page e.g. matching the URI pattern of interest .

In at least one of the various embodiments the selected generated search objects may be received by query generator . In at least one of the various embodiments query generator may employ the search objects and or the data model to generate a query string and or search string that may correspond to the requested report. In at least one of the various embodiments the query string and or search string may be generated based on the data model objects that may contribute data to the report.

In at least one of the various embodiments data repository may receive the query string generated by query generator . In at least one of the various embodiments the query string may be executed against data stored in the data repository to produce a corresponding result set. In at least one of the various embodiments the result set may be presented in a format native to the operative data repository.

In at least one of the various embodiments instance generator may receive the result set from the data repository and produce instances of data model objects corresponding to the result set. In at least one of the various embodiments instance generator may generate report results that may include a collection of instantiated data model objects.

From report results in at least one of the various embodiments a report may be generated. In at least one of the various embodiments report may be formatted for a user to read on web page or other user interface. Also in at least one of the various embodiments reports may be formatted for printing exporting to other applications exporting to other network devices archiving or the like.

In at least one of the various embodiments reports report views and or report formatting may be based on the data model search objects or report templates associated with the generated report results. For example in at least one of the various embodiments data model objects comprising the report results may include several fields such as URI Timestamp Referrer CookieName or the like. A report view in at least one of the various embodiments may be configured to selectively list a portion of the available fields such as just the URI and Timestamp. In at least one of the various embodiments a user may design reports and or report templates in terms of the data models and or search objects e.g. for pivot reports . In at least one of the various embodiments the one or more report models may be employed to generate the reports.

In at least one of the various embodiments data models may be selected from a set of one or more previously generated data models or a new data model may be generated. In at least one of the various embodiments different users may determine and or generate separate data models where each data model may represent a different view and or perspective of the data stored in the data repository.

In at least one of the various embodiments data models may be generated to represent e.g. model unstructured data that may be stored in a data repository. In at least one of the various embodiments unstructured data may include data generated and or received by search engines including a time series engine. Also in at least one of the various embodiments unstructured data may be received and or stored absent pre defined data schemas or formats.

In at least one of the various embodiments the data model may be determined such that it at least provides semantic meaning to unstructured data stored in data repository. In at least one of the various embodiments data models may be generated to provide at least semantic meaning to unstructured data without the creating a static database schema. Further in at least one of the various embodiments one or more data models may be generated such that the unstructured data may remain unmodified. Thus data models in at least one of the various embodiments may provide semantic meaning to unstructured data without modifying the unstructured data e.g. causing little or no side effect .

In at least one of the various embodiments data models also may be generated to provide at least semantic meaning to structured data that may be stored in SQL databases XML files or the like.

At block in at least one of the various embodiments determine one or more search objects based on the determined data model and or a selected report template. In at least one of the various embodiments search objects may be data model objects selected from the data model. Also in at least one of the various embodiments search objects may be generated based on one or more report templates that may include portions of one or more data model objects from one or more the data models. In at least one of the various embodiments search objects may include calculations and filters that may be applied to generate results views reports or the like.

At block in at least one of the various embodiments the data modeling application may generate a query string based on one or more determined search object s and or one or more determined data models. In at least one of the various embodiments the query string may be formatted to be compatible with at least one targeted data repository.

In at least one of the various embodiments the data modeling application may traverse at least a portion of the data model to generate at least a portion of a query string for searching data in at least one data repository wherein the portion of the data model is determined based on the at least one search object.

At block in at least one of the various embodiments the generated query string may be executed at or on a data repository to produce a result set that may correspond to the query string.

At block in at least one of the various embodiments the data modeling application may receive the query result set from the data repository. In at least one of the various embodiments the data modeling application may map the values and or records included in a result set to the appropriate data model objects. In at least one of the various embodiments one or more instances of data model objects may be instantiated that correspond to data included in the result set.

In at least one of the various embodiments the mapping process may determine the data model objects that correspond to the result set data based on the filters constraints or fields that may be determined to match the data in the result set.

In at least one of the various embodiments the data modeling application may map data from at least one portion of the result set to at least one data model object included in the data model wherein the at least one portion of the result set is based on a configuration of the data model. For example in at least one of the various embodiments data models and or data model objects may be configured to include filters constraints fields or the like which may be employed to identify and or extract one or more portions of the result set for mapping to the data model and or data model objects.

At block in at least one of the various embodiments generate a report based on the mapped data model objects and or result set. In at least one of the various embodiments reports may be formatted using well known techniques based on at least the expected target audience. In at least one of the various embodiments reports may be formatted for viewing and or manipulation by users e.g. presented in web pages . In at least one of the various embodiments the data modeling application may generate at least one report for the at least one data model object that corresponds to the data mapped from the at least one portion of the result set. Also in at least one of the various embodiments reports may be formatted for importing into other applications other machines network devices or the like.

At block in at least one of the various embodiments the data modeling application may determine a parent data model object for the generated data model object. In at least one of the various embodiments each data model object may have a corresponding parent data model object. In at least one of the various embodiments determining a parent data model object may depend on the purpose owner or the like of the data model object.

In at least one of the various embodiments additional data model objects in the data model may be derived from the parent data model object. In at least one of the various embodiments well known object oriented programming characteristics such as inheritance polymorphism or the like may be supported by data model objects.

In at least one of the various embodiments the parent data model objects may provide fields constraints filters or the like to child data model objects that may be in the data model. In at least one of the various embodiments the parent data model object may also provide interfaces that may influence how child data model objects may be defined.

Also in at least one of the various embodiments new data model objects may be generated separate from a parent data model objects. In at least one of the various embodiments such data model objects may automatically receive a parent data model object provided by the data modeling application.

At block in at least one of the various embodiments fields for the data model object may be determined. In at least one of the various embodiments zero or more fields may be generated and associated with the data model object.

In at least one of the various embodiments a portion of the fields that comprise the parent data model object may be considered to be part of the generated data model object based on object oriented inheritance. In at least one of the various embodiments fields derived from a parent data model object may be fixed un editable and or non removable.

At block in at least one of the various embodiments additional data model object attributes and properties may be determined. In at least one of the various embodiments these may include filters functions e.g. evaluations calculations aggregations or the like constraints or the like.

At decision block in at least one of the various embodiments if more data model objects remain to be generated control may loop to block . Otherwise in at least one of the various embodiments control may be returned to a calling process.

In at least one of the various embodiments data model objects may be added to data models subsequent to the initial generation of the data model. Likewise data model objects may be removed from a data model subsequent to the initial generation of the data model.

In at least one of the various embodiments if a parent data model object is removed from a data model its child data model objects may be updated and associated with other data model objects or they may be removed from the data model as well. In at least one of the various embodiments the portions of the data model objects that depend on the removed parent data model object may be modified such the data model remains consistent. For example if a parent data model object is removed that corresponding child data model object may be removed as well. Thus in at least one of the various embodiments a user may be asked for input as to how to proceed. In some cases the child data model objects may remain part of the data model after having their data model parent objects adjusted appropriately. In at least one of the various embodiments a user may be notified that removing the parent data model object may affect other data model objects. In such cases in at least one of the various embodiments a user interface may be provided that enables the user to direct the data modeling application to take the appropriate action.

At block in at least one of the various embodiments a field type may be determined for the new field.

At block in at least one of the various embodiments Boolean attributes may be determined for the new field. Also in at least one of the various embodiments flag type attributes may be determined for the new field. Boolean and or flag attributes may be used to define properties such as read only required multi valued or the like.

At block in at least one of the various embodiments additional constraints and or fields may be determined and associated with the new field.

At block in at least one of the various embodiments optionally the effective time period for the event set object may be determined. In at least one of the various embodiments time periods may be included in event set objects to collect and or group events that occur within the determined time periods.

At block in at least one of the various embodiments filters constraints rules or the like may be determined to define the events and or data that may correspond to the event set object.

At decision block in at least one of the various embodiments if the event set object is intended to match an event sequence control may move to block . Otherwise in at least one of the various embodiments control may be returned to a calling process.

In at least one of the various embodiments an event set object may be arranged to model a transaction that identifies a set of events that occur in a set period of time. Thus in at least one of the various embodiments the one or more events that contribute to the transaction may be defined and associated with the event set object. For example in at least one of the various embodiments if the event set object is intended to model a user visiting a web site the event set object may be generated to match page view events generated by the same user that may occur within 10 minutes of each other.

At block in at least one of the various embodiments the event sequencing ordering matching rules may be established the event set object. In at least one of the various embodiments an event set object may be arranged to represent a set events that arrive in a particular order within a particular time period by defining constraints that correspond to the order the events are received. For example in at least one of the various embodiments a constraint such as purchaseConstraint login.html store.html checkout.html confirm.html may define a event set object that models the behavior a user logging into to system before completing a purchase.

At block in at least one of the various embodiments determine candidate data model object fields based on the result set that corresponds to the query string. In at least one of the various embodiments result sets may include records that have similar elements. In at least one of the various embodiments the elements may be explicitly available in the result set such as for SQL database results that return results organized into named columns. In at least one of the various embodiments result sets may be generated from unstructured data where candidate field names and values may be identified and extracted from the unstructured data record.

In at least one of the various embodiments the candidate fields may be displayed in a user interface list enabling a user to interactively select them. Or in at least one of the various embodiments the candidate fields may be provided to the user in list.

At block in at least one of the various embodiments the result set records may be analyzed to determine the fields the records may have in common. In at least one of the various embodiments records having fields in common may be useful for determining potential parent child data model objects.

For example in at least one of the various embodiments result records related to HTTP events may each include a source IP address and a HTTP method GET HEAD PUT POST or DELETE . Thus in at least one of the various embodiments a data modeling application may determine that each result record that includes a source IP address and HTTP method may be a candidate for a HTTP Request data model object. Further in this example if some records include a source IP address a HTTP method and a series HTTP response code indicating success those records with may be determined to be specializations of the HTTP Request in this case a HTTP Success event.

At block in at least one of the various embodiments at least one candidate data model may be generated based on the candidate data model objects and the candidate fields and the relationships commonalities of the fields in the result set records. The candidate data model and or candidate data model objects may be presented in a user interface enabling the user to select and or modify them.

At block in at least one of the various embodiments the candidate data model and or the candidate data model objects may be iteratively modified until they may be accepted as sufficiently modeling the source data.

At block in at least one of the various embodiments the root data model object and at least one target data model object may be determined based on the received search objects. In at least one of the various embodiments the data modeling application may analyze the search objects to determine the root and or top data model objects that may be relevant for the report. Also in at least one of the various embodiments the search object may be processed by the data modeling application to determine a target data model object. For example in at least one of the various embodiments if a search object represents a single data model object such as PAGE VIEW then PAGE VIEW would be the target data model object.

In at least one of the various embodiments the data modeling application may traverse the data model in reverse upwards from the target data model object to identify the root data model object for the report. For example in at least one of the various embodiments referring to data model if the target data model object is HTTP SUCCESS the root data model object would be EVENT .

At block in at least one of the various embodiments the data modeling application may traverse the data model object path between the determined root data model object and a determined target data mode object. In at least one of the various embodiments the data modeling application may traverse the data model starting at the root data model object. In at least one of the various embodiments during the traverse the data modeling application may visit each data model object on the path between the root object and the target data model object.

In at least one of the various embodiments the data modeling application may employ well known methods to traverse data model. One ordinary skill in the art will appreciate that the data model may be logically represented as a hierarchical tree data structure and that a data model may be implemented using a variety of well known programming methods that may include indexes lookup tables linked lists arrays hash tables map tables graphs trees or the like. Likewise various well known traversal strategies may be employed to determine the data model objects to visit and the order for visiting them.

At block in at least one of the various embodiments a query string fragment may be generated based on the current data model object. In at least one of the various embodiments the data modeling application may visit each data model object in the path between the root data model object and the target data model object.

In at least one of the various embodiments each visited data model object may be analyzed by the data modeling application. In at least one of the various embodiments query string fragments that correspond to each visited data model object may be generated based on the fields attributes properties or constraints that comprise the visited data model objects.

At decision block in at least one of the various embodiments if the target data model object may have been reached by the data modeling application during the traversal of the data model control may move to block . Otherwise in at least one of the various embodiments control may loop back block to continue traversing the path between the root data model object and the target data model object.

At block in at least one of the various embodiments the generated query string may be associated with the search object report model and or the target data model object. Next control may be returned to a calling process.

In at least one of the various embodiments a data modeling application may generate query strings that use a language and syntax that may correspond to one or more query languages and or query protocols supported by the target data repository. For example in at least one of the various embodiments if a target data repository is a relational database management system that supports SQL the data modeling application may generate a query string in the form of SQL query e.g. SELECT fname fname FROM table1 WHERE constraint xxx .

Also in at least one of the various embodiments if the data repository is search engine the data modeling application may generate a query string that is in the form of a search engine query suitable for the target search engine such as search constraint xx constraint yy. 

In at least one of the various embodiments data repositories that have rich query languages may generate result sets that closely model the data model. On the other hand in at least one of the various embodiments data repositories that may have primitive query languages may produce result sets that may require additional processing by the data modeling application to enable a mapping of the result set to a data model.

At block in at least one of the various embodiments select fields from data model object s to add to the pivot report template. In at least one of the various embodiments fields may be selected as row fields or column fields for the pivot report.

In at least one of the various embodiments selecting a field to be row field may cause the data modeling application to generate one row for each unique value of the field that may be in the result set. For example in at least one of the various embodiments if a URI field from a HTTP SUCCESS object is selected to be a row field one row for each unique URI found in the result set may be expected to be in the pivot report.

In at least one of the various embodiments column fields may be selected to define the columns of the pivot report. In at least one of the various embodiments these may be the fields selected to be analyzed reported on for each row in the pivot report. In at least one of the various embodiments the actual value that is displayed in the row column cell of the report may depend on additional calculation information that may be associated with the cell.

In at least one of the various embodiments determine at least one field from at least one data model object for display that is subsequently associated with at least one row in at least one pivot report model. In at least one of the various embodiments determine at least one field from at least one data model object for display that is subsequently associated with at least one column in the at least one pivot repot model wherein the at least one column corresponds to the at least one field.

At block in at least one of the various embodiments determine calculation for pivot report cells. In at least one of the various embodiments pivot reports may include one or more cells that display the results of aggregate calculations such as sum average count standard deviation root mean square or the like.

In at least one of the various embodiments calculations may be selected by users from a pre filled list. In at least one of the various embodiments the calculation may default to a particular formula or function based on a configuration value. In at least one of the various embodiments system wide defaults may be assigned. Also in at least one of the various embodiments default calculations may be configured and or associated to particular users or to particular data models.

For example in at least one of the various embodiments if URI is a row field and BYTES is a column field a cell may be defined to show the sum of the bytes for each unique URI in the result set.

In at least one of the various embodiments associate at least one operation e.g. calculation for each determined field in a row of the at least one pivot report model wherein an output of the operation for each determined field in the row is displayed in at least one corresponding column of the pivot report model.

At decision block in at least one of the various embodiments if the pivot report is complete control may move to block . Otherwise in at least one of the various embodiments control may loop back to block .

In at least one of the various embodiments users may generate pivot report templates that have one field from a data model object and one operation e.g. avg webhits . Also in at least one of the various embodiments a user may generate one or more pivot report templates based on a single operation that may be applied to an entire data model object For example in at least one of the various embodiments a single count operation that may calculate the number of results that match that data model object may be used to generate a pivot report template.

At block in at least one of the various embodiments store the completed pivot report template in stable storage e.g. hard drive file system database or the like . In at least one of the various embodiments the completed pivot report template may be stored for use at some future time or it may be immediately used to generate a pivot report. Also in at least one of the various embodiments incomplete pivot report models may be stored in an incomplete state. Incomplete pivot report templates may be retrieved by users to continue generating the pivot report templates. Next in at least one of the various embodiments control may be returned to a calling process.

At block in at least one of the various embodiments execute the one or more generated query strings on a data repository to produce a query result set that corresponds to the query string.

At block in at least one of the various embodiments map the query result set to the row fields and column fields the pivot report template. In at least one of the various embodiments the row fields may include an entry for each unique value that may be included in the result set. In at least one of the various embodiments the value for each row column cell may be determined based on the calculation function that may be associated with the row column cell.

In at least one of the various embodiments the values for the cell may be returned directly as part of the result set. For example in at least one of the various embodiments a query string fragment may include a built in feature of the data repository to generate the cell value such as count as rowname colname In this example count may be a built in function provided by the data repository that computes of number of the objects returned by query result set. The resulting value may be used directly to fill in the correct cell value for the pivot report. On the other hand in at least one of the various embodiments if the data repository does not directly calculate and provide the necessary cell values in the result set the data modeling application may perform the computations necessary to generate the cell values from the result set for display in the pivot report after receiving the result set from the data repository.

At block in at least one of the various embodiments generate a pivot report from the pivot report template. Next in at least one of the various embodiments control may be returned to a calling process. In at least one of the various embodiments the resulting pivot reports may have at least one row and at least one column.

Also in at least one of the various embodiments underneath column a hierarchical representation of the current data model may be displayed. This display may enable users to quickly grasp the relationships between the various data model objects.

In at least one of the various embodiments additional columns may be employed to display information about the data model. For example in at least one of the various embodiments column may display a data model object type value corresponding to the root data model object for each listed data model object.

Also in at least one of the various embodiments one or more columns may be included that may provide access to relevant operations such as running report based on the corresponding data model object. For example in at least one of the various embodiments column includes a user interface quick report that may enable users to generate a report directly from the data model viewing user interface.

One of ordinary skill in the art will appreciate that there may be many variations of user interfaces for viewing data models and that screenshot is sufficient to disclose the various embodiments. Also in at least one of the various embodiments user interfaces may include command line interfaces that enable a user to list review or use data models by typing commands at a console.

In at least one of the various embodiments object sectionl may include a view of the currently selected data model. In at least one of the various embodiments each data model objects included in the data model may be displayed and or accessible to the user.

In at least one of the various embodiments if a user selects a data model object from object section the data modeling application may generate a display of the details of that data model object. In this example for at least one of the various embodiments the selected data model object is page view . Thus in this example the values displayed and or accessible in the other sections of user interface may correspond to data model object page view .

In at least one of the various embodiments the data modeling application generates the constraint section to display the constraints that may be associated with the selected data model object e.g. page view . In at least one of the various embodiments inherited constraints may be supplied by the parent data model objects of the selected data model object. For example in at least one of the various embodiments page view is a child of http success and in turn http success is a child of http request. Thus in at least one of the various embodiments inherited constraints may be from either data model object http request or data model object http success. Further in at least one of the various embodiments user interface may enable a user to perform actions and or operations on constraints such as adding constraints previewing constraints renaming constraints deleting constraints or the like.

In at least one of the various embodiments constraint may be associated directly with page view rather than being provided by a parent data model object. In at least one of the various embodiments data model objects may have more or less inherited constraints and direct constraints than depicted in .

In at least one of the various embodiments properties section includes the properties that may be associated with the selected data model object e.g. page view . In at least one of the various embodiments properties displayed here may correspond to fields of a data model object. In at least one of the various embodiments inherited properties may be supplied by the parent data model objects of the selected data model object. For example in at least one of the various embodiments page view is a child of http success and in turn http success is a child of http request. Thus in at least one of the various embodiments inherited properties may be from either http request or http success. Further in at least one of the various embodiments user interface may enable a user to perform actions on properties such as extracting previewing removing or the like.

In at least one of the various embodiments extraction property shows a property that may be associated directly with data model object page view rather than being provided by a parent data model object. In at least one of the various embodiments properties may also include functions or calculations such as Function . In at least one of the various embodiments data model objects may have more or less inherited properties and direct properties than depicted in .

In at least one of the various embodiments if a user may be viewing or reporting on an data model object it may be less important whether a given field definition is inherited from a parent data model object or owned by the current data model object. However in at least one of the various embodiments for user interfaces that enable editing of the data model objects fields that may be owned by the current data model object may be available for edit whereas inherited fields may be treated as read only. In at least one of the various embodiments this may apply similarly to constraints or other inheritable characteristics.

In at least one of the various embodiments pivot reports may be generated for a defined range of time. In at least one of the various embodiments a date time range selector such as selector may be employed to determine the relevant data time range for the pivot report.

For example in at least one of the various embodiments data model object HTTP SUCCESS may be selected. Thus in at least one of the various embodiments fields and other properties associated with HTTP SUCCESS may be made available to the user. In at least one of the various embodiments some fields such as bytes may be designated as column values for the pivot report. In at least one of the various embodiments other fields such as host may be designated as row fields for the pivot report.

In at least one of the various embodiments if a user initiates the generation a pivot report after selecting a new date range the data modeling application may generate a new query string and execute it against the data repository. In other cases in at least one of the various embodiments the data modeling application may filter a previously obtained result set using the new data range.

In at least one of the various embodiments the column fields and row fields determine the layout of the pivot report. In at least one of the various embodiments each pivot report may have at least one row and one column.

In at least one of the various embodiments user interface may be a drag and drop interface that allows a user to design a pivot report based on a set of properties generated based on the fields on the data model object associated with an underlying data model. In at least one of the various embodiments user interface may define four sections that may comprise the building blocks of a pivot report.

In at least one of the various embodiments Filters may be optional restrictions that may be placed on the search results and employed by the data modeling application if a pivot report is generated. For example in at least one of the various embodiments users may employ regular expressions to identify and or remove events where the media type corresponds to an image resource.

In at least one of the various embodiments cell values may be employed to determine the operations used to calculate the values for each cell in the report. For example in at least one of the various embodiments the user and or data modeling application may determine that the cell value should include the count of all page views events. As illustrated in user interface in at least one of the various embodiments cell values include the sum of the field bytes and the count of field http successes .

In at least one of the various embodiments split rows may be employed to determine how the rows of the pivot report may be split up. For example in at least one of the various embodiments user interface may employ host field as a split row which results in rows in the pivot report corresponding to each unique value for included in the host field.

In at least one of the various embodiments split columns may be employed to determine how the columns in the pivot report may be divided. For example in at least one of the various embodiments bytes field and number of http successes field may be selected as split columns for pivot report .

In at least one of the various embodiments the base class in this example pivot report template may be ApacheAccessSearch . Likewise in at least one of the various embodiments each pivot report template may include an attribute that indicates the data model that the report model may be associated with. For example in at least one of the various embodiments pivot report model may be included in data model WebIntelligence as indicated by attribute .

In at least one of the various embodiments filters may be an array or list of filters that may be included in a pivot report template. Further in at least one of the various embodiments cells may be an array or list of cell value definitions for a pivot report template. Also in at least one of the various embodiments rows may be an array or list that may include the split rows for a pivot report. In at least one of the various embodiments columns may be an array or list that may include the split columns for a pivot report.

In at least one of the various embodiments a data model implementation may define one or more data model objects. In at least one of the various embodiments each data model object may have a defined parent data model object and a set of fields. For example in at least one of the various embodiments data model object is a portion of computer programming code that may define a data model object of HTTP Request that has a parent object of Event. Further in at least one of the various embodiments data model object defines fields for HTTP Request including uri clientip and referrer.

For example in at least one of the various embodiments additional data model objects may be defined including HTTP Success a child of HTTP Request HTTP Error a child of HTTP Request HTTP Redirect a child of HTTP Request PageView a child of HTTP Success .

In at least one of the various embodiments if an object oriented programming language such as Python C JavaScript or the like may be employed. In at least one of the various embodiments one or more native object oriented programming features of the programming language may be employed to implement support the object oriented characteristics of the data models such as parent child relationships between data model objects. Otherwise in at least one of the various embodiments if non object oriented languages may be employed such as C Perl or the like well known programming techniques may be employed to implement sufficient object oriented functionality.

It will be understood that figures and combinations of actions in the flowchart like illustrations can be implemented by computer program instructions. These program instructions may be provided to a processor to produce a machine such that the instructions executing on the processor create a means for implementing the actions specified in the flowchart blocks. The computer program instructions may be executed by a processor to cause a series of operational actions to be performed by the processor to produce a computer implemented process for implementing the actions specified in the flowchart block or blocks. These program instructions may be stored on some type of machine readable storage media such as processor readable non transitive storage media or the like.

Furthermore it will be understood that for at least one of the various embodiments various types of data may be received and processed as described and claimed herein. And at least one of the various embodiments is not limited to processing machine data.

