---

title: Functional test automation for gesture-based mobile applications
abstract: A method for cloud-based functional testing of a mobile application includes running a functional test program on a server. The functional test program provides a graphical user interface (GUI) that allows a user to select a mobile application and a mobile computing device having a touch-sensitive display screen for receiving user input. The mobile computing device is located remote to the server. The functional test program launches the mobile application on the mobile computing device via a wireless network connection. The server receives precision elements of each gesture-based input on the touch-sensitive display screen, the precision elements being captured and transmitted from the mobile computing device to the server during execution of the mobile application. The precision elements of each gesture-based input are then recorded in a test clip.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09384121&OS=09384121&RS=09384121
owner: SOASTA, Inc.
number: 09384121
owner_city: Mountain View
owner_country: US
publication_date: 20151005
---
This application is a continuation of Ser. No. 13 435 925 filed Mar. 30 2012 now U.S. Pat. No. 9 154 611 which is a continuation in part CIP application of Ser. No. 12 927 426 filed Nov. 15 2010 now U.S. Pat. No. 8 306 195 which application is incorporated by reference herein in its entirety and which application is a continuation of Ser. No. 11 503 580 filed Aug. 14 2006 now U.S. Pat. No. 7 844 036. Both of the aforementioned applications are assigned to the assignee of the present CIP application. This application is also related to Ser. No. 13 435 976 filed Mar. 30 2012 entitled PDCGTMA

The present disclosure relates generally to cloud computing more particularly to automated systems and methods for functional testing of mobile applications that employ a touch sensitive gesture based user interface.

In recent years there has been a huge proliferation of the number of applications also referred to as apps developed for devices such as smartphones tablets and other mobile computing devices. For example there are literally hundreds of thousands of mobile applications available in the marketplace for use on hundreds of millions of iOS iPad iPhone etc. and Android mobile platform devices. On a typical day it is estimated that upwards of 1 000 new apps are created for mobile computing devices. Testing of these mobile applications across different platforms hardware modules and software firmware versions is a huge challenge. By way of example for a developer to test all the permutations of a mobile application on all the possible variations of hardware e.g. phone or tablet modules for all operating system OS versions and across all vendor firmware versions such a task could easily result in a thousand or more test case combinations. Thus the explosion of mobile computing devices and apps for use on these devices is creating a strain on testing organizations.

Adding to the difficulty of functional testing of mobile applications is the evolving voice touch movement and gesture based e.g. swipe pinch zoom flip etc. user interfaces that today s mobile applications rely upon. A plethora of challenges exist such as how to precisely test different gestures geolocation motion etc. as well as how to realistically conduct load functional and performance tests on a variety of different mobile devices. For mobile developers reconciling touch and gesture based input with design and functionality goals in mobile applications has become a daunting problem. Testing gestures in a mobile application is extremely time consuming and difficult. Companies typically employ a team of engineers to manually test all of the features and functionality of the application on a given platform. Due in part to the slow arduous labor intensive and error prone process required for manual functional testing of mobile applications more than half of all mobile and Web apps are publically released without ever being functionally or scale tested.

Past attempts at functional test automation of mobile applications have typically relied upon the practice of jailbreaking the mobile device. Jailbreaking is the unauthorized process of breaking through the locked environment and removing the limitations imposed by manufacturers such as Apple on devices i.e. iPhone iPod touch iPad which run the iOS operating system through use of custom kernels. Jailbreaking allows users to gain root access to the operating system allowing iOS users to download additional applications extensions and themes that are unavailable through the official Apple App Store. Jailbreaking is necessary if the user intends to run software not authorized by Apple. Additionally many prior art testing techniques require that the mobile device be tethered. Tethering refers to the practice wherein the jail broken mobile device is connected via a wire or cable to a hardware component i.e. a computer capable of utilizing optical recognition algorithms to read pixels and thus identify the objects e.g. icons text buttons elements etc. displayed on the screen. Optical recognition techniques for functional testing of mobile applications however are known to be fragile and brittle. For instance optical recognition techniques are prone to producing false negative test results following minor software revisions such as from a change in the position or location of button on the screen.

In the following description specific details are set forth such as mobile device types operating systems gesture commands functions etc. in order to provide a thorough understanding of the subject matter disclosed herein. However persons having ordinary skill in the relevant arts will appreciate that these specific details may not be needed to practice the present invention. It should also be understood that the elements in the FIGS. are representational and are not drawn to scale in the interest of clarity.

References throughout this description to one embodiment an embodiment one example or an example means that a particular feature structure or characteristic described in connection with the embodiment or example is included in at least one embodiment. The phrases in one embodiment in an embodiment one example or an example in various places throughout this description are not necessarily all referring to the same embodiment or example. Furthermore the particular features structures or characteristics may be combined in any suitable combinations and or sub combinations in one or more embodiments or examples.

In the context of the present application the term cloud broadly refers to a collection of machine instances storage and or network devices that work together in concert. The term cloud computing refers to a paradigm in which machine storage and application resources exist on a cloud of servers. In cloud computing shared resources software and information are provided on demand like a public utility via the Internet. Thus cloud computing provides computation data access and storage resources without requiring users to know the location and other physical details of the computing infrastructure. Cloud computing is closely related to grid computing which refers to the concept of interconnecting networked computers such that processing power memory and data storage are all community resources that authorized users can utilize for specific tasks.

A public cloud refers to a cloud that is publically available i.e. provided by a cloud provider that a user may access via the Internet in order to allocate cloud resources for the purpose of utilizing or deploying software programs and also for running or executing those programs thereon. Some public clouds deliver cloud infrastructure services or Infrastructure as a Service IaaS . By way of example Amazon Elastic Compute Cloud also known as EC2 is a web service that allows users to rent computers on which to run their own computer applications thereby allowing scalable deployment of applications through which a user can create a virtual machine commonly known as an instance containing any software desired. The term elastic refers to the fact that user can create launch and terminate server instances as needed paying by the hour for active servers.

A private cloud is a cloud that is not generally available to the public and which is typically located behind a firewall of a business. Thus a private cloud is infrastructure operated solely for a single organization or business. A private cloud may be hosted and or managed internally by the business or externally by a third party. In the present disclosure a private device cloud refers to a private cloud or network associated with a single organization or business built with devices inside their own data centers or remote office locations. Alternatively the devices may be provided externally by a third party host. A private device cloud may thus comprise a large number of devices including mobile computing devices located throughout the world.

The term server broadly refers to any combination of hardware or software embodied in a computer i.e. a machine instance designed to provide services to client devices or processes. A server therefore can refer to a computer that runs a server operating system from computer executable code stored in a memory and which is provided to the user as a virtualized or non virtualized machine it can also refer to any software or dedicated hardware capable of providing computing services.

A message generally refers to a unit of data that can be sent via an electronics communications network e.g. the Internet to another computational or communications system or device e.g. to a server. By way of example a message could represent a communication sent to a queuing system a REST call or a Hypertext Transfer Protocol HTTP request. A message could also be instantiated entirely or partially as a single operation such as a web service call in any one of a variety of forms e.g. XML JMS HTML JSON etc. A message clip or clip for short comprises a set of one or more messages that includes a specification of the location timing and or dependencies of objects or elements specified within that set of messages. A clip typically comprises a plurality e.g. hundreds or thousands of sequenced messages that form part of a larger load test composition.

In the context of the present disclosure a mobile computing device or mobile device for short refers to any one of a number of different portable electronic devices having a touch sensitive display with a graphical user interface GUI one or more processors memory and one or more modules programs or sets of instructions for performing methods associated with the operations described herein. A mobile computing device typically runs on an operating system executed on one or more processors and may also run one or more applications installed or resident in memory e.g. firmware RAM EEPROM etc. In some embodiments the mobile computing device may provide a plurality of functions including wireless communication thereby allowing a user of the mobile device access data and information via connection to the Internet. Mobile computing devices include smartphones tablet computers wearable computers ultra mobile PCs personal digital assistants other hand held devices as well as other mobile computers e.g. carputers that have touch screen interfaces with wireless capabilities.

A mobile application also known as mobile app is a term used to describe a software or firmware program that runs on a mobile computing device.

The term real time refers to a level of computer responsiveness that a user senses as sufficiently immediate or that enables the computer to keep up with some external process for example to present visualizations of load test results as it constantly changes . Thus real time is a mode of computer operation in which the computer collects data analyzes or computes with the data reports e.g. visually displays and or stores the results nearly instantaneously i.e. within seconds or milliseconds.

In one embodiment a cloud based testing platform is provided that delivers complete functional test automation for gesture based mobile applications. The cloud based testing platform includes an executable program or computer program product that provides precision capture and playback of all continuous touch gestures including pan pinch zoom and scroll on iPhones iPads iPods and Android mobile devices. Touch based GUI testing is conducted from inside the mobile app thereby enabling validations based on variable values and internal mobile application state changes. In one embodiment mobile computing devices are controlled remotely via IP addressing over a wireless network during capture and playback of gesture based command inputs comprising the functional test of the mobile app. Persons of skill in the art will appreciate that this approach obviates the need for tethering rooting or jailbreaking the mobile device.

In another embodiment a private device cloud is implemented to provide a business enterprise or organization with an efficient low cost way of using the mobile devices that the enterprise or organization already owns to test end user experience from real mobile devices remotely located around the world. Implementation of a private device cloud means that the number of mobile devices needed to perform large scale testing is greatly reduced. The private device cloud is implemented in one embodiment as a system which comprises a plurality of mobile computing devices associated with an enterprise. The mobile computing devices each have a touch sensitive display screen operable to receive gesture based user input during running of a mobile application. The mobile computing devices are geographically distributed across a plurality of different states or countries. The mobile computing devices connect with one or more servers over HTTP or Hypertext Transfer Protocol Secure HTTPS . The one or more servers run a program for playback of a test composition comprising a timed sequence of clips on the mobile computing devices running the mobile application. The timed sequence of clips includes one or more actions each of which instructs a precise gesture based action applied to at least one object displayed on the touch sensitive display screen. The precise gesture based action corresponds to a functional aspect of the mobile application and comprising a plurality of data elements previously captured from inside the mobile application while the mobile application was subject to the gesture based user input entered via the touch sensitive display screen.

In still another embodiment the cloud based platform enables precision functional test automation for mobile applications and mobile devices having next generation or mixed generation user interfaces including continuous multi touch gestures voice kinetics bendable device hovering 3D movement and 3D navigation animation browser user interfaces. In a specific embodiment a functional testing program captures the start and end points of each gesture command input via a touch sensitive display of a mobile device. In addition the exact journey of the gesture between the start and end points including the precise coordinates of the path taken by the user s finger s and the temporal variations in the speed with which a particular gesture is performed. In contrast to brittle optical recognition approaches the method system and computer program product of the disclosed invention uniquely captures each GUI gesture from within the mobile app i.e. via code thereby enabling validations based on variable values and internal mobile app state changes.

In the embodiment shown the cloud based testing platform which comprises executable program for capture and playback of a sequence of gesture based inputs used to functionally test a mobile application on a particular mobile computing device is deployed on server . Server communicates with laptop via a browser application running on laptop . In one implementation the functional testing program running on server operates to create a graphical user interface GUI that allows a user of laptop to remotely interact with the testing program. In this way a user of laptop computer may orchestrate the capture and playback of gesture based commands as part of a functional test of a target mobile app running on a specific mobile computing device. The term target as used herein refers to a mobile application in combination with a mobile computing device. Via laptop a user may also compose a test composition comprising a collection of recorded clips obtained from the capture of one or more inputs obtained from one or more mobile devices. In other words gesture based inputs or commands may be captured from different devices or from the same device taken at different times and under different conditions and collected in a database or library associated with server . These captured inputs stored in the form of message clips may be arranged in a temporally sequenced composition for playback on a mobile device in an automated manner as part of functional testing of the mobile device.

It is appreciated that in other implementations laptop computer may comprise a desktop computer workstation or other computing device that provides a graphical user interface that allows a user to capture and playback of a sequence of gesture based inputs used to functionally test a mobile application on a mobile computing device remotely execute a composition of previously recorded clips on the mobile device from anywhere around the world as well as analyze review results of the test in real time. The GUI may be web based so it can be accessed from any computer having web browser capabilities from any location in the world without installation of specialized software.

Persons of skill in the art will understand that the software which implements the cloud based functional testing platform may also be downloaded to the user s laptop computer or implemented on a separate hardware appliance unit located either at the user s premises e.g. behind the firewall or anywhere in cloud . It is further appreciated that laptop is representative of a wide variety of computer devices such as workstations personal computers distributed computer systems etc. that may be utilized by the user to execute the methods processes and testing steps described herein.

It should be understood that the TouchTest agent itself is not the mobile application to be tested rather it is a web application program that is used to launch the particular mobile application to be tested. The TouchTest agent thus provides a wireless connection to an automated test integration system wherein functional testing can be performed continuously over an extended time period without anybody actually physically being there to launch and terminate the mobile app. Note that a user need only enter the information required for login once as shown in field of i.e. when the TouchTest agent is first launched.

Continuing with the example of the next step in the process is the addition of a TouchTest Driver component library to the target mobile application block . In one embodiment the library is dropped inside the application via a script that the user runs. Note that the script may typically create another deployment target in the mobile app project utilized specifically for functional test purposes e.g. not the actual mobile application sold via an app store . That is in the embodiment shown the next step is the deployment of a new version of the target mobile app with the TouchTest Driver library on the mobile device block . In another embodiment the mobile application developer may compile the library into the application to enable functional testing. The TouchTest Driver component library enables from within the application code itself the observation and tracking of every element that is displayed on the screen of the mobile device.

Persons of skill in the art will understand that the approach described herein does not involve the use of optical recognition algorithms. That is because the TouchTest Driver component library is inside the application it is possible to introspect the object model of the mobile application and then identify via code every element that appears on the screen. This information may then be transmitted wirelessly to the remote server running the cloud based functional testing program. For instance when a click on the button or icon occurs that object may be identified wherever it is located on the screen page and observed changing state position etc. . The TouchTest Driver component library thus provides the ability to record with very high precision what happens to objects on the screen as a result of gesture based user input during interaction with the mobile application. For example when a user makes a change to an object on the touch screen via a multi touch input e.g. zoom command the functional test program records the exact gesture and changes that happen to that object with the same precision as takes places via the user input. Later the recorded gesture may be played back remotely by the program such that the object reacts as if the operating system running on the mobile device invoked it via direct manual user interaction with the touch screen.

This approach of recording gesture based inputs by natively using the mobile application allows for manual testing of the target while precisely recording all functional test gestures input to a mobile computing device. The user interface of the functional testing program also allows a user to create a test composition using recorded clips as well as playback of the composition on the remotely located mobile device using advanced test automation features. For instance the user may add delays into the automated test or perform conditional testing wherein the test waits for or responds to certain changes to objects on the screen. In other words the user can validate that a particular object has a particular state whether the state of a button icon image etc. with extremely high accuracy and without the errors common to past approaches that rely upon optical recognition techniques. Very complex test cases may therefore be created for automated testing of remote targets.

Once the testing component Touchiest Driver library has been added to the target mobile application the target mobile application may be launched remotely via the GUI of a user s laptop or other computer using the TouchTest agent block . With the target running the application inputs may be made in any manner gesture event motion event click event typing event etc. to exercise any and all features of the application block . Each gesture or other input that is invoked directly on an object on the screen is immediately captured with precision and transmitted wirelessly back to the cloud testing platform e.g. server or other computer running the functional test program block . The elements of each input which include the position coordinates and temporal speed or velocity rotational and directional if applicable at which gestures or changes are made to each object are then recorded as an app action in a clip block . App actions are clip elements just like http messages soap messages delays etc. Note that the clip elements which contain the precision elements of a gesture based input are referred to as app action clip elements. The process of capturing all gesture based user inputs with precision sending the captured information back to the server and recording of the information in a message clip stored in memory continues until the user elects to stop the recording block .

When a given test is over another test may be launched via the device agent as part of a continuous test integration framework. In addition persons of skill in the art will appreciate that the cloud testing platform described herein makes it possible to functionally test multiple devices located at different geographical locations simultaneously. For instance a test composition may comprise a plurality of tracks with each track including test clips set to play on a different device. By way of example certain mobile applications may be developed to run universally on iPad iPhone and iPod Touch devices. A test composition may be created which includes different tracks each track including test clips to play on a different device running the same mobile app. The playback may occur simultaneously and wirelessly on each of the devices without jailbreaking tethering emulation simulation or the need to have the mobile devices geographically co located.

It should be further understood that playback is not limited to actions of a single object affected by a user s input. Playback of a test composition may include simultaneous actions of a multitude of objects such as in the case of a multi player game having different characters and changing backgrounds. In some cases multiple objects may all be simultaneously affected by inputs not just resulting from a user s finger movements across a touch sensitive screen but also from accelerometers gyroscopes compass and GPS coordinate inputs. All of this information is precisely captured and available for precision playback as part of functional test automation. Note that this is not limited to what actions are performed on just one object it also includes actions simultaneously performed on a multitude of objects. For example the mobile application may comprise a game where there are multi players and where each of the different players make gesture based inputs on a variety of different objects.

After the user of the target has stopped exercising the mobile device the recorded clip is then saved to a memory e.g. RAM EPROM EEPROM magnetic disk etc. associated with the remote server. Thereafter a user of the cloud based testing platform may play the clip back exactly as it was recorded edit the clip via an editor UI to change elements or otherwise create a new test composition.

In the user has selected object via a tap or touch gesture and moved it to a new position in the upper right hand corner of GUI window using a continuous touch sliding gesture shown by arrow . Note that when this gesture is performed on the mobile device the TouchTest Driver captures the exact location coordinates and temporal speed of the gesture as it occurs on the screen. In this case each of the positional coordinates of the arc shown by arrow is captured and the information is sent back to the functional test program. The velocity of the movement sampled in small increments of time is also captured. For example the user may begin to move object slowly and then increase the speed of his finger before stopping and releasing his finger from the touch screen. The functional test program not only captures the starting point represented by dashed line and end point of the gesture but also the path taken arrow and the temporal speed that the gesture took place. For instance the program may capture the gesture input as including an array of velocity vectors e.g. each vector sampled every 100 milliseconds .

As shown the target mobile app mobile device selected by the user in this example is Touches Target Tana s iPad . Once selected the Touches Target Tana s iPad target appears or is moved into the list of included targets of field . It is appreciated that one or more targets may be selected for the test clip to be generated during the capture recording process. Clicking on button commences recording of all inputs to the Target Touches mobile application launched on Tana s iPad mobile computing device wherever that mobile device is located e.g. anywhere in the world via IP network connections . In other words a first user working on laptop may utilize GUI window at a first geographic location to remotely select a target defined as a mobile app and mobile device at a second geographic location for capture recording of all inputs made by a second user working on that mobile device.

As discussed playback of a previously recorded test clip results in execution of all of the user input actions exactly as they were precisely captured on the mobile device. That is when a user incorporates the clip into a test composition and plays it back all of the previously recorded actions will be played back on the target at exactly the same speed and exactly the same positions as when the user was exercising the mobile app during the capture recording phase. Note that the user of the functional testing program also has the option of adding delays waits or otherwise modifying or changing the sequence of actions for playback in the test composition.

Upon completion of all functional testing the testing component library TouchTest Driver may be removed from the target prior to submission of the mobile application to a commercial app store.

In addition to performance and functional testing of mobile applications on various mobile platforms it is important that the tests accurately reflect the user environment including web services calls from games or other apps as well as mobile browsers. In one embodiment this is achieved by testing mobile devices and apps across worldwide geographies through the implementation of a private device cloud. The private device cloud comprises a plurality of mobile devices associated with a business organization or enterprise which devices are distributed in different countries and or continents. The cloud based functional test program described herein may be utilized to playback a test composition on each of these devices either individually in a serial manner or simultaneously in parallel . Because each of these devices is located in different parts of the world the private device cloud may be utilized to ensure that mobile apps perform as intended in different countries on different device platforms and over different Internet backbones and communication service providers. That is the private device cloud may be employed to ensure mobile apps deliver on business promises with accurate and repeatable tests that incorporate how real users are affected by dynamic mobile network conditions. This ensures that the mobile application performs consistently and reliably across the entire infrastructure worldwide .

By way of example is a graphical user interface window that shows an actual demonstration of a test composition being played on multiple devices throughout the world via a private device cloud. As shown the test composition is being played on seven different mobile devices running the same mobile application with the seven mobile devices being distributed across three continents. That is the actual physical mobile devices on which the app actions of the test composition are playing are located in San Francisco Calif. Nice France Mountain View Calif. Atlanta Ga. Japan and Denver Colo. Note further that this real world demonstration is itself being orchestrated from a mobile device KG iPad that is located in a commercial airplane currently in flight United Flight .

Persons of skill in the art will appreciate that the concept of a private device cloud leverages the cloud computing paradigm but with real devices. That is without tethering the employees of an organization or enterprise company who are located around the world can use their own mobile devices e.g. iPhone iPad Android based devices etc. including employees existing devices to create a private test network for testing mobile applications. A private device cloud for functional test automation of mobile applications thus provides a low cost way of using the devices a business organization already owns to test end user experience from real devices distributed around the world. Distributed devices communicate with their server via HTTP S thereby obviating the need for tethering or jailbreaking and allowing real mobile devices located anywhere in the world to be used in a functional test of a mobile application.

Test results generated from the playback of the test composition on each of the mobile communication devices may be communicated back to the server or other computing device from each of the mobile computing devices via standard communications protocol such as HTTP or HTTPS. Aggregated and correlated test results may be delivered back to a user or testing team in a single analytics dashboard UI. In other words the cloud based functional test program described herein aggregates and or correlates all mobile applications metrics end user experience network performance bandwidth application and system metrics in a single graphical view provided on a dashboard screen of a user s laptop mobile computing device or desktop computer. The view provided on a GUI may include the effects of load and network constraints on the actual end user mobile devices.

In an alternative embodiment a private device cloud comprising a plurality of mobile devices distributed around the world may be provided to an organization or enterprise by a third party.

It should be understood that elements of the disclosed subject matter may also be provided as a computer program product which may include a machine readable medium having stored thereon instructions which may be used to program a computer e.g. a processor or other electronic device to perform a sequence of operations. Alternatively the operations may be performed by a combination of hardware firmware and software. The machine readable medium may include but is not limited to floppy diskettes optical disks CD ROMs and magneto optical disks ROMs RAMs EPROMs EEPROMs magnet or optical cards or other type of machine readable medium suitable for storing electronic instructions.

Additionally although the present invention has been described in conjunction with specific embodiments numerous modifications and alterations are well within the scope of the present invention. Accordingly the specification and drawings are to be regarded in an illustrative rather than a restrictive sense.

