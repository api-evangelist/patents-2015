---

title: Implementation of secure communications in a support system
abstract: A support system negotiates secure connections on behalf of multiple guest systems using a set of credentials associated with the guest systems. The operation of the secure connection may be transparent to the guest system such that guest system may send and receive messages that are encrypted or decrypted by the support system, such as a hypervisor. As the support system is in between the guest system and a destination, the support system may act as a local endpoint to the secure connection. Messages may be altered by the support system to indicate to a guest system which communications were secured. The credentials may be managed by the support system such that the guest system does not require access to the credentials.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09607162&OS=09607162&RS=09607162
owner: Amazon Technologies, Inc.
number: 09607162
owner_city: Reno
owner_country: US
publication_date: 20150518
---
This application is a Continuation of U.S. patent application Ser. No. 13 248 980 filed Sep. 29 2011 entitled IMPLEMENTATION OF SECURE COMMUNICATIONS IN A SUPPORT SYSTEM and issued on May 19 2015 as U.S. Pat. No. 9 037 511 which is incorporated herein by reference in its entirety.

Properly configuring secure communications can be difficult in many situations. For example secure communication protocols such as the secure sockets layer SSL and transport layer security TLS protocols can be configured in an operating system. Configuring protocols within the operating system may require configuring a certificate from a certification authority and or key pairs that form the basis for secure communications. Not only can such configuration of the operating system be difficult but each protocol implementation operating system and or application may have differing configuration requirements for accessing secure communications such as the cryptographic functionality. Not only may differing configuration requirements be difficult to implement but if the operating system or application has not been properly hardened the certificate and or private key may be at risk of loss through server compromise by an intruder. Loss of a private key causes a loss of trust in the cryptographic benefits of secure communication as the key may be used by the intruder.

Attempts to offload cryptography from the operating system configuration have resulted in several application programming interfaces. For example a public key cryptography standard PKCS 11 has been used in a virtual machine to expose cryptographic primitives without exposing the key itself to the guest operating system. However the solution can be difficult to configure as different software may have different requirements for using PKCS 11. While various techniques have been employed to effectively simplify the use of secure communications due to the complexity of the tasks the employed techniques are of varied success.

In the following description various embodiments will be described. For purposes of explanation specific configurations and details are set forth in order to provide a thorough understanding of the embodiments. However it will also be apparent to one skilled in the art that the embodiments may be practiced without the specific details. Furthermore well known features may be omitted or simplified in order not to obscure the embodiment being described.

Techniques described and suggested herein include systems and methods for implementing secure communication in a support system on behalf of a guest operating system. For example a support system in a virtualized environment such as a hypervisor may negotiate encrypt and decrypt communications on behalf of a guest operating system among one or more guest operating systems on a host. On top of normal duties in managing the one or more guest operating systems the hypervisor may also process messages between a destination computing system and the guest operating system. The hypervisor may use credentials identifying the guest operating system to create and maintain secure communication channels with the destination computing system. While secure communication channels are open the hypervisor may store the associated keys secrets and other state information for each secure communication session. By examining the routing of each incoming or outgoing communication the hypervisor may match which state may be used to process the communication such as encrypting or decrypting the communication. The processing of messages by the hypervisor may allow the secure communications to be transparent to the guest operating system. For example the guest operating system may send decrypted messages through a virtual driver that are captured by the hypervisor and encrypted before exiting the host. By providing secure communications the hypervisor may protect the secrets of a guest operating system from a compromise of the guest operating system as well as reduce the burden of configuring the guest operating system. The secure communications also may provide the benefit of message integrity authenticity and or secrecy.

Incoming secure messages may also be processed by the hypervisor. Incoming secure messages may be examined by the hypervisor to determine the destination guest operating system and the source computing device . Using the determined destination and source the hypervisor may then use the associated state information to prepare a cleartext message and or verify the integrity of the secure message . The cleartext message may then be sent to the guest operating system .

While the hypervisor has been discussed as an example of the support system for the guest operating system other configurations may also be possible including other hardware and or software implementations. A hypervisor may be viewed as a virtualization support system including Dom0 in a Xen system a parent partition in a Hyper V system and services provided by the virtualization system to a guest operating system. In one embodiment a security component such as a cryptographic processor or a hardware security module HSM may be used. Depending on whether multiple guest operating systems are supported by the HSM the hypervisor may facilitate communication with the HSM and the guest operating system. For example a hypervisor may route secure messages with a guest operating system destination to an HSM. Cleartext messages received from the HSM may then be received by the hypervisor and routed to the guest operating system . In another embodiment the support system may be a virtualized driver. The virtualized driver may provide the benefits of a secure connection such as message integrity authenticity and secrecy through use of Hash based Message Authentication Codes HMAC and encryption. For example use of a virtualized driver by a guest operating system may indicate use of a secure connection. The driver may sign with an HMAC and encrypt outgoing messages. The HMAC may prove message integrity and authority because only the holder of a private key could sign the message the signature also verifying the integrity of the message through a hash function. Having been encrypted the message may also be reasonably presumed secret. In another embodiment a support system or support systems may provide secure communication for guest systems e.g. a computer system that has an operating system running directly on the hardware of the computer system. For example a support system may be a computing resource that receives messages on behalf of guest systems that may be other computing resources. The computing system may receive cleartext messages from a guest system and process the messages to be sent by a secure protocol. Received messages may be processed and sent in cleartext to the destination guest system. One advantage may be that the guest systems may be protected from accessing credentials. For example the guest system may not be able to directly access credentials unless a user selects a setting to allow it. In some embodiments only a service provider may access the credentials the guest system may not.

As cleartext messages do not leave a trust boundary messages may still be considered to be secure in at least some situations. A trust boundary may be defined by a system in which all sub systems are trusted. As cleartext messages are prepared in the physical machine boundary or over a trusted connection to an HSM the cleartext messages may not leave a boundary of trusted computing devices including network devices. If the guest operating system is viewed as less secure than the support system such as may be the case with applications or systems in constant development the secrets may actually be viewed as more secure in the support system. For example an application may have a vulnerability that is exploitable by an intruder that allows the intruder into the guest operating system. However as the private information is stored with the hypervisor the private information such as private keys are not accessible to the intruder because the private information is not accessible to the guest operating system. In some embodiments a user may only have access to the guest operating system as the hypervisor and other computing resources may be managed by an entity. If the entity is more experienced in hardening systems than the user the user may desire the entity to manage the private information and secure connections.

Several advantages may be realized by moving the responsibility for secure communications from a guest operating system to the support system such as a hypervisor. For example secure communications may no longer be operating system dependent. As the secure communication implementation is in the hypervisor guest operating systems of various versions and brands may take advantage of secure communications. Versions of secure communication protocols may be updated in the hypervisor with less potential effect on the guest operating system. Guest operating systems may be updated with less potential added complexity of secure communication configuration or conflicts. With the implementation in a support system automation may become more practical. As configuring of the hypervisor may be similar across hosts if not the same despite differences in guest operating systems the automation need only target the hypervisor. Automated configuration of secure communications such as SSL and or TLS may be desirable because an administrator of a server would not have to learn how to manually configure a server. Application programming interface API automation of enabling SSL TLS and or recycling certificates and other secrets may also be enabled due to automation. With automation secure communications may become more transparent to a developer with minimal configuration as messages sent in cleartext are secured by the support system and not the guest operating system. For example a developer would only need to direct an application to communicate using a channel of communication such as a driver adapter IP address or port visible on the guest operating system to request secure communications. The support system such as a hypervisor may receive messages over the channel and implement secure communications with a destination device specified by the application on the guest operating system. Other advantages to moving the secure communications functionality to a support layer include but are not limited to the ability to upgrade the protocols there without any application specific reconfiguration or changes crypto agility and the ability to leverage any hardware cryptographic acceleration in a standard manner without operating system or application specific support.

In one embodiment a hypervisor on a host machine as may be seen in may secure a communication on behalf of a guest operating system through a secure communication process . Some or all of the process or any other processes described herein or variations and or combinations thereof may be performed under the control of one or more computer systems configured with executable instructions and may be implemented as code e.g. executable instructions one or more computer programs or one or more applications executing collectively on one or more processors by hardware or combinations thereof. The code may be stored on a computer readable storage medium for example in the form of a computer program comprising a plurality of instructions executable by one or more processors. The computer readable storage medium may be non transitory.

A hypervisor may receive an incoming message . If the message requires further security processing the hypervisor may receive the request as a request for a secure communication with a guest operating system and an external computing system. Otherwise the hypervisor may forward the message unprocessed. The hypervisor may negotiate the secure protocol on behalf of the guest operating system using guest operating system credentials such as IP address keys and or certificate information. Information related to the protocol and its state such as exchanged keys secrets and other state data may be stored and associated with the guest operating system. Messages may then be received from the external computing system and or the guest operating system by the hypervisor. If messages are incoming the hypervisor may determine the guest operating system destination and external computing system source. Using the destination and source the hypervisor may look up the state information and guest operating system credentials in order to decrypt and verify the incoming message. Verification may verify the integrity and authenticity of the message. The cleartext message may then be sent to the guest operating system. If the communication is complete the hypervisor may end the communication by terminating a communication link to the external computing system and removing the associated state information. If not the system may await more messages .

If cleartext outgoing messages are received from a guest operating system the hypervisor may use the guest operating system source with the associated destination of the message to retrieve state information. Using the state information the hypervisor may encrypt and or sign with a HMAC the cleartext outgoing message. The encrypted outgoing message may then be sent to the destination . If the communication is complete the hypervisor may terminate the session . Otherwise the hypervisor may await the next message .

Several advantages may be obtained in the process shown in . New incoming secure communication messages may be transparent to a guest operating system. With new incoming communication the hypervisor may negotiate with the originator of the request without contacting the destination guest operating system. Once the hypervisor has finished the negotiation secure messages may then be delivered between the originator and the guest operating system. Multiple guest operating systems may be also serviced by a single hypervisor having access to credentials for each guest operating system. Each guest operating system may have its own credentials such as certificate IP address keys and other individual information. These credentials may resolve to a physical host controlled by a hypervisor. As the hypervisor acts as a gateway between the guest operating systems and the outside world the hypervisor may be able to negotiate on behalf of each of the guest operating systems without configuration or knowledge by external systems participating in the negotiations. For example an incoming communication may come in through a hardware interface. A hypervisor may receive the communication from the hardware interface and determine the communication is a secure communication. Using the credentials of the guest operating system the hypervisor may step into the role of the guest operating system to create and maintain a secure connection. As the hypervisor may always be part of a route to the guest operating system a computing device using the secure connection may not be capable to discern that the hypervisor is negotiating and securing messages on behalf of the guest operating system.

Configuration of a hypervisor may include selecting options for outgoing and incoming secure connections. In one embodiment an administrator may choose among multiple options for determining which communications should be secured such as securing all connections defining secure and insecure ports auto detecting whether messages should be treated as secure defining secure and insecure IP addresses and defining secure and insecure adapters. For example network traffic on ports and may be treated as insecure but traffic over port may be secured. In another embodiment the guest operating system may have two IP addresses. One of the IP addresses can be used to receive insecure messages while a second address may indicate to the hypervisor to form and maintain a secure connection. A hypervisor may determine if a communication should be secured by explicit or implicit information. In one embodiment incoming network traffic may be implicitly defined such as by inspection. For example if incoming traffic appears to be secured through a protocol such as SSL TLS then the hypervisor may use the secure protocol determined. In another embodiment incoming network traffic may be explicitly defined such as the traffic over specified ports or IP addresses.

Turning to it illustrates a process that can be executed by a computer system such as physical machine of . In one embodiment a hypervisor on a host machine may process secure messages received through a receiving process . The hypervisor may receive an incoming message. If the message is not a secure message and the message is a secure communication control message a secure communication control process may be followed. Examples of control messages may include handshaking or renegotiation. The hypervisor control process may determine the destination guest operating system to use the guest operating system credentials in a negotiation. The sender may be determined to associate with state information. Using the determined information the hypervisor may negotiate any changes to or preparation of a secure connection with the sender on behalf of the guest operating system. New and modified state information may be saved and associated with the guest operating system and the sender. In another example the hypervisor may intercept requests to reestablish a secure connection. Using saved state information such as session information the communication may be resumed.

If the message is a secured message the hypervisor may start a message receipt process by determining the guest operating system destination and determining the sender information. Using the destination and sender information the hypervisor may look up the associated state information. Using the state information the hypervisor may decrypt and or verify the message. The decrypted message may then be sent to the guest operating system. Should the decryption and or verification fail the hypervisor may react to the failure such as requesting another message reporting the failure terminating the connection and or renegotiating the connection.

If the message is determined not to be a secure message and determined not to be a secure communication control message the message may be treated as an insecure message. Depending on the user settings insecure messages may or may not be allowed. In some embodiments all insecure messages may be rejected. In other embodiments the insecure message may be given to an insecure message handling process. For example the hypervisor may determine that all messages to defined ports on the guest operating system may be secured while other defined ports may receive insecure messages. In one embodiment rules may also be coordinated with a firewall such that insecure message routes are blocked outside of a trusted network while secured messages may be allowed through the firewall.

Turning to it illustrates a process that can be executed by a computer system such as physical machine of . As shown in the figure a hypervisor on a host machine may use a secure sending process such as sending process when receiving a message from a guest operating system. The hypervisor may receive an outgoing message from a guest operating system. If the message is not part of current secure connection but is in need of a secure connection a secure connection may be negotiated. For example a secure connection may need to be established or renegotiated. Using the credentials of the guest operating system a secure connection may be negotiated on behalf of the guest operating system by the hypervisor. The state of the connection may be stored as associated with the guest operating system and recipient of the secure connection. Having either prepared the secure connection after operation or having a current connection the state information may be used to encrypt the received message . The encrypted message may then be sent to the recipient. In some embodiments insecure messages may be allowed which have neither a current secure connection or need a secure connection . Insecure messages may thus be processed according to user settings. In one embodiment all communications must be secure. Any insecure communications may be dropped and or raise an error.

A hypervisor may determine whether a sending of a message should be secured. The hypervisor may explicitly or implicitly determine the need for secure communications. For example if a connection is currently open to a destination computing system then communication with the destination may be implicitly assumed to use secure communications. In another example each incoming message may be inspected such that messages that appear to be secured or need to be secured may be processed by the hypervisor. In some embodiments all outgoing communication is assumed to be secured. In another embodiment the guest operating system may request a new secure communication channel be opened with a destination through an API call. Otherwise the communication may be over a normal communication channel. In other embodiments a guest operating system may explicitly select a secure communication by using a channel of communication such as a driver virtual adapter IP Address or port.

A support system such as a hypervisor may thus secure connections between multiple computing devices and multiple guest operating systems on a host machine. Both initial incoming and initial outgoing requests for a secure connection may be accommodated. Using credentials assigned to a guest operating system the support system may act on behalf of guest operating systems in creating and maintaining secure connections. The support system may use channels of communication to determine which communications to secure or pass through for each of the guest operating systems. In one embodiment the support system may modify a message header such as a HTTP header to indicate that a communication was received through a secure connection.

The hypervisor may reside in host system within a data plane which may be managed by a control plane. Requests for changes may be received by the control plane and performed on computing resources in the data plane. For example as seen in a user may request a control plane to enable secure communications on a computing resource. The control plane may receive the request from the user. In response the control plane may create keys and request a certificate be issued for the computing resource. The certificate information may be delivered to the support system of the computing resource such as the hypervisor for installation storage and use when needed. Using the user provided settings secure communications may then be enabled .

User specified configuration may be received through multiple channels including API calls applications and web sites. An example of a web site for configuring secure communication in a support system is shown in . The web site may be accessed by a web browser . The web site may contain current configuration information such as the name of the server current certificate information and current secure protocol configuration information . An offer to add secure communication in exchange for value may be offered as a service to the user. The user may select among multiple options to configure the secure communication service. In the embodiment shown the user may select among multiple options to configure which communications should be secured. These options include to always use secure communication only use specific ports for secure communication auto detect secure communication use specific IP addresses for secure communications or by virtual Ethernet adapter. If desired the user may also request an indication that a communication was secured by modifying a message such as a HTTP header. The user may then click a button to enable secure communication on the selected guest operating system. In the embodiment shown the secure communication is in the process of being set up. A progress indicator may indicate the progress of an automatic set up process enabling the hypervisor to secure communications on behalf of the selected guest operating system.

After the user clicks the button to enable secure communication a control plane may begin the process of setting up secure communications for the selected guest operating system. For example the control plane may receive the request to set up secure communications for the guest operating system. The control plane may create a public private key pair on behalf of the guest operating system. Using identifying information about the guest operating system and the public key the control plane request a digital certificate be issued to the guest operating system. The control plane may then deliver the secure communication setup information such as digital certificate keys and other secure information to the hypervisor through a trusted network. The hypervisor may store the secure setup information for use in preparing secure communications on behalf of the guest operating system. Once complete the hypervisor may notify the control plane that the setup is complete. The control plane may then notify the user that the setup is complete and the secure communication may be enabled. In some embodiments this process may run without further user intervention from the click of the button . In other embodiments the user may be allowed to intervene such as import digital certificate and or key pair information rather than having it generated for the user.

A service provider may enable secure communications through enabling a support system to intercept and secure communications to and from a guest system . An example of a guest system can include a physical computer system including an operating system that runs directly on the hardware of the physical computer system and an example of service provider credential generation and use may be seen in . A customer through a computing resource may request to enable secure communications on a guest system maintained by the customer. A server within a control plane may receive the request for enabling secure communications and create a request to generate credentials for the guest system . A control plane may manage computing resources in a data plane such guest system . A credential generator may generate and set up credentials . This credential generation may include contacting a certificate authority to obtain a valid digital certificate. Upon receiving the credentials the server may send the credentials to a support system responsible for the secure communications of the guest system . In one embodiment the support system may be a network device such as a network attached security component . In the embodiment shown in the network attached security component is contained within a switch although the network attached security component may stand alone in other embodiments. The network attached security component may receive the credentials and configuration to secure communications arriving to and originating from the guest system . For example incoming secured messages may be received by the gateway to a service provider and routed through an internal network to the switch providing the secure communications service to the guest system . The network attached security component may decrypt and or verify incoming secured messages resulting in cleartext messages . The cleartext messages may then be sent to the destination guest system . Outgoing messages from the guest system may be intercepted by the network attached security component . The outgoing messages may be secured including encrypted and sent through the internal network out the gateway and through the Internet to reach the destination system.

In another embodiment shown in a security component may reside inside a host computer such as an enhanced network interface card NIC or security co processing hardware. The security component may intercept incoming communications to the host computer and decrypt incoming secured messages . The decrypted cleartext messages may be sent to a guest system within the host computer whether virtualized or not. Outgoing cleartext communications may also be intercepted and secured including encrypted to provide secure communications.

The illustrative environment includes at least one application server and a data store . It should be understood that there can be several application servers layers or other elements processes or components which may be chained or otherwise configured which can interact to perform tasks such as obtaining data from an appropriate data store. As used herein the term data store refers to any device or combination of devices capable of storing accessing and retrieving data which may include any combination and number of data servers databases data storage devices and data storage media in any standard distributed or clustered environment. The application server can include any appropriate hardware and software for integrating with the data store as needed to execute aspects of one or more applications for the client device handling a majority of the data access and business logic for an application. The application server provides access control services in cooperation with the data store and is able to generate content such as text graphics audio and or video to be transferred to the user which may be served to the user by the Web server in the form of HTML XML or another appropriate structured language in this example. The handling of all requests and responses as well as the delivery of content between the client device and the application server can be handled by the Web server. It should be understood that the Web and application servers are not required and are merely example components as structured code discussed herein can be executed on any appropriate device or host machine as discussed elsewhere herein.

The data store can include several separate data tables databases or other data storage mechanisms and media for storing data relating to a particular aspect. For example the data store illustrated includes mechanisms for storing production data and user information which can be used to serve content for the production side. The data store also is shown to include a mechanism for storing log data which can be used for reporting analysis or other such purposes. It should be understood that there can be many other aspects that may need to be stored in the data store such as for page image information and to access right information which can be stored in any of the above listed mechanisms as appropriate or in additional mechanisms in the data store . The data store is operable through logic associated therewith to receive instructions from the application server and obtain update or otherwise process data in response thereto. In one example a user might submit a search request for a certain type of item. In this case the data store might access the user information to verify the identity of the user and can access the catalog detail information to obtain information about items of that type. The information then can be returned to the user such as in a results listing on a Web page that the user is able to view via a browser on the user device . Information for a particular item of interest can be viewed in a dedicated page or window of the browser.

Each server typically will include an operating system that provides executable program instructions for the general administration and operation of that server and typically will include a computer readable storage medium e.g. a hard disk random access memory read only memory etc. storing instructions that when executed by a processor of the server allow the server to perform its intended functions. Suitable implementations for the operating system and general functionality of the servers are known or commercially available and are readily implemented by persons having ordinary skill in the art particularly in light of the disclosure herein.

The environment in one embodiment is a distributed computing environment utilizing several computer systems and components that are interconnected via communication links using one or more computer networks or direct connections. However it will be appreciated by those of ordinary skill in the art that such a system could operate equally well in a system having fewer or a greater number of components than are illustrated in . Thus the depiction of the system in should be taken as being illustrative in nature and not limiting to the scope of the disclosure.

The various embodiments further can be implemented in a wide variety of operating environments which in some cases can include one or more user computers computing devices or processing devices which can be used to operate any of a number of applications. User or client devices can include any of a number of general purpose personal computers such as desktop or laptop computers running a standard operating system as well as cellular wireless and handheld devices running mobile software and capable of supporting a number of networking and messaging protocols. Such a system also can include a number of workstations running any of a variety of commercially available operating systems and other known applications for purposes such as development and database management. These devices also can include other electronic devices such as dummy terminals thin clients gaming systems and other devices capable of communicating via a network.

Most embodiments utilize at least one network that would be familiar to those skilled in the art for supporting communications using any of a variety of commercially available protocols such as TCP IP OSI FTP UPnP NFS CIFS and AppleTalk. The network can be for example a local area network a wide area network a virtual private network the Internet an intranet an extranet a public switched telephone network an infrared network a wireless network and any combination thereof.

In embodiments utilizing a Web server the Web server can run any of a variety of server or mid tier applications including HTTP servers FTP servers CGI servers data servers Java servers and business application servers. The server s also may be capable of executing programs or scripts in response requests from user devices such as by executing one or more Web applications that may be implemented as one or more scripts or programs written in any programming language such as Java C C or C or any scripting language such as Perl Python or TCL as well as combinations thereof. The server s may also include database servers including without limitation those commercially available from Oracle Microsoft Sybase and IBM .

The environment can include a variety of data stores and other memory and storage media as discussed above. These can reside in a variety of locations such as on a storage medium local to and or resident in one or more of the computers or remote from any or all of the computers across the network. In a particular set of embodiments the information may reside in a storage area network SAN familiar to those skilled in the art. Similarly any necessary files for performing the functions attributed to the computers servers or other network devices may be stored locally and or remotely as appropriate. Where a system includes computerized devices each such device can include hardware elements that may be electrically coupled via a bus the elements including for example at least one central processing unit CPU at least one input device e.g. a mouse keyboard controller touch screen or keypad and at least one output device e.g. a display device printer or speaker . Such a system may also include one or more storage devices such as disk drives optical storage devices and solid state storage devices such as random access memory RAM or read only memory ROM as well as removable media devices memory cards flash cards etc.

Such devices also can include a computer readable storage media reader a communications device e.g. a modem a network card wireless or wired an infrared communication device etc. and working memory as described above. The computer readable storage media reader can be connected with or configured to receive a computer readable storage medium representing remote local fixed and or removable storage devices as well as storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information. The system and various devices also typically will include a number of software applications modules services or other elements located within at least one working memory device including an operating system and application programs such as a client application or Web browser. It should be appreciated that alternate embodiments may have numerous variations from that described above. For example customized hardware might also be used and or particular elements might be implemented in hardware software including portable software such as applets or both. Further connection to other computing devices such as network input output devices may be employed.

Storage media and computer readable media for containing code or portions of code can include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information such as computer readable instructions data structures program modules or other data including RAM ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or any other medium which can be used to store the desired information and which can be accessed by the a system device. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

The specification and drawings are accordingly to be regarded in an illustrative rather than a restrictive sense. It will however be evident that various modifications and changes may be made thereunto without departing from the broader spirit and scope of the various embodiments as set forth in the claims.

Other variations are within the spirit of the present disclosure. Thus while the disclosed techniques are susceptible to various modifications and alternative constructions certain illustrated embodiments thereof are shown in the drawings and have been described above in detail. It should be understood however that there is no intention to limit the scope of the claimed subject matter to the specific form or forms disclosed but on the contrary the intention is to cover all modifications alternative constructions and equivalents falling within the spirit and scope of the various embodiments as defined in the appended claims.

The use of the terms a and an and the and similar referents in the context of describing the disclosed embodiments especially in the context of the following claims are to be construed to cover both the singular and the plural unless otherwise indicated herein or clearly contradicted by context. The terms comprising having including and containing are to be construed as open ended terms i.e. meaning including but not limited to unless otherwise noted. The term connected is to be construed as partly or wholly contained within attached to or joined together even if there is something intervening. Recitation of ranges of values herein are merely intended to serve as a shorthand method of referring individually to each separate value falling within the range unless otherwise indicated herein and each separate value is incorporated into the specification as if it were individually recited herein. All methods described herein can be performed in any suitable order unless otherwise indicated herein or otherwise clearly contradicted by context. The use of any and all examples or exemplary language e.g. such as provided herein is intended merely to better illuminate various embodiments and does not pose a limitation on the scope of the claimed subject matter unless otherwise indicated. No language in the specification should be construed as indicating any non claimed element as essential to the practice of the invention.

Preferred embodiments of this disclosure are described herein including the best mode known to the inventors for carrying out the invention. Variations of those preferred embodiments may become apparent to those of ordinary skill in the art upon reading the foregoing description. The inventors expect skilled artisans to employ such variations as appropriate and the inventors intend for the invention to be practiced otherwise than as specifically described herein. Accordingly this invention includes all modifications and equivalents of the subject matter recited in the claims appended hereto as permitted by applicable law. Moreover any combination of the above described elements in all possible variations thereof is encompassed by the invention unless otherwise indicated herein or otherwise clearly contradicted by context.

All references including publications patent applications and patents cited herein are hereby incorporated by reference to the same extent as if each reference were individually and specifically indicated to be incorporated by reference and were set forth in its entirety herein.

