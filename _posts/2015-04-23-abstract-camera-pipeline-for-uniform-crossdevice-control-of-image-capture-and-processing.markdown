---

title: Abstract camera pipeline for uniform cross-device control of image capture and processing
abstract: A system for acquiring digital images for a device having an integrated camera includes an Application Program Interface (API). The API is adapted to receive preprocessing and other instructions from a discrete application operating on the device. The API is also adapted to process multiple image capture requests using a pipeline configuration.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09374543&OS=09374543&RS=09374543
owner: Google Inc.
number: 09374543
owner_city: Mountain View
owner_country: US
publication_date: 20150423
---
This application is a continuation of U.S. application Ser. No. 13 546 600 filed Jul. 11 2012 now allowed.

The present application relates to a method and system for acquiring a digital image in a device. Specifically the disclosure concerns an application programming interface API that allows discrete programs installed on a device to control a digital image sensor on the same device.

Many modern devices rely on an operating system from one supplier and hardware from one or multiple other suppliers. Further the device may include additional programs or applications from third suppliers.

On the devices the operating system includes application programming interfaces APIs that govern the operating system or application control of the hardware e.g. display touch screen audio output network connection digital image sensor etc. . These APIs provide universal instruction criteria for performing functions on the hardware.

Current camera APIs may include high level criteria such as an instruction for acquiring an image and an instruction for firing a flash. Additional low level functionality is not present in the API and thus the applications have limited control over the digital image sensor. It would be advantageous to provide an API with low level functionality but that is compatible with a larger number of independent hardware configurations.

A system for acquiring digital images for a device having an integrated camera includes an Application Program Interface API . The API is adapted to receive instructions from a discrete application operating on the device. The instructions may include image capture instructions and image data preprocessing instructions. The API may also be adapted to process multiple image capture instructions using a pipeline configuration where different elements of the process are performed on a first image capture request while other elements of the process are performed on a second image capture request. After preprocessing the system outputs a preprocessed image back to the discrete application and or to memory and the GPU.

The instructions received by the API from the discrete application allow the discrete application to customize the capture and preprocessing of the image data that the API outputs.

Additional features of the disclosure will be apparent from the following detailed description which illustrates by way of example features of the disclosure.

The present disclosure provides an improved API for a camera and sensor. As illustrated in the API sometimes referred to an interface is preferably designed for a mobile device though it may be used on any device having a camera . The API is configured to control a class of hardware configurations based on an instruction set.

The device is assumed to include an Operating System OS and a Discrete Application . The OS coordinates the functions of the Application an integrated Camera the terms camera and sensor may be used interchangeably throughout this written description and a Display . The OS further includes a Camera API and a Display API where the Camera API communicates with the Camera and the Display API communicates with the Display .

Whenever an image sensor of a camera acquires an image or video hereafter image may be used to include both images and video the initial sensor data must be preprocessed before it can be displayed. The initial sensor data contains noise edge shadows pixilation and other characterizes that leave the image less recognizable to the human eye. Accordingly the initial sensor data must be adjusted using preprocessing algorithms e.g. demosaic noise reduction hot pixel correction white balance adjustment contrast adjustment edge enhancement . The present disclosure allows for greater flexibility in the preprocessing of this data in the creation of images.

The disclosure will provide a uniform set of instructions whereby a discrete Application i.e. an application functioning in conjunction with but independently from the Operating System functioning on a System is able to manipulate a Preprocessor . In particular the System allows the Application to control the Preprocessor that is included in digital image acquisition. For example the application subsequently installed on the device may provide a new algorithm for previously identified preprocessing functions. The System is also capable of operating on a class of hardware configurations as opposed to being designed for a specific image sensor and processor.

As illustrated in an image acquisition system obtains Initial Sensor Data from either the Sensor or a Raw Input where the Sensor and Raw Input may be initiated by an acquire image instruction. The Raw Input includes previously obtained sensor data that has been stored in memory. The Initial Sensor data is conveyed to the Statistics Generator and the Raw Output . The Raw Output progresses to a Multiplexer which is discussed below.

The Statistics Generator retrieves statistics such as date resolution flash and other information relating to the image being acquired. In one example the Statistics Generator calculates a histogram and outputs the histogram to the Application.

After the statistics are generated the Raw Input is processed by the Preprocessor based on the Preprocessing Instruction from the Application as illustrated as . As discussed above the Preprocessor is adapted to perform shading correction noise reduction demosaic hot pixel correction geometric correction color correction tone curve adjustment and edge enhancement . The order of these functions may be predetermined by the Preprocessor or may be controlled by the Preprocessing Instruction . The system may include various known algorithms for the preprocessing functions though the system may also accept preprocessing algorithms from the Application as part of the preprocessing instruction . Further an Application s Preprocessing Instruction may include disabling one or more of the preprocessing functions .

The newly Preprocessed Data is converted and output in the form of a YUV Raw Output a Compressed Output and a Video Output . The YUV Raw Output the Compressed Output and the Video Output are combined with the Raw Output by the Multiplexer and then output from the API to the Application . The Application may then further process the data using any or all of the formats and or display an image based on the output of the Multiplexer .

As illustrated in in complement with there is provided an API for acquiring images. The API may be initiated by getCameraInfo and open ID commands which are provided by the OS to the System corresponding in part to the API . The getCameraInfo command retrieves Camera Characteristics preferably including an ID position information optics information sensor information and pipeline information .

ID includes the model name and number of the camera . Position information relates to the position of the sensor on the device may apply to multi camera stereoscopic image acquisition applications . Optics information includes fixed information about the camera such as focal length and aperture range. Sensor information includes fixed information about the sensor such as maximum resolution type e.g. CMOS CCD etc. and dimensions. Pipeline information includes available processing categories e.g. portrait sports flash video landscape etc. .

The Open ID command initiates the API and allows creation of a plurality of pipelines four createPipeline functions are illustrated in and a Capture Request relating to createCaptureRequest . The createPipeline functions and the createCaptureRequest function are all instances of methods called from the System . Each pipeline is a set of data processing elements connected in series where the output of one element is the input of the next element one element of a first pipeline may be executed in parallel with a different element of a second pipeline .

Each of the plurality of Pipelines is allocated a slot number a frame size and a frame format . The Capture Request includes criteria for sensor control lens control A control auto exposure auto focus auto white balance processing control and statistics control . The processing control criterion may include the Preprocessing Instruction described above in relation to . The Capture Request forms a plurality of output pipelines containing the Capture Request information and relating to each output pipeline .

An output pipeline is forwarded to an Input Request Queue and or a Streaming Holding Slot in response to the stream method or the capture method respectively. The Input Request Queue contains a plurality of Requests and the Stream Holding Slot contains a Stream Request . The Input Request Queue and the Stream Holding Slot may also be populated by a reprocess method . The reprocess method relates to data coming from memory as opposed to the sensor.

The Input Request Queue includes a plurality of spaces holding an ordered list of requests to capture an image having the Capture Request details. Once the image sensor referred to in as the Platform Hardware Abstraction Layer HAL Implementation has acquired an image the next request in the Input Request Queue is passed to the sensor . The sensor not only acquires data but also preprocesses the data to create the RAW image in accordance with the preprocessing instruction .

If a new request is not ready in the Input Request Queue a stream request is acquired from the Streaming Holding Slot . The Streaming Holding Slot provides a back up request that may be lower in memory requirements. In many instances the Streaming Holding Slot is used for providing a preview image on the display of the device . In such a scenario the System avoids generating continuous requests to maintain a continuous preview image. In other instances the Streaming Holding slot is used to prevent a continuous flow of redundant Requests .

In addition to the Input Request Queue and the Streaming Holding Slot the sensor may receive a request to Reprocess . The request to Reprocess relates to a stored RAW File from a previous image acquisition that is now being reprocessed into a viewable image.

After the sensor acquires or processes an image the sensor outputs an image and metadata . The image is output to an Image Buffer Pipeline which relies on the Gralloc Circular Buffer where a limited number of large memory locations are allocated to storing image data and the locations are cycled in a circular manner where there is a separate Buffer for each pipeline . The metadata is output to an Output Frame Metadata Queue which contains a plurality of metadata . Once requested by getFrame both the RAW Image and the metadata are moved to a Frame . The Frame consolidates an image with its associated Capture Request Final Settings Basic Metadata Statistical Output and ByteBuffer . The ByteBuffer holds the image . The Frame is saved as a RAW file . Additionally the RAW image may be sent to the device GPU Video Encoder RenderScript 3D rendering and or the Application . When the RAW image is sent to the device GPU the Video Encoder and or RenderScript the RAW image is processed e.g. by JPEG YUV etc. into a viewable format and displayed.

The accompanying drawings illustrate examples of an API and its hardware environment. Other types and styles are possible and the drawings are not intended to be limiting in that regard. Thus although the description above and accompanying drawings contains much specificity the details provided should not be construed as limiting the scope of the examples but merely as providing illustrations of some of the presently preferred examples. The drawings and the description are not to be taken as restrictive on the scope of the examples and are understood as broad and general teachings in accordance with the present disclosure. While the present examples of the disclosure have been described using specific terms such description is for present illustrative purposes only and it is to be understood that modifications and variations to such examples including but not limited to the substitutions of equivalent features materials or parts and the reversal of various features thereof may be practiced by those of ordinary skill in the art without departing from the spirit and scope of the disclosure.

