---

title: Redundancy of network services in restricted networks
abstract: Methods, systems, and devices are described for managing virtual network services provided to a network. Network services may be provided to a client network having a first network fabric at a self-contained network services system implementing a number of redundant instances of a network service application. The self-contained network services system may have a second network fabric. The second network fabric may be adapted to distribute network service tasks received from the client network which are associated with the network service application among the redundant instances of the network service application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09485143&OS=09485143&RS=09485143
owner: F5 Networks, Inc.
number: 09485143
owner_city: Seattle
owner_country: US
publication_date: 20150216
---
The present application is a continuation of U.S. patent application Ser. No. 13 745 074 entitled REDUNDANCY OF NETWORK SERVICES IN RESTRICTED NETWORKS which was filed Jan. 18 2013 which claims priority to U.S. Provisional Patent Application Ser. No. 61 587 898 entitled VIRTUAL NETWORK SERVICES which was filed on Jan. 18 2012 the entirety of each is incorporated by reference herein for all purposes.

Aspects of the invention relate to computer networks and more particularly providing dynamically configurable high speed network services for a network of computing devices. Organizations often use multiple computing devices. These computing devices may communicate with each other over a network such as a local area network or the Internet.

In such networks it may be desirable to provide various types of network services. Examples of such network services include among others firewalls load balancers storage accelerators and encryption services. These services may help ensure the integrity of data provided over the network optimize connection speeds and resource utilization and generally make the network more reliable and secure. For example a firewall typically creates a logical barrier to prevent unauthorized traffic from entering or leaving the network and an encryption service may protect private data from unauthorized recipients. A load balancer may distribute a workload across multiple redundant computers in the network and a storage accelerator may increase the efficiency of data retrieval and storage.

These network services can be complicated to implement particularly in networks that handle a large amount of network traffic. Often such networks rely on special purpose hardware appliances to provide network services. However special purpose hardware appliances can be quite expensive. Moreover special purpose hardware appliances may be difficult to maintain and be inflexible with regard to the typical ebb and flow of demand for specific network services. Thus there may be a need in the art for novel system architectures to address one or more of these issues.

Methods systems and devices are described for implementing and managing virtual network services using a self contained network services system. The self contained network services system may include a number of network services modules for providing one or more network services. Each network service module may be implemented by at least one server server blade or other dynamically configurable computing devices executing instances of network service applications to provide a dynamically configurable set of network services.

In a first set of illustrative embodiments method of managing network services may include providing network services to a client network comprising a first network fabric at a self contained network services system implementing a number of redundant instances of a network service application the self contained network services system having a second network fabric and adapting the second network fabric to distribute network service tasks received from the client network which are associated with the network service application among the redundant instances of the network service application.

In a second set of illustrative embodiments a self contained network services system may include multiple network service modules configured to implement a number of redundant instances of a network service application associated with providing network services to a client network having a first network fabric. The network service modules may be communicatively coupled with each other through a second network fabric. At least one of the network service modules may include a network service task distribution module operative to adapt the second network fabric to distribute network service tasks received from the client network which are associated with the network service application among the redundant instances of the network service application.

In a third set of example embodiments a computer program product for managing network socket services may include a tangible computer readable storage device having a plurality of computer readable instructions stored thereon. The computer readable instructions may include computer readable instructions configured to cause at least one processor to provide network services to a client network having a first network fabric at a self contained network services system implementing a number of redundant instances of a network service application the self contained network services system having a second network fabric and computer readable instructions configured to cause the at least one processor to adapt the second network fabric to distribute network service tasks received from the client network which are associated with the network service application among the redundant instances of the network service application.

Methods systems and devices are described for implementing virtual network services using a self contained network services system. The self contained network services system may include a number of servers server blades or other dynamically configurable computing devices which execute a number of instances of network service applications to provide a dynamically configurable set of network services. Each server or other computer device contained within the self contained network services system shall be referred to as a network services module and may provide one or more network services. At least one network services module in the self contained network services system may be configured to execute a controller application that manages the software configuration of other network services modules.

The controller application may receive requests for changes in network services determine new software configurations for one or more of the network service modules based on the received request and dynamically configure the network service modules according to the new software configuration and reconfigure the network and a router associated with the network services system to distribute traffic among the network service modules in accordance with the requested change in network services.

The network service application instances may exchange state information through mutual access to a shared database. Faulty network service application instances may be isolated and restarted or replaced based on the state information in the shared database. A router or other forwarding device in the self contained network services system may distribute tasks among network service application instances allocated to various network services modules. Where redundant instances of the same network service application are running the router or other forwarding device may distribute network traffic associated with the network service application among the redundant instances. Servers may use a number of discovery mechanisms including new or repurposed routing protocols to identify and join existing self contained network services systems in the network and become a network services module.

This description provides examples and is not intended to limit the scope applicability or configuration of the invention. Rather the ensuing description will provide those skilled in the art with an enabling description for implementing embodiments of the invention. Various changes may be made in the function and arrangement of elements.

Thus various embodiments may omit substitute or add various procedures or components as appropriate. For instance it should be appreciated that the methods may be performed in an order different than that described and that various steps may be added omitted or combined. Also aspects and elements described with respect to certain embodiments may be combined in various other embodiments. It should also be appreciated that the following systems methods devices and software may individually or collectively be components of a larger system wherein other procedures may take precedence over or otherwise modify their application.

As used in the present specification and in the appended claims the term network socket or socket refers to an endpoint of an inter process communication flow across a computer network. Network sockets may rely on a transport layer protocol e.g. Transmission Control Protocol TCP User Datagram Protocol UDP etc. to transport packets of a network layer protocol e.g. Internet Protocol IP etc. between two applications.

Systems devices methods and software are described for providing dynamically configurable network services at high speeds using commodity hardware. In one set of embodiments shown in a system includes client devices e.g. desktop computer mobile device portable computer or other computing devices a network and a datacenter . Each of these components may be in communication with each other directly or indirectly.

The datacenter may include a router one or more switches a number of servers and a number of data stores . For the purposes of the present disclosure the term server may be used to refer to hardware servers and virtual servers. Additionally the term switch may be used to refer to hardware switches virtual switches implemented by software and virtual switches implemented at the network interface level. In certain examples the data stores may include arrays of machine readable physical data storage. For example data stores may include one or more arrays of magnetic or solid state hard drives such as one or more Redundant Array of Independent Disk RAID arrays.

The datacenter may be configured to receive and respond to requests from the client devices over the network . The network may include a Wide Area Network WAN such as the Internet a Local Area Network LAN or any combination of WANs and LANs. Each request from a client device for data from the datacenter may be transmitted as one or more packets directed to a network address e.g. an Internet Protocol IP address associated with the datacenter . Using the network address the request may be routed over the network to the datacenter where the request may be received by router .

Each request received by router may be directed over the switches to one of the servers in the server bank for processing. Processing the request may include interpreting and servicing the request. For example if the request from the client device is for certain data stored in the data stores interpreting the request may include one of the servers identifying the data requested by the client device and servicing the request may include the server formulating an instruction for retrieving the requested data from the data stores .

This instruction may be directed over one or more of the switches to a data store which may retrieve the requested data. In certain examples the request may be routed to a specific data store based on the data requested. Additionally or alternatively the data stores may store data redundantly and the request may be routed to a specific data store based on a load balancing or other functionality.

Once the data store retrieves the requested data the switches may direct the requested data retrieved by the data store back to one of the servers which may assemble the requested data into one or more packets addressed to the requesting client device . The packet s may then be directed over the first set of switches to router which transmits the packet s to the requesting client device over the network .

In certain examples the datacenter may implement the back end of a web site. In these examples the data stores may store Hypertext Transfer Markup Language HTML documents related to various component web pages of the web site in addition to data e.g. images metadata media files style sheets plug in data and the like embedded in or otherwise associated with the web pages. When a user of one of the client devices attempts to visit a web page of the website the client device may contact a Domain Name Server DNS to look up the IP address associated with a domain name of the website. The IP address may be the IP address of the datacenter . The client device may then transmit a request for the web page to the datacenter and receive the web page in the aforementioned manner.

Datacenters and other network systems may be equipped to handle large quantities of network traffic. To effectively service this traffic it may be desirable to provide certain network services such as firewall services security services load balancing services and storage accelerator services. Firewall services provide logical barriers to certain types of unauthorized network traffic according to a set of rules. Security services may implement encryption decryption signature and or certificate functions to prevent unauthorized entities from viewing network traffic. Load balancing services may distribute incoming network traffic among the servers to maximize the productivity and efficiency. Storage accelerator services distribute requests for data among data stores and cache recently or frequently requested data for prompt retrieval.

In some datacenters these network services may be provided using special purpose hardware appliances. For example in some datacenters similar in scope to datacenter a special purpose firewall appliance and a special purpose security appliance may be placed in line between the router and the first set of switches. Additionally a special purpose load balancing appliance may be placed between the first set of switches and the servers and a special purpose storage accelerator appliance may be placed between the second set of switches and the data stores.

However the use of special purpose hardware appliances for network services may be undesirable for a number of reasons. Some special purpose hardware appliances may be expensive and can costing orders of magnitude more than commodity servers. Special purpose hardware appliances may also be difficult to manage and may be unable to dynamically adapt to changing network environments. Moreover special purpose hardware appliances often may be unable to leverage the continuously emerging optimizations for commodity server architectures.

The datacenter of may avoid one or more of the aforementioned disadvantages associated with special purpose hardware appliances through the use of a block of commodity or general purpose servers that can be programmed to act as dynamically configurable network services modules . The network services modules collectively function as a self contained network services system by executing special purpose software installed on the servers in the dedicated block. For purposes of the present disclosure the term self contained refers to the autonomy of the network services system implemented by the network services modules . Each of the network services modules in the self contained network services system may be programmed with special purpose network services code which when executed by the network services modules causes the network services modules to implement network services. It should be understood that the servers implementing the network services modules in the self contained network services system are not limited to network services functionality. Rather the servers implementing the network services modules in the network services system may also execute other applications that are not directly related to the self contained network services system .

Use of commodity servers in the datacenter may allow for elastic scalability of network services. Network services may be dynamically added removed or modified in the datacenter by reprogramming one or more of the network services modules in the self contained network services system with different configurations of special purpose code according to the changing needs of the datacenter .

Furthermore because the network services are provided by programming commodity servers with special purpose code some of the servers in the server bank of the datacenter may be allocated to the self contained network services system and configured to function as virtual network services modules . Thus in certain examples the number of servers allocated to the self contained network services system may grow as the datacenter experiences increased demand for network services. Conversely as demand for network services wanes the number of servers allocated to the self contained network services system may shrink to more efficiently use the processing resources of the datacenter .

The self contained network services system may be dynamically configurable. In some embodiments the type and scope of network services provided by the network services system may be modified on demand by a datacenter administrator or other authorized individual. This reconfiguration may be accomplished by interacting with a network services controller application using a Graphical User Interface GUI or Command Line Interface CLI over the network or by logging into one of the network services modules locally.

The configuration of the network services system may be quite adaptable. As described above network services applications may be dynamically loaded and removed from individual network services modules to add or remove different types of network services functionality. Beyond the selection of which network services applications to execute other aspects of the network services system operations may be customized to suit a particular set of network services needs.

One such customizable aspect is the computing environment e.g. dedicated hardware virtual machine within a hypervisor virtual machine within an operating system in which a particular network services application is executed. Other customizable aspects of the network services system may include the number of network services applications executed by each instance of an operating system the number of virtual machines if any implemented by the network services modules the total number of instances of each network services application to be executed concurrently and the like. In certain examples one or more of these aspects may be statically defined for the network services system . Additionally or alternatively one or more of these aspects may be dynamically adjusted e.g. using a rules engine and or in response to dynamic input from an administrator in real time to adapt to changing demand for network services.

Each of the servers implementing a network services module may function as a virtual network appliance in the self contained network services system and interact with other components of the datacenter over the one or more switches . For example one or more network services modules may function as a firewall by receiving all packets arriving at the router over the one or more switches applying one or more packet filtering rules to the incoming packets and directing approved packets to a handling server over the one or more switches . Similarly one or more network services modules may function as a storage accelerator by receiving data storage commands over the one or more switches .

Thus because the network services can be performed directly from the server bank through the use of switches there is no need to physically reconfigure the datacenter when network services are added modified or removed.

The network services implemented by each network services module are determined by special purpose applications executed by the network services modules . In the present example network services module has been programmed to execute a firewall application to implement a firewall appliance. Network services module has been programmed to execute a load balancing application to implement a load balancer appliance. Network services module has been programmed to execute a storage accelerator application to implement a storage accelerator appliance. Network services module has been programmed to execute a security application to implement a security appliance. It should be recognized that in certain examples multiple instances of the same network services application may be executed by the same or different network services modules to increase efficiency capacity and service resilience.

Additionally network services module executes a network services controller application . The network services controller application may for example coordinate the execution of the network services applications by the network services modules . For example the network services controller application may communicate with an outside administrator to determine a set of network services to be implemented and allocate network services module resources to the various network services applications to provide the specified set of network services. In certain examples the functionality of the network services controller application may be distributed among multiple network services modules . In other examples at least one of the network services applications may be performed by special purpose hardware or by a combination of one or more network services modules and special purpose hardware. Thus the self contained network services system may supplement or replace special purpose hardware in performing network services.

The processing module may be configured to execute code to execute the one or more network service applications e.g. applications of to implement one or more network services selected for the network services module . In some examples the processing module may include one or more computer processing cores that implement an instruction set architecture. Examples of suitable instruction set architectures for the processing module include but are not limited to the x86 architecture and its variations the PowerPC architecture and its variations the Java Virtual Machine architecture and its variations and the like.

In certain examples the processing module may include a dedicated hardware processor. Additionally or alternatively the processing module may include a virtual machine implemented by a physical machine through a hypervisor or an operating system. In still other examples the processing module may include dedicated access to shared physical resources and or dedicated processor threads.

The processing module may be configured to interact with the network service applications to implement one or more network services. The network service applications may include elements of software and or hardware that enable the processing module to perform the functionality associated with at least one selected network service. In certain examples the processing module may include an x86 processor and one or more memory modules storing the one or more network service applications executed by the processor to implement the at least one selected network service. In these examples the network services implemented by the network services module may be dynamically reconfigured by adding code for one or more additional network service applications to the memory modules removing code for one or more existing network service applications from the memory modules and or replacing the code corresponding to one or more network service applications with code corresponding to one or more different network service applications .

In additional or alternate examples the processing module may include an FPGA and the network service applications may include code that can be executed by the FPGA to configure logic gates within the FPGA where the configuration of the logic gates determines the type of network service s if any implemented by the FPGA. In these examples the network services implemented by the network services module may be dynamically reconfigured by substituting the gate configuration code in the FPGA with new code corresponding to a new network services configuration.

The processor may include a dedicated hardware processor a virtual machine executed by a hypervisor a virtual machine executed within an operating system environment and or shared access to one or more hardware processors. In certain examples the processor may include multiple processing cores. The processor may be configured to execute machine readable code that includes a series of instructions to perform certain tasks. The machine readable code may be modularized into different programs. In the present example these programs include a network services operating system and a set of one or more network service applications .

The operating system may coordinate access to and communication between the physical resources of the network services module including the processor the main memory the local storage and the communications module . For example the operating system may manage the execution of the one or more network service application s by the processor . This management may include assigning space in main memory to the application loading the code for the network service applications into the main memory determining when the code for the network service applications is executed by the processor and controlling access by the network service applications to other hardware resources such as the local storage and communications module .

The operating system may further coordinate communications for applications executed by the processor . For example the operating system may implement internal application layer communications such as communication between two network service applications executed in the same environment and external application layer communications such as communication between a network service applications executed within the operating system and a network service applications executed in a different environment using network protocols.

As described in more detail below in certain examples the operating system may be a custom operating system with optimizations and features that allow the processor to perform network processing services at speeds matching or exceeding that of special purpose hardware appliances designed to provide equivalent network services.

Each network service application executed from main memory by the processor may cause the processor to implement a specific type of network service functionality. As described above network service applications may exist to implement firewall functionality load balancing functionality storage acceleration functionality security functionality and or any other network service that may suit a particular application of the principles of this disclosure.

Thus the network services module may dynamically add certain elements of network service functionality by selectively loading one or more new network service applications into the main memory for execution by the processor . Similarly the network services module may be configured to dynamically remove certain elements of network services functionality by selectively terminating the execution of one or more network service applications in the main memory .

The local storage of the network services module may include one or more real or virtual storage devices specifically associated with the processor . In certain examples the local storage of the network services module may include one or more physical media e.g. magnetic disks optical disks solid state drives etc. . In certain examples the local storage may store the executable code for the network services operating system and network service applications such that when the network services module is booted up the code for the network services operating system is loaded from the local storage into the main memory for execution. When a certain type of network service is desired the network service application s corresponding to the desired network service may be loaded from the local storage into the main memory for execution. In certain examples the local storage may include a repository of available network service applications and the network service functionality implemented by the network services module may be dynamically altered in real time by selectively loading or removing network service applications into or from the main memory .

The communications module of the network services module may include logic and hardware components for managing network communications with client devices other network services modules and other network components. In certain examples the network services module may receive network data over the communications module process the network data with the network service applications and the network services operating system and return the results of the processed network data to a network destination over the communications module. Additionally the communications module may receive instructions over the network for dynamically reconfiguring the network services functionality of the network services module . For example the communications module may receive an instruction to load a first network service application into the main memory for execution and or to remove a different network service application from the main memory .

As described above each network services module in a self contained network services system may be configured to execute one or more instances of a custom operating system with optimizations and features that allow the processor to perform network processing services at speeds matching or exceeding that of special purpose hardware appliances designed to provide equivalent network services. illustrates an example architecture for one such operating system . The operating system may be an example of the operating system described above with reference to . Additionally the operating system may be a component of the processing module and or the configurable network services module described above with reference to .

The operating system of the present example includes an accelerated kernel a network services controller network services libraries system libraries a management Application Programming Interface API a health monitor a High Availability HA monitor a command line interface CLI a graphical user interface GUI a Hypertext Transfer Protocol Secure HTTP REST interface and a Simple Network Management Protocol SNMP interface . Each of these components may be in communication directly or indirectly. The operating system may be configured to manage the execution of one or more network services applications . The one or more network services applications may be an example of the network services applications described above with respect to . As described above the network services applications may run within an environment provided by the network services operating system to implement various network services e.g. firewall services load balancing services storage accelerator services security services etc. . Additionally the operating system may be in communication with one or more third party management applications and or a number of other servers and network services modules.

The accelerated kernel may support the inter process communication and system calls of a traditional Unix Unix like e.g. Linux OS X Windows or other operating system kernel. However the accelerated kernel may include additional functionality and implementation differences over traditional operating system kernels. For example the additional functionality and implementation differences may substantially increase the speed and efficiency of access to the network stack thereby making the performance of real time network services possible within the operating system without imposing delays on network traffic. Examples of such kernel optimizations are given in more detail below.

The accelerated kernel may dynamically manage network stack resources in the accelerated kernel to ensure efficient and fast access to network data during the performance of network services. For example the accelerated kernel may optimize parallel processing of network flows by performing load balancing operations across network stack resources. In certain embodiments the accelerated kernel may dynamically increase or decrease the number of application layer threads or driver network layer threads accessing the network stack to balance work loads and optimize throughput by minimizing blocking conditions.

The network services controller may implement a database that stores configuration data for the accelerated kernel and other modules in the network services operating system . The network services controller may allow atomic transactions for data updates and notify listeners of changes. Using this capability modules e.g. the health monitor the HA monitor of the network services operating system may effect configuration changes in the network services operating system by updating configuration data in the network services controller and allowing the network services controller to notify other modules within the network services operating system of the updated configuration data.

The management API may communicate with the network services controller and provide access to the network services controller for the health monitor the HA monitor the command line interface the graphical user interface the HTTPS REST interface and the SNMP interface .

The health monitor and the high availability monitor may monitor conditions in the network services operating system and update the configuration data stored at the network services controller and to tune network stack access and or other aspects of the accelerated kernel to best adapt to a current state of the operating system . For example the health monitor may monitor the overall health of the operating system detect problematic conditions that may introduce delay into network stack access and respond to such conditions by retuning the balance of application layer threads and driver layer threads that access the network stack to achieve a more optimal throughput. The high availability monitor may dynamically update the configuration data of the network services controller to assign one or more servers implemented by the network services operating system to respond to traffic for a given IP address.

In additional or alternative examples the management API may also receive instructions to dynamically load or remove one or more network services applications on the host network services module and or to make configuration changes to network services operating system 

The management API may communicate with an administrator or managing process by way of the command line interface the graphical user interface the HTTPS REST interface or the SNMP interface . Additionally the network services operating system may support one or more third party management applications that communicate with the management API to dynamically load remove or configure the network applications managed by the network services operating system . In certain examples the network services operating system may also implement a cluster manager . The cluster manager may communicate with other network services modules in a self contained network services module e.g. the network services system of or B to coordinate the distribution of network services among the network services modules .

By way of the cluster manager the network services operating system may receive an assignment of certain network services applications to execute. Additionally or alternatively the cluster manager may assign other network services modules in the network services system to execute certain network services applications based on input received over the command line interface the graphical user interface the HTTPS REST interface the SNMP interface and or the third party management application s . By implementing communication with other network services modules in a cluster the cluster manager enables dynamic horizontal scalability in the delivery of network services.

The network services operating system may also implement various software libraries for use by applications executed within the environment provided by the network services operating system. These libraries may include network services libraries and ordinary system libraries . The network services libraries may include libraries that are specially developed for use by the network services applications . For example the network services libraries may include software routines or data structures that are common to different types of network services applications 

The system libraries may include various libraries specific to a particular operating system class implemented by the network services operating system . For example the network services operating system may implement a particular Unix like interface such as FreeBSD. In this example the system libraries of the network services operating system may include the system libraries associated with FreeBSD. In certain examples the system libraries may include additional modifications or optimizations for use in the provision of network services. By implementing these system libraries the operating system may be capable of executing various unmodified third party applications e.g. third party management application s . These third party applications may but need not be related to the provision of network services.

In the present example a network stack includes data related to network communications made at the Internet Protocol IP level data related to network communications made at the Transmission Control Protocol TCP level e.g. TCP state information and data related to TCP sockets. Incoming network flows that arrive at one or more input threads network ports may be added to the network stack and dynamically mapped to one or more application threads . The application threads may be mapped to one or more stages of running applications . The mapping of incoming network flows to application threads may be done in a way that balances the work load among the various application threads . For example if one of the application threads becomes overloaded new incoming network flows may not be mapped to that application thread until the load on that application thread is reduced.

For example consider the case where the operating system executes network services applications for a web site and a command is received e.g. at management API of to enable Hypertext Transfer Protocol Secure HTTPS functionality. To do so the operating system may instruct the network services security application to load a cryptographic library with which to encrypt and decrypt data carried in incoming and outgoing network packets. In light of the CPU intensive nature of cryptographic operations the number of application threads may be dynamically increased and the number of incoming threads may be correspondingly decreased. By shifting more processing resources to the network services security application the potential backlog in HTTPS packet processing may be averted or reduced thus optimizing throughput.

Additionally the network stack of the present example may be configured to allow for concurrent access by multiple processor threads . In previous solutions each time a thread accesses a network resource e.g. TCP state information in the network stack other threads are locked out of accessing that collection of network resource typically the entire set . As the number of network connections increases contention for the shared network resource may increase resulting in head of line blocking and thereby effectively serializing network connection processes that are intended to occur in parallel. By including the use of a large hash table with fine grained locking the probability of contention for shared network resources approaches zero. Further by dynamically balancing the processing load between application threads the operating system of the present example may evenly distribute the demand for network stack resources across the total number of threads thereby improving data flow

These types of optimizations to the network stack of the present example may be implemented without altering the socket interfaces of the operating system. Thus where the network operating system is running on a standard general purpose processor architecture e.g. the x86 architecture any network application designed for that architecture may receive the benefits of increased throughput and resource efficiency in this environment without need of altering the network application.

As further shown in input processing may be decoupled from output processing such that only network threads receive and process packets received from the network. Thus network threads and may be currently configured to perform incoming driver level processing incoming link layer processing incoming IP level processing incoming TCP level processing and incoming socket processing . Additionally network threads and may be configured to access one or more state management tables in parallel. In certain examples the use of a large hash table in connection with fine grained locking may enable fast concurrent access to the state management tables with minimal lockout issues.

In one example application threads may all equally process and handle new incoming network flows. By contrast in another example application threads and may become overloaded e.g. number of connections to service with respect to threads and . In this situation threads and may independently or by instruction by a component of the network service operating system to temporarily reduce the rate at which they process and handle new incoming network flows until their load is balanced with respect to threads and . This re configuration of the application threads may dynamically occur for example in response to the application stages associated with application threads and receiving a stream of high work packets e.g. multiple HTTPS terminations . By diverting additional incoming packets to peer applications threads and the overall processing load may be balanced among the application threads . However once the workload associated with application threads and is reduced the system may be dynamically updated such that incoming network flows are again distributed to application threads and for processing.

In additional or alternative examples it may be desirable to increase or decrease the number of application threads . Such an increase or decrease may occur dynamically in response to changing demand for network services. For example an application thread may be added by allocating processing resources to the new application thread associating the new application thread with an appropriate application stage and updating the distribution function such that incoming network flows are distributed to the new application thread . Conversely an application thread may be dynamically removed to free up processing resources for another process by allowing the application thread to finish any pending processing tasks assigned to the application thread updating the distribution function and reallocating the resources of the application thread somewhere else. This dynamic increase or decrease of application threads may occur without need of rebooting or terminating network services.

As further shown in incoming network flows may be assigned to network threads using a distribution function . The distribution function may be for example a modularized hashing function. The number of network threads that receive and process incoming network flows may be dynamically altered by for example changing a modulus of the distribution function .

It is worth noting that while an entire system for providing network services using commodity servers has been described as a whole for the sake of context the present specification is directed to methods systems and apparatus that may be used with but are not tied to the system of . Individual aspects of the present specification may be broken out and used exclusive of other aspects of the foregoing description. This will be described in more detail below.

Referring next to an example of a self contained network services system is shown. The self contained network services system may be an example of the self contained network services system described above with reference to one or more of the previous Figures. The self contained network services system of the present example may communicate with a network fabric and a management module . The network fabric may include physical media switches routers load balancer and or other forwarding elements associated with a network serviced by the network services system . For example the network fabric may be associated with the network router and switches shown above with reference to . The management module may be implemented by a computer or other device configured to communicate with the self contained network services system 

As shown in the self contained network services system of the present example may include at least one router or other forwarding device at least one dynamically configurable network services module configured to execute a controller application and a number of additional dynamically configurable network services modules to . Each of these components may be in communication directly or indirectly. The network services module executing the controller application and the other dynamically configurable network services modules to may be examples of one or more of the network services modules described above with reference to previous Figures.

The router associated with the self contained network services system may be managed and configured separately from routers or switches that are external to the self contained network services system . For example the self contained network services system may be deployed to a datacenter or other network environment. While switches and routers in the network fabric external to the self contained network services system may be managed and configured according to policies in place for the datacenter the router associated with the self contained network services system may be separately configured for routing data to and from instances of network services applications executed by the network services modules .

It should be understood that the router may be any policy based forwarding device including but not limited to a conventional router a special purpose router a virtual router implemented by a server a layer 3 switch a load balancer and or any other policy based forwarding device. In certain examples the router may perform a combination of level 3 routing and level 2 switching on packets distributed between the network services modules and the network fabric .

The network services module executing the controller application may like the other network services modules be a commodity server . The network services module executing the controller application may coordinate the deployment and removal of network services applications to the other dynamically configurable network services modules to . For example network services module of the present example may execute an example of the controller application described above with reference to . It should be understood that all or a portion of network services module may be dynamically configurable just like the other dynamically configurable network services modules to . Thus the network services module executing the controller application may also execute one or more instances of other network services applications e.g. firewall application load balancer application storage accelerator application and or security application of .

Each of the dynamically configurable network services modules may be configured to execute various network services applications to implement a desired network services functionality. The controller application of the present example may be configured to determine which network services applications if any are executed by each of the dynamically configurable network services modules and deploy the appropriate software to each of the dynamically configurable network services modules . The controller application may dynamically deploy remove or reconfigure the network services applications executed by the dynamically configurable network services modules as the demand for certain network services changes over time and or by request of the management module . In certain examples the controller application may activate or deactivate certain features of running instances of the network services applications.

Each of the dynamically configurable network services modules may execute a special network services operating system with accelerated networking functionality such as the network services operating system described above with reference to the previous Figures.

Turning now to an example the management module may communicate with the controller application over an application programming interface API e.g. an implementation of the Representational State Transfer REST API or a graphical user interface GUI to provide a request for network services in the abstract. For instance the management module may convey a request to the controller application to activate load balancing service at 5.0 Gb per second with 1.0 million connections per second and to enable Secure Sockets Layer SSL security in a datacenter.

The controller application may then determine how many instances of a load balancing application e.g. the load balancing application of and a security application e.g. the security application of to deploy to the dynamically configurable network services modules to to implement the requested network services. Additionally the controller application may determine whether each instance of the security application is to be implemented as a virtual machine or on dedicated hardware.

Using the determined number of instances for each network service application and the decision to implement each instance as a virtual machine or on dedicated hardware the controller application of network services module may generate a new software configuration for a number of the dynamically configurable network services modules and configure the number of dynamically configurable network services modules with the new software configuration to implement the desired number of instances of the load balancing and security applications.

Once the network services are configured the controller application may then reconfigure the router to appropriately steer traffic to the network services modules implementing the new network services thereby providing the requested load balancing and SSL service. A key concept of the self contained network services system is that the network may be reconfigured along with the servers implementing the dynamically configurable network services modules to provide the requested network services.

Referring next to a more detailed block diagram of an example network services module running a controller application is shown. The network services module may be an example of one or more of the network services modules described above with reference to the previous Figures. The controller application may be an example of one or more of the controller applications described above with reference to the previous Figures.

To provide dynamically configurable network services to a client network the controller application of the present example may include at least a management interface module a network services reconfiguration module and a network reconfiguration module . Of course the controller application may also implement other functionality and features according to the principles of the present specification. For the sake of clarity however the present example of focuses on certain basic features of the controller application with respect to the deployment and dynamic configuration of network services in real time.

The management interface module may be configured to receive a request e.g. over an API or GUI for a change in network services provided by a self contained network services system e.g. self contained network services system of to a client network.

The network services reconfiguration module may determine a new software configuration for a number of network services modules of the self contained network services system based on the received request and dynamically configure the network services modules according to the new software configuration.

In certain examples determining the new software configuration for the network services modules may include identifying at least one network service application associated with the requested change in network services. In certain examples a level of virtualization for each instance of one or more selected network service applications may be determined based on a priority of that network service application or another factor. One or more instances of the identified selected network service application may be dynamically loaded or removed from one or more of the network services modules to implement the requested change in network services.

In certain examples the network services modules may be dynamically reconfigured according to the requested change while the same or a different set of network services modules is providing a set of existing network services to the network.

In certain examples implementing the requested change may include receiving packets from the client network and processing the received packets with the self contained network services modules according to the new configuration.

The network reconfiguration module may reconfigure the client network and a router or other forwarding device associated with the self contained network services system to steer network traffic from the client network to the instances of the network services applications running on the network services modules in accordance with the requested change and the new software configuration selected by the network services reconfiguration module .

Referring next to a flowchart is shown of an example of a method of managing network services. The method may be performed for example by one or more of the network services modules and or the network services operating system described above with reference to the previous Figures. The self contained network services system described in may be an example of one or more of the self contained network services systems described above with reference to the previous Figures.

At block a request may be received at a controller application for a change in network services provided by a self contained network services system to a client network. At block a new software configuration may be determined based on the received request for a number of network services modules of the self contained network services system. At block the network services modules may be dynamically configured according to the determined new software configuration. At block the client network and a router associated with the self contained network services system may be reconfigured to steer network traffic from the client network to instances of network services applications running on the network services modules according to the requested change and the new software configuration.

Referring next to a flowchart is shown of an example of a method of managing network services. The method may be performed for example by one or more of the network services modules and or the network services operating system described above with reference to the previous Figures. The self contained network services system described in may be an example of one or more of the self contained network services systems described above with reference to the previous Figures. The method may be an example of the method of .

At block a request for a change in network services provided by a self contained network services system to a network may be received at an instance of a controller application of the self contained network services system. The requested change may include the addition of network services the removal of network services or some other change to network services. At block a new software configuration may be determined for a number of network service modules of the self contained network services system based on the received request. At block it may be determined whether the new software configuration includes the addition of new network service application instances. For example new network service application instances may be deployed in response to a request for a new network service or to expand the capacity of an existing network service.

If it is determined that the new software configuration includes the deployment of new network service application instances block Yes one or more of the network service modules may be selected to run the new network services application instance s at block . The one or more network service modules may be selected based on processor or memory utilization available bandwidth requirements associated with the network services application to be deployed or other relevant considerations. At block a level of virtualization for the new instance s of the network services application may be selected and at block the network service application instance s may be loaded onto the selected network services modules.

Following deployment of the new network service application instance s or in response to a determination that the new software configuration does not include the deployment of new network service application instances block No a determination may be made at block as to whether the new software configuration includes a change to one or more existing instances of network services applications running at the self contained network services system. Changes to the existing instances of network services applications may include removing one or more of the instances of the network services applications changing parameters or a run time environment associated with one or more instances of the network services applications changing a level of virtualization of one or more instances of the network services applications or other changes. If such changes are included in the new software configuration block Yes one or more network service application instances may be removed or reconfigured according to the new software configuration.

Following the removal or reconfiguration or in response to a determination that no changes are to be made to the existing network service application instances block No the client network fabric and a router associated with the self contained network services system may be reconfigured to distribute traffic among the network services modules in accordance with the requested change in network services.

Referring next to and block diagrams of other examples of self contained network services systems are shown. The self contained network services system of may be examples of one or more of the self contained network services system described above with respect to previous Figures.

Each of the self contained network services system of may include a shared system database and various instances of network services applications . The network services applications may be implemented by a number of network services modules not shown in the self contained network services system as according to the principles of the present description.

The network services applications implemented by the self contained network services systems of may include at least one instance a controller application multiple instances of a load balancing application and multiple instances of a security application . The controller application may be an example of the controller application described above with reference to or the network service applications described above with reference to . The load balancing application may be an example of the load balancing application described above with reference to or the network service applications described above with reference to . The security application may be an example of the security application described above with reference to or the network service applications described above with reference to .

While the present examples are described in the context of the load balancing application and the security application it should be understood that these same principles may be applied to self contained network services systems implementing any combination of network service application types.

The self contained network services systems of may be implemented by a number of servers e.g. servers described in the previous Figures distributed among one or more physical racks. Dashed lines demonstrate one example of application distribution among different physical racks. Thus in an instance of the controller application may be implemented by a real or virtual server on a network services module implemented in a first rack multiple instances of the load balancing application may be implemented by separate real or virtual servers on a network services module implemented in a second rack a first instance of the security application may be implemented by a real or virtual server on a network services module implemented in a third rack and a second instance of the security application may be implemented on a network services module implemented by a real or virtual server in a fourth rack 

In previous solutions for providing network services special purpose hardware is provided in custom chassis having special purpose cards that communicate with each other over dedicated physical communication lines and a communications protocol with which to transfer state between nodes. By contrast the systems and methods of the present disclosure enable the provisioning of network services using commodity servers distributed among one or more racks without dedicated physical communication lines between servers. The communication system as described may mimic the communications capabilities of a chassis between the network services modules contained within a self contained network services system and shall therefore be referred to as a virtual chassis.

With reference to to allow for communication between the instances of the network services applications without dedicated network services communication lines the self contained network services system may provide each processor implementing an instance of the network services applications access to a shared system database . The shared system database may be implemented over a network accessible to each network services module implementing one of the network services applications . The shared system database may also be accessed via shared memory or over the server s local networking provided by the operating system. Each instance of the network services applications may be configured to store updated state information in a portion of the shared system database allocated to that instance.

In the example of the shared system database may be a fully distributed database where each server in each node locally stores its own state information. In such examples each server may be queried individually for its portion of the database. In additional or alternative examples the shared system database of may be a fully centralized database that stores local state information for each of the servers in a single repository. As shown in the example of the shared database may be implemented as a distributed database with partial replication in which one or more network services applications such as the controller application replicate state information from the servers that is used for metering in a replicated database . The state information in the replicated database may allow for persistence in the presence of catastrophic node failures while still allowing for the scalability and speed of a distributed database for other functions.

Because each instance of a network service application may be able to view state information for each other network service application instance through the shared system database the various instances of the network services applications may communicate with each other by storing and reading each other s state information in the shared system database .

Additionally the shared system database may be used to propagate changes throughout the self contained network services system . For example the controller application of may determine a current configuration of each server in the self contained network services system by reading state information from the shared system database . In this way the controller application may determine an updated software configuration for each server when a change for network services is received. The controller application may communicate the updated software configuration for each network services module by writing an indication of the updated software configuration for each network services module to the shared system database . Each network services module may then access the shared system database to retrieve its updated software configuration and update accordingly.

Referring next to a flowchart is shown of an illustrative method of managing a self contained network services system. The method may be performed for example by one or more of the network service modules or the network services operating system described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures.

At block a self contained network services module may be provided. The self contained network services system may have a number of network services modules in different physical racks each network services module executing a separate instance of a network service application. At block each network services module implementing a network service application may be provided with access to a shared database. At block the network service application instances may be allowed to exchange state information through mutual access to the shared database. Additionally or alternatively as described above with reference to software changes may be propagated through the self contained network services system by updating the shared database.

Referring next to a block diagram of another example of a network services module is shown. The network services module of may be an example of one or more of the network services modules in a self contained network services system described above with respect to the previous Figures. The network services module of the present example may include an instance of a controller application a number of instances of a load balancing application a shared system database a command line interface and an instance of a health monitor application . Each of these components may be in communication directly or indirectly.

The instance of the controller application of may be an example of one or more of the controller applications and or the network service applications described above with reference to previous Figures. The instances of the load balancing application may be examples of one or more of the load balancing applications and or the network service applications described above with reference to previous Figures. The shared system database may be an example of one or more of the shared system databases described above with reference to previous Figures.

The present example is described in the context of a load balancing application running on a single instance of a network services module running on a real or virtual server. However it should be understood that these same principles may be applied to any network services modules of a self contained network services system implementing any combination of network service application types.

The separate instances of the load balancing application may be implemented as separate processes rather than separate threads of the same process. In this way if one of the instances of the load balancing application crashes the functionality of the remaining instances of the load balancing application may continue unaffected thereby allowing the load balancing service to continue during diagnosis and or restarting of the failed instance. Moreover during the period between the crash or termination of a process and its being restarted the remaining processes may be configured to assume the duties and workload of the crashed instance. By spreading the network service of load balancing across multiple processes the risk of system performance being crippled by a single crash may be reduced.

The shared system database of may be accessible to the controller application instance the command line interface the health monitor application instance and the load balancing application instances. Similar to the shared system databases of the shared system database of may store state information for each of the application instances. The health monitor application may monitor the state information for each of the application instances stored in the share system database to dynamically detect and remedy problems arising with the application instances.

For example each instance of the load balancing application may store state information in the shared system database . If one instance of the load balancing application crashes the health monitor application may detect the crash from the state information stored for that instance of the load balancing application from the shared system database . Upon detecting the crash the health monitor application may divert new load balancing tasks away from the crashed instance and to other healthy instances of the load balancing application . The health monitor application may cause the controller application to attempt to restart the crashed instance of the load balancing application and or create a new instance of the load balancing application .

In another example the health monitor application may determine from the shared system database that one or more instances of the load balancing application is overloaded and in danger of crashing. In response the health monitor application may divert new load balancing tasks away from the overloaded instances of the load balancing application and or cause the controller application to create one or more new instances of the load balancing application .

Referring next to a block diagram of a self contained network services system is shown. In the example of the self contained network services system includes a number of dynamically configurable network services modules and a shared system database . The self contained network services system may be an example of one or more the self contained network services systems described in the previous Figures. The dynamically configurable network services modules may be an example of one or more of the dynamically configurable network services modules described in the previous Figures. The shared system database may be an example of one or more of the shared system databases described above with reference to the previous Figures.

In the self contained network services system of the present example each of the dynamically configurable network services modules may be in communication with the shared system database . State information for the applications executed by each of the dynamically configurable network services modules may be centrally stored and or replicated to the shared system database . In the present example dynamically configurable network services modules and may each execute an instance of controller application . Among other management tasks the controller application may detect that an entire network services module has failed at which point the controller application may discontinue service delivery to the failed module provision a new network services module and then direct new traffic to the new network services module .

Certain details regarding how service to the failed network services module is handled may be specific to a particular set of circumstances and or implementation of the self contained network services system to ensure the best delivery of services. In some cases it may be better to allow traffic destined for the failed network services module to not be serviced until a replacement module is provisioned. Alternatively in certain cases it may be better to redirect traffic destined for the failed network services module to redundant network service applications provided by other network services modules while waiting for the replacement network services module to be provisioned.

Referring next to a block diagram of an example network services module running a controller application and one or more network services applications is shown. The network services module may be implemented by a number of commodity servers or other processors. The network services module may be an example of one or more of the network services modules described above with reference to the previous Figures. The controller application may be an example of one or more of the controller applications described above with reference to the previous Figures. The network services application s running on the network services module may be an example of one or more of the network services applications described above with reference to previous Figures.

To provide self healing functionality to the network services module and or to an entire self contained network services system the controller application of the present example may include at least a state information management module a fault identification module. Of course the controller application may also implement other functionality and features according to the principles of the present specification. For the sake of clarity however the present example of focuses on certain basic features of the controller application with respect to self healing in the event of a faulty network services application or other failure.

The state information management module may be configured to store state information in a shared memory e.g. a shared system database as described in the previous Figures for each instance of a network service application implemented by the network services module and or the self contained network services system . The fault identification module may be configured to identify a fault in one of the network service application instances running on the network services module or on another network services module based on the state information stored within the shared memory. In certain examples the fault identification module may detect the failure of an entire other network services module in the self contained network services system . The fault remediation module may be configured to dynamically remedy the identified fault in the one of the network service application instances.

As discussed above remediation of the identified fault may include discontinuing deliverance of tasks or other network traffic to the identified faulty network service application instance in response to the identified fault. In certain examples remediation of the identified fault may include restarting the faulty network service application instance in response to the identified fault and restoring a state of the faulty network service application to the restarted network service application instance based on the state information stored within the shared memory. Alternatively the restarted network services application instance may start with a fresh state. In certain examples the delivery of tasks or other network traffic to the restarted network service application instance may resume.

In additional or alternative examples the fault remediation module may remedy the identified fault by launching a replacement network service application instance on a separate processor or the same processor to replace the identified one of the network service application instances. The state of the faulty network service application may then be restored to the replacement network service application instance based on the state information stored within the shared memory or alternatively the replacement network service application may start with a fresh state. The fault remediation module may reconfigure the self contained network services system to deliver tasks associated with the identified faulty network service application instance to the replacement network service application instance.

In additional or alternative examples the fault remediation module may reconfigure the self contained network services system to deliver tasks associated with the identified faulty network service application instance to a redundant instance of the same network service application that is already running.

Referring next to a flowchart is shown of an illustrative method of managing a self contained network services system. The method may be performed for example by one or more of the network service modules or the network services operating system described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures.

At block a self contained network services module having a number of processors may be provided where the processor s execute a number of separate network service application instances. At block state information for each network service application instance may be stored within a shared memory such as a shared system database. At block a fault may be identified in one of the network service application instances based on the state information stored within the shared memory. At block the identified fault in the network service application instance may be dynamically remedied as discussed above.

Referring next to flowcharts are shown of illustrative methods of managing a self contained network services system. The methods may be performed for example by one or more of the network service modules or the network services operating system described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures. The methods of may be examples of the method of .

Specifically the methods may be performed by a controller application and a health monitor application in the self contained network services module in a network services operating system environment. The controller application may be an example of the controller application or the network services application described above with reference to the above Figures. The health monitor application may be an example of the health monitor application or the network services application described above with reference to the above Figures. The network services module may be an example of a network services module or the network services application described above with reference to the above Figures.

Referring specifically to the method of at block a network service module may be provided. The network service module may include a number of processors the processors executing a number of separate instances of network service applications. At block each of the instances of the network service applications may be allowed or instructed to store state information for itself within a shared database. At block a fault may be determined in an instance of one of the network service applications based on state information stored by that instance in the shared memory. At block deliverance of new tasks to the faulty instance may be discontinued. At block the faulty instance of the network service application may be restarted and at block task delivery to the restarted instance of the network service application may begin.

Referring specifically to the method of at block a self contained network services system may provided the self contained network services system having a number of dynamically configurable network services modules. Each network services module may be implemented by at least one server. At block each network service application executed by the dynamically configurable network services modules may be allowed to store state information within a shared database or other type of shared memory. At block a fault may be determined in one of the network services modules. At block deliverance of new tasks to the faulty network services module may be discontinued. At block a replacement network services module may be provisioned and at block task delivery to the replacement network services module may begin.

Referring next to a block diagram of another example of a self contained network services system is shown. The self contained network services system of may be an example of one or more of the self contained network services systems described above with respect to previous Figures.

The self contained network services system may be configured to provide network services to a client network associated with a client network fabric . The self contained network services system of the present example may include an internal network fabric a number of instances of a load balancing application and a number of instances of a security application . The load balancing application and the security application may be examples of the load balancing application and the security application and or of the network service applications described above with reference to the previous Figures. Each of these components may be in communication directly or indirectly.

The present example is described in the context of separate instances of the load balancing application and the security application for simplicity in explanation. However it should be understood that these same principles may be applied to self contained network services systems implementing any combination of network service application types.

The self contained network services system of the present example may provide network services e.g. load balancing and SSL security to a client network over the client network fabric . The client network fabric may include switches routers and other transmission devices and media for the client network. The client network fabric may be an example of the network fabric described above with reference to .

It may be desirable to distribute network service tasks in parallel between multiple redundant network service application instances that provide the same functionality. For example it may be desirable to divide load balancing tasks from the client network between a first instance and a second instance of the load balancing application . Similarly it may be desirable to divide SSL security tasks from the client network between a first instance and a second instance of the security application . This redundancy may provide improved efficiency and resilience.

The client network may transmit all network service tasks of a particular type to the self contained network services system using a single IP address. One way to evenly distribute network service tasks between redundant modules at the same IP address may be to reconfigure routers in the network fabric of the client network to enable a routing protocol that distributes the network service tasks. For example Equal Cost Multi Path routing ECMP may be used to evenly distribute network tasks between two instances of a network services application when each instance of the network services application advertises a path of the same cost to a common address. However reconfiguring the routers of the client network fabric requires access to router configurations of the client network which many network administrators may be reluctant to give to third party network solutions providers. Address Resolution Protocol ARP manipulation may provide redundancy capability without altering the router configurations of the client network but it does not allow for the distribution of traffic to a single IP address between redundant network services application instances.

The self contained network services system of the present example may address these issues by providing an internal network fabric separate from the client network fabric and separately configuring the internal network fabric to distribute the network service tasks according to a defined policy. The internal network fabric may include at least one router or other forwarding device disposed at a port of entry to the internal network fabric from the client network fabric . The router may be an example of one or more of the routers described above with reference to previous Figures.

The internal network fabric may not be a part of the network fabric of the client network and hence need not be subject to management restrictions in place for the network fabric of the client network. For example ECMP routing may be enabled at a traffic forwarding module of the router associated with the internal network fabric even if the client network fabric forbids ECMP routing.

In this way redundant instances of the same network service application may advertise routes of equal length to a destination IP address associated with the network service offered by that particular application. Consequently the redundant instances of the application may trick the router into thinking that the different instances of the same network services application are simply equally viable next hops in a network path to the destination IP address causing the router to divide and forward all traffic directed to that destination IP address among the redundant instances of the network service application. The redundant instances of the network service application may then process the tasks directed to the destination IP address in parallel.

As an example consider the case shown in in which load balancing tasks may be transmitted over the network fabric to the self contained network services system at IP address 192.168.50.15 and security tasks may be transmitted to IP address 192.168.73.64. The first instance and the second instance of the load balancing application may each advertise themselves to the router as equally viable paths to 192.168.50.15. For example the first instance and the second instance of the load balancing application may each advertise that they can forward packets to 192.168.50.15 in an equal number of hops or an equal amount of time.

Thus the router may see the first instance and the second instance of the load balancing application as equally viable next hops to 192.168.50.15 and use ECMP routing to evenly distribute network flows or packets addressed to 192.168.50.15 to the first instance and the second instance of the load balancing application . In some examples the router may use hash based distribution or another distribution method to balance the network flows or packets between the redundant instances of load balancing application . Thus even though the separate instances of the load balancing application may have IP addresses unique to 192.168.50.15 the load balancing tasks may be evenly distributed to and processed by the first instance and the second instance of the load balancing application . A similar procedure may be used to cause SSL tasks directed to IP address 192.168.73.64 to be evenly distributed to and processed by the first instance and the second instance of the security application .

While the foregoing examples have been given in the context of repurposing ECMP routing to distribute network tasks of the same type between redundant instances of network services applications it will be understood that other types of routing or forwarding protocols may also be used to distribute the network tasks. Examples of other routing or forwarding protocols that may be used to distribute the network tasks amount redundant instances of network services applications include but are not limited to link aggregation control protocol LACP and OpenFlow.

Referring next to a block diagram of an example network services module running a controller application is shown. The network services module may be implemented by one or more commodity servers or other processors. The network services module may be an example of one or more of the network services modules described above with reference to the previous Figures. The controller application may be an example of one or more of the controller applications described above with reference to the previous Figures.

To provide redundancy of network services to restricted networks the controller application of the present example may include at least a network service redundancy module and a network service task distribution module . Of course the controller application may also implement other functionality and features according to the principles of the present specification. For the sake of clarity however the present example of focuses on certain basic features of the controller application with respect to the provision of redundant network services.

The network service redundancy module may manage and track the provision of network services to a client network associated with a first network fabric by a self contained network services system containing a number of network services modules running redundant instances of a network service application. As discussed above the self contained network services system may be associated with a second network fabric that is separate from the first network fabric.

The network service task distribution module may adapt the second network fabric to distribute network service tasks received from the client network and associated with the network service application among the redundant instances of the network service application. In certain examples the network service task distribution module may update the configuration of the second network fabric in response to a change in the redundancy of network services provided by the self contained network services module. Additionally or alternatively the network service task distribution module may update the configuration of the second network fabric in response to an instruction from an administrator e.g. over a command line interface API or GUI .

In certain examples the second network fabric may include a router configured to route traffic between the first network fabric and the second network fabric where the router is situated at a point of entry to the self contained network services system. In such examples the second network fabric may be adapted to distribute the network service tasks among the redundant instances of the network service application by programming the router to implement a routing or forwarding policy to accomplish the distribution e.g. using repurposed ECMP as discussed above . In certain examples network tasks of the same type may be transmitted from the first network fabric to the second network fabric using a common network address associated with the network task type and the router may distribute the received network tasks among redundant network services application instances having different network addresses.

Referring next to a flowchart is shown of an illustrative method of managing network services. The method may be performed for example by one or more of the network service modules the network services operating system the routers switches or other computing devices described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures.

At block network services may be provided for a client network associated with a first network fabric at a self contained network services system. The self contained network services system may implement a number of redundant instances of a network service application. The self contained network services system may be associated with a second network fabric that is administratively independent from the first network fabric.

At block the second network fabric may be adapted to distribute network service tasks received from the client network which are associated with the network service application among the redundant instances of the network service application.

Referring next to a flowchart is shown of an illustrative method of managing network services. The method may be performed for example by one or more of the network service modules the network services operating system the routers switches or other computing devices described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures.

At block a self contained network services system may be provided. The self contained network services system may implement a number of redundant instances of a network service application to provide network services to a client network having a first network fabric. At block a router may be provided at a point of entry to a second network fabric contained within the self contained network services system. At block equal cost multi path ECMP routing may be enabled at the router within the second network fabric. At block network service tasks received from the client network which are associated with the network service application may be distributed among the redundant instances of the network service application. This distribution may occur at the router using the ECMP routing according to the principles described herein.

Referring next to a block diagram of another example of a self contained network services system is shown. The self contained network services system of may be an example of one or more of the self contained network services system described above with respect to the previous Figures.

Multiple racks may implement various aspects of the self contained network services system of . For example a first rack may include a number of network service modules e.g. network services modules implemented by servers as described herein that separately implement a first instance of a controller application a first instance of a command line interface a first instance of a health monitor application and a number of instances of a load balancing application . The second rack may include a number of network services modules e.g. network services modules implemented by servers as described herein that separately implement a second instance of the controller application a second instance of the command line interface a second instance of the health monitor application a number of instances of a security application and a number of instances of a firewall application . However it should be understood that the applications implemented in the second rack need not replicate the applications implemented in the first rack . In certain examples each rack may implement a separate set of applications.

The controller application the load balancing application the security application and the firewall application may be examples of the controller application the security application and the firewall application respectively and or the network service applications described above with reference to the previous Figures. The command line interface and the health monitor application may be examples of the command line interface and the health monitor application respectively and or the network service applications described above with reference to the previous Figures.

The racks may be interconnected through a number of routers . The routers may include one or more dedicated routers e.g. router of associated with a network fabric e.g. the network fabric of internal to the self contained network services system that can distribute traffic to every network services module within the self contained network services system . The routers may also include a number of routers within a client network fabric e.g. the network fabric of .

The network service application instances of the racks may communicate with each other over a virtual chassis e.g. a logical backplane to coordinate functionality and access a shared system database e.g. the shared system database of the previous Figures according to the principles described herein. Individual network service modules or self contained network services systems may discover existing self contained network service systems through a discovery mechanism such as a dedicated protocol or a repurposed routing protocol. For example Address Resolution Protocol may be used between the separate instances of the controller application to discover each other by broadcasting ARP packets to a number of IP addresses associated with network services. The network service module or self contained network services system may then decide to join the virtual chassis of an existing self contained network services module and may then communicate with each other to exchange information about the network service applications implemented by each chassis and to establish network paths between the various network service application instances.

In other examples multicast or other protocols and technologies may be designed or repurposed to discover nodes and configure the logical backplane.

Referring next to a flowchart is shown of another example of a method of managing a self contained network services system. The method may be performed for example by one or more of the network service modules the network services operating system the routers switches or other computing devices described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures.

At block a first instance of a controller application implemented on a network services module as part of a self contained network services system on a first rack may use a repurposed routing protocol to discover and identify over a network fabric a second instance of a self contained network services module implemented on a second rack. In certain examples each self contained network services module may implement a single virtual chassis. Also there may be more than one controller application for each self contained network services system to provide redundancy.

At block a first instance of the controller application contained in the first self contained network services system may communicate with a second instance of the controller application contained in the second self contained network services system to implement a unified virtual chassis to logically merge the disparate sets of network services modules together. The virtual chassis may enable communication for the newly joined self contained network services system containing the network services modules of both the first self contained network services module and the second self contained network services modules. In certain examples the discovery mechanism between the self contained network services modules is different from the configuration and communication protocol.

At block network services data may be transmitted between the network services modules in the first and second racks using the unified virtual chassis. In additional or alternate examples network services modules from racks or chassis not running a local controller application may discover existing controller applications running on other network services modules. In this way a network services module can join an existing backplane without needing to run a local instance of the controller application.

Referring next to a flowchart is shown of another example of a method of managing a self contained network services system. The method may be performed for example by one or more of the network service modules the network services operating system the routers switches or other computing devices described above with reference to the previous Figures. The self contained network services system may be an example of the self contained network services system described above with reference to the previous Figures.

At block a plurality of network services modules may be configured to separately execute network service application instances to implement a dynamically configurable self contained network services system. At block a virtual chassis may be formed as a communications backplane between multiple network services modules may be established over a network fabric. At block a router within the self contained network services system may be configured to distribute network services tasks for a network service application among redundant instances of that network service application in the self contained network services system. At block each network service application instance may be provided with access to a shared database and at block the network service application instances may be allowed to exchange updated state information with each other through mutual access to the shared database.

At block a fault may be identified in one of the network service application instances based on the state information for that instance stored in the shared database. At block the faulty network service application instance may be dynamically repaired. At block a request for a change in network services provided by the self contained network services system may be received. At block a new software configuration for a number of the network services modules may be determined based on the received request. At block the network services modules may be dynamically configured according to the determined new software configuration to implement the requested change.

A device structure that may be used for one or more components of server network services module self contained network services system routers switches or for other computing devices described herein is illustrated with the schematic diagram of .

This drawing broadly illustrates how individual system elements of each of the aforementioned devices may be implemented whether in a separated or more integrated manner. Thus any or all of the various components of one of the aforementioned devices may be combined in a single unit or separately maintained and can further be distributed in multiple groupings or physical units or across multiple locations. The example structure shown is made up of hardware elements that are electrically coupled via bus including processor s which may further comprise a digital signal processor DSP or special purpose processor storage device s input device s and output device s . The storage device s may be a machine readable storage media reader connected to any machine readable storage medium the combination comprehensively representing remote local fixed or removable storage devices or storage media for temporarily or more permanently containing computer readable information.

The communications system s interface may interface to a wired wireless or other type of interfacing connection that permits data to be exchanged with other devices. The communications system s interface may permit data to be exchanged with a network. In certain examples the communications system s interface may include a switch application specific integrated circuit ASIC for a network switch or router. In additional or alternative examples the communication systems interface may include network interface cards and other circuitry or physical media configured to interface with a network.

The structure may also include additional software elements shown as being currently located within working memory including an operating system and other code such as programs or applications designed to implement methods of the invention. It will be apparent to those skilled in the art that substantial variations may be used in accordance with specific requirements. For example customized hardware might also be used or particular elements might be implemented in hardware software including portable software such as applets or both.

It should be noted that the methods systems and devices discussed above are intended merely to be examples. It must be stressed that various embodiments may omit substitute or add various procedures or components as appropriate. For instance it should be appreciated that in alternative embodiments the methods may be performed in an order different from that described and that various steps may be added omitted or combined. Also features described with respect to certain embodiments may be combined in various other embodiments. Different aspects and elements of the embodiments may be combined in a similar manner. Also it should be emphasized that technology evolves and thus many of the elements are exemplary in nature and should not be interpreted to limit the scope of the invention.

Specific details are given in the description to provide a thorough understanding of the embodiments. However it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example well known circuits processes algorithms structures and techniques have been shown without unnecessary detail in order to avoid obscuring the embodiments.

Also it is noted that the embodiments may be described as a process which is depicted as a flow diagram or block diagram. Although each may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be rearranged. A process may have additional steps not included in the figure.

Moreover as disclosed herein the term memory or memory unit may represent one or more devices for storing data including read only memory ROM random access memory RAM magnetic RAM core memory magnetic disk storage mediums optical storage mediums flash memory devices or other computer readable mediums for storing information. The term computer readable medium includes but is not limited to portable or fixed storage devices optical storage devices wireless channels a SIM card other smart cards and various other mediums capable of storing containing or carrying instructions or data.

Furthermore embodiments may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a computer readable medium such as a storage medium. Processors may perform the necessary tasks.

Having described several embodiments it will be recognized by those of skill in the art that various modifications alternative constructions and equivalents may be used without departing from the spirit of the invention. For example the above elements may merely be a component of a larger system wherein other rules may take precedence over or otherwise modify the application of the invention. Also a number of steps may be undertaken before during or after the above elements are considered. Accordingly the above description should not be taken as limiting the scope of the invention.

