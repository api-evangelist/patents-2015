---

title: Apparatus and method for providing harmonized recommendations based on an integrated user profile
abstract: In certain implementations, a system may receive attribute data corresponding to attributes of a plurality of users and to one or more venues for which the plurality of users has an affinity. A user personality matrix may be calculated for one or more of the plurality of users based on interrelational nodal link strengths between the one or more users and the venues. The user personality matrices may be merged to calculate a combined personality matrix representing a unified taste profile for the one or more users. A candidate list of venues having the highest link strength with the combined personality matrix may be determined. One or more recommended venues from the candidate list of venues that have the strongest links to the combined personality matrix may be determined, and recommendation data corresponding to the recommended venues may be output.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09449336&OS=09449336&RS=09449336
owner: NARA LOGICS, INC.
number: 09449336
owner_city: Cambridge
owner_country: US
publication_date: 20150313
---
This application is a continuation of U.S. application Ser. No. 14 255 712 filed Apr. 17 2014 which is a continuation of U.S. application Ser. No. 13 842 665 filed Mar. 15 2013 now U.S. Pat. No. 8 732 101 issued May 20 2014 which is related to U.S. application Ser. No. 13 416 945 filed on Mar. 9 2012 now U.S. Pat. No. 8 515 893 issued Aug. 20 2013 and U.S. application Ser. No. 13 842 165 filed Mar. 15 2013 all of which are related to U.S. application Ser. No. 13 247 289 filed Sep. 28 2011 now U.S. Pat. No. 8 170 971 issued May 1 2012 the entire contents of each of which are incorporated herein by reference.

Systems have used the explicit stated interests of one person to construct recommendations for another. For example Person A may be connected with Person B by way of a social networking interface. The social networking interface may allow users to indicate a preference for certain consumer goods movies music television shows venues and the like. In this case the social network may provide recommendations to Person A based on the stated preferences of Person B. That is Person B s preferences are directly mapped to Person B.

A recent system even suggests making joint recommendations in U.S. Pat. No. 7 756 753. However this system only analyzes specific items in one user s list e.g. shopping cart etc to offer those items or related items to another user. That is recommendations are provided to individual users based on purchase history similarities with other users.

Lastly systems are available for providing recommendations based on personality traits. For example online dating services may develop a personal profile for a user and provide recommendations on potential partners based on personality metrics indicating a likely favorable match. Again these systems merely provide individualized recommendations for partners however such systems fail to provide harmonized recommendations based on characteristics of a group of individuals.

In certain implementations a system may receive attribute data corresponding to attributes of a plurality of users and to one or more venues for which the plurality of users has an affinity. A user personality matrix may be calculated for one or more of the plurality of users based on interrelational nodal link strengths between the one or more users and the venues. The user personality matrices may be merged to calculate a combined personality matrix representing a unified taste profile for the one or more users. A candidate list of venues having the highest link strength with the combined personality matrix may be determined. One or more recommended venues from the candidate list of venues that have the strongest links to the combined personality matrix may be determined and recommendation data corresponding to the recommended venues may be output.

The foregoing general description and the following detailed description thereof are merely exemplary aspects of the teachings of this disclosure and are not restrictive.

The details of one or more implementations are set forth in the accompanying drawing and description below. Other features objects and advantages will be apparent from the description and drawings and from the claims.

Referring now to the drawings wherein like reference numerals designate identical or corresponding parts throughout the several views.

In certain aspects of the present disclosure personalization profiles may be determined concurrently for a plurality of users for the purpose of providing shared recommendations. Shared recommendation generation may include defining a user personality matrix defining features of each user in the plurality of users i.e. the group generating a combined personality matrix defining features of the group and determining a set of shared recommendations based on the combined personality matrix.

In certain aspects of the present disclosure a user s affinity for a particular entity or property i.e. a feature of a person place thing etc. may be determined when generating a user personality matrix. Mathematical computations for determining a user s affinity for a particular entity or property may include data mining functions for analyzing previous indications of an affinity for the entity or property. As a non limiting example a positive or negative affinity for an entity or property may include an analysis of purchase history user reviews interrelationships with users and or venues similarities between properties survey results and other factors described herein. It should also be appreciated that corollary principles of utilizing a user or group of users affinities apply when determining shared recommendations based on a combined personality matrix. That is in addition to analyzing a user s affinity for a particular entity when determining an individual s taste profile i.e. a user personality matrix aspects of the present disclosure may include creating and utilizing a unified taste profile i.e. a combined personality matrix derived from aggregated user personality matrices when determining recommendation candidates for a group of users. In this case the recommendation candidates may e.g. indicate an optimal decision recommendation based on the unified taste profile represented by the combined personality matrix.

The server may host a plurality of engines and modules. In this example the user interface module resides on the server and serves web pages and or suitable content to a client side application. The crawl and parsing module executes the web crawling and source data collection operations described below. The recommendation engine accesses the matrices of interrelationships and or combined personality profile matrices to generate recommendations according to the techniques described herein. The merchant interface provides the functionality described below concerning venue operators interaction with the server and accessing projections and reports generated thereby.

The data repository stores the matrices of interrelationships. The repository includes a matrix builder that builds data structures reflecting nodal interrelationships based on review data which is collected from review sites by the crawl and parsing module . The matrix builder also incorporates at least venue reviewer and user data collected from users venues and other web pages by the crawl and parsing module .

In certain embodiments the network includes the Internet or World Wide Web. The network may also comprise proprietary and semi propriety networks such as cellular data networks intranets VPNs or extranets.

Those skilled in the art will understand that the techniques described herein may be implemented in various system and database topologies consistent with various computational methodologies. Topologies and methodologies suitable for aspects of various embodiments are described in K. R. Nichols A Reconfigurable Computing Architecture for Implementing Artificial Neural Networks on FPGA Master s Thesis The University of Guelph December 2003 F. Rosenblati The Perception A Probabilistic Model For Information Storage And Organization In The Brain Psychol Rev. 65 6 386 408 1958 K. Steinbuch and U. A. W. Piske Learning Matrices and their Applications. IEEE Trans. Electron. Computers 12 846 862 1963 J. A Bamden High level Reasoning Computational Challenges for Connectionism and the Conposit solution. Appl. Intell. 5 2 103 135 April 1995 B. Denby P. Garda B. Granado C. Kiesling J. c. Prevotet and A. Wassatch Fast Triggering in High Energy Physics Experiments Using Hardware Neural Networks IEEE Trans. On Neural Networks 14 5 1010 1027 September 2003 R. O. Duda P. E. Hart and D. G. Stork. Pattern Classification. John Wiley Sons New York 2nd edition 2001 H. Eichenbaum The Cognitive Neuroscience of Memory An Introduction Oxford University Press New York 2002 K. Fukushima Cognitron A Self Organizing Multilayered Neural Network Bioi. Cybern 20 3 4 127 136 5 Nov. 1975 K. Fukushima and S. Miyake. A Self Organizing Neural Network With A Function Of Associative Memory Feedback Type Cognitron Bioi. Cybern. 28 4 201 208 3 Mar. 1978 J. M. Fuster. Cortex and Mind Unifying Cognition. Oxford University Press New York 2002 R. Gadea J. Cerda F. Ballesterand A. Mocholi Artificial Neural Network Implementation On A Single FPGA Of A Pipelined On Line Backpropagation ISSS 2000 Madrid Spain September 2000 S. Grossberg Adaptive Pattern Classification And Universal Recoding I. Parallel Development And Coding Of Neural Feature Detectors. Bioi. Cybern. 23 3 121 134 30 Jul. 1976 S. Grossberg Adaptive Pattern Classification And Universal Recoding II. Feedback Expectation Olfaction Illusions Bioi. Cybern. 23 4 187 202 30 Aug. 1976 S. Haykin. Neural Networks A Comprehensive Foundation. Prentice Hall Upper Saddle River N.J. 2nd edition 1999 R. Hecht Nielsen Neurocomputing Addison Wesley Reading Mass. 1989 R. Hecht Nielsen A Theory Of Thalamocortex in R. Hecht Nielsen and T. McKenna editors Computational Models for Neuroscience Human Cortical Information S. Y. Kung M. W. and S. H. Lin. Biometric Authentication A Machine Learning Approach. Prentice Hall PTR Upper Saddle River N.J. 2005 B. Widrow and M. Kamenetsky On The Efficiency Of Adaptive Algorithms In S. Haykin and B. Widrow editors Least Mean Square Adaptive Filters John Wiley Sons New York 2003 B. Widrow and M. Kamenetsky Statistical Efficiency Of Adaptive Algorithms Neural Netw. 16 5 6 735 744 June July 2003 B. Widrow and M. A. Lehr 30 Years Of Adaptive Neural Networks Perception Madaline and backpropagation Proc. IEEE 78 9 1415 1442 September 1990 U.S. Pat. No. 7 840 569 entitled Enterprise relevancy ranking using a neural network which is incorporated herein by reference U.S. Pat. No. 7 895 140 entitled Neural Network Learning Device Method And Program which is incorporated herein by reference and U.S. Pat. No. 7 979 370 entitled Neural Network For Electronic Search Applications which is incorporated herein by reference.

The nodes in the neural network in one implementation are venues such as restaurants theaters night clubs hotels concerts and other events. However due to the flexibility of the systems and methodologies described herein they may be applied in a variety of other manners. Nodes in the network may be sub venue items such as specific menu items or specific rooms inside a hotel. The nodes may also be style consumables such as clothing furniture or wine. The nodes may also be content such as music books magazines TV shows or movies. The nodes are optionally set to be services such as mechanics barbers transportation doctors dentists landscape architects interior designers or nanny services. In other implementations the nodes may be neighborhoods or cities in which to live real estate to purchase rent colleges to apply to careers that are a good fit or grocery stores. In still other applications the nodes may be associated with social aspects such as friends and activities the user or group of users might like. The nodes in other embodiments may be medical conditions or treatments. In other implementations the nodes may be business political and military strategies which may included simulated outcomes.

The techniques described herein may also be used for fraud detection by providing predictions of what a user or group of users is unlikely to do which in turn is more likely to be associated with fraudulent use of a credit card for instance . The techniques may also be used for marketing co branding opportunities by predicting brand affinity even across disparate categories. The techniques may also be applied to actuarial risk assessment applications by analyzing co occurrences between a user s fine scale likes and dislikes which can be utilized as indicators of risk. The techniques may also be used to predict financial market behavior or trends by aggregating markets into group users and predicting behavior of that group user as described hereinbelow. In a similar vein predictions on mass human behavior can be achieved with respect to geographic movement migratory patterns and thereby census and demographic projections over time may be generated for use by retailers real estate developers and others. Moreover the techniques may be used to gauge affinity for certain types of media such a television shows or media channels cable or web .

As will be appreciated from the following description in each such implementation the nodal attributes reviewer attributes and the corresponding interrelationships will be selected to correspond in part to the factors that are causally associated with a user or group of users preferences for certain nodes. For instance in a system designed to provide career suggestions the nodal attributes may includes skills associated with each profession and user attributes may include aptitude scores or survey questionnaire results.

Hereinbelow the system is described in connection with exemplary systems in which the nodes are venues such as restaurants hotels or theaters. For convenience the term venue is used to refer to neural network nodes. It should be understood that the term venue in the following sections is used broadly to refer to any entity or item that is interrelated in the network with other network nodes such as users and or reviewers.

A user s or reviewer s affinity again positive or negative for a venue may be derived from both evaluations and assessments of venues such as reviews or ratings and implicit data sources such as ant trails. Individuals may publish ratings on social web pages review forums and websites or blogs. Ratings may also be published by votes placed via Like or Digg buttons disposed on various websites. As one example user reviews of restaurants can be found at menuism.com dine.com opentable.com google.com reviewsahoy.com and realeats.com. An individual s affinity for certain venues can also be discerned from their spending habits or purchase history data of which can be gleaned from financial transaction records such as credit card statements. An individual s web browsing history or ant trail can also provide insight into affinities for certain venues as discerned from cookies or the various reviews an individual generates across multiple forums including but not limited to websites associated with each venue. An individual s website navigation bookmarks and browsing history also reflect browsing behavior and may likewise be mined for source data. The geographic position of an individual over time such as information derived from cellular GPS data can likewise be correlated with venues and thereby generate data reflective of venue affinity. This approach may provide dwell time data as well which can be used to sort or arrange the data. Magazine subscription information may also be used as an indicator of an individual s affinity for given venues as that term is broadly used herein . An individual s professional licenses can also be used as data sources for determining an affinity for venues including but not limited to organizations.

The foregoing sources of data concerning venue affinity can be prioritized based on factors germane to the strength of the correlation between the data and the affinity of interest. Data or sites that refer to a greater number of venues might be more probative since such sites are more likely to compare contrast or rank venues. Similarly sites that specify a greater number of properties such as in structured fields for each venue or reviewer tend to be more effective or probative. Sites with a greater number of reviews per venue and or reviews per reviewer are on balance to include more reliable affinity. The inclusion of related items also viewed or people who purchased this also purchased fields or boxes can also be considered as indicators that the site s data will be strongly correlated to actual affinities. In a similar vein a site s inclusion of geographically proximate recommendations recommendations based on social networking and recommendations based of complementary venues e.g. hotel and restaurant may be indicative of more reliable data. The behavior of the more effective or accurate reviewers also can be analyzed to differentiate various data sources for example by determining where those reviewers tend to post reviews. The existence of grouping structures such as data structures associated with a plurality of socially networked individuals can also be used as a metric to grade or rate the potential value of the site s data. Blogs may also be crawled to determine which reviews or ratings sites are the most commonly referenced.

In one embodiment numeric values are associated with some or all of the foregoing variables and weights are assigned to each variable based on the system designer s estimation of the relative strength of correlation between the variable and the predictive value of the review data on the site. For instance the density of the best reviewers on a site may be weighted more heavily than the number of venues referenced on a site. The resulted weighted numerical grades can be used to prioritize harvesting operations.

The reviews may be harvested using web crawling techniques such as those described in U.S. Pat. No. 6 631 369 entitled Method and System for Incremental Web Crawling and assigned to IBM Corporation which is incorporated herein by reference. According to that technique in an initial crawl the crawler creates a first full index for the document store after which incremental crawls are executed.

Alternatively or in addition the system may target cached web pages served by commercial search engines. A suitable protocol for rebuilding content sites from search engine caches is as follows. First a complete venue listing for a category by crawling a directory such as a Yellow Pages or other suitable directory. For each item in the directory the system runs a series of search queries in various search engines each query restricted to results for the content site of interest such as dine.com. The search results are parsed and the URLs for the relevant cached pages are retrieved. The cached pages are then retrieved and in a repository after which they are parsed based on the name city phone number and other data fields associated with a venue of interest. In this manner the cached review page for the venue of interest may be identified. This process is optionally repeated across search engines and across multiple venues targeting the sites prioritized as set forth in the preceding section to collect the desired array of source data.

The data may optionally be validated by checking parsed venue or reviewer content for blank fields. Venue or reviewer content may also be checked against unique identification information a venue phone number or a reviewer email address or screen name to ensure sure that it corresponds to the target venue or reviewer.

After validation the pages may be parsed to extract the data of interest. Parser code may be used to segregate out the structured fields of interest the reviews and other information of interest as described above. The extracted data may be uploaded to database tables or files to be analyzed for computing personalization. Techniques such as those taught in U.S. Pat. No. 7 788 293 entitled Generating Structured Information assigned to Google Inc. the contents of which are herein incorporated by reference may be used for this purpose.

The same approaches can be used to harvest data concerning reviewers or users discussed in more detail below . The data is preferentially in a structured format on a public site and is predictive of personality and affinities. The data sources may be prioritized or ranked as set forth in the preceding section such as according to the number of reviews given by the reviewer the citation of a reviewer s reviews on other sites and the alignment of a reviewer s reviews with overall ratings generated by the system as discussed below and third party review sites from which data is harvested. The reviewer data is then selectively crawled and parsed as explained above.

The crawl and parser module may be configured to coordinate the crawling and digestion of certain web or network nodes. Due to practical limitations the entire World Wide Web cannot be crawled and parsed simultaneously. The crawling and parsing process may be coordinated across different content gathering computers or agents. Multiple remote crawling engines at remote network nodes may be deployed each of which can check data sources such as web pages or cached web pages for the properties described above and recruit crawling and parsing nodes in the event rich data sources are located. The remote crawling nodes can coordinate their crawling based on real time breaking news events or optimize content gathering in response to shifts in mass user behavior as reflected in the data matrices described herein.

Examples of content collection and content organization systems and process flows are shown in . illustrates the process executed by the content collection system which may include the crawl and parsing module . At step the crawl and parsing module identifies subject matter targets such as rock climbing are needed in the neural network. The targets may also take the form of specific URLs or collections thereof. At step the module identifies the current content in the form of previously collected web pages or representations thereof that already resides within the system s storage network. At step the content collector which in one embodiment takes the form of a persistent system network node determines from a comparison and analysis of the two inputs which subject matter or URLs are to be gathered by the module . The content collector verifies the addresses and content of the target sites containing the subject matter which is to be collected and creates a queue of items to be crawled and parsed by the module . As an example the distributed queue s first entry might be Boston restaurants google.com all which corresponds to a request that the crawler nodes collect all cached pages associated with google.com s reviews of any Boston area restaurant. The content collector may also dynamically allocate certain queue items to specific crawling nodes based on their relative priority . At step the content collection engine which includes a distributed array of crawler nodes receives or access the distributed queue and dynamically assigned collection commands from the content collector. The content collection engine under the control of crawl and parsing module collects cached web pages as discussed above. The output is a library of cached web content which is parsed according to the methods described herein.

Upon creation of an account or in response to another triggering event such as a request for a new recommendation the system may require a user to input various data including gender age marital status children ages children gender third parties with whom the user is socially networked hobbies interests favorite venue information in one or more venue categories preferred or non preferred reviewing entities if any .

The user is then asked to list favorite or preferred venues. As an example the user may list favorite restaurants movies or activities. The system may asks for alternative favorites in the event a venue is not included within the neural network.

The system optionally may crawl the web for additional information concerning the user and then parse and validate the data according to the methods described above. This supplemental data may be added to the user s profile data from which will be used in various operations as set forth below.

The following provides an exemplary description of aspects of creating nodal interrelationships. For the purposes of the present disclosure it should be appreciated that these aspects may be applicable to forming nodal interrelationships as part of determining an individual user s personality matrix as well as a group of users combined personality matrix. Therefore for simplicity the term user hereinafter may represent an individual user or a unified set of users represented by a combined personality matrix.

Nodes in the data network may represent venues venue properties users user properties reviewers reviewer properties and the like. Links represent relations between those nodes. The number of links between two items might therefore grow as data on two items grows. The strength of each link denotes the affinity between the two connected items such as similarity of star rating in a review of a venue number of attributes held in common. Links can be either positive or negative in sign.

Links can be associated to designate affinity between and amongst venues properties of venues users reviewers content sources or any combination thereof. For instance as shown in two venues may be interrelated in that they have several attributes in common namely that they are both Italian restaurants in the same neighborhood. Reviewers are related in that they likewise have multiple attributed in common. Users are likewise interrelated by shared attributes. Reviewer is interrelated with both venues and in that Reviewer delivered a review to both venues and that in turn creates an additional relationship between venues and namely they were reviewed by the same reviewer. User is related to both Reviewers and via shared attributes and User is related only to Reviewer via the shared attributes. Reviewers and are thus interrelated also in that they share attributes of user . User is also directly linked to venue by virtue of the fact that the user has expressed an affinity for that specific venue. Reviewers and thus have a second order relationship with venue through user .

This data architecture permits links or interrelationships to be adjusted independently from one another. Links touching the same node can be adjusted for one partner node but not others. Links on the same node can be scaled together to maintain relative values of each of their partners while changing the overall drive influence to that node.

In selected embodiments subtractive or anti related links can weaken relationships from one node onto another. Subtractive nodes also can be added to the network to normalize the total positive timbre of local nodes where the average link values are too strongly positive. Subtractive nodes also can serve to mediate competition between nodes to influence one another as the strength of the link dictates the effect one node will have on the other. Subtractive nodes can help sharpen or focus the positive influence cast by a given node.

Links can in various implementations be sorted according to priority of influence over or strength of link to their downstream node. Links may interact and influence one another where the addition of one changes the strength or presence of another in a manner that is restricted or targeted to other links on the same node.

Links from reviewer nodes can be normalized based on how positive or negative they are. In other words if a given reviewer is an easy grader his or her reviews may be lessened in magnitude to normalize the reviews to a statistic goal or mean. Links from reviewer nodes may also be normalized to lessen the influence of those links where for instance a reviewer has an extraordinarily high number of reviews each of which creates a link and thus that single reviewer s opinion would unduly influence the data network if not scaled appropriately. Conversely the strength of a reviewer link make by scaled upwards based on measured or perceived effectiveness or accuracy of the reviewer. This may be executed for instance through rankings or ratings of reviewers or statistical feedback whereby accuracy or predictiveness of reviewers is measured.

Weighting or normalization may also be used to alter a link s strength based on the number of attributes in held in common. For instance the system may be configured to give each additional link of a given type a linearly or exponentially decreasing affect such as where a substantial number of interrelated reviewers given a venue a similar review. Links between nodes that are hyper connected may be likewise be scaled downward to reduce the effect that one of the two nodes has on the extended network. The converse giving cumulative links escalating effect or increasing link strength for under connected nodes may also be implemented with the opposite effects.

Links may also be weighted based on the predictiveness of the reviewer. For instance reviewers may be graded based on number of reviews number of citations on other web sites or ratings of reviewers on third party sites crawled by the system. The links created based on each reviewer s reviews may accordingly be scaled linearly or non linearly according to the relative grade of the reviewer. Reviews provided by more highly rated reviewers may be assigned correspondingly higher values or strengths.

Reviewers may be weighted on a user specific basis as well. For example the neural network of links may be re weighted based on the fact that the user requesting a recommendation or a unified user represented by a combined personality matrix has affinities or attributes held in common with certain reviewers. Conversely certain reviewers with which a user and or a unified user has indicated a negative association may result in re weighting to correspond with the negative association. Reviewers ratings may be correspondingly weighted more heavily or more lightly in correspondence to the link between the user and the various reviewers.

Reviewers may optionally be pruned from the network if they have below a threshold level of relevance as measured by a corresponding grade or effectiveness. As noted elsewhere herein the grades of reviewers may be based on ratings of reviewers at third party sites and or feedback of users of the system concerning agreement or disagreement with recommendations which were calculated in part based on a given reviewer s review. If a reviewer is pruned from the system the remaining reviewer s weightings may be adjusted upwards to maintain normalization.

Similarly aspects of the present disclosure may allow for indicating certain filters related to affinities or attributes other than reviewers which can be utilized to screen against candidate recommendations. Screening candidate recommendations may e.g. include re weighting link strength or eliminating a link altogether.

The links in the neural network may be bidirectional as shown in the figures or unidirectional. In certain circumstances the predictiveness of a link may be asymmetrical or unidirectional. For example it may be the case that almost everyone who likes restaurant A likes restaurant B but very few who like restaurant B also like restaurant A. In that case the links associated with affinity for restaurant A may unidirectionally point to i.e. be linked to restaurant B but the converse would not be true i.e. node B would not have a positive link to restaurant A based on this data point . For simplicity of illustration the figures address the simpler scenario wherein all data points are symmetrical but in various implementations some or all of the links may be unidirectional or have asymmetric strengths such as 1.5 in one direction and 0.5 or 0.5 in the other direction .

The neural network may be refined based on an active feedback loop concerning the effectiveness of the recommendations provided by the system . Links can be refined in either direction based on feedback for how effective the recommendation was. One measure of the effectiveness of the recommendation is whether funds were spent by the user based on the recommendation which in turn might be measured via data provided by partners such as financial transaction card issuers. Another measure may be feedback provided by the user in response to a query or survey concerning the recommendation or venue in question. Yet another measure of recommendation effectiveness is a user s browsing behavior and the fact that the user left a positive review for the recommended venue on a third party site which can be collected and parsed as set forth above . Still another technique to assess effectiveness of a recommendation is geographic dwell time at a physical location associated with a venue as measured by mobile device GPS data for instance.

It should be noted that not only first order connections are updated based on feedback. Rather in various implementations second and higher order connections are optionally updated based on feedback. For instance when a reviewer s ranking or grade is updated the second order connection between two restaurants which are both liked by the reviewer may be updated or correspondingly modified as well. Mismatch between the recommendation and the user s evaluation can drive a reduction or weakening of the links between the associated nodes such that the converse could also be executed. In response to positive feedback between a reviewer node s recommendation the links between that node and neighboring nodes may be strengthened. Similarly links created by the reviewer s reviews may be assigned a greater strength.

The nodal structure facilitates computations and scaling of the network. As will be seen the nodal network may create a natural look up table that is convenient to search and operate over. The nodal structure with inter node links of varying types provides a convenient way to update the structure as new pieces of information are added and in certain embodiments this may be executed without losing the original information as in traditional databases that represent affinity as single number weights between items. The data in various embodiments may be represented as either an indexed rows of databases linked lists or distributed files.

The matrix of interrelationships or links can be broadly categorized as content based interrelationships collaborative interrelationships and content collaborative interrelationships. The first type content based links are in certain embodiments premised on venue attributes for multiple venues reviewed by same reviewer. The content based links establish interrelationships between venues based on shared attributes. The strength of the link or anti link may be dependent on the number of things held in common comparative ratings and other factors as described herein.

Collaborative venue interrelationships associate venues that are liked by the same reviewer often without any dependency or relation to the reason s why the reviewer likes the venue. The strength of the link or anti link may be dependent on reviewer rating proximity on same list and other factors described herein. Collaborative links arise when two venues co occur for example in the same person s list of favorite or preferred venues on the same top 10 or other grouping lists on ranking or recommendation sites or on the same search engine search results page. Proximity within the list may be used as a variable to control link strength. Ant trails may also be used to create collaborative links by tracking people s surfing behavior and linking venues a given user often visits independent of spiderwebbing. In this way restaurant A may be deemed interrelated to museum B if many tracked users visit both of those sites. The user s dwell time at each site or the fact that a user left a rating or review may also factor into whether a link is created. In certain embodiments this tracking is accomplished without the use of cookies rather by collecting from the web data concerning the user s activities on rating and review sites according to the techniques described elsewhere herein.

Content collaborative interrelationships or links may arise from common or anti common reviewer attributes for reviewers who liked or disliked the same venue. The venue attributes may be analyzed for common or anti common features and links may be established between either a specific venue and reviewer attributes or between venue attributes and reviewer attributes. The strength of the link may depend on the incidence of an attribute among reviewers giving a venue a certain grade or similar comparative ratings.

The exemplary architecture illustrated in facilitates in certain embodiments dynamic updating and adapting of the network. For example when a new restaurant or review is added to the network those nodes each create first second and higher order links which are added to the network. The affected links can be updated by a relatively computationally simple and non resource intensive addition or other arithmetic operation and the neural network need not be substantially entirely recalculated or reformed.

Either the system or users may trigger the recommendation engine. The users may do so by entering through a web portal client application or electronic message a request that a shared recommendation be generated based on provided venue attributes such as type geography or price. The system may access user profiles to collect data for each user in a group requesting a shared recommendation. Exemplary user data collected by the system includes other venues liked gender profession age location pricing preferences cuisine preferences entertainment content preferences e.g. favorite movies music books etc. preferred venue features allergies preferred modes of transportation relative weight in shared decision making schedule calendar information style preferences and any other user information set forth herein. As will be described in further detail in later paragraphs user data collected by the system may be utilized to form a user personality matrix and combined personality matrices with which to determine shared recommendations.

The system may also automatically generate recommendations for inclusion in electronic messages such as text messages or email messages sent to targeted users or for presentation on a web portal or client application accessed by users. The system may also include features for determining available times for a show reservation appointment etc. Accordingly the system may control an interface for scheduling an event and or purchasing tickets for shared recommendation results.

The recommendation engine may responsively identify venues with strongest links according to the following protocols in selected embodiments. Based on the identified liked venue s the system may identify the top N venues that have strongest link value to that the identified venue and which have the specified venue attributes. Alternatively or in addition based on highest rated venue s having specified attributes the system may identify the top N venues that have strongest link value to that the identified venue. Still another alternative which can be used alone or in combination with the foregoing is to based on the highest rates venue s having specified attributes and being recommended by friends or selected reviewers identify the top N venues that have strongest link value to that the identified venue. The recommendation engine may also generate recommendations based on the user attributes for instance by identifying the top N venues that have strongest link to attributes of the user personality matrix and the combined personality matrix. Further in selected embodiments a recommendation threshold at which the nodal link strengths have to cross may be implemented such that the recommendation engine will not recommend venues with link strengths below the recommendation threshold.

In certain embodiments a plurality of these techniques are used and resulting venue recommendations are weighted based on empirical observations concerning the predictiveness or accuracy of each protocol. The weight factors may be simple coefficients or first second or higher order equations.

In the case of recommendations provided for a group of users these same techniques may be used but with the modification that the user attributes are selected to match the group either by direct user input or by arithmetic blending or averaging the user attribute values to arrive at a composite group user profile.

Recommendations may also be provided based on real time location information such as that provided by smart phone GPS data. As described more fully below the system may send an electronic message or alert either including a recommendation based in part on the location and or time or prompting a user to access an interface to receive the recommendation. For instance if one or more users is known to be proximate to a theater shortly before a show which the recommendation engine ranks highly for that particular combined personality matrix the system may generate an electronic alert to the one or more users including the recommendation a hyperlink to the system web portal or a link to activate a client recommendation application that can launch a user interface such as the exemplary interfaces described herein.

Alerts or recommendations may be accompanied by and be generated based on promotional offers related to the venues. For instance an electronic notification may contain a recommendation along with a promotional discount offer for the related potential booking or reservation. Recommendations presented in the interface or via electronic messages may also be selected based in part on promotional status. That is to say the recommendation engine may strengthen links nodes associated with promotional offers and thus the engine will factor in promotional offers when determining nodes to recommend i.e. those most strongly linked to nodes associated with the user or a recommendation request .

Users feedback concerning recommended venues and the associated take rates may likewise be factored in by the recommendation engine. For example the link strengths may be increased for venues for which users more frequently make reservations based on the recommendations consistent with the techniques taught herein.

A matrix of content collaborative interrelationships not shown may reflect links arising from common or anti common features between each venue and each reviewer. For example reviewers may have a characteristic called genre affinity and a link of predetermined strength may be created when a genre affinity matches the venue genre. Additionally the content collaborative matrix may show links between affinity for a venue and reviewer attributes. In that example common attributes among reviewers who rated a venue highly may be linked to the venue. For instance reviewers aged 31 35 may disproportionately rate a venue poorly in which case an anti link may be created between the venue and the reviewer attribute age 31 35. 

Second order relationships could also be included in the link matrices used to calculate overall link strength. For example Restaurant is liked by both Reviewer and Reviewer . Those reviewers in turn both like Restaurant . Restaurant could be assigned a direct 0.25 link to Restaurant based on this second order relationship. That link could operate in the matrix independently of the nodes associated with Reviewer or Reviewer .

An alternative form of a second order relationship is shown in . illustrates second order links arising from collaborative venue links. As shown in Restaurant is positively linked to both Restaurant and Restaurant so a 0.25 link is created directly between Restaurants and . Restaurants and are both negatively linked to Restaurant so a 0.15 link is created to reflect the belief that this anti link is weaker than the positive link previously mentioned. In a similar vein an even weaker second order link is established between Restaurants and because while both are negatively linked to Restaurant the links are substantially different in magnitude.

These second order relationships can be added directly to the related matrices or otherwise computationally combined when calculating overall link strength between two nodes.

It should be noted that normalization can occur at local level or at the network level. At the local level all links connected to a certain nodes may be normalized or all links coming to or going from a certain node may be normalized recalling that links may be unidirectional or asymmetric . Alternatively normalization may occur at the data matrix level. For example content based link matrices may be normalized or other data subsets of network may be normalized.

First at the recommendation panel a plurality of recommendations is presented. In preferred embodiments there are five recommendations provided as shown in . In other embodiments two to seven three to six four to six four to eight four to nine or two to ten recommendations are provided. The number of recommendations may be on a per venue basis so that five recommendations are provided for restaurants and a like number of hotels are recommended. Alternatively a lesser number of complementary venue e.g. hotel recommendations are provided.

Second the collection and comparison panel provides a place to compare and contrast recommendations of interest. The panel provides venue genre or type the venue name geographic area and price. The panel also provides buttons to book a reservation or check availabilities or rates for the various venues. Buttons for adding the event to a calendar are optionally provided adjacent each venue. Also provided are status identifiers indicating the current state of activities and or bookings for each venue. Optionally buttons may be provided to launch a window or image that depicts the venue on a map.

Third the calendar panel not shown may feed or import a view of the user s personal calendar and provide interactivity for immediate assessment of the user s schedule and available times. The calendar permits import of the user s other appointments and export of the calendar items to any third party calendar systems such as Outlook Google and iCal.

These three panels are arranged down the page so that decision making flows down the page from menu of options top to deliberation and comparison middle to arriving at a decision and finally to scheduling booking publishing sharing taking action bottom . This arrangement may in certain embodiments facilitate decision making.

A user can directly book a recommendation at any of these three stages or add to calendar at either of the first two stages. This arrangement may in certain embodiments enhance the likelihood that a user makes reservation or booking based on the recommendations.

Additional optional functionalities not shown include a transportation reservation interface. For example the interface may present a transportation button that launches an booking or reservation portal which communicates with a third party transportation provider such as a taxi service and makes a reservation corresponding to a restaurant or other reservation. The interface may also permit the arrangement of transportation services between and amongst a plurality of other recommended events spanning one or more days.

In similar vein booking functionality may be provided for a variety of complementary venues services or activities. Examples include hotel rooms airline reservations movie tickets theatre tickets museum tickets music tickets sporting events product delivery such as flowers or flowers rental car services car share services public transportation services restaurant takeout delivery services parking services real estate services or moving services such as inter city packing and transportation services .

The interface may selectively suggest alternative actions or venues based on a first booked venue or action. For instance the booking of a restaurant reservation may prompt the generation of night club or theater recommendations. As another example the booking of a real estate tour through a real estate agency may prompt a recommendation for moving services. Subsequent bookings may in turn generate additional recommendations complementary to the most recent booking the earlier booking or both.

These follow on recommendations may be filtered and selected according to the techniques set forth above. In particular the recommendations may be a function of the user s profile attributes venue preferences past booking behavior and or previous feedback concerning certain venues. For instance the recommendations may be filtered as set forth above according to the user s most recent reservations and the user s expressed preferences for given venues that are linked to potential secondary or tertiary recommendations.

Recommendations may also be provided based on real time location information such as that provided by smart phone GPS data. The system may send an electronic message or alert either including a recommendation based in part on the location and or time or prompting the user to access an interface to receive the recommendation. For instance if a user is known to be proximate to a theater shortly before a show which the recommendation engine ranks highly for that particular user the system may generate an electronic alert to the user including the recommendation a hyperlink to the system web portal or a link to activate a client recommendation application that can launch an interface such as those described herein.

Alerts or recommendations may be accompanied by and be generated based on promotional offers related to the venues. For instance an electronic notification may contain a recommendation along with a promotional discount offer for the related potential booking or reservation. Recommendations presented in the interface or via electronic messages may also be selected based in part on promotional status. That is to say the recommendation engine may strengthen linked nodes associated with promotional offers and thus the recommendation engine may factor in promotional offers when determining nodes to recommend i.e. those most strongly linked to nodes associated with the user or a recommendation request .

Users feedback concerning recommended venues and the associated take rates may likewise be factored in by the recommendation engine. For example the link strengths may be increased for venues for which users more frequently make reservations based on the recommendations consistent with the techniques taught herein.

Users may be provided a profile page or my account page that provides analytics on that data and any other data collected or contributed to provide perspective and insight into behavior. The page provides a feedback mechanisms to the user that is habit honing in that analytics on self activity is provided in a visual format. For example the page may present graphical trends of actions within customizable goal categories such as health gym yoga family museums travel dining and errands dentist mechanic groceries . Based on user defined goals the overview page suggestions can be featured to highlight relevant activities to fill existing calendar time slots.

The interface may also provide other prompts to facilitate actions and hone habits. For example the interface may provide cues and triggers embedded in mobile device applications to cue initiation of plans and transitions between scheduled events. For instance the mobile client application may trigger chimes upon next scheduled event music to reduce anxiety surrounding errands tailored music transitions upon the occurrence of the next scheduled event or visual blinking LED cues upon next scheduled events.

The user interface described above presents a plurality of recommendations to the user based on a user search query thereby allowing a user to pick various venues and or add them to a calendar. However based on this view a user may not fully grasp the interrelationships between the venues that led the recommendation engine to recommend the venues in the first place. Further as long as the recommendation engine is providing recommendations to the user the user may not have as much of an incentive to provide more information to the system thereby enabling an enhanced neural network topology that will provide better recommendation results.

To ensure a better user understanding of the nodal links between venues within the neural network topology and to provide motivation for users to input more information into the system an additional bio visual personalized feedback interface is provided to users of the system . Through the bio visual feedback user interface the user is able to view an overall network topology of various nodes within the system and the interconnections therebetween thereby allowing users to grasp the nodal link strengths and relationships between venues.

The bio visual feedback interface is a two dimensional interface that provides an overhead aerial bird s eye view of the network topology presented topographically in an easy to understand manner. For instance at the highest level a topographical view of the system may depict clusters of nodes in various regions with some node clusters being venues of interest to the user based on previous recommendations and or nodal interrelationships having strong overall link values and other cluster areas may include nodes known to have low overall link scores or in other words nodes that would be bad recommendations to the user. To enhance the understand of the user nodal clusters having nodes that would be strong recommendations for a user or nodes that have previously determined to have been effective to the user can be displayed in hot colors such as red or orange whereas other nodal clusters having poor recommendation choices can be displayed in cold colors such as blue or purple. Nodal links may or may not be provided at this level to give the user an understanding of how various nodes are linked to each other.

The topographical view of the nodes can further be enhanced via contour mapping features. Accordingly certain areas of the clusters which include strong nodal links therein can be presented in an elevated contour with a different color mapping than venues with lesser overall link strengths positioned in lower elevations. Further nodes having antilinks with other nodes may be positioned farther apart in the aerial view and have dotted links to indicate the negative link strength therebetween. Further nodes that do not have links to other nodes may be placed apart from the nodal clusters to represent their independence from the other nodes of the neural network.

As described above Restaurants and represent a cluster of venues having strong overall link strengths with Restaurant and as such may be represented using hot colors. Restaurant itself may be indicated in a neutral color to identify that it is the restaurant expressed in the search query by the user. Further Restaurant could be displayed larger than the other nodes in the topology depicted in to identify it as a restaurant that was part of a search query. Restaurants and may be depicted in cold colors as they have low recommendation values based on low overall link strengths with respect to Restaurant . Further as illustrated in the links between Restaurant and Restaurants and are dashed as they represent anti links having negative overall link strengths.

The system as illustrated in can also display links to nodes in other locales. For example in selected embodiments the world view may include different locales such as New York and Boston. As such link identifies a connection between Restaurant of Boston and Restaurant Z of New York. The link between different locales may be represented in various manners such as a squiggly line in order to indicate to the user that the link represents a connection to a different area. Further as the line is solid and not dashed it represents a positive overall link strength between Restaurant and Restaurant Z as described above. While not shown New York will likely have its own neural network topology with corresponding contours and internodal connections. Accordingly the bio visual personalized feedback user interface provides the user with the ability to quickly identify restaurants in different locales that may be strongly connected to known restaurants in the user s location. In other words if the user is planning on traveling to New York he can virtually travel over transit link to determine restaurants in New York that he may want to visit based on their relationship with Restaurant .

To further aid the understanding of the user upon a close or cursory inspection of the bio visual feedback user interface the contour zones may also be colored using hot or cold colors based on overall link strength with respect to a designated restaurant. The more information the system contains the more detailed and comprehensive contour map can be provided to the user. Accordingly by interacting with the bio visual feedback user interface the user is motivated to provide more information to the system in order to discover new avenues of connectability with respect to the nodes of the neural network topology. This in turn enables the system to provide more accurate information to the user for future recommendation requests.

In addition to viewing network topology via the bio visual feedback user interface the user may interact with the nodes in order to redefine and redisplay the neural network image. For instance world view identifies the neural network topology with respect to Restaurant but the user may designate via a mouse speech or other input device another node in which to view the network topology. The system will then recalculate the overall link strengths as previously described herein and will redisplay the world view based on the newly designated node. Therefore the bio visual feedback user interface allows the user to easily grasp interconnections between a variety of different nodes and to realize an expansion of internodal links based on input provided by the user.

While illustrates a world view representation the system also allows the user to zoom into lower levels of aerial coverage . Accordingly if there are too many connections between nodes in various clusters the user may not be able to fully grasp specific connections between specific nodes. Therefore the user can zoom in on a particular portion of the world view to see more granular arrangements of nodes and connections therebetween. The user may zoom in by clicking a magnification button not shown by right clicking a specific node which pops up a dropdown menu having an option to zoom in with respect to that node by speech touch or any other method as would be understood by one of ordinary skill in the art.

As illustrated in link connecting Restaurants and has the thickest line as compared to other connections as they share the same neighborhood and genre and both received highly positive reviews from Reviewer . Link connecting Restaurant and Restaurant has a small line thickness as they only share the same attire and do not share any positive review data. Link connecting Restaurant and Restaurant is dashed as they share a negative overall link strength due to an opposite affinity expressed by Reviewer . However the link is not that thick as the overall link strength value while negative is close to zero.

In the local view the links may be depicted in different colors to identify which links have strong or small overall link strengths with respect to a designated node. For instance link may appear to be bright red due to a strong overall link strength between Restaurant and Restaurant and link may appear blue based on a low overall link strength value between Restaurant and Restaurant . Alternatively the user may request link colors solely based on the designated node such that link would be assigned a hotter color than link because it is a direct link with Restaurant . Further links having a stronger overall link strength with respect to a designated node may appear closer to the designated node than other links. For instance Restaurant is closer in proximity to Restaurant than Restaurant as Restaurant has a lower overall link strength with Restaurant as compared to the overall link strength value between Restaurant and Restaurant . In addition to or alternatively other indications may be used to designate link strengths such as making nodal appearances larger than others if they have a strong overall link strength with respect to a designated node.

Therefore both the world view depicted in and the local view depicted in provide an easy to understand view of the neural network topology thereby providing the user with insight into potential recommendations while also providing an incentive to present more information to the system to bolster internodal links. While the nodes illustrated in and are represented by the number of the restaurant other depictions are contemplated such as thumbnail pictures logos and or names of the restaurants. Further the system in selected embodiments may display a three dimensional view of the neural network topology thereby giving the user a real world impression of the internodal connections. For example in a three dimensional system connections with strong overall link strengths may represent highways whereas connections with low overall links strengths may be represented as dirt roads. In addition to or alternatively venues that are located close to each other which are thereby in walking distance may represent strong overall link connections as opposed to venues that appear far off in the horizon.

Group events can often cause problems between individuals in the group because it may be hard for everyone to come to agreement on particular topics. For instance a group of friends that are also users of the system may have plans to go out to dinner but may be unsure of which restaurant to go to or may be unable to come to an agreement with respect to a restaurant. As such each user may have his own opinion of where the group should go based on recommendations provided by the system . Therefore in addition to providing users with a variety of ways in which to view recommendation data and nodal connections between various venues the system also provides user interfaces enabling a group of users to collaboratively select venues.

Initially the system performs a group search using information provided by members of the group. Specifically the members of the group may submit a venue choice and a list of requirements to the system in which they want the search query to adhere to when determining recommended venues. As such some members may specify the genre whereas other members may request a low price point. The recommendation engine will then perform a search for each particular member based on their individual requests and recommendations are generated by the recommendation engine as previously described herein such that each member has their own recommendation set.

Once the recommendation engine has generated the various recommendation sets for each member of the group the collaborative decision making user interface depicts each group member in a different row with recommendations for each corresponding member appearing in a column beneath that member. The system also highlights one of the recommended venues for each member that represents the strongest overall link strength based on the venue provided by the user and the filter state input as part of the search query. The highlighted venue may be displayed in a certain color have a varied border as compared to other recommendations may be displayed larger than the other recommendations or may be displayed in a particular order with respect to the position of the member information.

The recommendation engine will also determine based on the information included the search queries by each member a recommended group venue having the greatest average affinity with respect to the recommendations identified for each member. The recommendation engine may also use attribute information to prevent clashes between members of the group. For example the system may not recommend a steakhouse as a group venue when one or more of the members of the group are known vegetarians. Further for example if a majority of group members dislike seafood the recommendation engine may avoid generating a seafood restaurant as a group recommendation regardless of how close other calculations come with respect to other attributes such as price and attire. Accordingly to generate a group recommendation the recommendation engine takes into account at least the nodal interrelationships between venues identified by the group members and user attribute data.

Once the recommendation engine determines the group recommendation the system highlights the group recommendation if it already appears in the user interface and or displays the recommended venue separately for the members of the group to see. In selected embodiments each member of the group will have the ability to vote on the recommended venue or to select a different venue from the options listed on the display screen. The recommendation engine will then continuously recalculate a recommended group venue or venues having the strongest overall affinity based on the recommendations provided by recommendation engine or those voted on by the members. To prevent an endless recommendation cycle each member may be limited to a certain number of votes and or a time limit such as a certain time before the planned event may be prescribed to ensure a limited voting period.

Once the recommendations have been determined by the recommendation engine for each user the system displays these recommendations as illustrated in such that each user is shown along with their corresponding recommendations. Within each column containing the recommendation set for each user a recommended venue and having the strongest overall link strength with a venue provided by the user as part of the search query is highlighted. Some users may have more recommended venues in their recommendation set based on the development of the neural network with respect to the particulars of the search query made by that user. For example Member only was provided three recommendations by the recommendation engine . Once the individual recommendations are generated the system then calculates a group recommendation having the greatest average affinity based on the recommendations identified by the recommendation engine and presents the venue as a current group recommendation . The previous group recommendation may also be provided to illustrate to the members of the group that the venue has changed.

The collaborative user interface also identifies the last time at which the group recommendation was changed as well as the last vote for a venue and who placed that vote. Further a deadline for submitted votes can be set by the group founder and or voted upon by group members and is displayed to inform group members of the last time at which a vote may be cast. Accordingly as the meeting time is set to 5 00 PM on Oct. 8 2012 the group members must submit their final votes if any by Oct. 8 2012 at 12 00 PM. As such the initial group recommendation is dynamic and can change up to the deadline by receiving different votes and recalculating the group recommendation based on overall link strengths and user attribute data with respect to the newly voted venue and previously identified venues for particular group members. In other selected embodiments the group founder may prevent voting thereby locking the group recommendation calculated by the system .

In the exemplary user interface illustrated in the system calculated Restaurant as being the best group recommendation based on the individual recommendations generated for each user by the recommendation engine . Recommendation is highlighted to indicate that Member changed his choice for a venue from Restaurant to Restaurant by voting for Restaurant . This change may have been made from the original recommendation made by the system or a from a previous vote cast by Member . For the purposes of this example it is assumed that the recommendation engine originally generated Recommendation and based on this recommendation in conjunction with the Recommendations and for Members the system originally generated the group recommendation of Restaurant . However as explained further below the recommendation engine recalculated a group recommendation of Restaurant based upon the vote for recommendation by Member . In other selected embodiments recommended venues other than those highlighted within the user interface are used by the system to calculate a group recommendation .

Group recommendations are based in part on recommended venue attributes such as those illustrated in . For instance Recommendations and have the same genre but have different price points than Recommendation and Recommendation with Restaurant being expensive and Restaurants and being inexpensive. However as Recommendations and have different genres the Japanese genre of Recommendations and is the dominant genre. Accordingly as the predominant genre was Japanese but the price points were opposite the system originally generated the group recommendation of Restaurant having the same Japanese genre but a medium price point. However when Member decided to vote for Recommendation the system recalculated the group recommendation and recommended the current group recommendation of Restaurant . For instance Recommendation has a high price point and therefore only one recommendation Recommendation has a low price point. Further as Recommendation and Recommendation have different genres the Japanese genre of Recommendations and is still predominate. Accordingly the system calculated Restaurant as the group recommendation as it has the predominate genre and a high price point. Of course these examples are for the sake of illustration and user attributes other venue attributes and link strengths based on the neural network topology between the various recommendations can all be used by the system to calculate a group recommendation .

The collaborative user interface illustrated in is exemplary and as such can be displayed in a variety of ways. Members of a group may be listed in columns with corresponding recommendations being listed in rows adjacent to the group members. Members may customize images representing their virtual user identity within the system . Thumbnail images logos or videos may be used in addition to or alternatively to the textual display of the restaurant in the recommendation slots. The strongest recommendations such as and illustrated in may be highlighted may appear larger than other recommendations and or may contain animations or audio representations of the recommended venue itself. Further video streams of group members themselves may be depicted in the collaborative user interface via an imaging device to virtually interact with each other when determining meeting times discussing group recommendations or taking votes. Further a group member may vote on recommendations listed for the group member or any other group member as well as for venues not illustrated in the collaborative user interface.

The collaborative user interface illustrated in thereby presents users with the option of having the system generate a group recommendation when members are having a hard time determining a venue amongst themselves. The group recommendations further provide the user with the comfort of knowing that the group recommendation is not only based on strong links to the interests of the user but also to other members of the group thereby increasing the likelihood of a speedy resolution when determining venues amongst large groups. Further in selected embodiments the system may incorporate votes may by users into the data repository such that the system may further update the neural network topology and enhance future recommendations. Additionally the system may in real time repopulate the recommendations within the collaborative user interface based on updated nodal links between venues with respect to votes cast by one member or other group members.

The interfaces described herein may be presented as noted through a variety of devices. Still additional devices are contemplated including television screens third party websites through partnerships in store kiosks or personal keychains or dongles.

In selected embodiments the recommendation engine generates recommendations for venues based on a variety of information such as user data venue data and reviewer data. More specifically the user data venue data and reviewer data are combined as previously described herein to form link matrices the strength of which can be used to generate the recommendations for the user. However while recommendations based on link strengths between nodes of the neural network provide a strong gauge as to the accuracy of the generated recommendations it is possible that nodal link values can trick the recommendation engine into generating an outlying recommendation for the user. For instance a neural net configuration having nodal link strengths strongly geared to specific data such as venue attire genre and price as well as reviewer data positively identifying venues having these traits may recommend a venue in a neighborhood that is quite different from the neighborhood where the user normally eats dinner. The system may also strongly link user attribute data such as work hours and profession to venues having corresponding business hours and attire such that the recommendation engine recommends an exorbitant venue that is drastically outside the price range of venues the user typically frequents based on past recommendations. Therefore while the recommendation engine will typically generate a recommendation set having a plurality of accurate recommendations it is possible due to particular nodal links that the recommendation engine may generate an outlying recommendation that does not resonate with the previous recommendations served to the user.

Referring back to an illustrative example of this effect is provided wherein the recommendation engine generates a recommendation for a venue that is in a neighborhood the user does not typically visit or typically receive recommendations to visit. Referring for the purposes of this example solely to the affinity expressed by Reviewer there is a 0.75 collaborative based link formed between Restaurant and Restaurant . Further based on the venue attributes themselves there is a 0.25 rating as both Restaurant and Restaurant have the same attire. Additional ratings could be added therebetween as described previously based on similar hours and the fact that the price points of the Restaurant and Restaurant are similar. Therefore the nodal link strength between Restaurant and Restaurant would be quite strong upon the formation of link matrices by the Matrix Builder such that the recommendation engine may generate a recommendation for Restaurant in response to receiving a query of Restaurant by the user via the user interface. However assuming for the purposes of this example that previous recommendations to this user were typically in neighborhood 02196 and or rarely if ever involved Japanese food the recommendation engine would be providing a recommendation of Restaurant that clearly does not resonate with recommendations previously made to the user.

To prevent the risk of an erroneous recommendation one exemplary embodiment of the system provides processing for error correction and data verification via the recommendation engine . Through this improved processing the recommendation engine can provide recommendations that correlate strongly to the content based collaborative based and content collaborative based interrelationships and that resonate with the plurality of recommendations that were previously made to the user. Accordingly the error correction and data verification acts as a guardian against recommendations that although based on strong nodal links of the neural network topology do not resonate with recommendations that were previously served to the user and acted upon by the user.

The error correction and data verification processing begins in one embodiment by storing in the data repository recommendations data that was previously generated by the recommendation engine and served to the user. The system may designate a minimum number of recommendations that have to be stored before error correction and data verification processing is implemented but may also impose limits on the number of stored recommendations based on storage capacity and processing considerations. The recommendations data stored in the data repository can in selected embodiments store not only the recommended venue itself but also the user data venue data and review data that was considered most pertinent to the recommendations generated by the recommendation engine . Therefore the data repository can store a recommended venue in relation to the data values ascribed with the recommended venue itself such as genre hours of operation attire neighborhood and any other value described herein or as would be understood by one of ordinary skill in the art. The data repository can also store any other data strongly relied upon by the recommendation engine when generating the recommendation such as reviewer information content based link values collaborative based link values and user attribute data such as age education and profession.

In each user is stored in relation with recommendation data that has been previously recommended by the recommendation engine . For example the first recommended venue for User contained data such as a price point value of 3 an Italian genre casual dress attire requirements and location neighborhood 02196 data. Further the recommendation data stores the reviewers that reviewed the recommended venue Restaurant and user attribute information such as the age at which the recommendation was made and the number of children the user had at the time the recommendation was made. Therefore the recommendation data stores values that will change over time such as the number of children and the age of the reviewer and user. Although not illustrated it is further expected that venue attributes values such as the price point value and neighborhood and reviewer affinity ratings may change over time.

The system can determine the aggregate recommendation data based on the previous recommendations stored in the data repository in real time when making a recommendation and performing error correction and data verification. In other selected embodiments the system can aggregate the previous recommendations at a time when the system is experiencing a lower than normal processing load and store the aggregate data as illustrated in . Accordingly the system has the option of determining the latest aggregate information by aggregating the data at the time of performing error correction and data verification processing or can lower the processing load required for error correction and data processing by aggregating the stored recommendation data at periodic or predetermined intervals.

Whether the aggregated data is collated simultaneously with the issuance of a recommendation or at a previous time the stored recommendations can be aggregated in a variety of ways. For example in one embodiment the system determines a quantification value for each attribute of the recommendation data which can then be used in the error correction and data verification processing. An illustration of this methodology is shown in wherein quantification values for the price of the various venues previously recommended to User are stored separately such that a price point of 3 was provided twice by the recommendation engine and a price point of 2 was provided only once by the recommendation engine . As the data collected from venues reviewers and users is likely to change over time the aggregated data can also be collated based on running averages. provides an example of this type of collation wherein the ages of the reviewer has changed based on the time at which previous recommendations have been made and therefore an average age value is provided in the aggregate data. The recommendation engine may also limit the error correction and data verification processing to a certain number of recommendations to prevent out of date data from affecting resonate recommendation computations. As such in selected embodiments the data repository can store a time stamp with each data recommendation entry such that the recommendation engine can implement temporal filter values when performing error correction and data verification.

The system can therefore adapt over time to the changing affinities of users and reviewers alike. For example recommendations to a long time system user may have originally all been tailored to venues at a low price point with casual attire whereas the user is now older and mostly frequents venues at a higher price point with formal attire. However the introduction of children into the user s lifestyle may then shift recommendations back to a lower price point. Reviewer ratings will most likely also change over time and therefore the recommendation engine can reflect only the most recent and accurate ratings when performing error correction and data verification.

The previous recommendation data illustrated in and may also be weighted based on affinities explicitly expressed by a user such that the recommendation engine provides more emphasis on specific attributes of data when performing error correction and data verification. For example User may indicate via the user interface that he prefers Japanese and Italian venues and venues in the neighborhood 02163. Therefore when the recommendation engine performs error correction and data verification it will determine whether the current recommendation resonates with the various aggregated datum of previous recommendation data but will also place particular emphasis on verifying that the current recommendation resonates with User s affinity for Japanese and Italian venues as well as venues in the neighborhood 02163. It is likely that the recommendations will already be tailored somewhat towards these feature sets based on the nodal links formed by the matrix builder based on user expressed affinity but the error correction and data verification processing provides an extra filter of protection to ensure a more accurate recommendation to the user.

Weights may also be provided to the aggregate data of previous recommendations based on the primary nodal link strengths of the neural network used by the recommendation engine to generate the previous recommendations. For example based on content based interrelationships collaborative based interrelationships content collaborative interrelationships and higher order interrelationships the recommendation engine may generate a recommendation primarily based on genre data and neighborhood data. provides an illustrative example wherein all of the previous recommendations to the User have been for an Italian venue within the neighborhood 02196. Therefore the recommendation engine may attach weights to these values such that they provide more influence on resonation calculations via the error correction and data verification processing as described above.

Assuming the recommendation engine has access to the requisite amount of aggregate recommendation data the recommendation engine compares the current recommendation to the aggregate recommendation data stored in the data repository . In one embodiment the recommendation engine systematically compares each attribute included in the current recommendation data to each corresponding aggregated quantification value of each attribute to determine a resonate value for that attribute. Once each resonance value is determined for each of the attributes corresponding to those contained in the current recommendation a resonance quantifier is determined based on the plurality of resonance values. If the resonance quantifier is less than a predetermined threshold then the recommendation engine determines that the current recommendation does not resonate with previous recommendations at S. Accordingly at S if the resonant quantifier is greater than a predetermined threshold the recommendation engine confirms that the current recommendation resonates with previous recommendations.

If the recommendation engine determines at S that the resonance quantifier does not exceed the predetermined threshold and therefore that the current recommendation does not resonate with previous recommendations to the user the recommendation engine identifies the deficiencies in the current recommendation such that the matrix builder can back propagate these deficiencies into the neural network to establish increased accuracy within the nodal links. For example with reference to and if the recommendation engine generated a recommendation for a venue in a neighborhood outside 02196 the error correction and data verification processing may indicate this recommendation as an outlier based on previous recommendations for User that were all within the neighborhood 02196. Accordingly at S the neural network is updated such that a negative link value is ascribed to the neighborhood identified in the recommendation with respect to the nodal links established for User . Alternatively or in addition the matrix builder may ascribe an additional positive link value to the neighborhood 02196 to further ensure that neighborhood 02196 is given increased link strength thereby ensuring increased consideration in any future recommendations provided by the recommendation engine . Accordingly the error correction and data verification processing not only provides an additional filter for accurate recommendations but also acts as a vehicle for driving increased accuracy within the nodal links of the neural network itself. After updating the neural network at S the processing proceeds back to S for the recommendation engine to generate a new recommendation for the user based up the updated neural network.

Referring back to once it is determined that the current recommendation resonates with previous recommendations at S the current recommendation is provided to the user at S and the data repository is updated to include an entry for the current recommendation. As noted above this entry may include a time stamp indicating the time and date at which the recommendation data was entered into the data repository .

After updating the data repository with the current recommendation processing proceeds to updating the neural net nodal links at S. As the system has determined that the recommendation data generated by the recommendation engine resonates with previous recommendations the matrix builder may update the nodal link strengths of the neural network based on data included in the recommendation data. For example if the recommendation data for User includes casual attire for the recommended venue the matrix builder may even out the nodal link strengths with respect to this attribute as User has now been recommended the same amount of venues for both casual and formal attire. Further this recommendation data approved by the error correction and data verification processing may be applied more weight when updating the neural network than recommendation data that was created before error correction and data verification processing was initiated by the recommendation engine as it has confirmed resonance with previous recommendations and is therefore more likely to be accurate.

Further in addition to the methods of refining the neural network based on the effectiveness of recommendations as determined by the system a recommendation that is approved by the error correction and data verification processing may also be identified as a recommendation that has been determined to be effective based on the resiliency of the aggregate previous recommendation data. Further in selected embodiments when the system determines the effectiveness of the recommendation data as describe herein based on financial data feedback data web browsing data geographic data or the like the system may store this recommendation data in the data repository with a special label such that the recommendation engine applies more weight to this information when performing error correction and data verification processing. For example in referring to if the system determines the effectiveness of recommendation 2 by receiving financial information that User visited the venue by receiving user feedback from User that he liked the venue by determining that User spends a lot of time on the venue website or by determining that User spends a lot of time in a geographic location proximate to the recommended venue the system may apply a validation label to this recommendation data in the data repository . In doing so if the recommendation engine is using only a predetermined number of previous recommendations the recommendation engine can improve error correction and data verification accuracy by using only validated previous recommendations. In other embodiments and if the recommendation engine is using more previous recommendations than currently available validated previous recommendations the recommendation engine may apply special weight to the validated previous recommendations such that the error correction and data verification processing generates a resonance quantifier that is more strongly influenced by previously validated recommendations.

While error correction and data verification provides enhanced accuracy with respect to recommendations to the user the system must be constantly vigilant with respect to the changing attributes within the recommendation data particularly the user attribute data. For example if the user moves to a different part of the country then the matrix builder will update the neural network accordingly thereby lowering the strength of links identifying venues in neighborhoods that are no longer in proximity to the user. Therefore the nodal link strengths will be reflected in a new recommendation such that any recommendation by the recommendation engine will be in neighborhoods in close proximity to the user s new location. However when comparing a new recommendation to this user the recommendation engine may identify this recommendation as an outlier as all previous recommendations were in neighbors geographically distant from the user s new location. Accordingly the recommendation engine may assign a label on the neighborhood attribute data within the data repository of previous recommendations thereby identifying certain values of this attribute as data which should not be used when performing error correction and data verification. Therefore the system provides adaptive functionality to limit error correction and data verification processing to attributes that will not induce the recommendation engine to provide erroneous results.

Another method for providing enhanced recommendations via error correction and data verification is to dynamically ensure resonance between information such as review data from various source sites that are used during harvesting operations. For example the harvesting of data to create the neural network as previously described herein obtains information from a variety of sources such as web sites. However as web sites are constantly changing as well as user review data and venue data contained therein the system may not always have an up to date capture of information. As described previously the system periodically updates the neural network based on information gathered from source sites. However the user may perform a search query at a time before an update but after information from the source sites has changed. Accordingly nodal link strengths of the neural network topology while providing a strong representation of links between different venues may not be optimized as they were determined based on information that was out of date . Therefore error correction and data verification further provides the ability to dynamically determine resonance between information contained within the data repository and information obtained from source sites as well as between information from different source sites.

Specifically in selected embodiments the recommendation engine will just prior to generating a recommendation set dynamically harvest data items from multiple source sites such as web sites across the Internet and resolve any differences between these data items. For example venue data items from a majority of web sites relating to Restaurant of may include information identifying Restaurant as low cost and casual. However it is possible that other websites may mistakenly indicate Restaurant as expensive and requiring formal attire. Therefore the recommendation engine can resolve these differences by indicating certain web sites as containing inaccurate information with respect to a venue. Once the outlying information is obtained the neural network is dynamically updated as previously described herein while excluding the outlying information thereby allowing the recommendation engine to provide a more accurate recommendation set based on new overall link strengths of the updated network topology.

In selected embodiments a sliding scale resonance threshold may be applied to determine at what point information can be deemed accurate as opposed to outlying with respect to other harvested information. For example the scale may be set by the system or a user such that 75 of the information harvested must conform in order to determine that information not conforming with information in the 75percentile is outlying information. The system may further adjust the threshold based on the amount of web sites containing information about a certain venue. For example the more information with respect to the same data items that the system can obtain during harvesting operations the higher the threshold may be set as there is a large data set from which to draw accurate information. Accordingly if the system harvests information from 100 sites of which 65 indicate Restaurant as low cost and casual and 45 indicate that Restaurant is expensive and formal the system may determine that the 45 web sites indicating Restaurant as expensive and formal are outliers and will not take their information into account when updating the neural network. However if the system harvests information from 1000 sites of which 650 indicate Restaurant as low cost and casual and 450 indicate Restaurant as expensive and formal the system may not identify the 450 items of Restaurant venue information as outlying information as there is a larger data set of which 65 is not a high enough resonance threshold. In this instance the system may opt to use the information contained within the 650 web sites but provide a negative weighting to this information so that it does not have too much of an effect upon an update of the neural network topology. Alternatively the system may ignore all of the information and determine that it cannot be resolved and therefore that none of it should be used to update the neural network topology.

Once error correction and data verification has been dynamically performed at the time of a user query the neural network topology is updated and the recommendation engine provides a recommendation set based on a current real time snapshot of information contained within the Internet. Accordingly information provided to the users is as accurate as possible with respect to information harvested from the Internet. Further this allows the system to determine trendiness data among web sites such as certain attribute data which is likely to change rapidly. This provides the system with the ability to identify various types of fickle data and provide appropriate weights when calculating nodal links strengths within the neural network so that the user receives recommendation sets based on the most stable and accurate information harvested by the system .

As discussed above error correction and data verification provides the system with a way to avoid outlying recommendations as well as a way to monitor venue reviewer and user attributes that change over time. However in addition to these gradual characteristic changes over time users are often inclined to change their interests spontaneously to try something new or simply to see what options the system may produce in response to queries containing a variety of user filters. For example the user may express an affinity for a particular venue but may want to further limit the search to venues that have particular hours attire and neighborhood requirements. Accordingly in selected embodiments the recommendation engine must generate a plurality of recommendation data having venues with the strongest link strength to the venue provided by the user but which are also limited to the hour attire and neighborhood requirements. Of course the more filters the user provides with a search query the harder it is for the recommendation engine to generate a good recommendation that meets all of the requirements of a user. For example if a user queries the system for recommendations within the state of Massachusetts the recommendation engine may not recommend certain venues from Salisbury Mass. based on weak nodal link strengths even though they are located in the state of Massachusetts. As such in selected embodiments the recommendation engine determines a plurality of venue recommendations based on nodal link strengths and then compares the nodal link strength of each recommendation to a recommendation threshold to determine whether or not the venue should be recommended to the user. The recommendation threshold indicates a watershed overall link strength value or in other selected embodiments a percentage identifying the number of recommendations that will be recommended by the recommendation engine to the user out of the recommendation set. Accordingly for example if in response to a particular user query the recommendation engine generates ten venues based on the above described data interrelationships the recommendation engine may only serve recommended venues having nodal link strengths exceeding the recommendation threshold such that only 3 out of the 10 recommended venues are served to the user.

However if the user then performs the same query but limits the geographic limitations of the search to Salisbury Mass. or a neighborhood of Salisbury Mass. and the recommendation engine only determines a few recommended venues based on the nodal link strengths the recommendation engine may not recommend any venues if none of the nodal link strengths are greater than the recommendation threshold. In this instance the user would be served with a useless empty recommendation set thereby lowering user confidence in the system and increasing the likelihood the user will turn to other systems for information.

As illustrated in and described above the result of the above noted query is Restaurant Restaurant and Restaurant s X. Therefore assuming X represents a small number of restaurants having an overall link strength less than Restaurant and Restaurant and based on the filter state implemented by the user via the user interface at the time of the query for recommended venues the recommendation data set for this filter state is very small. Further the overall link strengths of Restaurant and Restaurant are low enough that the recommendation engine may not recommend them to the user if they do not pass the recommendation threshold. For example if the recommendation threshold is set at a value of 0.25 neither Restaurant or Restaurant would be recommended by the recommendation engine and an empty recommendation set would be provided to the user. Accordingly as noted above while the recommendation threshold is effective for reducing a large recommendation data set it can also act as a barrier for passage of all recommendations when the recommendation set is extremely small and or has small overall link strength values therein. Therefore the system must provide a way to avoid serving empty recommendation sets to users when the search returns a limited recommendation set having low overall link strength values. In other words the system must balance the need to provide information to the user while also considering the value or relevance of the information being presented to the user such that user does not lose interest or confidence in the system .

Geometric contextualization is a mechanism for overcoming the problem of limited recommendation sets by ensuring that at least one recommendation is always provided to the user via the recommendation engine . One method of performing geometric contextualization is to adjust the overall link strength values of the recommendation set generated by the recommendation engine until at least one of the recommended venues exceeds the recommendation threshold. The recommended venues exceeding the recommendation threshold can then be served to the user or a predefined percentage of recommendations out of the recommendation set that have had their overall link strengths adjusted are served to the user. In this embodiment the overall link strength values of each recommendation are normalized using a normalization factor that is based on various factors until the overall link strength value of at least one recommended venue exceeds the recommendation threshold. Accordingly in selected embodiments geometric contextualization is performed every time a recommendation a set is generated by the recommendation engine to further redefine recommendation rankings based on a variety of factors to enhance the accuracy of the percentage of recommendations served to the user.

One factor that can be used to generate the normalization factor for normalizing the recommendation set is the number of potential recommendations available based on the filter state set by the user at the time of performing the query. For example if there is a large number of recommendations available based on the filter set and the only issue is that none of the recommendations of the set exceed the recommendation threshold a minimal normalization factor may be utilized to normalize the recommendation set such that a limited amount of recommendations exceed the recommendation threshold. Therefore the recommendation engine may generate a normalization factor to ensure that a predetermined number of recommended venues exceed the recommendation threshold. This ensures that the recommendation engine can serve the user with at least one recommendation but increases the chance that the recommendations provided are the best recommendations out of the group based on the overall link strength values. In other words by having the recommendation engine perform geometric contextualization with a low normalization factor for a large recommendation set only the recommendation values with the largest overall link strength will be provided to the user. If the recommendation set is smaller in size the recommendation engine may need to generate a drastically different normalization factor to ensure that at least one recommended venue will be normalized to a value exceeding the recommendation threshold based on the nodal link strengths of the smaller set of recommended venues.

In selected embodiments for performing geometric contextualization based on the number of recommendations available in the filter state the normalization factor value itself can be set by the recommendation engine based on specific calculations with respect to the recommendation set. For example the recommendation engine can analyze the recommendation data set and determine a normalization factor that will ensure that the overall link strength of at least one recommended venue exceeds the recommendation threshold. Further the system or the user via the user interface may set a specified number of recommendations to receive for each query. Therefore the recommendation engine may calculate a normalization factor that will ensure the overall link strengths of the specified number of recommended venues exceeds the recommendation threshold to ensure the user receives the requisite number of recommendations.

In addition or alternatively the recommendation engine may set the normalization factor based on user statistics known to the system relating to venue attributes user attributes reviewer attributes ordered relationships content based interrelationships collaborative based interrelationships and or content collaborative interrelationships. These statistics are determined as described above with respect to determining the effectiveness of recommendations. For example if past recommendations of the user indicate that recommendations based on content based link strength are more effective than recommendations based on collaborative links strength the recommendation engine may calculate a normalization factor that ensures at least one recommendation having strong content based link strength is elevated past the recommendation threshold even if other recommendations having higher overall link strengths exist in the recommendation set. In this instance the recommendation engine may apply the normalization factor only to those venues in the recommendation set that have a requisite level of content based link strength. Of course this method may be applied based on collaborative link strength content collaborative link strength and or higher order interrelationships. This provides the system with the ability to elevate those recommendations that have a lower overall link strength but that may prove more effective for the user based on previous user statistics. This enhances the users overall experience with the system and provides enhanced data for merchant vendors.

An example of geometric contextualization using a normalization factor based on the number of potential recommendations is illustrated in with reference to . In this example it is assumed that the recommendation engine has generated Restaurants and Restaurant X in response to the user query identified for . In this example assuming a recommendation threshold of 0.25 and an overall link strength value G that is less than 0.25 for Restaurant X none of the overall link strengths exceed the recommendation threshold. Accordingly the system determines that the recommendation engine needs to perform geometric contextualization on the recommendation data. When performing geometric contextualization the recommendation engine determines that there is a small number of recommendations available and therefore an adequate normalization factor must be calculated to ensure that at least one of the recommended venues exceeds the recommendation threshold once the process of geometric contextualization is finished. Accordingly assuming a user specified or system specified recommendation limit of two the recommendation engine must calculate a normalization factor such that two of the overall link strengths are elevated above the 0.25 recommendation threshold. Accordingly a normalization factor of 0.175 is added to the overall link strength value of each venue in the recommendation set. illustrates the effects of geometric contextualization on the recommendation data illustrated in as discussed. In due to the effects of normalization both Restaurant and a Restaurant X out of the set of recommended venues have the requisite overall link strength of at least 0.25 to ensure they are higher than the recommendation threshold and can therefore be served to the user via the user interface.

However in other selected embodiments and as previously discussed if the system determines statistically that content based interrelationships have often proven to be the most successful factor in determining the effectiveness of the recommendation the recommendation engine may generate a normalization factor specific to venues having the highest content based link strength thereby providing extra emphasis to the overall link strength of Restaurant with respect to the predetermined threshold. Standard normalization factors may then be applied to the remaining venues in the recommendation set. Therefore if a strong enough normalization factor is applied specifically to Restaurant Restaurant may exceed the recommendation threshold upon completion of geometric contextualization. However as Restaurant has such a low overall link strength with respect to Restaurant and Restaurant X the recommendation engine may determine a normalization factor such that Restaurant still does not exceed the recommendation threshold despite the previous user statistics with respect to the content based interrelationships. Therefore the recommendation engine can perform geometric contextualization to avoid empty recommendation sets while taking into account previous user statistics and balancing them against overall link strengths determined from the nodal links of the neural network.

Further if for example the system contains data strongly correlating a low venue price point to the effectiveness of the recommendation the recommendation engine may only perform geometric contextualization on recommendations having lower price points thereby elevating recommendations strongly relating to user specific characteristics. Therefore although not shown in the recommendation engine may only perform geometric contextualization on Restaurant as it has a low price point with respect to Restaurant . Accordingly in this example even with a negative overall link strength Restaurant may be elevated above the recommendation threshold such that the user receives a recommendation tailored to his characteristics.

The recommendation engine may also perform geometric contextualization based on the aggregate or individual quality of the recommendation data identified in the recommendation set. The quality of the recommendations in the recommendation set can also be determined based no the overall link strength between the recommended venues and venues identified by the user in a search query. Further in selected embodiments the quality of the recommendation data is determined by identifying the effectiveness of the recommendation based on previous recommendation stored in the data repository . As described above certain prior recommendations may have a validation label if the recommendations have been determined effective based on user reviews user financial data user geographic data or other information as previously described herein. Further the quality of the recommendation data can be determined based on the recommendation effectiveness data previously described herein with respect to identifying user financial transactions at the recommended venue habitual user proximity to the venue and so forth. Accordingly assuming the recommendation engine generates a recommendation set having data for five recommendations that are all below the recommendation threshold the recommendation engine can search each recommendation data item to determine which recommended venues are most closely related to the recommendation data that has previously been determined to be effective or have the strongest overall link strength to venues identified in the search query. Based on this determination the recommendation engine can then perform geometric contextualization by determining a normalization factor that will elevate the requisite amount of recommendations from the effective subset above the recommendation threshold.

An example of geometric contextualization using a normalization factor based on the aggregate or individual quality of the recommendations in the recommendation set is illustrated in with reference to . In this example as with the previous example it is assumed that the recommendation engine has generated Restaurants and Restaurant X in response to the user query identified for . In this example assuming a recommendation threshold of 0.25 and an overall link strength value G that is less than 0.25 for Restaurant X none of the overall link strengths exceed the recommendation threshold. Accordingly the system determines that the recommendation engine needs to perform geometric contextualization on the recommendation data. When performing geometric contextualization the recommendation engine determines that Restaurant and Restaurant are of higher quality based on the effectiveness of previous recommendations made by the recommendation engine that are stored in the data repository with a validation label. For example the recommendation engine can determine from data stored in the data repository that User has visited Restaurant numerous times based on financial transactions from Restaurant and further based on geographic habituations with respect to User proximity to the neighborhood 02196. Accordingly the recommendation engine determines a quality factor for Restaurant based on similarities between Restaurant and Restaurant such as having an identical price point as Restaurant . Further the recommendation engine may determine the effectiveness of Restaurant based on a multitude of positive review data from User and further determine that User often eats at venues having casual attire and lives in neighborhood 02199 such that a quality factor for Restaurant is calculated based on these considerations. Further for the purposes of this example it is assumed that the recommendation engine does not calculate Restaurant X as a high quality recommendation as the recommendation engine can not determine many similarities to other venues based on effectiveness data in the data repository . Therefore although Restaurant has a low overall link strength the recommendation engine determines that a normalization factor should be generated based on Restaurant and Restaurant in order to elevate the overall link strength of these restaurants past the recommendation threshold.

In the example illustrated in the recommendation engine determines a quality factor of 0.65 for Restaurant as it has multiple similarities to previously determined effective recommendations. Further the recommendation engine determines a quality factor of 0.55 for Restaurant as it has fewer similarities to previously determined effective recommendations stored in the data repository . For Restaurant X the recommendation engine determined a quality factor of 0.15. At this point assuming a user specified or system specified recommendation limit of two the recommendation engine must calculate a normalization factor based on the quality factors such that two of the overall link strengths are elevated above the 0.25 recommendation threshold. Accordingly exemplary values of overall link strengths are illustrated in based on normalization based on the quality factors such that Restaurant and Restaurant are both above the recommendation threshold. Therefore even with a low overall link strength Restaurant is still recommended in this example as two recommendations were required to be provided to User and Restaurant X had an extremely low quality factor.

The recommendation engine may also perform geometric contextualization based on the diversity of the recommendations in the recommendation set. For example assuming the recommendation engine generates six recommendations only three of these recommendations may be related whereas the other three may be diverse from each other and the three related recommendations. For example three of the recommendations may relate to restaurants all have the same genre and neighborhood whereas the other three recommendations have different genres and neighborhoods. The recommendation engine may further compare price points and venue attire to determine similarities between the recommended venues. Accordingly content based links collaborative links and content collaborative links between the recommended venues are determined by the recommendation engine to determine overall link scores therebetween thereby identifying which recommended venues are most closely related and which recommended venues are diverse from each other. The recommendation engine may then determine a normalization factor to elevate recommendations that are similar to each other above the recommendation threshold as it is likely that multiple similar recommendations are closer to the affinity of the user as opposed to a variety of potential outlying recommendations have little to no relationship therebetween.

An example of geometric contextualization using a normalization factor based on the diversity of the recommendations in the recommendation set is illustrated in with reference to . In this example as with the previous examples it is assumed that the recommendation engine has generated Restaurants and Restaurant X in response to the user query identified for . In this example assuming a recommendation threshold of 0.25 and an overall link strength value G that is less than 0.25 for Restaurant X none of the overall link strengths exceed the recommendation threshold. Accordingly the system determines that the recommendation engine needs to perform geometric contextualization on the recommendation data. When performing geometric contextualization the recommendation engine determines that Restaurant and Restaurant X are closely related based on content based links collaborative links and content collaborative links and that Restaurant is quite diverse from both Restaurant and Restaurant X. For example the recommendation engine can determine from data stored in the data repository that Restaurant and Restaurant X have similar price points similar neighborhoods similar review data and similar hours of operation. Accordingly the recommendation engine determines a diversity factor for Restaurant based on similarities between Restaurant and Restaurant and Restaurant X. Further the recommendation engine repeats this diversity determination for both Restaurants and X to determine their diversity factor with respect to the other restaurants in the recommendation set illustrated in . Based on these determinations exemplary values of diversity factors are identified in with respect to each recommended venue. According to this example recommended venues having a lower diversity factor are venues that have more similarity to other venues win the recommendation set whereas recommended venues having higher diversity factors are venues that are not that related to other venues in the recommendation set. For example Restaurant has the lowest diversity amongst the recommended venues and therefore has a diversity factor of 0.25 whereas Restaurant is the least related amongst the venues and has a diversity factor of 0.75. Accordingly exemplary values of overall link strengths are illustrated in based on a normalization factor generated based on the diversity factors such that Restaurant and Restaurant X are both above the recommendation threshold.

Geometric contextualization can also be performed with respect to a distance function defined by the user and or the system and stored as part of the user attribute data illustrated in . For example each user may predefine his own individual distance function identifying geographic preferences with respect to any recommendations made on his behalf. The system may also further redefine this distance function based on the local geography and cultural geography of a given location. For example the user may live in a city and not have a car such that the system defines the local public transportation boundaries as a distance function for recommendations such that any recommendation served to the user should be within those boundaries. The user may also identify the city limits as their geographic distance function. Further the system can analyze information from different cities to identify which cities are for example walking cities and which cities allow for broader transportation options. As such for walking cities the system will define a smaller geographic distance function where as for driving cities such as Los Angeles the system will define a larger geographic distance function. Accordingly in selected embodiments a radial distance function is defined for the user such that the recommendation engine generates recommendations within the boundaries defined by the user and the system even if these recommendations do not have as high of an overall link strength as other recommended venues in neighborhoods outside the users radial distance parameters. Further for example if the recommendation engine generated recommendations but only 20 of those were within the distance function defined with respect to that user the recommendation engine may focus only on the 20 geographically appropriate recommendations and then serve a recommendation set based on those that have overall link strengths above the recommendation threshold. In other selected embodiments the system may in this instance serve a percentage of those recommendations have the highest overall link strengths that are within the number of recommendations in the radial distance of the user.

The system may also provide recommendations based upon a combination of the above noted geometric contextualization methods. For example the system may perform geometric contextualization based on the number of potential recommendations the individual quality of the recommendations the diversity of the recommendations the distance function and serve the user with recommendations based on the results of all three geometric contextualization processes. The recommendation engine may determine a subset of recommendations within the generated recommendation set that are determined to be higher quality determine an adequate normalization factor based on the number of recommendations in the subset and then perform geometric contextualization based on the normalization factor to generate the requisite amount of recommendations that are above the recommendation threshold. Further the recommendation engine may determine a subset of recommendations by determining which recommendations comply with the distance function identified by the user and or system determine a ranking of these recommendations in terms of quality with respect to overall link strength and effectiveness data and provide a heavy weighting factor to this ranking based on quality factors determine which of these recommendations have the lowest diversity factor and slightly adjust the ranking to ascend recommendations having lower diversity factors and lower recommendations having high diversity factors and then identify the number of potential recommendations to identify a percentage of recommendations that should be served to the user based on overall link strengths. In selected embodiments the recommendation engine can identify overlapping recommendations based on the various methods and serve these recommendations to the user. The recommendation engine may also weigh the various methods of geometric contextualization based on their perceived effectiveness based on the recommendation data set and provide recommendations to the user based on overlap and weighting effects of the different processes.

Further in selected embodiments the normalization factor generated by the recommendation engine may be calculated based on a combination of data relating to the number of potential recommendations available in the filter state the aggregate or individual quality of those recommendations and the diversity of those recommendations. Accordingly the recommendation engine can calculate a normalization factor by using calculated data values based on these factors as inputs. The normalization factor is then applied as described above to elevate the requisite amount of recommendations above the recommendation threshold.

As discussed previously herein in other selected embodiments or in combination with the above described geometric contextualization methods the system may require that a certain percentage of recommendations out of the recommendation set be served to the user for each user query. This percentage can change based on factors such as the number of recommendations generated or the number of recommendations generated that have overall link strengths above the predetermined threshold. Accordingly upon determining a set of recommendations based on overall link strength as previously described herein the recommendation engine may perform geometric contextualization to redefine a ranking of the recommendations based on at least the number of the recommendations the quality of the recommendations the diversity of the recommendations and the distance function in order to provide an enhanced set of recommendations to the user. Upon ranking the recommendations in the recommendation set based on geometric contextualization the most highly ranked recommendations are selected in descending order until the percentage of required recommendations is met. This set of recommendations is then server by the recommendation engine to the user via the user interface.

In selected embodiments and to lower processing requirements on the system geometric contextualization can be performed only when a predetermined number of recommendations generated by the recommendation engine based on overall link strength do not have overall link strengths above the recommendation threshold. Geometric contextualization then elevates the required amount of recommendations above the recommendation threshold such that the required amount of recommendations can be provided to the user via the user interface. However in other selected embodiments the system may perform geometric contextualization for every search query performed by the user such that recommendations generated by the recommendation engine and provided to the user based on overall link strength are further enhanced and reordered based on at least the number of potential recommendations the quality of the recommendations the diversity of the recommendations and the distance function of the particular user or users.

Regardless of how geometric contextualization is performed the system can serve the recommendation data or datum to the user via the user interface with the caveat that the system had to perform some additional processing based on the filter state to obtain the specified number of recommendations. Therefore the user can be warned that although they have been provided the requisite number of recommendations that these recommendations did not perfectly match the filter state and should therefore be strongly considered. The system could also provide the user with information based on the type of geometric contextualization performed with respect to the filter state. For example if geometric contextualization is performed based on the number of potential recommendations and known user characteristics the user may be informed that a certain venue was selected outside the filter state based on previous user characteristic venue price points. Alternatively the system could provide the user with a combination of recommendations based on this geometric contextualization method such that the system informs the user that one recommendation is based on elevated overall link strength and the other recommendation is based on previously known user characteristics.

A description of the geometric contextualization according to selected embodiments is illustrated in . First the recommendation engine calculates the recommendation set at S based on the filter state provided by the user at the time of the query. Accordingly the recommendation engine may determine a large set of recommendations based on overall link strength with respect to an affinity of a venue provided by the user but the number of recommendations in this recommendation set will be lowered based upon the user filter state. Therefore the recommendation engine must determine at S whether geometric contextualization is required based upon the recommendation set. If there is a large number of recommendations in the recommendation set that exceed the recommendation threshold the recommendation engine may determine that geometric contextualization is not required thereby lowering the processing load on the system and providing quicker results to the user. At this point the recommendation engine proceeds to S to provide the one or more recommendations to the user. However if there a requisite amount of recommendations that exceed the predetermined threshold has not been generated the recommendation engine determines at S that geometric contextualization is required. Further the system may find a number of recommendations that exceed the recommendation threshold but if this number is lower than a user or system specified number of recommendations required to be presented to the user the recommendation engine will proceed with geometric contextualization to obtain the requisite amount of recommendations. Further in other selected embodiments the recommendation engine may always perform geometric contextualization on the recommendation set to further redefine a ranking of recommendations in the recommendation set based on the above noted input factors such as quantity of recommendations quality of recommendations diversity of recommendations and user distance factors.

Upon determining that geometric contextualization is required the recommendation engine determines the normalization factor based on the information contained in the recommendation set itself as previously described. Therefore the recommendation engine determines which method or combination of methods for generating a normalization factor will be the most effective and proceeds to generate the normalization factor based on these methods at S. The recommendation engine then normalizes the overall link strength values identified from the search results to obtain at least one recommendation with an overall link strength value above the recommendation threshold.

Once the recommendations have been normalized the recommendation engine analyzes at S the normalized recommendation values to ensure that the recommendation set now contains enough recommendations values that exceed the recommendation threshold. If the number of recommendation values exceeding the recommendation threshold is still below the number of recommendations required by the user or system for search results the recommendation engine repeats steps S to S to determine another appropriate normalization factor and re normalize the recommendation set. This process is repeated until the requisite number of recommendation values exceeding the recommendation threshold is obtained. Once the recommendation engine determines at S that there is an adequate number of recommendations greater than the recommendation threshold the recommendation engine serves the one or more recommendations to the user via the user interface at S. The user can then perform additional searches and or set a further filter state to further refine the search for additional recommendations.

As calculating what recommendations the recommendation engine will generate for each possible filter state provided by a user ahead of time is extremely difficult and time consuming the system in selected embodiments performs the geometric contextualization in real time to provide enhanced recommendation accuracy at the time of a search. Accordingly via geometric contextualization processing the system can ensure that the recommendation engine will always provide at least one recommendation to the user regardless of the filter state. This bolsters user confidence in the system and decreases the likelihood that users migrate to other systems.

Further once geometric contextualization has been performed and the recommendation engine has determined a recommendation set having an adequate number of recommendations the system may then perform error correction and data verification to further ensure and or strengthen the accuracy of the recommended venues which may in turn be used to identify reviewers who have submitted review data with respect to the recommended venues and venues in other locations requested by the user.

As previously described the system can present a user with recommendations based on user input and neural connections created between a variety of nodes via content based relationships collaborative relationships and content collaborative relationships. Therefore a user in Boston can get recommendations for other venues in Boston based on overall link strengths and post recommendation processing performed by the recommendation engine . However an issue arises when a user in one geographical area wants to get recommendations for venues in a geographically distant or diverse geographic location in which the system does not contain much information about user interests. For example a user in Boston may have an upcoming trip to New York and may query the system for recommendations on places to eat in New York. This request may be difficult if there is an information deficit within the system such that it contains large amounts of information as to which venues the user likes in Boston but not much if any information on the likes or dislikes of a user with respect to New York. In other words neural network connections between the extensive neural network topology of the user in Boston and the limited neural network topology of the user in New York are not well defined. Therefore the system must use information known about the user in Boston to extrapolate information the recommendation engine can use to generate a set of recommended venues in New York.

In one embodiment the system can use information relating to the geometric locale of the user performing the search by taking advantage of a predetermined amount of interconnectivity of venues in the neural network developed at that geometric locale. For example represent neural network interconnectivity based on connections formed via content based and collaborative interrelationships defined based on user data review data and venue data as previously described. This information is based on Restaurants that are located in Boston Mass. Therefore the system already has at its disposal a variety of interconnectivity information with respect to the user and venues in the state of Massachusetts. The recommendation engine can then at the time of generating a recommendation use review data relating to the local venues as well as the venues in New York to determine connections to venues in New York that are most closely related to venues in Boston.

First the recommendation engine receives which locale the user would like to obtain recommendations for and polls reviewer information to identify reviewers who have reviewed venues in the locale the user is searching for and the locale the user is located in when performing the search. This reviewer information is obtained from a variety of sources as described above with respect to web crawling and the identification of venue reviews. Once the recommendation engine has determined the plurality of reviewers having provided reviews for both locales the recommendation engine processes the geometrically interconnected review data to form collaborative interrelationships values such that the system can augment the neural network based on the collaborative nodal link values between the two locales. Accordingly the recommendation engine determines positive or negative affinity connections between a variety of venues within multiple locales based on the review data linking the locales via collaboratively formed interrelationships. At this point the data repository contains amplified inter connections between venues in both locales from which the recommendation engine can draw upon to make recommendations for the user.

To determine which venues from the geographically distance locale to recommend to the user the recommendation engine looks for strong overall link strengths between venues in the geographically distance locale and the venue s the user expressed an affinity for as part of his search query or venues the user is known to like. The venues in the geographically distant local having the strongest overall link strengths to these venues are then generated by the recommendation engine and served to the user via the user interface. Therefore the system can provide a user with the ability to identify venues of interest in foreign locales by using review data between locales in which the system contains a highly developed neural network topology with respect to user interests and a foreign domain in which the system does not have much information about user interests by augmenting the neural network interconnectivity therebetween via correlative review data.

To increase efficiency and decrease processing demands in selected embodiments the system may only perform interconnectivity augmentation with respect to venues that are closely related to the venue in which the user has expressed an affinity for in his search as determined based on at least the overall link strength or other methods described above. For example in this embodiment if the user expresses an affinity for an American restaurant having casual attire and a low price point the recommendation engine will determine a set of venues having a strong overall link strength with respect to this restaurant within Boston and then perform interconnectivity augmentation to determine which of these venues have review data in which the reviewer also provided data for venues in New York. If there is not enough review data to determine ample interconnectivity information between the generated venues in both locales the recommendation engine will identify a plurality of other venues having a strong overall link strength with the previous set of generated venues and the system will again determine if there is enough review data between both locales such that nodal links between both Boston and New York can be updated in a way that allows the recommendation engine to recommend venues in New York with a high level of confidence. This process is repeated until the system determines that a predetermined number of venues in which review data is available for both locales has been reached.

For example as it is assumed that Restaurant E is the actual restaurant in Boston the user expressed an affinity for in his search query the recommendation engine may generate a recommendation containing Restaurant A in New York as Restaurant A is directly linked to Restaurant E via nodal link and has a positive collaborative nodal link value. The recommendation engine may also recommend Restaurant B as it is linked to Restaurant E via Restaurant A nodal link and has a strong nodal link strength with Restaurant A. As Restaurant C does not have any collaborative connections to Restaurant E or Restaurant A the recommendation engine would likely ignore this node when presenting New York venue recommendations to the user.

Assuming the user expressed an affinity for Restaurant F in his search query for recommended venues in New York and the network topology was defined by the system based on reviewer data as illustrated in the recommendation engine may still recommend Restaurant A over Restaurant B even though both Restaurant A and Restaurant B are linked to Restaurant F as Restaurant A has a stronger collaborative nodal link strength with Restaurant F via link . However Restaurant B could also be served to the user as an alternative choice. However if the restaurant for which the user has expressed an affinity for in the search query is not included in the network topology data because there was not enough reviewer information relating to that restaurant the system will determine the venue having the strongest overall link to the restaurant provided in the search query but which also has ample review data with respect to venues in the foreign local in which the user is seeking recommendations. The recommendation engine can the navigate the neural network amplified via interconnectivity augmentation to find a recommendation in New York based on the venue in Boston having the strongest overall link strength value to the venue the user expressed an affinity for in his search query.

Accordingly the interconnectivity augmentation process determines venues having strong overall link strengths with venues the user expresses an affinity for when performing a search query and then determines a plurality of reviewer data with respect to these venues and the location in which the user is requesting recommended venues. A network topology based upon the collaborative values between venues with respect to the review data is generated and it is determined whether there enough information from which the system can make a recommendation to the user. If there is not enough information the system generates additional local venues with links to the restaurant provided in the search query and the network topology is updated based on review data with respect to the venues and the venues in the foreign local. Once there is a predetermined amount of collaborative link strength data between the plurality of venues both within the locale of the user and the foreign local the recommendation engine determines recommended venues in the foreign local by following the strongest overall nodal links in the network topology while starting at the local node expressed in the search query or the local node having the strongest overall link to the venue identified in the user search query. The recommended venues are then served to the user via the user interface.

If the user provides additional filters with the search query in addition to the affinity for a particular venue the system will take this into account when creating the network topology by harvesting data on the local and foreign venues and identifying which data corresponds to the data within the filter. For example if the Boston user is a New England Patriots fan and is looking to watch the Monday night game in New York while avoiding heckling from New York Giants fans who mistakenly believe Eli Manning is better than Tom Brady the user may indicate that he would like a restaurant identified as Patriots friendly. Accordingly based on the example illustrated in in which the user expressed an affinity for Restaurant E in Boston as part of his search query if Restaurant A is a Giants friendly venue and Restaurant B is a Patriots friendly venue the recommendation engine will recommend Restaurant B over Restaurant A even though Restaurant A has a stronger overall collaborative link value to Restaurant E based on the reviewer data therebetween. Further the user may have kids and will therefore want a venue that is friendly to children. Therefore venue attributes and user characteristic attributes can also be taking into account by the system when performing interconnectivity augmentation to determine recommendations in locations where the system does not have a lot of information about what the user likes in that particular location.

In other selected embodiments the system may perform interconnectivity augmentation to recommend venues in a foreign local in which the system has very little information about user interests by taking into account user specific information known to the system in other locals As with the examples discussed above the system may not have much information about what the user likes in New York but may have ample information about what user likes in Boston. Accordingly user attributes review data from the user previous recommendations known to have been effective and the interrelationships formed based on content and reviewer data from the user local can all be used to extrapolate venue clones in a foreign local that are similar to or identical to venues known by the system to be well received by the user. These nodal doppelgangers can then be incorporated into the neural network topology previously defined as discussed above based on content and collaborative interrelationships within the local area of the user such that the system can follow the nodal links to determine venue clones in a foreign locale that may be of interest to the user. Further the list of nodal doppelgangers will inherently be cross connected with a plurality of other venues within the foreign locale such that additional recommendations can be made to the user. Accordingly alternatively or in addition to review data between two locales interconnectivity augmentation can also be performed based solely on user interest information from other locales.

Assuming the user is located in Boston and has performed a search query for venues in New York the system must determine which venues the user is typically interested in Boston. The system can receive as part of the search query for venues in New York restaurants in Boston that the user likes in which he wishes to find similar restaurants in New York. The system can also determine which venues the user likes based on previous recommendation data that has been determined to be effective via financial transactions of the user positive review data GPS data or other data as described previously herein. The system then compiles this list of interests of the user within Boston and compares each venue or piece of interest to known venues in New York to determine nodal doppelgangers within New York that have many of the same features of the venues identified within Boston.

Based on these comparisons Restaurant C of New York has the highest congruency factor with respect to Restaurant as the price is the same as Restaurant the genre is the same as Restaurant and the attire is the same as Restaurant . Conversely Restaurant D has the lowest congruency factor with respect to Restaurant as the price point is extremely high the genre is different and the attire is different. With respect to Restaurant of Boston Restaurant D has the highest congruency factor as the price point is similar the genre is the same and the attire requirements are the same. Accordingly by determining the congruency factors the system can identify venues in a foreign local that have the features similar to user provided venue filters and or venues which have been determined to be effective for the user in the past.

The congruency factor scores are exemplary and will change based on various venue attributes as well as different weights assigned to various venue attributes. For example genre may be weighted the highest as a user searching for restaurants in New York who provides Restaurant of Boston as part of the search query will likely identify with New York restaurants that have the same type of food. Further price may be weighted less than genre but more than attire. These weights can be set automatically by the system or manually by the user performing the search. The congruency score for Restaurant of Boston in comparison to Restaurant C of New York is not 1.0 because it is assumed that there may be other factors taken into consideration in determining how similar Restaurant C is to being a clone of Restaurant . These factors include but are not limited to hours of operation review data user characteristic data and previously defined nodal link interrelationship information between Restaurant and other restaurants in Boston or New York. The user may also indicate likes and dislikes which will affect the weighting of the various venue attributes. For example if the user detests dressing up when going out to dinner the system may apply an extremely high weighting factor to the attire attribute thereby causing restaurants requiring formal attire to have extremely low congruency factors even though they are similar to the identified local restaurant in many other respects.

Once the system has determined the plurality of congruency scores with respect to the restaurants of interest identified based on the venues provided in the search query or those known by the system to be effective the system updates the neural network topology to form nodal links between the identified venues of interest and the venues identified in the foreign local. In selected embodiments the system may link all nodes between the locales regardless of the congruency factor or may link only those nodes having a strong congruency factor therebetween. Accordingly the system or user may assign a predetermined threshold congruency factor for magnifying nodal interconnectivity between various locales.

Based on the amplified neural network formed between Boston and New York formed as a result of the interconnectivity augmentation performed in response to a search query for a venue in New York based on an affinity for Restaurant and or Restaurant of Boston the recommendation engine can traverse the links in the updated neural network topology to provide recommendations to the user for venues in New York. For example as illustrated in for a user expressing an affinity for Restaurant the user will be served with a recommendation for Restaurant C in New York. Similarly for a user expressing an affinity for Restaurant the user will be served with Restaurant D and Restaurant A with an indication the Restaurant D was the closest venue based on the user s search query. Further interconnections within the neural network of New York can further be used to provide larger recommendation sets. For example for a user expressing an affinity for Restaurant in a search query Restaurant E may be recommended next as having a strong overall link strength to Restaurant C with Restaurant V and W being recommended next as alternative venues based on their overall link strength with respect to Restaurant C.

As described previously if the user provides additional filters with the search query in addition to the affinity for a particular venue the system will take this into account when creating the network topology by harvesting data on the local and foreign venues and identifying which data corresponds to the data within the filter. For example if the user performs a search query by expressing an affinity for Restaurant but also provides a filter that requires a medium price point for recommended venues the recommendation engine may recommend Restaurant E over Restaurant C as the recommendation engine is able to traverse the nodal link to determine the Restaurant C is a good match but further determines based on venues having strong overall link strengths with respect to Restaurant C that Restaurant E is a better choice because it has a medium price point as compared to Restaurant C s low price point. Therefore venue attributes and user characteristic attributes can also be taking into account by the system when performing interconnectivity augmentation to determine recommendations in locations where the system does not have a lot of information about what the user likes in that particular location.

It should be noted that the system may also contain large amounts of information with respect to user interests in locales other than the one in which the user is located that can also be used to perform interconnectivity augmentation based on congruency factors via a determination of nodal doppelgangers. In other words when a user from Boston is looking for venues of interest in New York the system may also perform interconnectivity augmentation in the above noted manner by using recommendations known to be effective in other areas with respect to the user such as Washington D.C. to further enhance the variety of recommendations provided to the user. Further congruency factors determined between different locales can be weighted differently based on user time spent in the locales the number of effective recommendations or the like and then compared to determine a more accurate recommendation set for the user. Additionally the system may encounter difficulties performing interconnectivity augmentation between Boston and New York if venue information from New York is not readily available. In such a situation if the system already contains strong links to another city such as strong links between Boston and Washington D.C. and strong links from Washington D.C. to New York the system may determine recommendations by navigating the nodal network topology from Boston to New York via nodal links provided in Washington D.C.

Although the links may be uni directional or bi directional as previously described herein the nodal links determined via interconnectivity augmentation as illustrated in are bi directional to further enhance information available to the system in the event that similar future searches are performed by the same user or other users with similar interests either in Boston or New York.

As note above the system may perform interconnectivity augmentation based on both review data between different locations and via a determination of nodal doppelgangers in different locales. Accordingly the system may update the neural network topology of nodes between different locales based on review data and then may further update this network topology based on nodal link determinations identified via congruency factors. As such interconnectivity augmentation therefore provides the system with the ability to extrapolate information about foreign systems to generate an updated neural network topology having connections between a locale in which the system has ample information about what the user likes and a local in which the system has very little information about what the user likes. This provides enhanced functionality to the user in that the system acts as a travel companion to provide venues of interest to a user when a user is traveling to various locations. This increases the likelihood that the user will enjoy his experience when traveling and will further enhance the network topology thereby increasing the accuracy of future recommendations to the user.

Further error correction and data verification can be performed to ensure and or strengthen the accuracy of the recommended venues which may in turn be used to identify reviewers who have submitted review data with respect to the recommended venues and venues in other locations requested by the user.

The venues are operated by merchants or third party vendors which may comprise merchants such as restaurant owners airlines or hotel operators. The system may be configured to provide merchants a visualization of users behavior. For instance merchants may be provided access to ant trail data patterns including in real time. Merchants can interact with these patterns and request the system to inject disruptive content such as promotional offers related to a user s present location and expressed preferences.

Merchants may also be provided anonymized profiles of the likes and dislikes of their customers i.e. users who patronize their establishment . This can include reviews provided by reviewers and users who provide feedback who also constitute reviewers .

Additionally it is anticipated that merchants will likely wish to provide personalization services to their customers to ensure customer retention while increasing revenue. For example merchants selling products either online or in the brick and mortar world may want to identify recommendations for their customers based on at least previous purchases by the customer customer attribute data review data data about the product itself and the accompanying neural network topology generated based such information. However it is unlikely that merchants will have this functionality to provide users much less the ability to provide these types of services on the scale and accuracy of the system . Accordingly the system provides an application programming interface API operated by the server for allowing merchants to supply data to the system which can be used by the recommendation engine to determine recommendation or similarity data. The system then sends this data back to the merchant.

In selected embodiments the API includes a set of programming instructions and standards for accessing the system such that merchants can appropriately format their requests in a manner understood by the system and so the API can provide responses to the merchants in a manner manageable by their systems. In other words the API provides programming such that the server and remote applications operated by the merchants and can communicate with each other through a series of calls. For example web services having a collection of technological standards and protocols such as extensible markup language XML may be provided thereby allowing various parties from different systems to communicate. The API may be included as part of a software development kit SDK along with programming tools thereby providing the merchants and with instructions on how to best interact with the system . Additional technological standards protocols and programming languages may be included such as simple object access protocol SOAP for encoding XML messages so that they can be understood by operating systems over any type of network protocol and universal description discovery and integration UDDI for allowing the merchants and to list themselves. Mashups may also be implemented within the system thereby providing functionality from the API of the system in conjunction with other web applications.

For the ease of explanation illustrates three merchants and providing different requests to the server but one of ordinary skill in the art would clearly recognize that more than three merchants can connect to the server . In it is assumed that the merchant has identified a cluster of items of which a customer of the merchant has expressed a preference as determined by purchase data shopping habits and other methods as would be understood by one of ordinary skill in the art. For the purposes of this example it is assumed that the customer of the merchant has purchased three bottles of wine or has three bottles of wine in their shopping cart and is looking for one more bottle of wine. The merchant may want to provide the customer with a recommendation of additional wines for purchase and therefore interacts with the server via the request and API . The request defined by the API infrastructure includes a request for the recommendation engine to determine one or more recommended items that the user may like based on the cluster of items included in the request . The request may include identification information of the merchant information specifying the type of request such as a request for recommendation data a categorical description of the data and the data of which the system will determine recommendations. For example the request may include the name and address virtual and real world of merchant a request for recommendations based on the data set provided by the merchant information specifying that the data set relates to beverages or more specifically alcoholic beverages such as wines and the list of wines for which the merchant would like the system to process. This request may be served to the system at the time of a purchase by the customer or at a later time when the merchant is attempting to determine advertisement information based on previous customer activity.

Once the request is received by the API via the merchant interface and network the system determines the type of request and the type of information included in the request. For example the system parses the system call from the merchant to determine that the recommendation engine must generate recommendations as described above based on the list of wines provided in the request . If the type or genre of information is not included in the request the system may generate an error message to the merchant or may attempt to determine the type of information. For example the recommendation engine may attempt to determine whether the items within the request relate to cars food video games or as in this instance wine based on keywords identified in the request itself.

Once the recommendation engine has determined the type of request and what type of information is included in the request the recommendation engine identifies whether the data repository includes the appropriate neural network topology generated by the matrix builder in which to process the request . Specifically in selected embodiments the system may generate network topologies in all types of fields and for all types of products in addition to the venues discussed above. Therefore the data repository may already contain a neural network topology for the cluster of items relating to wine contained in the request . In other embodiments the system may dynamically generate a new network topology or update a previously existing network topology as previously described herein via harvesting creating nodal links error correction and data verification interconnectivity augmentation etc based on the type of items identified in the request .

Once the system has determined that a suitable neural network topology exists for which to process the request the recommendation engine generates a recommendation set for the merchant of items that users may like based on the cluster of items provided in the request . Specifically the recommendation engine generates recommendations based on the methodologies described previously herein such as identifying overall link strength rankings performing error correction and data verification with respect to source sites performing geometric contextualization with respect to the generated recommendation set and performing resonance checking of each recommendation in the recommendation set. Once the final recommendation set is generated by the recommendation engine the server provides the recommendation set including a plurality of recommended wines to the merchant in a response via the merchant interface API and network .

The system may determine similarity to an item in a variety of ways. For example in selected embodiments the system determines that bottles of wine fall into a drink category and therefore that only drinks should be contemplated by the system when attempting to determine similarities. This can be accomplished by performing keyword searches with respect to the items included in the requests and or by referring to a previously defined database updated based on user and vendor requests. Next additional subcategories are determined until the system identifies a plurality of categories deemed to be most similar to the items included in the request. For example the system may further identify the wine is a type of alcohol and therefore the system should only search for other alcohols such as beers and liquors. Accordingly the system can generate a similarity score of various beverages based on nodal link strengths between beverages having similar attributes within the neural network. In other selected embodiments the merchant may also provide in the request similar categories to search based on the items provided by the merchant .

Once a list of items deemed to be similar to those listed in the request has been determined the recommendation engine generates a recommendation set as previously described herein and provides the recommendation set to the merchant in a response . Specifically overall link strengths are calculated by the recommendation engine via collaborative interrelationships data based on reviewer data between wines identified in the request and items deemed to be similar such as liquors and beers content based interrelationships based on similar attribute data with respect to users who both drink the wines identified in the request and liquors and beers and wine attribute data such as the type of wine the alcohol content the location in which the wine is created and content collaborative interrelationships. Further interconnectivity augmentation may be performed to bolster the neural network connectivity as well as geometric contextualization and error correction and data verification to enhance recommendation accuracy.

As described previously above the requests coming from the merchants may also include filters with respect to the items included in the requests. For example Merchant may request that the system only return recommendations for wines that were made in or before a certain year. Merchant may request that recommendations for similar items be restricted to different types of beer rather than also including liquor as a subset. Accordingly the recommendation engine is able to provide merchants not only with recommendations for the same item or similar items included in requests but is also able to fine tune recommendations specifically tailored towards merchant requirements. Further requests may include user attribute information from the merchant thereby providing the system with additional information from which to generate a recommendation.

The API further provides the functionality for merchants to communicate a complete index of their items as well as user information with respect to the items to the system with a request that the system create a neural network topology specifically tailored to the communicated index of items. Accordingly the request can also include item attribute data and item review data. The neural network topology generated by the system can then be used by the recommendation engine to provide enhanced recommendations that are finely tuned to the enriched data provided by the merchant. This neural network topology can be generated solely based on the merchant index of items or an existing system neural network topology can be updated based on the information contained in the merchant index. Therefore such a request may contain identification of the merchant the type of data the complete index of the merchant s products and a request that the system build personalization maps such as a neural network topology based on the data provided by the merchant. The request may also include user attribute information with respect to these products. For example request from merchant is a request providing the name and address of merchant an identification of the data as relating to wine all of the wines sold or made by the merchant as well as user information with respect to each bottle relating to purchases statistics likes or dislikes and other affinity data and a request that the system generate a neural network topology based on this information.

Once the request is received by the merchant interface via the API the matrix builder generates a neural network having internodal connections between all of the wines identified from the merchant provided index and the user data provided in the request . The system may further augment the neural network using other information harvested by the system as described previously herein. Accordingly the request may also include information identifying whether or not the merchant wants the system to use information additional to the information provided in the request .

Once the neural network is generated by the system the merchant can then submit further requests to the server via the network and merchant interface as previously described herein in order to obtain recommendations or similar items generated by the recommendation engine . Further the merchant may further request that the server communicate the neural network topology information to the merchant in response so that the merchant can use such information internally.

Based on the information provided in the requests from the merchants the API may capture this information such that the system may update the neural network topology for further use with the merchant as well as with other users of the system . For example when merchant sends the request including the three bottles of wine the system may determine that the user picked these three wines and that pairing information can be obtained with respect to the user and the wines themselves. Accordingly this information can be used by the matrix builder to create or update nodal links with respect to data items of this type. Further the API can capture user information in the requests thereby mapping user attribute information with specific pairings of items. The system may also capture via the API the effectiveness of the recommendations provided to the merchants in the system responses. For example the system may send system call requests via the API to merchants requesting that the merchants return user effectiveness data with respect to recommended items such as increased revenue based on certain recommendations and or whether certain customers of the merchants have purchased items based on the recommendations served by the recommendation engine .

Accordingly via the API the system is able to provide specific merchants with personalization services thereby helping merchants retain customers and increase revenue. Merchants can request recommendation data from the server as well as specific personalization maps with respect to information provided by the merchants relating to the entire catalog of merchant products. Further while providing these services to the merchants the system simultaneously harvests merchant information to increase the accuracy of nodal connections in existing neural network topologies in areas relating to merchant product catalogs. Therefore the merchants are provided with beneficial personalization services while also further enhancing those services for other users and merchants alike through their interaction with the system .

A harmonized group decision making process may include providing shared recommendation results based on a unified taste profile of multiple users where the shared recommendations ideally collectively suit the unified taste profile of the group seeking the shared recommendation. In certain aspects of the present disclosure a user personality matrix representing an individual user s taste profile may be determined for each user in a group decision making dynamic wherein each group member s user personality matrix can be mathematically merged to form a unified taste profile corresponding to the group rather than the individual. Accordingly recommendations based for example on interrelational nodal strength characteristics between candidate venues and the unified taste profile may be determined by methods set forth herein.

Referring now to the system initially sets all values in the user personality matrix to 0 at step S. At step S the system compiles candidate venue properties and property attributes. Candidate venues may be broadly defined as any entity that may be returned as a shared recommendation result. Step S may include acquiring a user s connection graph extracting candidate venues from the user s connection graph and dissecting the extracted candidate venues for their properties and property attributes. Exemplary venue properties and property attribute values are shown in the example of . Referring now to column in the figure represents twelve restaurant candidate venues that may be extracted from a user s connection graph. The second horizontal column listing categorical descriptors city state etc. represents a set of venue properties that may be extracted for the 12 restaurant candidates. The remaining portion of represents attributes and corresponding attribute values which may be represented as labels codes numerical values or other identifiers.

Turning back to the system at step S adjusts the derived property attribute values based for example on nodal link strength with respect to the user. As discussed previously nodal link strength with respect to the user may be determined for example by analyzing user reviews frequency of visits geospatial information purchase history second and higher order links with other users second and higher order links with other attributes or the like. The processing at step S may result in property attribute values being calculated such that user preferences for a particular attribute and or and overall affinity for a given property may be discerned.

Next at step S the system determines if more candidate values exist in a user s connection graph and if so acquires the next candidate venue from the connection graph at step S. Otherwise the system at step S normalizes the attribute values within each property in the user personality matrix based for example on a maximum property attribute value for a given property. The processing at step S may result in a numeric representation of a user s relative affinity for a property attribute with respect to all other attributes for that property. For example the system may determine that a particular user likes Chinese cuisine with an affinity of 0.95 with respect to all other cuisine types e.g. American Italian Mexican etc. .

Next at step S the system may assign property weights based on a user s expressed affinity for a particular property with respect to all other properties in the user personality matrix. Whereas step S provides a mathematical representation of user affinity for a particular property attribute with respect to other attributes in the particular property step S may provide a numerical representation indicating for example that an entire property field such as cuisine matters to a particular user by a value of 0.8 compared to all other properties e.g. price ambience etc. . Consequently the system may assign a higher importance weight to the property field of cuisine than it would to other property fields.

Next at step S the system forms the user personality matrix based on the normalized property attribute values and the assigned property weights. For illustration purposes a non limiting example of a user personality matrix corresponding to a given user is illustrated in . For simplicity illustrates property fields corresponding to restaurants however those of ordinary skill should appreciate that the present disclosure may easily be adapted such that user personality matrices including other property fields corresponding to other venue types may easily be determined using the exemplary methods within the scope of the present disclosure.

Referring now to an exemplary user personality matrix is shown. Initially it is noted that the format presented with respect to the user personality matrix of is provided merely for illustration purposes and those of ordinary skill will appreciate that other formats may be used such as those that may be easily adapted such that mathematical computations may be performed using for example processing circuitry. The user personality matrix includes an area illustrating various properties of a venue that may be derived for example at step S of . Area includes various attributes corresponding to the properties of the area . The property attributes and their corresponding values may be derived for example at steps S and S of . Additionally the user personality matrix assumes that the attribute values have been normalized for example using methods described at least at step S discussed for . The attributes and corresponding attribute values illustrated in the area represent a relative user affinity for attributes within a given property. In this example analysis such as nodal interrelational link strength may indicate that a user has a normalized affinity value of 0.8 for American cuisine relative to other cuisines i.e. Chinese Japanese Italian and Mexican . Area includes a plurality of property weights calculated to correspond with the properties shown in the area . The property weights of the area may be calculated for example at step S of . The property weights of the area indicate a relative importance of a property with respect to other properties. That is acquired user data and corresponding analysis of nodal interrelational link strength may indicate that a user strongly prefers a particular venue property relative to others. Similarly the user data and or nodal interrelational link strength may indicate that a user is largely indifferent to a particular venue property with respect to other properties for the given venue type. Property weight may be determined for example by analyzing the attribute values such as those illustrated in the area . In this case high variability in attribute value magnitude may indicate a strong preference for a particular property relative to other properties. Conversely low variability within attribute values may indicate that a user does not place a high importance on that particular property. For example a user may consistently express an affinity for casual restaurants and rarely express a desire to choose formal or business attire when selecting a restaurant as indicated by the attribute values corresponding to the attire property shown in the area . Consequently the system may calculate a high property weight value corresponding to the high importance that the user places on the attire property when selecting a restaurant venue. Similarly the same user may select venues having a high price attribute at approximately the same frequency at which he or she selects venues having medium and low price attributes. Consequently the system may calculate a low property weight of 0.2 indicating that the user places a low importance on price when selecting restaurant venues.

It is noted that while the user personality matrix illustrated in corresponds to a venue type of restaurants in certain aspects of the present disclosure user personality matrices corresponding to a plurality of venue types may be calculated such that a single user taste profile is maintained for a variety of different venue types e.g. favorite movies favorite restaurants favorite schools favorite neighborhoods etc. . In other aspects of the present disclosure user personality matrices may be calculated such that they are venue type specific such as the user personality matrix which corresponds to restaurant venue types. Additionally user personality matrices may be stored and adapted over time rather than calculating new user personality matrices for each new shared recommendation query.

Next illustrates a non limiting example of an algorithmic flowchart for computing a combined personality matrix. As discussed previously a combined personality matrix may represent a unified taste profile for an ensemble of users seeking a shared recommendation. Referring now to the figure the system at step S acquires user personality matrices N and N 1. In certain aspects of the present disclosure the system may set one of the acquired user personality matrices as a base matrix to which other user personality matrices can be merged to form the combined user personality matrix.

At step S the system compares the acquired user personality matrices and finds matching attributes within matching properties of a given venue. For example the system may compare two user personality matrices and determine that both matrices include a cuisine property and matching attributes corresponding to Chinese cuisine.

At step S the system sums matching attribute values. For example in a case in which the above noted users each expressed an affinity for Chinese cuisine based on their matching attributes in their respective user personality matrices the system may sum their attribute values e.g. user has an affinity of 0.5 and user has an affinity of 0.7 for Chinese cuisine resulting in a combined user affinity score of 1.2 to calculate a combined attribute value with which to include in the combined personality matrix.

At step S the system compares the user personality matrix N and the user personality matrix N 1 to identify non matching attributes and appends non matching attribute values to the base matrix. For example the user personality matrix N may include an Ethiopian attribute in its cuisine type property. The system may determine that the user personality matrix N 1 does not include the Ethiopian attribute in its cuisine type property. Consequently the system may append the attribute value corresponding to the Ethiopian attribute in the user personality matrix N to the base profile at step S.

Next at step S the system determines if more user personality matrices are available to merge into the combined personality matrix. If more user personality matrices are available the system at step S acquires the next user profile i.e. user profile matrix N 2 in this example and performs the above described matrix merging process in an iterative fashion until all user personality matrices for the entire group have been merged.

After aggregating the attribute values as described above the system at step S divides the values in the combined personality matrix by the number of users present in the group requesting a shared recommendation. This step results in a set of attribute values representing a unified taste profile for the entire group. In certain aspects of the present disclosure the number of users N may equal the number of users included i.e. contributing a user personality matrix in the shared recommendation processing. In other aspects of the present disclosure the number of users N may be adjusted such that it does not equal the actual number of users included in the group requesting a shared recommendation. For example a user s personality matrix may be included when forming the combined personality matrix however the number of users may be adjusted to alter the relative weight of the user personality matrices.

At step S the system merges the connection graphs for all users from which a user personality matrix was derived. As discussed above the connection graph may represent all venues such as restaurants for which a user has previously expressed an affinity. Thus the processing at step S results in a connection graph corresponding to all venues to which all members in the group requesting shared recommendations have previously expressed an affinity which can subsequently be used to provide candidate venues from which the recommendation engine can provide a shared recommendation. In certain aspects of the present disclosure the recommendation engine may also determine additional candidate venues from which to provide a shared recommendation based for example on interrelational nodal link strengths between a venue in the merged connection graph and another unknown venue information of which may be acquired by methods set forth previously e.g. web crawling etc. .

While the example discussed with respect to may represent a case in which a fixed set of users seeks to make a shared decision using the shared recommendation process described herein it should be appreciated that aspects of the present disclosure may be adapted such that recommendations for partners to participate in a given activity may also be recommended. For example a group of users may seek an ideal location to go rock climbing and also request the system provide recommendations as to other partners with which to go rock climbing with. In this case the system may perform processing in accordance with methods set forth above to determine interrelational nodal strengths between the users making the request and the potential venues with which the users might wish to go rock climbing. In addition the system may utilize the aforementioned processes for determining interrelational nodal strength to analyze acquired user personality matrices e.g. downloaded from a server . Link strengths between the users initiating the requests and users corresponding to the acquired user personality matrices may be analyzed such that shared recommendations can be made as to which partners may wish to also go rock climbing as well as the users that the initiators making the request may share common personality traits. Shared recommendation outputs corresponding to suggestions for an activity as well as suggestions for partners to perform an activity with may be presented individually or as a package. For example the system may perform the aforementioned shared recommendation processes such that a package of multiple activities and multiple partners is presented to a user seeking to participate in an activity in a group setting.

In a similar vein certain aspects of the present disclosure may determine how different user personality matrices match one another. For example the system may calculate that aspects of two users personality taste profiles corresponding to their respective user personality matrices correspond as represented by e.g. a percentage match . The calculation may be based on for example shared nodes that the two users like or dislike similarities and features of nodes that they like or dislike and or nodes that the two users like or dislike that are connected through other common nodes. Aspects of visually representing the degree to which user personalities or venue features match are described later at least in the description relating to .

Moreover while the example described with respect to is drawn to the case in which a plurality of user personality matrices corresponding to distinct users are merged to form a combined personality matrix it should be appreciated that aspects of the present disclosure may be adapted such that a plurality of user personality matrices corresponding to a single user may be merged to form a combined personality matrix representing multiple moods of the individual user. For example a user may express particular affinities for venues based on for example the time of year the location the time of day the group of people with whom the person is with at the present time or the like. Specifically the user may express certain affinities for example when taking trips to certain areas of the country during certain times of year in which case the user may wish to develop a user personality matrix representing the affinities felt during those time periods which may represent a particular mood that the user was in at that time. Similar steps may be taken for a plurality of different occasions representing different moods of the user in which case the plurality of user personality matrices corresponding to the user s different moods may be accumulated and stored for later use and blended into a composite user personality matrix representing aspects of the user s various moods. The merged user personality matrices representing different moods of the same person may be weighted towards a particular mood if the user wishes to perform shared recommendation decision making processes weighted towards the affinities associated with that mood.

Next provide an illustrative example of merging two individual personality matrices and to form a combined personality matrix . Turning first to the individual personality matrices and include a plurality of properties and attributes with corresponding values similar to those described above with respect to . Of note the respective individual personality matrices include attribute values corresponding to each respective user s personal affinity toward those attributes. Since the users may have different affinities for the different attributes the individual personality matrices and reflect varied values for the matching attributes across both matrices. Additionally the individual personality matrix includes attributes U Street and trendy in the neighborhood and ambience properties respectively. These property attributes represent non matching attributes determined for example at step of the algorithmic process shown in .

As discussed above with respect to matching attribute values in the user personality matrices and may be summed to calculate a combined attribute value representing the overall affinity for both combined users for the particular attribute. The summed attribute values corresponding to matching attributes across the matrices may then be normalized to arrive at a combined attribute value to include the combined personality matrix. Taking the cuisine property as exemplary combined personality matrix shown in illustrates that because all attribute fields in matrices and s cuisine property match the attribute values of user personality matrices and in the cuisine property field may be summed and then divided by 2 to arrive at the attribute values shown in the combined personality matrix cuisine property field. Similarly property weights illustrated in for matrices and may be summed and divided by the number of users to arrive at a combined property weight value with which to include in the combined personality matrix . Regarding the unmatched attribute fields discussed above for the system may append the unmatched attribute field values i.e. the trendy attribute value of 0.3 and the U Street attribute value of 0.4 when forming the combined personality matrix . The process of appending non matching attribute field values is illustrated in the fact that the attribute values for the trendy and U Street attribute value fields are the same in the individual personality matrix and in the calculated combined personality matrix .

After calculating a combined personality matrix a set of shared recommendations for venues may be determined for an ensemble of users represented by the combined personality matrix. For example candidate venues included in a merged connection graph and or connected to restaurants included in the merged connection graph e.g. based on interrelational nodal strength may be quantitatively analyzed to determine a degree to which the set of candidate venues corresponds to the unified personality profile represented by the combined personality matrix. For example each of the candidate venues in the connection graph may be analyzed to determine their respective properties and or attributes at which point a value indicating a degree to which the candidates correspond to the combined personality matrix may be calculated and a set of recommendations can be presented to the group of users e.g. via an interface . In addition to the discussion of aspects of generating recommendations based on for example interrelational nodal strength illustrates a non limiting example of an algorithmic flowchart for generating a shared recommendation for a group of users based on a combined personality matrix. It should be appreciated that any and all aspects of descriptions in foregoing sections related to generating recommendations based on user data may be incorporated into the example of .

Turning to the system at step S acquires a set of candidate venues with which to provide a shared recommendation. As a non limiting example the candidate venues may be acquired using a merged connection graph. In addition the candidate venues may be acquired by analyzing the merged connection graph to determine restaurants which are not included in the merged connection graph but have a connection to the venues in the connection graph e.g. by way of a strong interrelational nodal strength .

The system at step S may analyze the candidate venues to determine their various properties and or attributes. For example a candidate venue corresponding to a restaurant may be analyzed by the system to determine its properties relating to cuisine type attire ambience etc. After determining the various properties of each of the candidate venues the associated attributes and attribute values of each property are determined by the system .

Once the properties and associated attributes are determined by the system the system at step S may then calculate a candidate venue score based on the combined personality matrix. As a non limiting example candidate venues may be scored in relation to the combined personality matrix based on the degree to which the candidate venue resonates with the unified user profile represented by the combined personality matrix. Similar to the above described case in which a venue recommendation is provided to an individual user based on interrelational links between the user and the venue the combined personality matrix forms a hypothetical unified individual to which shared recommendations may be made. Nodal link strength between each candidate venue property and or venue attribute may be calculated for all candidate venue properties and attributes and an aggregated score for each candidate venue may be calculated by the system at step S.

At step S the system may filter candidates based on predetermined filter criterion. For example the system may filter candidates based on the aggregated score calculated at step S being below a predetermined threshold level. Additionally filters may be set in a case in which the combined personality matrix and or another received input indicates a strongly positive or negative affinity toward a candidate venue s property and or attributes. For example a group of users may request a shared recommendation that is limited to only a certain set of neighborhoods cuisine types and price ranges. In other aspects of the present disclosure the system may determine that a candidate venue should be excluded from any shared recommendation due to e.g. a user represented in the combined personality matrix having a medical condition and or a religious belief that would automatically exclude such a venue from any actual decision made by the group. In certain aspects of the present disclosure candidate venues may be immediately filtered as an input to the recommendation engine to improve processing efficiency. For example a candidate venue may be precluded from merging to a connection graph in response to receiving an input indicating a particular candidate venue and or a particular venue type should be excluded from shared recommendations. Further aspects of filtering are described in later sections at least at and the related discussion thereto .

After calculating an aggregated score for each candidate venue and filtering out unwanted candidate venues from the shared recommendation process the system at step S prioritizes the unfiltered candidates based on their aggregated score. For example the system may rank candidate venues from high to low aggregated score. In other aspects of the present disclosure the system may segregate prioritized candidate values. For example the venues may be ranked with respect to a given property e.g. highest scored restaurants in a neighborhood . A candidate list of venues may be generated prior to or after filtering and or prioritizing the venues and the candidate list may be received as an input to the recommendation engine for generating shared recommendations of venues.

After prioritizing the unfiltered candidate venues the system at step S may then provide a shared recommendation output. In certain aspects of the present disclosure the system outputs a single candidate venue as a shared recommendation that best resonates with the group of users participating in a shared recommendation processing. In another aspect of the present disclosure the system may output a subset of candidate venues that have aggregated scores above a predetermined threshold. In further aspects of the present disclosure subsets of the candidate venues output as shared recommendations may be selected by the users participating in the shared recommendation processing using a voting system. In further aspects of the present disclosure the system may utilize user data and or predetermined inputs indicating that a particular user should have a higher weight when making shared recommendations further exemplary aspects of weighting shared decision making according to user weights is discussed at least in the discussion relating to .

In combination with or alternatively with respect to the recommendation processing described above calculating overall scores and outputting prioritized shared venue recommendations the recommendation processing described herein with respect to various link strengths can be used in selected embodiments to provide recommendations to the user based on the final filtered and or prioritized set or the final set of venues each having an overall score. As such and in selected embodiments the processing described herein with respect to determining a set of candidate venues scoring them based on a combined personality matrix and identifying a final prioritized and filtered set and overall scores provides the recommendation engine with a smaller sample set of venues from which it will make recommendations based on link strength. In this embodiment recommendations are made based on link strengths rather than overall score with respect to weighting values. Accordingly if a user requests a search by providing a venue to which he has an affinity the recommendation engine will only provide recommendations based on overall link strengths with respect to the venues identified and ranked in the final filter set. The final prioritized and filtered set and or overall scores of each venue in the final set may therefore in selected embodiments be used to identify the final set of venues to which the recommendation engine will use to provide recommendations based on overall link strength as previously described herein. Further based on the final filter set the recommendation engine may provide recommendations out of this set relating to venues of which have the strongest link strength to user attributes.

Next illustrates a non limiting example of an algorithmic flowchart for filtering candidate venues such as in the processing related to step S of . Referring now to the system at step S acquires filter conditions with which to use in shared recommendation processing. In certain aspects of the present disclosure the filter conditions used in shared recommendation processing are defined by the users participating in such processing. For example a group of users participating in shared recommendations may define a set of criteria with which to focus the search when providing shared recommendations. That is the users may define a focus area or search to limited venue properties and or attributes such as only searching low cost venues only searching certain cuisine types or only searching for venues in certain locations. In other aspects of the present disclosure venue candidates may be explicitly identified for exclusion by the users. For example a venue which may or may not be included in the merged connection graph may be identified by a user or users such that the identified venue candidate is excluded from being provided as a shared recommendation. In other aspects of the present disclosure user data indicative of previous actions of one or more of the users may be acquired and utilized to generate filter conditions for shared recommendation processing. For example user data acquired using methods set forth above may indicate that a user in a group has seen a particular movie in which case that movie may be excluded from being provided as a shared recommendation because the user who has seen the movie is unlikely to want to see the movie again. Similarly user data that is acquired and or inputs received for example in a shared recommendation interface may eliminate certain properties and or attributes from shared recommendation processing. For example a shared recommendation interface may provide a filter condition section with which users may select filter conditions when performing shared recommendation searches. For example a user may indicate a particular allergy to a certain food in which case properties and or attributes that are associated with the food allergy would be identified and any venue candidates corresponding to those identified properties and or attributes would be excluded from shared recommendation processing.

Next at step S the system compares the acquired filter conditions with the set of candidate venues and determines whether attributes and or properties corresponding to the candidate venues match one or more of the filter conditions. In the case in which an attribute or property of a candidate venue matches a filter condition the system at step S adjusts the aggregated score corresponding to the matched candidate venue. As a non limiting example of adjusting the aggregated score of the candidate venue the system may add a high magnitude negative value to the aggregated score. Magnitudes of values that may be added to the score should be selected so as to ensure exclusion based on the nature of the calculation processing. Alternatively or in addition to adjusting the aggregated score of a candidate venue similar processes can occur at the user personality matrix such that the combined personality matrix is heavily weighted by the user s expressed negative affinity for a particular venue property and or attribute. For example when calculating a user s personality matrix the system may identify that the user routinely responds negatively to a particular property and or attribute based on user data acquired as set forth above. Such analysis may trigger a negative blocker that is set in the user personality matrix such that the property and or attribute to which the user has an expressed negative affinity is excluded from shared recommendation processing. Alternatively or in addition to the processing described with respect to step S a flag may be set in either the user personality matrix or the combined personality matrix or in another memory area of the system to indicate that a candidate venue should be excluded from shared recommendation processing. For example the system may set a bit indicating that a particular candidate venue property should be excluded.

In certain aspects of the present disclosure the system may preclude all filtered candidate venues from being output as a shared recommendation for example in a user interface. Such processing in essence results in candidate venues being filtered in background processing such that the users participating in shared recommendation process are unaware that the candidate venue was filtered. In other aspects of the present disclosure candidate venues that do trigger filter conditions may be included in prioritized shared recommendation outputs but identified as a venue that should likely be excluded as a potential candidate in the decision making process. This allows users participating in shared recommendation processing to make an informed decision as to whether or not the venue should be excluded as a possible decision. For example in the case in which a user s acquired user data indicates recently viewing a particular movie users participating in shared recommendation processing in order to determine a movie that all the users in the group would enjoy may receive a prioritized recommendation output that includes the movie recently seen by the user. The movie may be identified e.g. highlighted or otherwise demarked in a user interface such that it is easily discernible that the venue i.e. the movie should likely be excluded from the decision making process. However in the case in which the user highly enjoyed the movie and would like to see the movie again the group of users may also appreciate the previously viewed movie being included in possible shared recommendations for decision making.

Next aspects of utilizing user influence weights when executing shared recommendation processing is illustrated in the exemplary algorithmic flowchart of . It is noted that the exemplary process illustrated in can be performed before or after merging user personality matrices to form a combined personality matrices. For example aspects of may be incorporated into step S of and or into the exemplary process shown in .

Referring now to the figure the system at step S acquires the user personality matrices corresponding to all users participating in the shared recommendation decision making process. At step S the system determines user weights corresponding to each of the users in the group. In certain aspects of the present disclosure the user weights used in shared recommendation processing may be determined as received inputs for example from a user interface. For example the user interface may include features allowing members of the group to indicate a particular occasion corresponding with the group decision. The indicated occasion may for example correspond to a user in a group s birthday in which case the user may be provided with a higher influence user weight i.e. 3 normal than would otherwise be afforded that particular user. Additionally the user interface may allow for excluding one or more users of the group in the decision making process such as when a user may desire to withhold influence from a shared recommendation process so that the other members of the group can happier with the outcome. In other aspects of the present disclosure the system at step S may obtain user data utilizing methods set forth above in which case the user data may indicate certain features of the users within the group that can be used to calculate user weights. That is different strengths of influence over the group decision can be afforded to particular users based on acquired user data. As a non limiting example of features which may be used to assign strengths of influence over a group decision the system may analyze acquired user data to determine relative relationships within the group such as family hierarchy social rank or other group dynamics such as an individual s propensity to be difficult or otherwise picky when making a decision.

After determining user influence weights at step S the system at step S may adjust values in the combined personality matrix based on the determined user weights. That is the calculated combined personality matrix may be weighted to more closely resemble one or more user s user personality matrix. In certain aspects of the present disclosure a weighting factor may be used to weight an individual s user personality matrix during the calculation of the combined personality matrix. In this case values in the user personality matrices may for example be multiplied by a weighting factor that is based on the determined user weights such that when the group members individual user personality matrices are merged e.g. as in the resultant combined personality matrix is weighted towards the users with the higher weighting factors similar to calculating a weighted average . Similarly negative weighting factors may be used to exclude a user personality matrix from the decision shared recommendation process. In this case the number of users assumed when forming calculating the combined personality matrix may need to be adjusted such as in the case of step S of the exemplary processing illustrated in . Alternatively or in addition to adjusting values within the combined personality matrix to account for user weights in a decision making process aggregated candidate venue scores such as those calculated at step S of may be adjusted based on user weight. For example system may adjust the aggregated score to weight nodal linkage strengths towards a particular user s user personality matrix.

Aspects of shared recommendation processing discussed in the foregoing sections naturally lend themselves to real time computations for determining a set of shared recommendations given a set of restrictions across multiple users. For example a group of users may combine taste profiles corresponding to their respective user personality matrices set specific filters within combined taste results based on their current preferences and obtain a dynamic list of results calculated in real time that fits the taste profile of the entire group within specific categories.

The areas and displayed in the user interface include various attributes that may be selected for a particular property. In the case of the area the attributes correspond to different cuisine type properties i.e. French American Japanese and Italian cuisines . In the case of the area a user is prompted to select a location property from four attributes which in this example are neighborhoods in a predetermined location i.e. Penn Quarter Dupont Circle Atlas District and Chinatown . In certain aspects of the present disclosure the properties and or attributes shown in the areas and may for example be derived as prioritized properties and or attributes that a particular user has shown the strongest affinity for based on derived user data. For example a user may display the user interface on their personal mobile device in which case the system may analyze user data and or the user s personality matrix in order to display attributes and or properties that the user has shown the strongest affinity for in the past in this case cuisine and location .

The area includes various filters that may be applied during shared recommendation and or decision making processing. As discussed previously the exemplary filters shown in the area may be applied during shared recommendation processing such that candidate venues are filtered from the processing and therefore would not be displayed as recommendations in response to any shared recommendation request from a user. As a non limiting example of member member and member may wish to obtain a shared recommendation for lunch. After selecting the members in the area the user may wish to limit the shared recommendation processing such that lunch recommendations are only provided for French and American restaurants in the Penn Quarter and Atlas District neighborhoods. Accordingly the corresponding attributes of French American Penn Quarter and Atlas District are selected in the areas and and the shared recommendation processing proceeds under these limitations. The user may select additional filters in the area such as limiting the price of the American and French restaurants in the given neighborhoods to only moderately or low priced restaurants. In response to receiving this request for a shared recommendation given the aforementioned limitations the system may carry out shared recommendation processing to form the respective user personality matrices for the plurality of members requesting the shared recommendation merge the user personality matrices to form a combined personality matrix for the users and determine candidate venues based on the combined personality matrix while excluding all candidate venues that do not fit the stated criteria selected in the user interface .

Next provides another non limiting example of a user interface that may be utilized when performing shared recommendation processing to improve decision making in a group dynamic. The exemplary user interface includes an input area which provides a universal search bar to perform a targeted shared recommendation process. In the example of the universal search bar of the input area queries the user with questions of what where and with whom a user would like to perform a certain activity. For example a user may request a shared recommendation to make a decision amongst a first user and a second user . The users and may desire a recommendation for pizza and or sushi restaurants in Capitol Hill. In response to receiving the request for the restaurants the system may for example perform the shared recommendation processing set forth in the above methods and provide a list of recommendations in the area . The example of illustrates six restaurant recommendations but it should be appreciated that the present disclosure may be adapted such that any number of restaurant recommendations may be made. For example the system may provide a single recommendation that best corresponds to the query limitations provided in the area and the combined personality profile of the user and the user . Once the list of prioritized shared recommendations are displayed in the area users may then select one or more restaurants that may interest the user e.g. Restaurant and Restaurant have bolded frames and in response to the selections the system may for example display further information regarding the restaurant such as menus hours of operation reservation availability etc. Aspects of the present disclosure may also allow users to make reservations and invite other users once a decision has been made as to which restaurant will be selected.

Next provides a further non limiting example of a user interface that may be utilized to perform aspects of the shared recommendation processing set forth by the above described methods. The figure shows an exemplary user interface which includes an area and an area . In this example the members through may for example query the system to provide restaurant recommendations with which to make a shared decision. In response to the query for a shared recommendation for restaurants the system may output prioritized recommendations based on processing set forth in methods described above. The area shown in may be used to provide the highest ranked prioritized restaurants. In this example three restaurants are shown however it should be appreciated that any number of restaurants may be output as potential recommendations with which to make a group decision. The system may be configured to receive an input from the user interface corresponding to votes for the various restaurants displayed in the area . This feature may allow the members through to vote on the restaurants recommended by the shared recommendation processing described above. Votes for each of the restaurants displayed in the area may be tallied and a restaurant decision may be made based on for example the restaurant receiving the highest number of votes. User voting may in certain aspects of the present disclosure be stored for future recommendations based on selection history.

Next provides another non limiting example of a user interface that may be utilized for performing the shared recommendation processing set forth in the present disclosure. In certain aspects of the present disclosure the exemplary user interface of may provide a visual representation of shared affinities in a network of friends. In other aspects of the present disclosure the exemplary user interface of may provide a visual representation of nodal connections between venues that may be utilized as candidates for performing shared recommendation processing. The exemplary user interface shown in displays a plurality of nodes through . The nodes through may in certain embodiments represent users making a shared recommendation query to the system . In other aspects of the present disclosure the nodes through may represent candidate venues venue properties and or venue attributes which may be used in the shared recommendation processing set forth by the present disclosure. The user interface may represent nodal interrelationships as overlapping nodes such as in the case of nodes and . Second and higher order inter relational relationships may be represented in the user interface such as in the case in which two nodes do not necessarily overlap with each other but share a common overlapping node e.g. nodes and overlap and nodes and overlap which may represent a second order connection with nodes and . In other aspects of the present disclosure nodal size and or color may be used to distinguish similarities between nodes. For example stronger shared affinities between users as represented by the combined personality matrix may be represented using bolder colors for instance. As another example a stronger affinity may be represented by a larger node size in the user interface .

While the foregoing examples illustrate a case in which a group of users desires a shared recommendation to pick an ideal restaurant for that group of people it should be appreciated that the present disclosure is not limited to selecting restaurant venues. As will be appreciated by one of ordinary skill aspects of the present disclosure may easily be adapted such that other venue selections and or shared decisions can be made. Specific examples of adapting aspects of the present disclosure to perform shared recommendation processing on non restaurant venues include selecting clothing options based on a user personality matrix corresponding to a celebrity where the recommendations are still partially fitting with the taste of the user making the query. Further aspects of the present disclosure may be adapted to for example select a balanced movie or TV show for a family movie night search real estate for roommates or newlyweds based on their joint tastes select a roommate for college students based on traits and tastes creating travel packages for families or couples selecting an activity for a group of people from a broad set of categories selecting a college that will optimize a set of traits fitting with a student s abilities selecting a specific business political military strategy by harmonizing computing interests selecting areas to explore e.g. mining space exploration etc. and selecting a group that can work well together based on similar traits of thought patterns and or decision making styles.

One illustrative system implementation consistent with the foregoing teachings is discussed below. The discussion is generally organized into four sections content collection content organization personalization and user interface.

The objects to be retrieval in this example constitute any set of web pages based on objects of interest. The objects may be selected based on category filters for a particular category and the content sources that are targeted.

This type of retrieval can in turn be broken up into several Content Modes. Content Mode 1 is called Global Grab. In this mode the system seeks to identify and retrieve information on every object in a category e.g. all restaurants in San Diego . In Content Mode 2 Keeping Current the system seeks to focus the collection on either i refreshing stale information on old objects or ii identifying new objects that just arose for old categories. In Content Mode 3 known as Intelligent Browsing the system seeks to have the data search update itself dynamically based on its real time discoveries to zoom in and focus on specific trends and objects.

One type of Global Grab is spidering. This is a conventional method used by Internet search engines according to which the system downloads the page of a content provider s site scans that page for links to other pages on the site and then downloads those pages. By repeating this process an entire site can be covered. The system can also implement paginated searches in which the system actively seeks for example page 1 of a term like Restaurants then page 2 and so on.

A second type of Global Grab is crawling. Sometimes it is desirable not to have to get pages directly from a content site such as where the site blocks automated indexing. In this case one can replicate the structure of a site from the cache of a search engine which crawl and cache every page as a second copy of the internet. Here the system uses a search engine to search for the URL of interest. Usually the URL will be included in the first result along with a Cached Page link to the cached copy of the page. The system can then download the link listed in the Cached Page which is the same as the original page. The system can then scan that page for links to other pages on the site and repeat the process for those pages.

A third type of Global Grab involves getting a list of all objects and then finding them within a site. This is a method designed to be more holistic than spidering to ensure that every single object of a category is retrieved from a given site if available. First a complete list of target objects is created such as by crawling an internet directory like Yellowpages.com for restaurants in San Diego. Then the system will have the complete list of objects for which data is desired. The next step is to search for each of these objects in turn in a search engine restricting the search to the pages from the target website. Different combinations of data extracted from the internet directory can be used to seed the search query and usually the business name metro name and phone number are useful ways to lock onto the object on the target site.

The search engine will retrieve pages that match these search query parameters on the target site of interest. Usually one of the first few pages in the results is the correct match. By repeating this search engine and retrieval process for every object in the Internet directory the system is likely build a complete replica of the target site s data on that category.

A fourth type of Global Grab involves third party crawlers. It is contemplated that third party services will crawl the web and make the results of those crawls available for purchase. In this case the first step of the global grab methodology is simplified because the system can query the service for every page arising from a certain set of websites. If such third party services also make the pages available for retrieval then the speed of the crawl is increased.

Turning to Content Mode 2 Keeping Current it is assumed that the system has completed a global grab and has data on all objects for a given category. The task then becomes staying current or up to date with the objects as their data changes. New objects can be introduced such as when restaurants open. Old objects can become outdated such as when restaurants close. Data on objects can change such as when the hours of operation or menu items change. New and old objects can be identified by doing a crawl on global directories which is fast and then focusing in on any changes to the list of objects. Alternatively the system can discard old data and then run a new global grab. Finally the system can rely on update notifications which can be acquired in several forms i some websites focus on these changes such as listings of new restaurants in local papers ii many content provider APIs will notify of openings and closings of sites iii URLs and webpage titles will often receive a CLOSED stamp which can be rapidly screened. Each datum collected by the system is tagged with an expiration date based on the type of the data events expire immediately restaurants may need to be refreshed every few months to check for major changes . Data that has expired can have associated pages re retrieved for freshness. The re retrieval process is simplified because the URL is already known.

Content Mode 3 Intelligent Coordinated Retrieval involves eating nodes or retrieval computers that can coordinate their searches based on real time events to optimize content gathering in response to mass user behavior. In this implementation the retrieval computers are given write access to the retrieval queue. If the retrieval computers identify a trend that is similar to their original target but stronger the retrieval computers can recruit other computers to look more deeply at this phenomenon by writing the new target or a set of targets within a target area onto the retrieval queue. Retrieval computers can also interact intelligently in the collection process by alerting each others if a lead turns out to be faulty and is indicative of more faulty leads for example if a region of a site is covered with spam or stale data . In this case the retrieval computer s can scan the queue and delete similar jobs on the queue so that future computers don t devote resources to exploration of a lower value target area. In this way different search nodes again inform one another about what they learn by virtue of the shared queue to help guide their collective search.

Turning next to matching objects to content pages whenever the system is gathering data from target websites on an object of interest the system should ensure that the data on the target site is actually referring to the object of interest. This is especially true when attempting to cross reference objects across different sites. The system optionally utilizes a likelihood of match score to make this determination taking into account multiple variables. For example if the system is trying to match a venue on two different sites the fact that they have the same phone number or address may tend to indicate that they are the same venue. Numeric identifiers on consistent scales are particularly valuable for this purpose such as phone numbers UPC symbols and latitude longitude. Non numeric identifiers strings such as addresses can also be used and one can check the similarity of the two sites addresses by taking a Hamming distance on the characters or parsing out each one s street number street name etc.

Data is cross referenced across multiple sites by using data from one site to choose objects to find on another site then use the steps discussed above to find new content pages from those objects on a different site.

A fleet of retrieval computers may be created by building each from scratch programmatically. Each computer is resurrected from a disk image such as an Amazon Machine Image AMI . The AMI is loaded as an elastic computing node on Amazon s EC elastic cloud computing or other service using standard libraries written in Java. The AMI is armed with everything that the computer will need including a Java runtime environment the capacity to communicate with a central version control repository such as Git etc. The AMI is also armed with a startup script that runs when the EC node is born and receives user parameters passed to the EC node at birth. The user parameters to the startup script tell it where to download the latest code instructions for the node such as the URL of an S location or the URL of a Git repository. The startup script is armed with the credentials to access the latest code instructions and load the code onto the new EC node. Every EC node in the fleet downloads similar instructions so they are all prepped around a common task. These instructions tell it how to connect to the message queue with the URLs to retrieve and also how to go about the retrieval process. Each one then launches the downloaded code runs the JAR file etc and thus begins working. Finally each computer in the fleet is assigned its own IP address via Amazon s Elastic IP system etc so that they can be throttled by content sites independently from the other nodes and work in parallel.

Tasks are distributed amongst the fleet of retrieval computers by using a list of URLs usually long millions of pages that the system wants to retrieve. This list might be a text file database table or other simple serial storage system. The goal is to distribute those URLs among the many computers. This process is best implemented through a queue service that lives independently from all the retrieval computers. As an example Amazon offers the Simple Queuing Service SQS in which every URL is stored as a string message on the queue. Thus the queue retains a memory of which URLs still are to be crawled. Each computer in the fleet can query the queue for the next item to be crawled. The queue then assigns the item to a particular retrieval computer and marks the item as locked so that other retrieval computers do not also try to work on the item. Meanwhile the system monitors whether the retrieval computer completes the task in a timely manner. If the retrieval computer does not check back with the queue to say that the job is done then the queue restores the item to unlocked so that other computers can perform the task. Once a computer checks back with the queue and informs it that the task has been completed the queue removes the item from the queue. Thus a workflow is established that can be shared between an arbitrary number of retrieval computers where they can operate simultaneously to work through a list of retrieval tasks.

Pages are retrieved by all computers in the fleet. Each retrieval computer is already armed with a URL to retrieve by taking the message from the messaging queue. The computer then executes a function to stream the contents of the remote file webpage etc into memory in PHP file get contents in Java url.openStream etc . The computer then saves this file to the global storage system see below . With respect to rate of repetition it should be noted that no single computer hits a given content source too rapidly. Therefore each computer is throttled to only complete one page request every 0.1 10 seconds. The use of third party crawlers discussed above may obviate the need to throttle in this manner. Every page request is checked to determine if it succeeded and if failure occurs a longer interval is used before the next attempt. The system can implement different schedules for the interval rollback such as an exponential rollback.

The global storage system may be a distributed storage platform Amazon S3 etc . In the case of Amazon S3 data is stored in buckets that are accessible from any computer as a URL. Each retrieval computer stores the contents of the retrieved file in a repository folder on S or other service as a file path string which is also URL. The file can thus be retrieved at a later date by entering the storage system URL. Access to these repository folders is private so that they can only be accessed by the system s Content Collection and Content Organization systems.

Turning now to content organization the aim is to take content collected from the Internet and organize it for access through the Interface. The input may be a hard drive directory of the latest set of collected web pages. The output may be the data uploaded to a large scale but highly organized database. The output may be generated by repeating the following process 1 find a page 2 parse the page for info 3 match the page to an object in the database and 4 update the database.

Another computer fleet may be deployed to organize the content. As noted above in the case of retrieval computers content organization computers may be replicated by building them from scratch programmatically. Each computer is resurrected from a disk image such as an Amazon Machine Image AMI . The AMI is loaded as an elastic computing node on Amazon s EC elastic cloud computing or other service using standard libraries written in Java. The AMI is armed with everything that the computer will need including a Java runtime environment the capacity to communicate with a central version control repository such as Git etc. The AMI is also armed with a startup script that runs when the EC node is born and receives user parameters passed to the EC node at birth. The user parameters to the startup script tell it where to download the latest code instructions for the node such as the URL of an S location or the URL of a Git repository. The startup script is armed with the credentials to access the latest code instructions and load the code onto the new EC node. Every EC node in the fleet downloads similar instructions so they are all prepped around a common task.

Every computer in the Content Organization fleet receives 2 pieces of information which it is programmed to seek out using in its boot instructions 1 the storage space location of the code instructions to be its brain 2 the location address of the job queue where it will receive the material to be processed. The system controls the Content Organization fleet by creating and managing the content organization process. The system defines the storage directory of all the pages that need to be organized. The system thus turns this directory into a list of jobs where each job is a file to be processed. The system then creates a task queue see below loads that queue up with the tasks and sets the properties of the queue to determine the time allotted for task completion before tasks are recalled and given to other computers.

The task queue may be implemented using Amazon Simple Queue Service SQS or some other service that is external to individual computers. The system loads up the job queue with a list of pages that need to be organized. Each item in the queue is a URL address in global storage space to a page that needs to be organized. The goal is to distribute those URLs among the many computers. The queue allows computers to take URLs and retains a memory of which URLs still must be organized. Each computer in the fleet can query the queue for the next item to be crawled. The queue then assigns the item to the computer and marks the item as locked so that other computers do not also try to work on the item. Meanwhile the system monitors the queue to determine whether the computer completes the task in a timely manner. If the computer does not indicate to the queue that the task is done within the allotted time the queue restores the item to unlocked so that other computers can take the task. Once a computer checks back with the queue to say that it has completed the task the queue removes the task from the queue. Thus a workflow is established that can be shared between an arbitrary number of computers where they can operate simultaneously to work through a list of retrieval tasks.

The global storage system for the Content Collection fleet may be a distributed storage platform Amazon S3 etc. . In the case of Amazon S3 data is stored in buckets that are accessible from any computer as a URL. Each retrieval computer stores the contents of the retrieved file in a repository folder on S or other service as a filepath string which is also URL. The file can thus be retrieved at a later date by entering the storage system URL. Access to these repository folders is restricted so that they can only be accessed by the system s Content Collection and Content Organization systems.

The system may utilize the following global structure for document namespaces date retrieved data format content provider city category . For example 2011 07 07 xml google boston restaurants . However depending on the source of the crawl the raw data files may not even be organized into this directory structure yet. In this case the crawl results should be sorted into files that are organized according to this structure.

To sorting raw crawl results the system first inspects all the files retrieved during Content Collection and sort them according to the objects that they represent. One way to do so is inspect the URL of the crawl. The URL will disclose the content provider the city metro area and category. For sites where this cannot be computed from the URL the data can be extracted from elsewhere in the file address field etc. The date of the crawl can be retrieved from the stored file s metadata. The crawl result file or part of the crawl result file that applies to the extracted object can then be saved in the directory structure described above. In this manner all of the raw crawl results are placed in an organized directory structure to facilitate the subsequent organization to the database.

The queue is loaded by accessing the storage system directory where the sorted documents are located see above . The system then spiders this directory to uncover the list of all files within that directory and its sub directories. The system then creates a job queue described above to hold the list of files to parse. Next the system uploads to the queue a list of file locations URLs to the files as an array of messages to the queue. At this point the queue is loaded with a set of files to be parsed and organized.

Every time a computer in the fleet goes to the queue and retrieves a sorted page to organize it first analyzes the following information from the URL the data format which determines how to read the file s data the content provider which determines which page parser to apply and the category which determines what type of object to extract. The computer already has in its memory all of the different parsers that it downloaded when it was deployed. The computer picks one out based on the content provider and data format and runs it on the file. Input is the file itself and the output is a data object in memory with values extracted from the file and stored in fields.

Every time a computer parses a file and stores its data object in memory the data is next added to the database. First the computer has to identify the object s location in the database. This is accomplished by selecting the database table in Amazon a domain based on the category of the object and locating the row of the object by using in descending order i the unique id of the object from the content provider for example restaurant id on local.yahoo.com ii another unique numerical identifier such as the phone number and iii name address and latitude longitude fuzzy matching. If the determined entry does not already exist the computer creates a new row. The computer then runs an update on that row updating every attribute field in a single database hit for efficiency. This is repeated for every sorted page that the computers come across in the queue until all of the sorted pages have been organized into the database.

Next the system personalizes the content by generating a neural network architecture that connects objects in the world as nodes within a network. The system activates a subset of the nodes based on what is known about the user s affinities. The activations are followed through the network to deduce what else the user will like.

The neural network may be implemented as follows. Connections TO a node a stored as a list of N1 W1 N2 W2 . . . where the connected nodes N are paired with their weights W. This list is saved in the database in the same row as the other properties of the node. Optionally a list of connections FROM the node can also be stored. Subsets of nodes to be activated are identified by user provided data regarding likes and dislikes. Users may be required to answer regarding their favorites in different categories. Users may also provide feedback on recommendations that they are given which can be either binary approve or disapprove or they can be continuous e.g. 1 to 10 or 10 to 10 . The system assembles a list of positive activation nodes and assign an activation level which were either favorites e.g. 10H activation or feedback driven e.g. 1 10H activation . Similarly the system assembles a list of negative activation nodes and assigns an activation level e.g. 1H to 10H .

Connections are established by for every node in the user s list accessing in the database the set of common co occurrences with that object on the web. The system retrieves this list of objects and builds connections from our node to those objects with five positive synapses each.

Connections also may be based on feature similarity. For every node in the user s list the system identifies nodes with similar properties. For the category to be matched the system takes the most salient properties e.g. for a restaurant price cuisine and ambiance and searches the database for other restaurants that match that feature set. Each match generates two positive synapses.

Connections also may be established based on cross visitation. For every node in the user s list the system identifies nodes that have been cross visited by other users. These users can be users of the system e.g. users of a subscription service associated with the system or activity elsewhere on the Internet about which the system has data. This may be accomplished by indexing the reviews and responses to all nodes. The system identifies strong responses to the node of interest identifies the users that furnished those responses and identifies other nodes to which those users had similarly strong responses. The system can connect those nodes to our node of interest with one positive synapse for every similar response.

Negative synapses can facilitate the recommendation process by factoring in what the user does not like and the things that are not like things that the user does like. Both of these associates involve negative synapses which add richness to the representation. For example the system can identify strong responses to the node of interest identify users that made those responses and identify other nodes to which those users had opposite strong responses. Alternatively the system can identify nodes that the user did not like identify other people who did not like that node identify nodes that those people did like and positively link those nodes to our user s preferences.

Sometimes the network may exhibit runaway connectivity where something gets more connected which then gives it an advantage in getting further connected e.g. more co occurrences which in turn tends to generate even further connections. Therefore the system may normalize connectivity by inspecting the list of existing connections to a node determining their total value e.g. connections N.times.average weight W and in the event that total value exceeds some threshold divide all of the connection weights by a constant value to bring them back into range. This may be repeated for all nodes. Normalization alternatively can be accomplished by dividing based on the N W term going TO the node dividing based on the N W term coming FROM the node dividing by the total N W term across the network. The implementation for this may involve reading the list of node weights in the database performing the normalization on those weights and writing the new weights back to the database.

The addition of a new synapse connecting nodes can also immediately impact other connections. Upon adding the connection to the list the other connections to that node can be taxed by an amount equal to the inverse of their proportion of the new connection s strength that is adding a 1 synapse then taxes the other 10 synapses already on that node by 1 10 0.1. When synapses become so weak that they are below a certain threshold either through interaction taxing or through normalization then they are removed deleted from the list .

Connections from node to node can be constantly analyzed updated and consolidated to take into account patterns that emerge between nodes. As a simple example if A forms a strong link to B and A forms a strong link to C then a connection can be consolidated linking B and C. Such patterns can be searched for using specialized scripts that check the database entries for such patterns and then write back consolidation changes to the affected nodes lists.

The result of all of these processes is a rich information base that accurately links a huge variety of nodes to a user s established nodes of interest with a significant dynamic range and with substantial retrieval efficiency.

To retrieve the list of nodes related to a user the system need only then activate the user s established nodes and follow their connections to retrieve more nodes that if connected sufficiently strongly will also activate and depending on the initial activation strength follow those connections to further nodes until the activation peters out with each connection hop depending on the connection strength. The connection strength is therefore the inverse of the resistance to the propagation of the activation through the network.

The total list of nodes that was effectively activated by this process recommendation set can then be stored in a list that is linked to the user in the database for retrieval with a single database call whereupon the list can be cross referenced against a set of presented results. Optionally different sub lists can be stored for different categories or different presentation scenarios caching the results for fast personalization.

The user interface may comprise i a set of HTML files that define the look and feel of the web interface with design elements styled using cascading style sheets CSS iii a server side set of scripts that dynamically generate those HTML files using a backend scripting language PHP etc running on a web server Apache etc. iii a client side set of scripts and interface libraries that allows rich user interaction within the browser Javascript j Query etc. and iv a backend database that provides the data to the web application Amazon SimpleDB etc. .

The functionality of the user interface includes permitting the user to create an account and log in using secure credentials that are verified against an encrypted user table in our backend database. The interface also allows a user to browse objects and see whether they are recommended or not. The interface allows a user to filter those objects by city by category and then by a host of properties pertinent to those categories. The user can enter feedback on their recommendations by clicking on thumbs up thumbs down or other feedback mechanisms. The interface allows a user to drag and drop recommendations onto a being considered area where they can be compared across different parameters using sortable headers etc. The interface allows a user to drag an object onto their calendar in order to action it by going to the object at a certain time. The interface allows a user to build events such as My New York City Trip where the user can create a group of restaurants hotels and other opportunities that have been recommended. The user can enter notes about their recommendations to remind themselves of various impressions for example. The user can print out a copy of itineraries for their events or email those itineraries to themselves. Their calendar is also synchronized with the global calendar on their smart phones etc. The user can share their recommendations with others or build events and share those with others.

The interface may be delivered via a scalable cloud architecture. Web servers run as Linux CPU nodes on Amazon s elastic cloud computing EC system. Web servers receive independent IP addresses using Elastic IP or other IP address mediators. Web servers are monitored for load and users are dynamically distributed among the servers. Excessive user load trips a threshold which leads to the creation of more EC nodes. When user load drops too low that trips a threshold which leads to the delete of EC nodes to save cost.

A list of all recommended objects is pre computed for the user. When the user requests objects via the interface the system simply checks to IDs of those objects prior to presentation to see whether the objects appear on the recommended list or not. In another iteration the personalization is computed in real time with no pre cached list of recommended objects. In this example as objects were going to be presented through the interface they are run through the personalization engine at that moment to compute if they are recommended or not.

In some examples the server and or client device e.g. desktop computer or smart phone are implemented in digital electronic circuitry or in computer hardware firmware software or in combinations of them. The apparatus is optionally implemented in a computer program product tangibly embodied in an information carrier e.g. in a machine readable storage device or in a propagated signal for execution by a programmable processor and method steps are performed by a programmable processor executing a program of instructions to perform functions of the described implementations by operating on input data and generating output. The described features are optionally implemented advantageously in one or more computer programs that are executable on a programmable system including at least one programmable processor coupled to receive data and instructions from and to transmit data and instructions to a data storage system at least one input device and at least one output device. A computer program is a set of instructions that are optionally used directly or indirectly in a computer to perform a certain activity or bring about a certain result. A computer program is optionally written in any form of programming language including compiled or interpreted languages and it is deployed in any form including as a stand alone program or as a module component subroutine or other unit suitable for use in a computing environment.

Suitable processors for the execution of a program of instructions include by way of example both general and special purpose microprocessors and the sole processor or one of multiple processors of any kind of computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for executing instructions and one or more memories for storing instructions and data. Generally a computer will also include or be operatively coupled to communicate with one or more mass storage devices for storing data files such devices include magnetic disks such as internal hard disks and removable disks magneto optical disks and optical disks. Storage devices suitable for tangibly embodying computer program instructions and data include all forms of non volatile memory including by way of example semiconductor memory devices such as EPROM EEPROM and flash memory devices magnetic disks such as internal hard disks and removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory are optionally supplemented by or incorporated in ASICs application specific integrated circuits .

To provide for interaction with a user the features in some instances are implemented on a computer having a display device such as an LCD liquid crystal display monitor or screen for displaying information to the user and in the case of a desktop computer a keyboard and a pointing device such as a mouse or a trackball by which the user provides input to the computer.

In various implementations the client device is a smart phone such as that described in U.S. Pat. No. 7 966 578 entitled Portable Multifunction Device Method and Graphical User Interface for Translating Displayed Content assigned to Apple Inc. which is incorporated herein by reference.

The server functionality described above is optionally implemented in a computer system that includes a back end component such as a data server or that includes a middleware component such as an application server or an Internet server or that includes a front end component such as a client computer having a graphical user interface or an Internet browser or any combination of them. The components of the system are connected by any form or medium of digital data communication such as a communication network. Examples of communication networks include e.g. a LAN a WAN and the computers and networks forming the Internet.

The computer system optionally includes clients and servers. A client and server are generally remote from each other and typically interact through a network such as the described one. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other.

Obviously numerous modifications and variations of the present disclosure are possible in light of the above teachings. It is therefore to be understood that within the scope of the appended claims the invention may be practiced otherwise than as specifically described herein. For example advantageous results may be achieved if the steps of the disclosed techniques were performed in a different sequence if components in the disclosed systems were combined in a different manner or if the components were replaced or supplemented by other components. The functions processes and algorithms described herein may be performed in hardware or software executed by hardware including computer processors and or programmable processing circuits configured to execute program code and or computer instructions to execute the functions processes and algorithms described herein. A processing circuit includes a programmed processor as a processor includes circuitry. A processing circuit also includes devices such as an application specific integrated circuit ASIC and conventional circuit components arranged to perform the recited functions.

The functions and features described herein may also be executed by various distributed components of a system. For example one or more processors may execute these system functions wherein the processors are distributed across multiple components communicating in a network. The distributed components may include one or more client and or server machines in addition to various human interface and or communication devices e.g. display monitors smart phones tablets personal digital assistants PDAs . The network may be a private network such as a LAN or WAN or may be a public network such as the Internet. Input to the system may be received via direct user input and or received remotely either in real time or as a batch process. Additionally some implementations may be performed on modules or hardware not identical to those described. Accordingly other implementations are within the scope that may be claimed.

It must be noted that as used in the specification and the appended claims the singular forms a an and the include plural referents unless the context clearly dictates otherwise.

