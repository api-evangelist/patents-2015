---

title: On-demand database service system, method and computer program product for conditionally allowing an application of an entity access to data of another entity
abstract: In accordance with embodiments, there are provided mechanisms and methods for conditionally allowing an application of an entity access to data of another entity in an on-demand database service. These mechanisms and methods for conditionally allowing an application of an entity access to data of another entity in an on-demand database service can enable embodiments to limit such access to the data, as desired. Furthermore, embodiments of such mechanisms and methods may provide additional security when sharing data among different subscribers to an on-demand database service.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09268963&OS=09268963&RS=09268963
owner: salesforce.com, inc.
number: 09268963
owner_city: San Francisco
owner_country: US
publication_date: 20150123
---
This application is a continuation of U.S. application Ser. No. 13 866 801 filed Apr. 19 2013 which is a continuation of U.S. application Ser. No. 13 370 247 filed Feb. 9 2012 which is a continuation of U.S. application Ser. No. 12 176 026 filed Jul. 18 2008 which claims the benefit of U.S. Provisional Patent Application No. 60 950 836 filed Jul. 19 2007 the entire contents of which are incorporated herein by reference.

A portion of the disclosure of this patent document contains material which is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or the patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The current invention relates generally to database systems and more particularly to securely allowing access to data in database systems.

The subject matter discussed in the background section should not be assumed to be prior art merely as a result of its mention in the background section. Similarly a problem mentioned in the background section or associated with the subject matter of the background section should not be assumed to have been previously recognized in the prior art. The subject matter in the background section merely represents different approaches which in and of themselves may also be inventions.

In conventional database systems users access their data resources in one logical database. A user of such a conventional system typically retrieves data from and stores data on the system using the user s own systems. A user system might remotely access one of a plurality of server systems that might in turn access the database system. Data retrieval from the system might include the issuance of a query from the user system to the database system. The database system might process the request for information received in the query and send to the user system information relevant to the request.

There is often a desire to allow access to data in database systems by third party applications. To date such data access has been provided with limited security measures etc. For example even if the third party application is generally authorized for data access such authorization may in turn allow for broad based access to all data unlimited actions taken on such data etc. Unfortunately such limitations render such data subject to additional risk of undesired access by third parties.

In accordance with embodiments there are provided mechanisms and methods for conditionally allowing an application of an entity access to data of another entity in an on demand database service. These mechanisms and methods for conditionally allowing an application of an entity access to data of another entity in an on demand database service can enable embodiments to limit such access to the data as desired. Furthermore embodiments of such mechanisms and methods may provide additional security when sharing data among different subscribers to an on demand database service.

In an embodiment and by way of example a method is provided for conditionally allowing an application of an entity access to data of another entity in an on demand database service. In use a request is received from an application created by a first entity. The request includes a request to access data of a second entity stored in a database of an on demand database service. It is then determined whether the application is authorized to access the data of the second entity stored in the database of the on demand database service. Conditional access is then allowed to the data of the second entity stored in the database of the on demand database service based on the foregoing determination.

While the present invention is described with reference to an embodiment in which techniques for conditionally allowing an application of an entity access to data of another entity in an on demand database service are implemented in an application server providing a front end for a multi tenant database on demand service the present invention is not limited to multi tenant databases or deployment on application servers. Embodiments may be practiced using other database architectures i.e. ORACLE DB2 and the like without departing from the scope of the embodiments claimed.

Any of the above embodiments may be used alone or together with one another in any combination. Inventions encompassed within this specification may also include embodiments that are only partially mentioned or alluded to or are not mentioned or alluded to at this brief summary or in the abstract. Although various embodiments of the invention may have been motivated by various deficiencies with the prior art which may be discussed or alluded to in one or more places in the specification the embodiments of the invention do not necessarily address any of these deficiencies. In other words different embodiments of the invention may address different deficiencies that may be discussed in the specification. Some embodiments may only partially address some deficiencies or just one deficiency that may be discussed in the specification and some embodiments may not address any of these deficiencies.

Systems and methods are provided for conditionally allowing an application of an entity access to data of another entity in an on demand database service.

To date data access has been provided in the context of database systems with limited security measures etc. Unfortunately such limitations render such data subject to additional risk of undesired access by third parties. Thus mechanisms and methods are provided herein for conditionally allowing an application of an entity access to data of another entity in an on demand database service and to limit such access to the data as desired. Additionally embodiments of such mechanisms and methods may provide additional security when sharing data among different subscribers to an on demand database service.

Next mechanisms and methods for conditionally allowing an application of an entity access to data of another entity in an on demand database service will be described with reference to exemplary embodiments.

In the context of the present description an on demand database service may include any service that relies on a database system that is accessible over a network. In one embodiment the on demand database service may include a multi tenant on demand database service. In the present description such multi tenant on demand database service may include any service that relies on a database system that is accessible over a network in which various elements of hardware and software of the database system may be shared by one or more customers. For instance a given application server may simultaneously process requests for a great number of customers and a given database table may store rows for a potentially much greater number of customers.

Once the request is received from the application created by a first entity it is determined whether the application is authorized to access the data of the second entity stored in the database of the on demand database service. See operation . Furthermore the access to the data of the second entity stored in the database of the on demand database service is conditionally allowed based on the determination. See operation .

In the context of the present description an entity may refer to any individual company group or organization. Furthermore the first and second entities may include related entities e.g. organizations within the same company etc. or unrelated entities e.g. two separate companies etc. . For example in one embodiment the first entity and the second entity may include different organizations. In another embodiment the first entity and the second entity may include different divisions of a single organization.

Furthermore the applications may include any computer code e.g. a complete program a partial program a code segment etc. capable of being created by an entity. For example in one embodiment the application may include business logic. As an option the application may be served by the on demand database service.

In one embodiment a plurality of data access limitations may be associated with the application. In this case data access limitations refer to any limitation imposed on the ability to access data. For example the data access limitations may include limitations on at least one action that may be performed on the data of the second entity stored in the database of the on demand database service.

As another example the data access limitations may include limitations on at least one type of the data of the second entity stored in the database of the on demand database service that can be accessed. Furthermore the data access limitations may include a plurality of data access levels.

As an option the data access limitations may be included with the application in a package. In this case the package may be installed by the second entity. Additionally the access to the data of the second entity stored in the database may be subject to the data access limitations.

In one embodiment the data access limitations may be determined by the second entity. In this case the data access limitations may be presented to the second entity for acceptance by the second entity. For example the data access limitations may be presented to the second entity using a user interface. Using the user interface the second entity may be allowed to accept or reject the access limitations. As an option the access to the data of the second entity stored in the database of the on demand database service may be conditionally allowed based on the acceptance.

In still another embodiment an update associated with the application may be received. For example the update may be received as part of the package. After receiving the update the update may be presented to the second entity for acceptance. In this case the access to the data of the second entity stored in the database of the on demand database service may be conditionally allowed utilizing the update based on the acceptance.

As shown a package is created. See operation . In this case the package may be created by a third party service such as an on demand database service provider. Furthermore the package may include a grouping of various objects e.g. applications etc. custom logic and or computer code. For example in various embodiments the package may include a standalone client object to be installed on a client device e.g. a data loader an Outlook edition etc. a custom component e.g. s control a custom tab a web link a URL formula field etc. an Apex trigger or web service e.g. for creating follow up tasks etc. and work flow items.

Once the package is created a profile is defined. See operation . In this case the profile may define an access level of the package. For example in various embodiments the profile may include an all access profile a package access profile or a custom access profile.

In one embodiment the full access profile may allow for total access to information associated with an entity. Additionally the package access profile may allow for access to information applications and data associated with the package. A custom access profile may allow for access to specific portions of the package and or information associated with an entity.

Once the profile has been defined the package is uploaded with the appropriate profile settings. See operation . In this case the package may be uploaded to an on demand database service instance associated with an entity. As an option the on demand database service provider may define an initial profile and upload the package.

As shown it is determined whether a user is authorized to obtain a package. See operation . In this case the user may include any entity using an on demand database service. Additionally the determination of whether the user is authorized to obtain the package may include authenticating the user. In various embodiments such authenticating may include verifying a user name password key and or various other authentication techniques.

If it is determined that the user is authorized to obtain the package the user obtains the package. See operation . The package is then installed. See operation .

In one embodiment the package may include an application. In this case the application may be authenticated before any install is initiated. Thus the installation of the package may be conditionally allowed based on the authentication.

Profiles are then extracted from the package. See operation . In this case the profiles may be utilized to determine limitations on data and or program access for the user. These limitations are then presented to the user. See operation .

It is then determined whether to accept or reject the limitations. See operation . For example a first user may be presented with limitations indicating that an application of a second user will have access to data applications or information upon acceptance of the limitations. Depending on the situation the first user may choose to grant more access or less access to the application of the second user.

If the user is satisfied with the limitations the user may accept the limitations and the limitations will be implemented. See operation . On the other hand the user may choose to reject the limitations and add or remove limitations. In this case the user may present the limitations such that the further limitations are received. See operation . These limitations may then be implemented. In this way the security profile of a user of an on demand database service may be implemented to conditionally allow an application of another user access to data in the on demand database.

For example the user security profile may determine what objects e.g. applications code etc. a user may access and how a user may utilize each object type e.g. create read update and delete CRUD . In one embodiment the user security profile may be defined as part of the definition of a custom user control web link.

For example when a session is issued via a login or merge field the session may be associated with a specific application programming interface API client. When that session is used for an API call an on demand database service may verify that the client applications for that session are authorized to perform the requested action against the provided object type. In some cases the session may be restricted to the actions for which the user is authorized. This may make sessions much less valuable targets for malicious third parties. This may also make sessions less interchangeable increasing the security of security features such as white listing.

In one embodiment the user security profile may be defined by an application developer as part of a component definition and may be included in a package that includes that component definition. In this case developers may be free to request any desirable privileges for the client applications.

As an option when a user installs a package that includes a component with a security profile the user may be presented with an interface as part of the install process which describes the privileges that are required for the application e.g. a summary of the security profile . In this case the user may be permitted to authorize the application in order to complete the installation. When a package is removed the security profile may likewise be removed.

In one embodiment security profiles may be defined at a package level and applied to all components in the package e.g. s controls web links custom clients etc. . In this case to configure the security profile of a component the developer may choose between one of three levels of CRUD access. For example the developer may choose CRUD access to the package e.g. custom objects and standard objects with custom fields from the package custom access e.g. user chooses access level to package objects and standard objects or access to custom objects from outside the package or universal CRUD e.g. access to all objects . In this case describe calls may reflect CRUD access for the application.

In addition to CRUD privileges there may be a section of special privileges that can be enabled disabled for the client application. For example in various embodiments special privileges may include write access to metadata access to describe calls and access to special methods e.g. queryAll undelete merge convertLead process etc. .

In one embodiment the default security profile for new existing applications may be access to the complete API. Developers may choose to reduce the privileges required for an application and may do so at any point in a development cycle. As an option the security profile may be displayed to installers.

In one embodiment API client access may be allowed to any users data as long as the user is logged in with authorized credentials. In another embodiment a user may have the ability to modify access limitations. For example a user may have the ability to modify packageable custom components e.g. s controls links field URL formulas Apex code web services Apex code etc. .

In this way another user may have limited access to only objects or code in the same package or standard entity access which may be limited to the access specified in the profile. Additionally users may control the type of data being accessed by a particular partner client application upgrade or an extension. As an option user or identification tokens e.g. a user name string etc. may allow limited access to data to limit the security risks associated with unrestricted access. During an install permissions in a packaged user security profile may be displayed in read only mode to the installing user. This may give the user the ability to accept or reject the package installation based on the requested permissions.

Table 1 shows standard security profile options given to developer of an application in accordance with one embodiment.

In addition to any access permissions requested by a user there may be a list of objects and Apex packages accessed by packaged Apex code. In one embodiment these values may come from Java Apex wrapping code and may require static analysis of the code.

As an upgrade entity permissions and user permission levels may change to add or remove privileges using an upgrade install. In some cases cache may be cleared after the upgrade install is complete.

In one embodiment there may be two types of packages a base package and package extension. Both types of packages may be upgradeable if the base package type is managed. When a package is upgraded the extension may be added or an extension may be upgraded such that user permissions may change. In case the permissions change an install confirmation interface may highlight the differences between existing and new permissions.

At runtime appropriate access to users may be enforced based on the access level configured in the security profile if one may be defined for the package. If the profile is not defined or if a user does not belong to a package access may be assumed to be only limited by user profile permissions.

Permission checks may be implemented using different techniques. In one embodiment the checks may be performed in the Java level e.g. on entity information mayEdit mayDelete etc. . In another embodiment the checks may be performed in a database at the PL SQL level.

Environment is an environment in which an on demand database service exists. User system may be any machine or system that is used by a user to access a database user system. For example any of user systems can be a handheld computing device a mobile phone a laptop computer a work station and or a network of computing devices. As illustrated in and in more detail in user systems might interact via a network with an on demand database service which is system .

An on demand database service such as system is a database system that is made available to outside users that do not need to necessarily be concerned with building and or maintaining the database system but instead may be available for their use when the users need the database system e.g. on the demand of the users . Some on demand database services may store information from one or more tenants stored into tables of a common database image to form a multi tenant database system MTS . Accordingly on demand database service and system will be used interchangeably herein. A database image may include one or more database objects. A relational database management system RDMS or the equivalent may execute storage and retrieval of information against the database object s . Application platform may be a framework that allows the applications of system to run such as the hardware and or software e.g. the operating system. In an embodiment on demand database service may include an application platform that enables creation managing and executing one or more applications developed by the provider of the on demand database service users accessing the on demand database service via user systems or third party application developers accessing the on demand database service via user systems .

The users of user systems may differ in their respective capacities and the capacity of a particular user system might be entirely determined by permissions permission levels for the current user. For example where a salesperson is using a particular user system to interact with system that user system has the capacities allotted to that salesperson. However while an administrator is using that user system to interact with system that user system has the capacities allotted to that administrator. In systems with a hierarchical role model users at one permission level may have access to applications data and database information accessible by a lower permission level user but may not have access to certain applications database information and data accessible by a user at a higher permission level. Thus different users will have different capabilities with regard to accessing and modifying application and database information depending on a user s security or permission level.

Network is any network or combination of networks of devices that communicate with one another. For example network can be any one or any combination of a LAN local area network WAN wide area network telephone network wireless network point to point network star network token ring network hub network or other appropriate configuration. As the most common type of computer network in current use is a TCP IP Transfer Control Protocol and Internet Protocol network such as the global internetwork of networks often referred to as the Internet with a capital I that network will be used in many of the examples herein. However it should be understood that the networks that the present invention might use are not so limited although TCP IP is a frequently implemented protocol.

User systems might communicate with system using TCP IP and at a higher network level use other common Internet protocols to communicate such as HTTP FTP AFS WAP etc. In an example where HTTP is used user system might include an HTTP client commonly referred to as a browser for sending and receiving HTTP messages to and from an HTTP server at system . Such an HTTP server might be implemented as the sole network interface between system and network but other techniques might be used as well or instead. In some implementations the interface between system and network includes load sharing functionality such as round robin HTTP request distributors to balance loads and distribute incoming HTTP requests evenly over a plurality of servers. At least as for the users that are accessing that server each of the plurality of servers has access to the MTS data however other alternative configurations may be used instead.

In one embodiment system shown in implements a web based customer relationship management CRM system. For example in one embodiment system includes application servers configured to implement and execute CRM software applications as well as provide related data code forms webpages and other information to and from user systems and to store to and retrieve from a database system related data objects and Webpage content. With a multi tenant system data for multiple tenants may be stored in the same physical database object however tenant data typically is arranged so that data of one tenant is kept logically separate from that of other tenants so that one tenant does not have access to another tenant s data unless such data is expressly shared. In certain embodiments system implements applications other than or in addition to a CRM application. For example system may provide tenant access to multiple hosted standard and custom applications including a CRM application. User or third party developer applications which may or may not include CRM may be supported by the application platform which manages creation storage of the applications into one or more database objects and executing of the applications in a virtual machine in the process space of the system .

One arrangement for elements of system is shown in including a network interface application platform tenant data storage for tenant data system data storage for system data accessible to system and possibly multiple tenants program code for implementing various functions of system and a process space for executing MTS system processes and tenant specific processes such as running applications as part of an application hosting service. Additional processes that may execute on system include database indexing processes.

Several elements in the system shown in include conventional well known elements that are explained only briefly here. For example each user system could include a desktop personal computer workstation laptop PDA cell phone or any wireless access protocol WAP enabled device or any other computing device capable of interfacing directly or indirectly to the Internet or other network connection. User system typically runs an HTTP client e.g. a browsing program such as Microsoft s Internet Explorer browser Netscape s Navigator browser Opera s browser or a WAP enabled browser in the case of a cell phone PDA or other wireless device or the like allowing a user e.g. subscriber of the multi tenant database system of user system to access process and view information pages and applications available to it from system over network . Each user system also typically includes one or more user interface devices such as a keyboard a mouse trackball touch pad touch screen pen or the like for interacting with a graphical user interface GUI provided by the browser on a display e.g. a monitor screen LCD display etc. in conjunction with pages forms applications and other information provided by system or other systems or servers. For example the user interface device can be used to access data and applications hosted by system and to perform searches on stored data and otherwise allow a user to interact with various GUI pages that may be presented to a user. As discussed above embodiments are suitable for use with the Internet which refers to a specific global internetwork of networks. However it should be understood that other networks can be used instead of the Internet such as an intranet an extranet a virtual private network VPN a non TCP IP based network any LAN or WAN or the like.

According to one embodiment each user system and all of its components are operator configurable using applications such as a browser including computer code run using a central processing unit such as an Intel Pentium processor or the like. Similarly system and additional instances of an MTS where more than one is present and all of their components might be operator configurable using application s including computer code to run using a central processing unit such as processor system of which may include an Intel Pentium processor or the like and or multiple processor units. A computer program product embodiment includes a machine readable storage medium media having instructions stored thereon in which can be used to program a computer to perform any of the processes of the embodiments described herein. Computer code for operating and configuring system to intercommunicate and to process webpages applications and other data and media content as described herein are preferably downloaded and stored on a hard disk but the entire program code or portions thereof may also be stored in any other volatile or non volatile memory medium or device as is well known such as a ROM or RAM or provided on any media capable of storing program code such as any type of rotating media including floppy disks optical discs versatile disk DVD compact disk CD microdrive and magneto optical disks and magnetic or optical cards nanosystems including molecular memory ICs or any type of media or device suitable for storing instructions and or data. Additionally the entire program code or portions thereof may be transmitted and downloaded from a software source over a transmission medium e.g. over the Internet or from another server as is well known or transmitted over any other conventional network connection as is well known e.g. extranet VPN LAN etc. using any communication medium and protocols e.g. TCP IP HTTP HTTPS Ethernet etc. as are well known. It will also be appreciated that computer code for implementing embodiments of the present invention can be implemented in any programming language that can be executed on a client system and or server or server system such as for example C C HTML any other markup language Java JavaScript ActiveX any other scripting language such as VBScript and many other programming languages as are well known may be used. Java is a trademark of Sun Microsystems Inc. .

According to one embodiment each system is configured to provide webpages forms applications data and media content to user client systems to support the access by user systems as tenants of system . As such system provides security mechanisms to keep each tenant s data separate unless the data is shared. If more than one MTS is used they may be located in close proximity to one another e.g. in a server farm located in a single building or campus or they may be distributed at locations remote from one another e.g. one or more servers located in city A and one or more servers located in city B . As used herein each MTS could include one or more logically and or physically connected servers distributed locally or across one or more geographic locations. Additionally the term server is meant to include a computer system including processing hardware and process space s and an associated storage system and database application e.g. OODBMS or RDBMS as is well known in the art. It should also be understood that server system and server are often used interchangeably herein. Similarly the database object described herein can be implemented as single databases a distributed database a collection of distributed databases a database with redundant online or offline backups or other redundancies etc. and might include a distributed database or storage network and associated processing intelligence.

User system network system tenant data storage and system data storage were discussed above in . Regarding user system processor system A may be any combination of one or more processors. Memory system B may be any combination of one or more memory devices short term and or long term memory. Input system C may be any combination of input devices such as one or more keyboards mice trackballs scanners cameras and or interfaces to networks. Output system D may be any combination of output devices such as one or more monitors printers and or interfaces to networks. As shown by system may include a network interface of implemented as a set of HTTP application servers an application platform tenant data storage and system data storage . Also shown is system process space including individual tenant process spaces and a tenant management process space . Each application server may be configured to tenant data storage and the tenant data therein and system data storage and the system data therein to serve requests of user systems . The tenant data might be divided into individual tenant storage areas which can be either a physical arrangement and or a logical arrangement of data. Within each tenant storage area user storage and application metadata might be similarly allocated for each user. For example a copy of a user s most recently used MRU items might be stored to user storage . Similarly a copy of MRU items for an entire organization that is a tenant might be stored to tenant storage area . A UI provides a user interface and an API provides an application programmer interface to system resident processes to users and or developers at user systems . The tenant data and the system data may be stored in various databases such as one or more Oracle databases.

Application platform includes an application setup mechanism that supports application developers creation and management of applications which may be saved as metadata into tenant data storage by save routines for execution by subscribers as one or more tenant process spaces managed by tenant management process for example. Invocations to such applications may be coded using PL SOQL that provides a programming language style interface extension to API . A detailed description of some PL SOQL language embodiments is discussed in commonly owned U.S. Provisional Patent Application 60 828 192 entitled PROGRAMMING LANGUAGE METHOD AND SYSTEM FOR EXTENDING APIS TO EXECUTE IN CONJUNCTION WITH DATABASE APIS by Craig Weissman filed Oct. 4 2006 which is incorporated in its entirety herein for all purposes. Invocations to applications may be detected by one or more system processes which manage retrieving application metadata for the subscriber making the invocation and executing the metadata as an application in a virtual machine.

Each application server may be communicably coupled to database systems e.g. having access to system data and tenant data via a different network connection. For example one application server might be coupled via the network e.g. the Internet another application server might be coupled via a direct network link and another application server might be coupled by yet a different network connection. Transfer Control Protocol and Internet Protocol TCP IP are typical protocols for communicating between application servers and the database system. However it will be apparent to one skilled in the art that other transport protocols may be used to optimize the system depending on the network interconnect used.

In certain embodiments each application server is configured to handle requests for any user associated with any organization that is a tenant. Because it is desirable to be able to add and remove application servers from the server pool at any time for any reason there is preferably no server affinity for a user and or organization to a specific application server . In one embodiment therefore an interface system implementing a load balancing function e.g. an F5 Big IP load balancer is communicably coupled between the application servers and the user systems to distribute requests to the application servers . In one embodiment the load balancer uses a least connections algorithm to route user requests to the application servers . Other examples of load balancing algorithms such as round robin and observed response time also can be used. For example in certain embodiments three consecutive requests from the same user could hit three different application servers and three requests from different users could hit the same application server . In this manner system is multi tenant wherein system handles storage of and access to different objects data and applications across disparate users and organizations.

As an example of storage one tenant might be a company that employs a sales force where each salesperson uses system to manage their sales process. Thus a user might maintain contact data leads data customer follow up data performance data goals and progress data etc. all applicable to that user s personal sales process e.g. in tenant data storage . In an example of a MTS arrangement since all of the data and the applications to access view modify report transmit calculate etc. can be maintained and accessed by a user system having nothing more than network access the user can manage his or her sales efforts and cycles from any of many different user systems. For example if a salesperson is visiting a customer and the customer has Internet access in their lobby the salesperson can obtain critical updates as to that customer while waiting for the customer to arrive in the lobby.

While each user s data might be separate from other users data regardless of the employers of each user some data might be organization wide data shared or accessible by a plurality of users or all of the users for a given organization that is a tenant. Thus there might be some data structures managed by system that are allocated at the tenant level while other data structures might be managed at the user level. Because an MTS might support multiple tenants including possible competitors the MTS should have security protocols that keep data applications and application use separate. Also because many tenants may opt for access to an MTS rather than maintain their own system redundancy up time and backup are additional functions that may be implemented in the MTS. In addition to user specific data and tenant specific data system might also maintain system level data usable by multiple tenants or other data. Such system level data might include industry reports news postings and the like that are sharable among tenants.

In certain embodiments user systems which may be client systems communicate with application servers to request and update system level and tenant level data from system that may require sending one or more queries to tenant data storage and or system data storage . System e.g. an application server in system automatically generates one or more SQL statements e.g. one or more SQL queries that are designed to access the desired information. System data storage may generate query plans to access the requested data from the database.

Each database can generally be viewed as a collection of objects such as a set of logical tables containing data fitted into predefined categories. A table is one representation of a data object and may be used herein to simplify the conceptual description of objects and custom objects according to the present invention. It should be understood that table and object may be used interchangeably herein. Each table generally contains one or more data categories logically arranged as columns or fields in a viewable schema. Each row or record of a table contains an instance of data for each category defined by the fields. For example a CRM database may include a table that describes a customer with fields for basic contact information such as name address phone number fax number etc. Another table might describe a purchase order including fields for information such as customer product sale price date etc. In some multi tenant database systems standard entity tables might be provided for use by all tenants. For CRM database applications such standard entities might include tables for Account Contact Lead and Opportunity data each containing pre defined fields. It should be understood that the word entity may also be used interchangeably herein with object and table .

In some multi tenant database systems tenants may be allowed to create and store custom objects or they may be allowed to customize standard entities or objects for example by creating custom fields for standard objects including custom index fields. U.S. patent application Ser. No. 10 817 161 filed Apr. 2 2004 entitled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM which is hereby incorporated herein by reference teaches systems and methods for creating custom objects as well as customizing standard objects in a multi tenant database system. In certain embodiments for example all custom entity data rows are stored in a single multi tenant physical table which may contain multiple logical tables per organization. It is transparent to customers that their multiple tables are in fact stored in one large table or that their data may be stored in the same table as the data of other customers.

It should be noted that any of the different embodiments described herein may or may not be equipped with any one or more of the features set forth in one or more of the following published applications US2003 0233404 titled OFFLINE SIMULATION OF ONLINE SESSION BETWEEN CLIENT AND SERVER filed Nov. 4 2002 US2004 0210909 titled JAVA OBJECT CACHE SERVER FOR DATABASES filed Apr. 17 2003 now issued U.S. Pat. No. 7 209 929 US2005 0065925 titled QUERY OPTIMIZATION IN A MULTI TENANT DATABASE SYSTEM filed Sep. 23 2003 US2005 0223022 titled CUSTOM ENTITIES AND FIELDS IN A MULTI TENANT DATABASE SYSTEM filed Apr. 2 2004 US2005 0283478 titled SOAP BASED WEB SERVICES IN A MULTI TENANT DATABASE SYSTEM filed Jun. 16 2004 and or US2006 0206834 titled SYSTEMS AND METHODS FOR IMPLEMENTING MULTI APPLICATION TABS AND TAB SETS filed Mar. 8 2005 which are each incorporated herein by reference in their entirety for all purposes.

While the invention has been described by way of example and in terms of the specific embodiments it is to be understood that the invention is not limited to the disclosed embodiments. To the contrary it is intended to cover various modifications and similar arrangements as would be apparent to those skilled in the art. Therefore the scope of the appended claims should be accorded the broadest interpretation so as to encompass all such modifications and similar arrangements.

