---

title: Permanent connection oriented communication using parallel single connection circuits
abstract: Methods, systems, and techniques for providing a pseudo permanent communications connection using temporary connection protocols are described. Example embodiments provide a Enhanced Communications Layer that provides such connections by means of a layer incorporated in the client side and server side communications stacks. The ECL maintains a pool of connections that are opened and used in a staggered fashion to reduce the amount of connection setup and teardown.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09614916&OS=09614916&RS=09614916
owner: VMware, Inc.
number: 09614916
owner_city: Palo Alto
owner_country: US
publication_date: 20150501
---
This application is a Continuation of U.S. application Ser. No. 13 449 141 filed Apr. 17 2012 entitled PERMANENT CONNECTION ORIENTED COMMUNICATION USING PARALLEL SINGLE CONNECTION CIRCUITS which claims the benefit of U.S. Provisional Application No. 61 528 634 entitled PERMANENT CONNECTION ORIENTED COMMUNICATION USING PARALLEL SINGLE CONNECTION CIRCUITS filed on Aug. 29 2011 both of which are incorporated herein by reference in its entirety.

The present disclosure relates to methods techniques and systems for providing pseudo permanent connections using communications circuits that do not survive beyond a single exchange and in particular to methods techniques and systems for providing pseudo permanent connections that are maintained across data exchanges using a connection protocol such as HTTP.

HTTP is a type of single connection per single payload protocol. That is whenever data is transferred in the payload of a packet and thereafter received the connection is shut down. By design of the HTTP protocol a connection is setup and made a request e.g. an HTTP request is transmitted from a client device client to a server computing system server a response e.g. an HTTP response from server is received at the client and the connection is closed. The request may be to request data from the server e.g. an HTTP GET for example an html page at a designated uniform resource identifier uri or url or the request may be to transmit send forward communicate etc. data to the server e.g. an HTTP POST . The response from the server is typically to send the html page located at the uri specified with the response or to receive the data sent by the client. The payload of an HTTP packet contains the data e.g. the uri posted data or html page .

There are a couple of exceptions to this. In one extension to HTTP a multi part response to an HTTP request allows more than one response to be received for a single connection. However the connection is still is effectively one HTTP request per connection because a client cannot interpret and re send data based on the response s without making another connection to the server. In addition some browsers such as Internet Explorer which support multiple payloads include a size limitation on certain elements of the multi part message.

Comet style programming which provides a web application model improves or eliminates connection setup time by making the connection ahead of time and keeping the connection open in anticipation that data that will be sent to a browser. This model anticipates that a server will push data to a browser without the browser or other application executing on the client explicitly requesting it using an HTTP request. It is a type of push protocol. But even these connections eventually have to be closed.

Use of HTTP connections is not efficient due to the overhead on both the client and the server in setting up and closing out the connections. Use of such connections also introduces latency in communication between the client and server because each connection has to be established before a request can be made. Also there is no provision for providing state information across connections as each connection is independent of another. Hence there is no support for persistency or state full information across connections unless duplicate state information is passed in a subsequent request or state identifiers are used.

Embodiments described herein provide enhanced computer and network based methods systems and techniques for providing pseudo permanent connection oriented communication using communication circuits that do not survive beyond a single exchange of data between a client device or client computing system client and a server computing system server . Example embodiments provide an enhanced communications layer ECL which provides client server communication that emulates pseudo permanent connections in a single payload connection protocol environment such as that available with a connection protocol such as HTTP. The ECL offers pseudo permanent connections by maintaining a pool of open connections which the enhanced communication layer uses in a staggered fashion to service client requests in a manner that reduces the latency caused by connection setup and teardown. Different embodiments may implement the pool of connections utilizing any number of actual connections even though examples are shown herein with a small number of connections e.g. three connections . A client portion ECL is integrated into the communications stack of the client logic of a client system such that the communication protocol requests are routed automatically through the ECL instead of directly to the server logic. Similarly a server portion of the ECL is integrated into the communications stack of server logic of a server system such that it receives the communication protocol requests from the client over one of the indicated pool of connections in a fashion that allows the server to respond as if the requests were maintained over a single permanently open connection.

The client device includes a client display manager such as a browser or other application connected to a network that includes server . The client also includes a client side Enhanced Communication Layer for providing the client side of the pseudo permanent connections described herein including opening connections to the server to send and receive data. In a typical embodiment the ECL is integrated into the client for example through a browser plugin or by using a scripting language or compiled language to incorporate the ECL into the HTTP client side stack.

When a client requests data it first uses the ECL to initiate a connection event . In response the ECL returns a connection identifier event that is used to identify the pseudo permanent connection. Next an HTTP request is sent event which is intercepted by the client side ECL in order to communicate with the server side ECL to use one or more connections from connection pool to send a request for data to the server . After the ECL receives data from the server the data is returned to the client display manager event .

The setup of the connections in the connection pool is described further below with respect to . In summary spare connections are established so that the client does not require connection setup or take down time and can view and use the multiple connections as if they were a single pseudo permanent connection. The client display manager does not need to know that multiple data connections are being established to provide the single pseudo permanent connection connection setup and management is performed transparently by the ECL and . Also although use of the ECL and ECL has been described in with reference to the HTTP protocol as an example the ECL may be used with and incorporated into any other protocol that provides single connection per payload type of connections or even with other multiple connection type protocols.

Also different embodiments may implement the pool of single connection circuits used to implement the pseudo permanent connection utilizing any number of connection circuits even though examples are shown herein with a small number of connections. For example in some embodiments 4 or 6 circuits may be used or even 100.

In one example embodiment each subsequent connection e.g. connection B is started before the data transfer period of the prior connection e.g. connection A . In other embodiments each subsequent connection is started at other times that overlap the period of existence of another connection such as during setup during data transfer during teardown etc.

Although the techniques of the ECL are generally applicable to any type of request response protocol that employs a single payload connection these techniques may be incorporated in other systems as well including those that already have the ability to create permanent or semi permanent connections. Also although certain terms are used primarily herein other terms could be used interchangeably to yield equivalent embodiments and examples. In addition terms may have alternate spellings which may or may not be explicitly mentioned and all such variations of terms are intended to be included.

Example embodiments described herein provide applications tools data structures and other support to implement pseudo permanent data connections. In the following description numerous specific details are set forth such as data formats and code sequences etc. in order to provide a thorough understanding of the described techniques. The embodiments described also can be practiced without some of the specific details described herein or with other specific details such as changes with respect to the ordering of the code flow different code flows etc. Thus the scope of the techniques and or functions described are not limited by the particular order selection or decomposition of steps described with reference to any particular routine.

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the ECL may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and one or more network connections . The ECL is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the ECL may be stored on and or transmitted over the other computer readable media . The components of the ECL preferably execute on one or more CPUs and manage the generation and use of a connection pool as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software may not provide means for user input or display.

In a typical embodiment the ECL includes an Connection Management component here shown as HTTP Connection Management a connection data interface for implementing connection logic in this example an HTTP stack and a connection state data repository . In addition an application programming interface API to the ECL may be provided. Each of these components operate as described elsewhere herein and cooperate to provide a pseudo permanent communications connection by intercepting data requests and controlling responses thereto.

In at least some embodiments some of the connection management may be provided external to the ECL and available potentially over one or more networks . Other and or different modules may be implemented. In addition the ECL may interact via a network with one or more client computing systems . Also of note the connection state data repository may be provided external to the ECL as well for example in a knowledge base accessible over one or more networks .

The computing system may comprise one or more server and or client computing systems and may span distributed locations. In addition each block shown may represent one or more such blocks as appropriate to a specific embodiment or may be combined with other blocks. Moreover the various blocks of the ECL may physically reside on one or more machines which use standard e.g. TCP IP or proprietary interprocess communication mechanisms to communicate with each other.

In the embodiment shown computer system comprises a computer memory memory a display one or more Central Processing Units CPU Input Output devices e.g. keyboard mouse CRT or LCD display etc. other computer readable media and one or more network connections . The ECL is shown residing in memory . In other embodiments some portion of the contents some of or all of the components of the ECL may be stored on and or transmitted over the other computer readable media . The components of the ECL preferably execute on one or more CPUs and manage the generation and use of a connection pool as described herein. Other code or programs and potentially other data repositories such as data repository also reside in the memory and preferably execute on one or more CPUs . Of note one or more of the components in may not be present in any specific implementation. For example some embodiments embedded in other software may not provide means for user input or display.

In a typical embodiment the ECL includes an Connection Management component here shown as HTTP Connection Management a connection data interface for implementing connection logic in this example an HTTP stack and a connection state data repository . In addition an application programming interface API to the ECL may be provided. Each of these components operate as described elsewhere herein and cooperate to provide a pseudo permanent communications connection by intercepting data requests and controlling responses thereto.

In at least some embodiments some of the connection management may be provided external to the ECL and available potentially over one or more networks . Other and or different modules may be implemented. In addition the ECL may interact via a network with one or more server computing systems . Also of note the connection state data repository may be provided external to the ECL as well for example in a knowledge base accessible over one or more networks .

In an example embodiment components modules of the ECL as shown in are implemented using standard programming techniques. However a range of programming languages known in the art may be employed for implementing such example embodiments including representative implementations of various programming language paradigms including but not limited to object oriented e.g. Java C C Smalltalk etc. functional e.g. ML Lisp Scheme etc. procedural e.g. C Pascal Ada Modula etc. scripting e.g. Perl Ruby Python JavaScript VBScript etc. declarative e.g. SQL Prolog etc. etc.

The embodiments described above may also use well known or proprietary synchronous or asynchronous client server computing techniques. However the various components may be implemented using more monolithic programming techniques as well for example as an executable running on a single CPU computer system or alternately decomposed using a variety of structuring techniques known in the art including but not limited to multiprogramming multithreading client server or peer to peer running on one or more computer systems each having one or more CPUs. Some embodiments are illustrated as executing concurrently and asynchronously and communicating using message passing techniques. Equivalent synchronous embodiments are also supported by an implementation.

In addition programming interfaces to the data stored as part of the ECL can be available by standard means such as through C C C and Java APIs libraries for accessing files databases or other data repositories through scripting languages such as XML or through Web servers FTP servers or other types of servers providing access to stored data. The data repositories such as repositories and or may be implemented as one or more database systems file systems or any other method known in the art for storing such information or any combination of the above including implementation using distributed computing techniques.

Also the example ECL may be implemented in a distributed environment comprising multiple even heterogeneous computer systems and networks. In additional the server and or client may be physical or virtual computing systems and may reside on the same physical system. Also one or more of the modules may themselves be distributed pooled or otherwise grouped such as for load balancing reliability or security reasons. Different configurations and locations of programs and data are contemplated for use with techniques of described herein. A variety of distributed computing techniques are appropriate for implementing the components of the illustrated embodiments in a distributed manner including but not limited to TCP IP sockets RPC RMI HTTP Web Services XML RPC JAX RPC SOAP etc. etc. Other variations are possible. Also other functionality could be provided by each component module or existing functionality could be distributed amongst the components modules in different ways yet still achieve the functions described herein.

Furthermore in some embodiments some or all of the components of the ECL may be implemented or provided in other manners such as at least partially in firmware and or hardware including but not limited to one ore more application specific integrated circuits ASICs standard integrated circuits controllers e.g. by executing appropriate instructions and including microcontrollers and or embedded controllers field programmable gate arrays FPGAs complex programmable logic devices CPLDs etc. Some or all of the system components and or data structures may also be stored e.g. as executable or other machine readable software instructions or structured data on a computer readable medium e.g. a hard disk a memory a network or a portable media article to be read by an appropriate drive or via an appropriate connection . Some or all of the components and or data structures may be stored on tangible storage mediums. Some or all of the system components and data structures may also be transmitted in a non transitory manner via generated data signals e.g. as part of a carrier wave or other analog or digital propagated signal on a variety of computer readable transmission mediums such as media Y05 including wireless based and wired cable based mediums and may take a variety of forms e.g. as part of a single or multiplexed analog signal or as multiple discrete digital packets or frames . Such computer program products may also take other forms in other embodiments. Accordingly embodiments of this disclosure may be practiced with other computer system configurations.

As described in one of the functions of an ECL is to manage temporary data connections in a manner that can be used to emulate a pseudo permanent data communications connection.

More specifically in block the logic determines whether the client application e.g. web browser or other application invoking the communications protocol has requested a new connection. If so the logic returns a new connection identifier in block and then returns to block to wait for the next event. Otherwise the logic continues in block .

In block the logic determines whether this is a first request on the pseudo permanent connection to send data to the server. If so the logic continues at block otherwise continues at block to see if it is another type of event.

In block the logic determines whether parallel execution or threading are available and if so starts setup of a second connection because two connections can be used simultaneously . If not no parallel execution or threading the logic determines whether it can perform and initiates an asynchronous callback such that it can be notified of completion of use of a connection instead of having to block wait until the connection use finishes. It then initiates setup of a second connection and continues to block .

In block the logic sends the first data request over the first connection and either waits blocks for its completion or to be notified asynchronously via the callback that the first data request is complete. The logic then continues to block .

In other embodiments blocks and are modified to start up the second or more connections after instead of before the logic sends the first data request of the first connection. Other alternatives such as the second connection occurring sometimes before and sometimes after are possible. Thus it is possible to spawn different behaviors depending upon a use of threaded parallel asynchronous or synchronous communication. The server logic as described with respect to is used to make sure that the sequence order of the requests to responses is preserved.

In block the logic determines whether multi part payloads are supported by the protocol with multi part requests client side and if so keeps the first connection open otherwise closes the first connection. The logic then continues to block to wait for the next event.

In block the logic determines whether it has received a second or subsequent data request to send data to the server. If so it continues to block otherwise returns to block to wait for the next event.

In block the logic determines whether the first data request to send data to the server has completed the blocking has ended and or the logic has received a callback . If multi part requests are supported then the first connection is still open then the logic proceeds to block other proceeds to block .

In block the logic uses the open first connection to send the send data request to send data to the server and proceeds to block to determine whether to start another connection.

In block the logic determines whether the first data request to send data has not completed or whether the first connection has been closed. If so either case the logic proceeds to block to use the second or next subsequent data connection as soon as it finishes its setup and proceeds to block to determine whether to start another connection. Otherwise the logic proceeds back to block to wait for the first data request to send data to complete.

Of note some browsers support a maximum number of connections to the same server. This may affect the number of connections that are used to implement the pseudo permanent connection. In addition in some embodiments the client side ECL may determine or be notified that that requests may be delivered out of sequence and still be handled properly by the server side ECL . Thus more parallel connections between the client and server may be used to provide greater bandwidth. In some embodiments two four or even a greater number of connections may be employed to provide a pseudo permanent connection. In yet other embodiments requests and or responses may be delivered and or responded to out of sequence and the logic tasked with keeping track of any sequencing.

In block the logic responds to a request for data e.g. using HTTP response and by obtaining the requested data in order to forward it to the client using the connection associated with that sequence number. Other processing is performed using known TCP IP style of communications.

Also although not shown in the ECL may perform other processing such as automatically handling data compression and encryption in a manner that is transparent to the client and or server. Also at any time a connection may time out or fail. The ECL automatically makes new connections and retries without requiring the client application or server logic to intercept it is handled inside of the ECL . Notification of such may be provided to the endpoints the client application or server logic for example for logging purposes. These notifications may be ignored or suppressed.

The size of the pool of connections as used by the logic of may vary in different embodiments. In addition different algorithms may be employed to minimize the resulting latency as related to the rate of data that is sent.

All of the above U.S. patents U.S. patent application publications U.S. patent applications foreign patents foreign patent applications and non patent publications referred to in this specification and or listed in the Application Data Sheet including but not limited to 61 528 634 entitled PERMANENT CONNECTION ORIENTED COMMUNICATION USING PARALLEL SINGLE CONNECTION CIRCUITS filed on Aug. 29 2011 which is incorporated herein by reference in its entirety.

From the foregoing it will be appreciated that although specific embodiments have been described herein for purposes of illustration various modifications may be made without deviating from the spirit and scope of the invention. For example the methods systems and techniques for presenting dynamically changing images discussed herein are applicable to architectures or environments other than a Web based environment. Also the methods systems and techniques discussed herein are applicable to differing protocols communication media optical wireless cable etc. and devices such as wireless handsets electronic organizers personal digital assistants tablet computers smart phones portable email machines game machines pagers navigation devices such as GPS receivers etc. 

