---

title: Peer to peer enterprise file sharing
abstract: Disclosed are various embodiments for facilitating the distribution of files from a file repository. Files from a file repository can be distributed via peer to peer transmissions where the peer devices can perform authentication functions. The authentication can be performed based upon metadata associated with the files as well as based upon authentication requests submitted to an authentication server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09584508&OS=09584508&RS=09584508
owner: AirWatch LLC
number: 09584508
owner_city: Atlanta
owner_country: US
publication_date: 20150415
---
Benefit is claimed under 35 U.S.C. 119 a d to Foreign application Serial No. 6630 CHE 2014 filed in India entitled PEER TO PEER ENTERPRISE FILE SHARING on Dec. 27 2014 by AIRWATCH LLC which is herein incorporated in its entirety by reference for all purposes

This application is also related to U.S. patent application Ser. No. 14 686 802 entitled PEER TO PEER ENTERPRISE FILE SHARING and to U.S. patent application Ser. No. 14 686 827 entitled PEER TO PEER ENTERPRISE FILE SHARING which au assigned to the assignee to the assignee of this application and have been filed on the same day as this application.

An enterprise and or its users may wish to store documents or other files in a file repository. Files associated with a particular user can be stored in a file repository and accessible from an application executed on a user s device or through a browser based user interface. An enterprise may also wish to secure access to files associated with users by requiring a password or another authentication mechanism in order to access a particular file. In some cases access to a file repository can be authenticated by an authentication mechanism that ensures that users can access files to which they are entitled.

The present disclosure relates to retrieving files from a file repository by employing a peer to peer distribution mechanism. In one example a file management application executing on a client device can obtain a file to which the client device or a user associated with the client device is entitled to access by receiving the file from another client device that may have a copy of the file rather than from a file repository in which the file is archived or stored. In this way accessibility to the file repository may not be required in order to access a particular file to which a user is entitled to access because another client device or a peer device that may also have a copy of the file can directly provide the file to the requesting client device.

In some scenarios the file repository may be operated or provided by an entity that is not controlled by the user of the client device and or the operator of a management system that performs management functions on behalf of the client device. In embodiments of the disclosure the management system can authorize usage of a file repository on behalf of a user perform user authentication functions data security or encryption functions as well as other device management functions on behalf of an enterprise in order to manage devices that are assigned to users of the enterprise. Accordingly embodiments of the disclosure can facilitate peer to peer transfer of files that are associated with a file repository but in a way that also enforces security and access restrictions associated with the files which can be desirable in an enterprise or corporate environment.

With reference to shown is a networked environment according to various embodiments. The networked environment shown in includes a computing environment a client device a file repository and potentially other components which are in data communication with each other over a network . The network includes for example the Internet one or more intranets extranets wide area networks WANs local area networks LANs wired networks wireless networks other suitable networks or any combination of two or more such networks. Such networks ma comprise satellite networks cable networks Ethernet networks telephony networks and or other types of networks.

The computing environment may comprise for example a server computer or any other system providing computing capabilities. Alternatively the computing environment may employ multiple computing devices that may be arranged for example in one or more server banks computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the computing environment may include multiple computing devices that together form a hosted computing resource a grid computing resource and or any other distributed computing arrangement. In some cases the computing environment may operate as at least a portion of an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time. The computing environment may also include or be operated as one or more virtualized computer instances that are executed in order to perform the functionality that is described herein.

Various systems may be executed in the computing environment . Also various data is stored in a data store that is accessible to the computing environment . The data store shown in may be representative of multiple data stores . The data stored in the data store is associated with the operation of the various components described below.

A management system and or other systems may be executed in the computing environment . The management system may be executed to manage and or oversee the operation of multiple client devices . In some embodiments an enterprise such as one or more companies or other organizations may operate the management system to oversee and or manage the operation of the client devices of its employees contractors customers etc.

The management system may include a management console a file storage application and or other components. The management console may facilitate administration of devices of an enterprise by administrators via the management system . For example the management console may generate one or more user interfaces that are rendered on a display device to facilitate interaction with the management system . Such user interfaces may facilitate an administrator s inputting of commands or other information for the management system . Additionally the user interfaces my include presentations of statistics or other information regarding the client devices that are managed by the management system .

The file storage application may obtain and store various information regarding files that are associated with one or more client devices and or the management system and that are stored in the file repository . The data stored in the data store may include file data managed device data and or other information. The file data may include entries for each file that is stored in a file repository on behalf of users of an enterprise. For example file data can include information regarding the storage locations of files encryption keys permissions e.g. access rights the file version access history and or other information associated with files. In some embodiments file data includes metadata for a file that includes a file hash that is generated according to a predetermined hash function unique identifier for the file the storage location of the file in the file repository an encryption and or decryption key use permissions the file version access history and or other information for a particular file. For example the metadata can identify which users or client devices of the enterprise are entitled to access a particular file that is stored in the file repository .

The managed device data may include information regarding the client devices that are managed and or controlled by the management system . The managed device data for a particular client device may include for example the identification of a use assigned to the client device the identification of applications that are installed in the client device historical data regarding the operation of the client device and or other information.

In addition the managed device data for a particular client device may include a set of one or more compliance rules that may be specified by the management system . Each compliance rule may specify one or more conditions that must be satisfied for as client device to be deemed complaint with the compliance rule. As a non limiting example a compliance rule may specify that particular applications au are prohibited from being installed on a client device . As another non limiting example a compliance rule may specify that lock screen is required to be generated when the client device is awoken from a low power e.g. sleep state and that a passcode is required for a user to unlock the lock screen. Additionally one or more compliance rules may be based on time geographical location and or other predefined conditions such that certain functionality associated with the client device may or may not be permuted based upon the time geographical location and or other predefined condition.

The client device is representative of multiple client devices that may be coupled to the network . The client device may comprise for example a processor based system such as a computer system. Such a computer system may be embodied in the form of a desktop computer a laptop computer a personal digital assistant a mobile phone e.g. a smartphone a set top box a music player a web pad a tablet computer system a game console an electronic book reader or any other device with like capability. The client device may include a display as well as one or more input devices such as a mouse touch pad etc. that facilitates a user input or other types of data input into the client device .

The client device may be configured to execute a file management application a management component and or other components. The file management application may comprise for example one or more programs that access manage edit and or perform other functions with respect to files. As non limiting examples a file may include an image video a word processing document a spreadsheet etc. In some embodiments the file management application may be regarded as being a content locker because the file management application may cause access to one or more of the files to be restricted. The file management application may generate one or more user interfaces that facilitate a user of the client device being presented with the information that is represented in files. For example the file management application may render files such as images videos etc. In addition one or more user interfaces for the file management application may facilitate a user editing the content of a file such as a word processing document spreadsheet images etc.

In addition the file management application can facilitate peer to peer transmission of files between client devices of different users as well as authentication of a user or a client device as a part of such a peer to peer transmission. As will be described herein such authentication can be performed with or without assistance from an authentication server like the computing environment executing the management system and or the file storage application . In order words the file management application can perform client side authentication of another client device that is requesting that the file management application transmit a particular file to the client device . Such client side authentication can be performed based upon the metadata associated with a file that can be obtained from the computing environment and or the file repository .

The management component may be executed in the client device to monitor and manage at least a portion of the data applications hardware components etc. for the client device . The management component may also identify whether the client device is operating in accordance with the one or more compliance rules that have been assigned to the client device . In some embodiments the management component may function as a device management service that operates as a portion of an operating system for the client device . In other embodiments the management component may function as a device management agent that operates in the application layer of the client device and that monitors at least some of the activity being performed in the client device . In other embodiments the management component may comprise an application wrapper that interfaces with a software component to facilitate overseeing monitoring and or managing one or more resources of the client device . Alternatively the management component may be a portion of an application that was developed for example using a Software Development Kit SDK that facilitates the inclusion of functionality within the application that monitors and or manages at least a portion of the resources for the client device .

The management component may be executed by the client device automatically upon startup of the client device . Additionally the management component may run as a background process m the client device . Accordingly the management component may execute without user intervention in some embodiments. Additionally the management component may communicate with the management system in order to facilitate the management system managing the client device .

The file repository may comprise for example a server computer or any other system providing computing capabilities. Alternatively the file repository may employ multiple computing devices that may be arranged for example in one or more server banks computer banks or other arrangements. Such computing devices may be located in a single installation or may be distributed among many different geographical locations. For example the file repository may include multiple computing devices that together form a hosted inning resource a grid computing resource and or any other distributed computing arrangement. In some cases the file repository may operate as at least a portion of an elastic computing resource where the allotted capacity of processing network storage or other computing related resources may vary over time. The file repository may also include or be operated as one or more virtualized computer instances that are executed in order to perform the functionality that is described herein.

The file repository may be operated by an entity that is separate from an entity operating the computing environment such as a storage provider. The storage provider may offer data storage as a service. In other words the storage provider may provide data storage for multiple users such as the users of the client devices and or the entity that operates the computing environment . A user of a client device and or the entity that operates the computing environment may enroll in such a data storage service.

Various systems may be executed in the file repository . Also various data is stored in a file repository data store that is accessible to the computing environment . The file repository data store shown in may be representative of multiple file repository data stores . The file repository data store may store files and or other data for several users.

A data storage system and or other systems may be executed in the file repository . The data storage system may facilitate and manage the storage of data in the file repository data store . For example the data storage system may provide an application programming interface API and or any other suitable interface that facilitates communication between the data storage system and the client device and or management system . In addition the data storage system may authenticate requests to store ands retrieve data. Additionally the data storage system may perform load balancing processes to for example facilitate the transfer of data between the file repository data store and other components.

Next a general description of the operation of the various components of the networked environment is provided. To begin the file storage application can facilitate the storage of files in a file repository on behalf of a user enterprise or organization. For example a user may upload a file or cause a file to be uploaded by an application configured to store files in association with a file storage account or quota of a user. Such a file can be received by the file storage application and or the data storage system . In some embodiments the file storage application can generate or store metadata that corresponds to the file and the file can be stored by or on behalf of the file storage application in the file repository . The metadata can include an identifier for the file a file hash associated with the file such as a message digest algorithm MD5 hash value or a hash value computed using any other hash function. The metadata can also identify users who are entitled to access or download a particular file that is stored in the file repository and other properties associated with the file. In some scenarios a file may be stored in the file repository by one user and made available to other users of the enterprise. In such a scenario the file storage application can entitle these other users to the file by updating access permissions stored in the metadata as well as in the file repository .

Accordingly in order to obtain or access a file stored in the file repository the file management application can generate a request to obtain the file that is transmitted to the file storage application and or the data storage system executed by the file repository . The data storage system and or the file storage application or an authentication server executed by either the computing environment or the file repository can determine whether a user associated with the client device is entitled to access the file. If so then the data storage system can transmit the file to the client device executing the file management application .

In one embodiment the file management application can request all or a portion of the metadata associated with one or more files that the user associated with the client device is entitled to access. The metadata can include a file hash associated with the various files that the user is entitled to access as well as potentially a reference to a location within the file repository in which the file is stored. Embodiments of the disclosure can leverage this metadata to facilitate peer to peer transmission of files that are requested by a particular client device as well as authentication of the client device requesting access to the particular file. Accordingly in one embodiment it may be the case that another client device coupled to the network may have or store a copy of a particular file requested b the file management application on behalf of a user. Alternatively another client device may not have or store a copy of a particular file requested but may a more optimal client device for obtaining the file. For example this other client device may be connected to a Wifi network while the requesting client device may only be connected to a cellular network. Therefore the file management application of a requesting client device can broadcast a request to obtain a particular file to other client devices that may be coupled to the network . Such a request can include an identifier associated with the file with which the file can be identified.

Another client device which can be referred to as a sender client device can respond to such a request with an indication that the sender client device has or is capable of obtaining a copy of the requested file and that it can transmit at least a portion of the file to the requesting client device . Such a request to obtain the file can be broadcast by the requesting client device to other client devices by various mechanisms. In one embodiment such a request can be broadcast to a broadcast network address. In another embodiment such a request can comprise a multicast request. In other words requesting client device can transmit a request to multiple client devices based upon the physical location or network location of other diem devices . In some embodiments such a request can be transmitted using a localized communication interface such as a Bluetooth capability of the client devices . The request that is broadcast by the requesting diem device can include various device status parameters as well as an identifier with which the requested file can be identified.

If a particular client device receiving such a request has a copy of the requested file it can respond to the request with an interrogator response. The interrogator response can include device status parameters associated with the client device receiving the request. In one embodiment the device status parameters associated with the client device can be detected by the management component . The device status parameters included within the request for the file and or the interrogator response can include information describing the sender client device for example a device operating system one or more supported file transfer protocols a battery life parameter indicating how much remaining battery life a client device possesses a device manufacturer and other device information. Because a requesting client device may receive more than one interrogator response to a request for a file the requesting client device can select a sender client device based upon the device status parameters included within the interrogator response.

For example the sender client device can be selected based upon compliance of the sender client device with one or more compliance rules. If a particular client device does not comply with a particular compliance rule such as a rule with respect to whether the sender client device has been modified or has certain software installed thereon the client device may not be selected as the sender client device . Compliance with a compliance rule can also take the form of a determination with respect to whether matches device status parameters of a requesting client device . For example the sender client device can be selected based upon whether the operating system device manufacturer or any other property of the sender client device matches that of the requesting client device . The sender client device can also be selected based upon whether a particular file transfer protocol is supported by both devices. For example if both devices support Wi Fi direct or any particular proprietary or open file transfer protocol the requesting client device can select the sender client device based upon this parameter. Additionally the sender client device can also be selected based upon network latency properties with respect to communications between the requesting client device and sender client device . In one embodiment the responding client device having the least network latency with respect to the requesting client device can be selected as the sender client device . As another example the sender client device can be selected based upon a physical proximity of the sender client device to the requesting client device based upon a physical location of the sender client device . Additionally the sender client device can also be selected based upon a signal strength with respect to a communication interface such as Bluetooth or Wi Fi between the sender client device and requesting client device .

The sender client device can also be selected based upon a degree of battery life a charging state i.e. whether the device is charging or any other status parameter of the sender client device . For example a client device with relatively low battery life or battery life that does not meet a particular threshold may not be selected so as to avoid further reducing the battery life of the client device . In some embodiments the client device receiving a broadcasted request for a file can also avoid generating and or transmitting an interrogator response if its battery life does not meet a threshold. In this way a potential sender client device can avoid having itself considered as the sender client device in response to a request for a file if battery life or other status parameters or conditions are not met such as compliance with one or more compliance rules distributed to client devices by the management system .

The file management application executed by the requesting client device and sender client device can also perform authentication steps in order to minimize the chance that a malicious actor is operating either device. For example a sender client device can authenticate the requesting client device to ensure that the requesting client device is entitled or authorized to access the requested file. The requesting client device can authenticate the sender client device to ensure that the sending client device possesses a copy of the file that the requesting client device is actually requesting.

Such authentication can be performed in various ways. In a first embodiment the client devices can authenticate each other by leveraging the metadata describing the particular file that the requesting client device is requesting such as a file hash or file identifier associated with the file. First the file storage application can be configured to only provide metadata about those files to which a particular client device is authorized or entitled to access and only after authenticating the client device and or user associated with the device. Accordingly the file storage application can ensure that only those client devices that are authorized to access a particular file are in possession of the metadata associated with the file by requiring authenticated access to the metadata for a file.

Accordingly in one embodiment in order to authenticate a requesting client device a sender client device can request that the requesting client device generate an authenticator code or a one time password that is based upon the file hash of the requested file. Such a one time password can be generated by employing a secure hash algorithm such as SHA 0 SHA 1 SHA 2 etc. In other words the requesting client device can generate an encrypted file hash that can be verified by the sender client device . The encrypted file hash can be generated using a predetermined or preselected algorithm. The encrypted file hash can be transmitted to the sender client device by the requesting client device . The sender client device can then verify the encrypted file hash by independently generating a version of the encrypted file hash from the file hash obtained from the file storage application as metadata . If the version of the encrypted file hash generated by the sender client device matches the version sent by the requesting client device the sender client device can authenticate or trust the requesting client device .

Next the sender client device can transmit at encrypted rearranged file hash to the requesting client device for verification or authentication of the sender client device . Such an encrypted rearranged file hash can be generated by rearranging or reordering the file hash corresponding to the file according to a predetermined scheme. For example the file hash can be reversed or scrambled in a predetermined fashion. The rearranged file hash can then be encrypted using a secure hash algorithm and transmitted to the requesting client device as an encrypted rearranged file hash. The requesting client device can then verify the encrypted rearranged file hash by rearranging the file hash according to the predetermined scheme and generating its own version of the encrypted rearranged file hash. The requesting client device can then determine whether a match exists between the generated version and the version received from the sender client device if a match exists then the requesting client device can authenticate or trust the sender client device .

If both the requesting client device and sender client device authenticate one another the devices can then establish a file transfer session according to a file transfer protocol. The requested file or a portion thereof can be transmitted from the sender client device to the requesting client device through the file transfer session. In some embodiments the requesting client device can also select multiple sender client devices and establish multiple file transfer sessions with the sender client devices . In one scenario the requesting client device can identify a particular portion of a file that a particular sender client device can transmit in the file transfer session. The requesting client device can obtain the remaining portions of the file from one or more other sender client devices .

Additionally the sender client device can apply encryption to the requested file or portion of the file in one scenario the file can be encrypted using a public key associated with the requesting client device that can be published and obtained from the file storage application . In another scenario the file can be encrypted using a file specific encryption key that is obtained from the file storage application or the file repository . In some embodiments the sender client device may not possess the decryption key for a particular file. In such a scenario the sender client device may not be able to access or decrypt the file but can facilitate transfer of the file from the file repository to the requesting client device .

It should be appreciated that in some embodiments the roles of the requesting client device and sender client device may be reversed in that the requesting client device may generate the encrypted rearranged file hash while the sender client device may generate the encrypted file hash. Additionally the order in which the requesting client device and or sender client device generate or transmit requests or responses may also be rearranged. The order in which these steps are discussed herein is but one example.

The requesting client device and sender client device may also authenticate one another with the assistance of the file storage application or an authentication server. Upon selection of a particular client device as a sender client device the requesting client device and sender client device can independently obtain an authentication token or a one time password from the file storage application . The requesting client device and sender client device can then exchange these authentication tokens. In other words the requesting client device can transmit its authentication token to the sender client device and vice versa.

Next the requesting client device and sender client device can verify the authentication token obtained from the other client device by transmitting an authentication request to the file storage application that includes the authentication token an identifier associated with the client device from which the authentication token was obtained and or a file identifier corresponding to the file requested by the requesting client device . The file storage application can then verify that the requesting client device is entitled to access the requested file as well as that the sender client device is a legitimate transferor of the file. If the file storage application confirms the authenticity of the client devices and provides an indication to this effect to the respective client devices a file transfer session can be established between the requesting diem device and sender client device in which the sender client device can transmit the requested file to the requesting diem device .

Referring next to shown is a sequence diagram that illustrates an example of interactions between a requesting diem device and sender client device according to various embodiments of the disclosure. In the example of a requesting client device and the sender client device can perform client side authentication of one another. First the requesting client device can broadcast a file request using the network which can be received by the sender client device . As noted above the file request can be broadcast by sending the request to a broadcast address so that one or more client devices on a subnet receive the request from the requesting client device . Such a request can also comprise a multicast request that is broadcast to multiple client devices coupled to the network .

Upon the receiving the file request the sender client device can generate an interrogator response that includes one or more device parameters associated with the status of the sender diem device . The interrogator response can be transmitted to the requesting client device The requesting client device can they select a sender client device by evaluating the compatibility of the information in the interrogator response with various aspects of the requesting client device . Upon selecting the sender client device the requesting client device can transmit an indication of selection of the sender client device as denoted by arrow . In other words the requesting client device can establish a session with the sender client device in which authentication can now occur.

Accordingly the sender client device can request hash verification from the requesting client device The requesting client device can generate an encrypted file hash by performing a one way encryption of the file hash corresponding to the requested file. The encrypted file hash is transmitted to the sender client device . Next at arrow the sender client device can independently verify the encrypted file hash by generating its own encrypted version of the file hash and comparing this generated version of the encrypted file hash with the version obtained from the requesting client device

Upon verifying the encrypted file hash the sender client device can generate an encrypted rearranged file hash that is transmitted to the requesting client device . Next at arrow the requesting client device can independently verify the encrypted rearranged file bash by generating its own encrypted version of the rearranged file hash and comparing this generated version of the encrypted rearranged file hash with the version obtained from the sender client device . Upon verifying the encrypted rearranged file hash the requesting client device can establish a file transfer session with the sender client device in which the file or a portion thereof can be transmitted from the sender client device to the requesting client device as denoted by arrow .

In some embodiments the sender client device can also encrypt the file transmitted to the requesting client device and the requesting client device can decrypt the file. For example the sender client device can encrypt the file or a portion thereof with a public key associated with the requesting client device which can then decrypt the received file with a corresponding private key as well as potentially reassemble the received file from various portions of the file received from various sender client devices

Referring next to shown is a sequence diagram that illustrates an example of interactions between a requesting client device and sender client device according to various embodiments of the disclosure. In the example of a requesting client device and the sender client device can perform authentication of one another with assistance from the file storage application or an authentication server. First the requesting client device can broadcast a file request using the network which can be received by the sender client device . As noted above the file request can be broadcast by sending the request to a broadcast address so that one or more client devices on a subnet receive the request from the requesting client device . Such a request can also comprise a multicast request that is broadcast to multiple client devices coupled to the network .

Upon the receiving the file request the sender client device can generate an interrogator response that includes one or more device parameters associated with the status of the sender client device . The interrogator response can be transmitted to the requesting client device . The requesting client device can then select a sender client device by evaluating the compatibility of the in formation in the interrogator response with various aspects of the requesting client device Upon selecting the sender client device the requesting client device can transmit an indication of selection of the sender client device as denoted by arrow .

Accordingly the requesting client device can request an authentication token from the file storage application as denoted by arrow . In response the file storage application can transmit an authentication token which can comprise a one time password to the requesting client device . The sender client device can request an authentication token from the file storage application as denoted by arrow . In response the file storage application can transmit an authentication token which can comprise a onetime password to the sender client device . At arrow the requesting client device and sender client device can exchange the authentication tokens obtained from the file storage application .

At arrow the sender client device can verify the authentication token with the file storage application . Verification of the authentication token can comprise a request that includes the authentication token an identifier identifying the requesting client device and or the file identifier requested by the requesting client device . At arrow the requesting client device can verify the authentication token with the file storage application . Verification of the authentication token can comprise a request that includes the authentication token an identifier identifying the sender client device and or the file identifier requested by the requesting client device . The file storage application can then provide a verification response to the sender client device and requesting client device as denoted by arrows and respectively.

Upon verification of the respective authentication tokens the requesting client device can establish a file transfer session with the sender client device in which the file or a portion thereof can be transmitted from the sender client device to the requesting client device as denoted by arrow .

Referring next to shown is as flowchart that provides one example of the operation of a portion of the file management application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the file management application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemented in the client device according to one or more embodiments. Functionality attributed to the file management application can be implemented in a single process or application executed by the client device and or multiple processes or applications. The separation or segmentation of functionality as discussed herein is presented for illustrative purposes only.

Beginning with box the file management application can broadcast a request to obtain a particular file to other client devices . At box the file management application can obtain a response to the broadcasted request in the form of one or more interrogator responses that include device status parameters that may assist the file management application in selecting a sender diem device .

At box the file management application can select one or more sender client device based upon the interrogator responses. At box the file management application generates an encrypted file bash from metadata describing the file that can be obtained from the file storage application . At box the file management application transmits the encrypted file hash to the sender client device . At box the file management application can receive an encrypted rearranged file hash from the file management application . At box the file management application can determine based upon the encrypted rearranged file hash whether to verify the sender client device by independently generating the encrypted rearranged file hash and determining whether the independently generated encrypted rearranged file hash matches the version obtained from the sender client device if the sender client device is not verified then the file management application can proceed to box and select another sender client device . If the sender client device is verified at box the file management application can establish a file transfer session with the sender client device in which the file or a portion thereof is received from the sender client device . Thereafter the process proceeds to completion at box .

Referring next to shown is a flowchart that provides one example of the operation of a portion of the file management application according to various embodiments. It is understood that the flowchart of provides merely an example of the many different types of functional arrangements that may be employed to implement the operation of the portion of the file management application as described herein. As an alternative the flowchart of may be viewed as depicting an example of elements of a method implemental in the client device according to one or more embodiments. Functionality attributed to the file management application can be implemented in a single process or application executed by the client device and or multiple processes or applications. The separation or segmentation of functionality as discussed herein is presented for illustrative purposes only.

Beginning with box the file management application can broadcast a request to obtain a particular file to other client devices . At box the file management application can obtain a response to the broadcasted request in the form of one or more interrogator responses that include device status parameters that may assist the file management application in selecting a sender client device .

At box the file management application can select one or more sender client device based upon the interrogator responses. At box the file management application obtains an authentication token or one time password from the file storage application or an authentication server. At box the file management application obtains an authentication token from the sender client device .

At box the file management application transmits the authentication token obtained from the file storage application to the sender client device so that the sender client device can verify the authentication token. Correspondingly at box the file management application verifies the authentication token received from the sender client device . As noted above the file management application can verify the authentication token by transmitting the authentication token to the file storage application or authentication server along with an identifier of the requested file as well as an identifier corresponding to client device . The file storage application can maintain the authentication tokens issued on behalf of client devices in the data store and verify that the authentication token provided by a client device requesting verification of another client device matches the authentication token stored in the data store .

If the sender client device is not verified then the file management application can proceed to box and select another sender client device . If the sender client device is verified at box the file management application can establish a file transfer session with the sender client device in which the file or a portion thereof is received from the sender client device . Thereafter the process proceeds to completion at box .

The flowcharts of show examples of the functionality and operation of implementations of components described herein. The components described herein can be embodied in hardware software or a combination of hardware and software. If embodied in software each element may represent a module of code or a portion of code that comprises program instructions to implement the specified logical function s . The program instructions may be embodied in the form of for example source code that comprises human readable statements written in a programming language and or machine code that comprises machine instructions recognizable by a suitable execution system such as a processor in a computer system or other system. If embodied in hardware each element may represent a circuit or a number of interconnected circuits that implement the specified logical function s .

Although the flowcharts and sequence diagrams show a specific order of execution it is understood that the order of execution may differ from that which is shown. For example the order of execution of two or more elements may be switched relative to the order shown. Also two or more elements shown in succession may be executed concurrently or with partial concurrence. Further in some embodiments one or more of the elements shown in the flowcharts may be skipped or omitted. In addition any number of counters state variables warning semaphores or messages might be added to the logical flow described herein for purposes of enhanced utility accounting performance measurement troubleshooting aid etc. It is understood that all such variations are within the scope of the present disclosure.

The computing environment the client device the file repository and or other components described herein may each include at least one processing circuit. Such a processing circuit may comprise for example one or more processors and one or more storage devices that are coupled to a local interface. The local interface may comprise for example a data bus with an accompanying address control bus or any other suitable bus structure.

The one or more storage devices for a processing circuit may store data and or components that are executable by the one or more processors of the processing circuit. For example the management system the file management application the data storage system and or other components may be stored in one or more storage devices and be executable by one or more processors. Also a data store such as the data store and or the file repository data store ma be stored in the one or inure storage devices.

The management system the file management application the data storage system and or other components described herein may be embodied in the form of hardware as software components that are executable by hardware or as a combination of software and hardware. If embodied as hardware the components described herein can be implemented as a circuit or state machine that employs an suitable hardware technology. Such hardware technology may include for example but is not limited to one or more microprocessors discrete logic circuits having logic gates for implementing various logic functions upon an application of one or more data signals application specific integrated circuits ASICs having appropriate logic gates programmable logic devices e.g. field programmable gate array FPGAs and complex programmable logic devices CPLDs etc.

Also one or more or more of the components described herein that comprise software or program instructions can be embodied in any non transitory computer readable medium for use by or in connection with an instruction execution system such as for example a processor in a computer system or other system. Such a computer readable medium may contain store and or maintain the software or program instructions for use by or in connection with the instruction execution system.

A computer readable medium can comprise a physical media such as magnetic optical semiconductor and or other suitable media. Examples of a suitable computer readable media include but are not limited to solid state drives magnetic drives flash memory etc. Further any logic or component described herein may be implemented and structured in variety of ways. For example one or more components described may be implemented as modules or components of a single application. Further one or more components described herein may be executed m one computing device or by using multiple computing devices. Additionally it is understood that terms such as application service system engine module and so on may be interchangeable and are not intended to be limiting unless indicated otherwise.

It is emphasized that the above described embodiments of the present disclosure are merely examples of implementations to set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiments without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure.

It is emphasized that the above described embodiments of the present disclosure are merely possible examples of implementations set forth for a clear understanding of the principles of the disclosure. Many variations and modifications may be made to the above described embodiments without departing substantially from the spirit and principles of the disclosure. All such modifications and variations are intended to be included herein within the scope of this disclosure and protected by the following claims.

