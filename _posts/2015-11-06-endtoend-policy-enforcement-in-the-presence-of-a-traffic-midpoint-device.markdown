---

title: End-to-end policy enforcement in the presence of a traffic midpoint device
abstract: A global manager computer generates management instructions for a particular managed server within an administrative domain according to a set of rules. A global manager computer identifies a traffic midpoint device through which the provider managed server provides a service to a user device. The global manager determines a relevant rule from the set of rules that is applicable to communication between the provider managed server and the user device and generates a backend rule that is applicable to communication between the provider managed server and the traffic midpoint device. The global managed generates a backend function-level instruction including a reference to an actor-set authorized to communicate with the provider managed server to use the service. The global manager sends the backend function-level instruction to the provider managed server to configure the provider managed server to enforce the backend rule on communication with the actor-set including the traffic midpoint device.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509574&OS=09509574&RS=09509574
owner: Illumio, Inc.
number: 09509574
owner_city: Sunnyvale
owner_country: US
publication_date: 20151106
---
This application claims the benefit of U.S. Provisional Application No. 62 142 968 filed Apr. 3 2015 which is incorporated by reference in its entirety.

The subject matter described herein generally relates to the field of managing computer servers physical or virtual of an administrative domain and in particular to enforcing security policies on network traffic relayed through a traffic midpoint device.

Servers physical or virtual of an administrative domain are managed according to a policy. For example a security policy might specify access control and or secure connectivity while a resource usage policy might specify usage of the administrative domain s computing resources e.g. disks and or peripherals . Conventional policies reference physical devices and are expressed in terms of low level constructs such as Internet Protocol IP addresses IP address ranges subnetworks and network interfaces. These low level constructs make it difficult to write a fine grained policy in an abstract and natural way. Moreover conventional policies tied to physical devices and low level constructs do not adapt to changing configurations of routers switches server load balancers and other devices that direct traffic between servers.

The above and other issues are addressed by a method non transitory computer readable storage medium and system for generating management instructions for a particular managed server within an administrative domain according to an administrative domain wide management policy that comprises a set of one or more rules. The administrative domain includes a plurality of managed servers. An embodiment of the method comprises the following steps. A traffic midpoint device is identified through which the provider managed server of the plurality of managed servers provides a service to a user device. A relevant rule is determined from the set of rules that specifies the service and that is applicable to communication between the provider managed server and the user device. Based on the relevant rule a backend rule is generated that specifies the service and that is applicable to communication between the provider managed server and the traffic midpoint device. Based on the backend rule a backend function level instruction is generated including a reference to an actor set authorized to communicate with the provider managed server to use the service. The actor set includes the traffic midpoint device and excludes the user device. The backend function level instruction is sent to the provider managed server to configure the provider managed server to enforce the backend rule on communication with the actor set including the traffic midpoint device.

An embodiment of the medium stores computer program modules executable by one or more processors to perform the following steps. A traffic midpoint device is identified through which the provider managed server of the plurality of managed servers provides a service to a user device. A relevant rule is determined from the set of rules that specifies the service and that is applicable to communication between the provider managed server and the user device. Based on the relevant rule a backend rule is generated that specifies the service and that is applicable to communication between the provider managed server and the traffic midpoint device. Based on the backend rule a backend function level instruction is generated including a reference to an actor set authorized to communicate with the provider managed server to use the service. The actor set includes the traffic midpoint device and excludes the user device. The backend function level instruction is sent to the provider managed server to configure the provider managed server to enforce the backend rule on communication with the actor set including the traffic midpoint device.

An embodiment of the system comprises one or more processors and a non transitory computer readable storage medium storing computer program modules executable by the one or more processors to perform the following steps. A traffic midpoint device is identified through which the provider managed server of the plurality of managed servers provides a service to a user device. A relevant rule is determined from the set of rules that specifies the service and that is applicable to communication between the provider managed server and the user device. Based on the relevant rule a backend rule is generated that specifies the service and that is applicable to communication between the provider managed server and the traffic midpoint device. Based on the backend rule a backend function level instruction is generated including a reference to an actor set authorized to communicate with the provider managed server to use the service. The actor set includes the traffic midpoint device and excludes the user device. The backend function level instruction is sent to the provider managed server to configure the provider managed server to enforce the backend rule on communication with the actor set including the traffic midpoint device.

The Figures FIGS. and the following description describe certain embodiments by way of illustration only. One skilled in the art will readily recognize from the following description that alternative embodiments of the structures and methods illustrated herein may be employed without departing from the principles described herein. Reference will now be made to several embodiments examples of which are illustrated in the accompanying figures. It is noted that wherever practicable similar or like reference numbers may be used in the figures and may indicate similar or like functionality.

The network represents the communication pathway between the global manager the managed servers the unmanaged device the labeled device and the traffic midpoint device . In one embodiment the network uses standard communications technologies and or protocols and can include the Internet. In another embodiment the entities on the network can use custom and or dedicated data communications technologies.

A managed server is a machine physical or virtual that implements an administrative domain wide management policy shown in . In one embodiment a server is a user space instance of a virtual server sometimes referred to as a container virtualization engine virtual private server or jail according to operating system level virtualization which is a server virtualization method where the kernel of an operating system enables multiple isolated user space instances instead of only one instance. If a managed server is a physical machine then the managed server is a computer or set of computers. If a managed server is a virtual machine then the managed server executes on a computer or set of computers. The administrative domain wide management policy specifies whether and or how entities associated with the administrative domain are allowed to access or be accessed by other entities or otherwise consume or provide services. For example the administrative domain wide management policy specifies rules relating to security through a security policy resource usage through a resource usage policy or both. A security policy might specify access control secure connectivity disk encryption and or control of executable processes while a resource usage policy might specify usage of the administrative domain s computing resources e.g. disks peripherals and or bandwidth .

A managed server includes a management module a management module configuration and a policy implementation module . The management module implements the administrative domain wide management policy . For example in the case of security the management module can be a low level network or security engine such as an operating system level firewall an Internet Protocol security IPsec engine or a network traffic filtering engine e.g. based on the Windows Filtering Platform WFP development platform . In the case of resource usage the management module can be a disk usage engine or a peripheral usage engine.

The management module configuration affects the operation of the management module . For example in the case of security the management module configuration can be access control rules applied by a firewall secure connectivity policies applied by an IPsec engine e.g. embodied as iptables entries and ipset entries in the Linux operating system or filtering rules applied by a filtering engine. In the case of resource usage the management module configuration can be disk usage policies applied by a disk usage engine or peripheral usage policies applied by a peripheral usage engine.

The policy implementation module generates the management module configuration based on a management instructions received from the global manager and b the state of the managed server . The management instructions are generated based in part on the administrative domain wide management policy . In general the management instructions for a particular managed server or other device in the environment specify characteristics of actions e.g. communication resource usage data storage process execution that comply with the administrative domain wide management policy that do not comply with the policy or both. The management module configuration generated by the policy implementation module implements that administrative domain wide management policy to the extent that the policy concerns the managed server . This two step process generating management instructions and generating the management module configuration is referred to as instantiating a management policy. The policy implementation module also monitors the local state of the managed server and sends local state information to the global manager .

In one embodiment the policy implementation module is part of a larger proprietary module not shown . The proprietary module is loaded onto a device or virtual device that already has a management module and a management module configuration thereby transforming the device or virtual device from an unmanaged device or labeled device to a managed server . The policy implementation module is further described below with reference to .

The global manager is a computer or set of computers that generates management instructions for managed servers and sends the generated management instructions to the servers. The management instructions are generated based on a the state of the administrative domain s computer network infrastructure the administrative domain state and b an administrative domain wide management policy . The administrative domain state includes descriptions of managed servers and optionally descriptions of unmanaged devices or labeled devices . The global manager also processes local state information received from managed servers .

The administrative domain wide management policy is based on a logical management model that can reference managed servers based on their high level characteristics referred to herein as labels. A label is a pair that includes a dimension a high level characteristic and a value the value of that high level characteristic . A management policy constructed in this multi dimensional space is more expressive than a management policy constructed according to a single characteristic network IP address based policy model. In particular expressing management policy using the higher level abstractions of labels enables people to better understand visualize and modify management policy.

The logical management model e.g. the number and types of dimensions available and those dimensions possible values is configurable. In one embodiment the logical management model includes the following dimensions and values as shown in Table 1 

The logical management model enables multiple managed servers to be grouped together by specifying one or more labels referred to herein as a label set that describe all of the managed servers in the group. A label set includes either zero values or one value for a dimension in the logical management model. A label set need not include labels for all dimensions in the logical management model. In this way the logical management model enables the segmentation and separation of an administrative domain s managed servers and the creation of arbitrary groupings of managed servers . The logical management model also allows for a single managed server to exist in multiple overlapping sets i.e. multiple overlapping groups of managed servers . The logical management model does not limit the single managed server to existing in a hierarchy of nested sets.

For example in the case of security segmentation can be used with access control policies to define groups of managed servers that are subject to particular policies. Similarly segmentation can be used with secure connectivity policies to define groups of managed servers and the policies that apply to intra group communications and inter group communications. So communications among a first group of managed servers specified by a first label set can be restricted to a first secure connection setting e.g. secure connection not required and communications between the first group of managed servers and a second group of managed servers specified by a second label set can be restricted to a second secure connection setting e.g. IPsec Encapsulating Security Payload ESP Authentication Header AH Advanced Encryption Standard AES Secure Hash Algorithm 2 SHA 2 .

Each managed server in the environment implements the administrative domain wide management policy to the extent that the policy concerns the managed server . As a result the administrative domain wide management policy is applied in a distributed fashion throughout the administrative domain and there are no choke points. Also the administrative domain wide management policy is applied at the logical level independent of the administrative domain s physical network topology and network addressing schemes.

An unmanaged device is a computer or set of computers that does not include a policy implementation module . An unmanaged device does not implement the administrative domain wide management policy . However interaction between a managed server and an unmanaged device can be subject to the administrative domain wide management policy as implemented by the managed server . One example of an unmanaged device is a network circuit that is used by an administrative domain . Another example of an unmanaged device is a device used by a person to authenticate himself to the administrative domain e.g. a notebook or desktop computer a tablet computer or a mobile phone .

The administrative domain wide management policy includes rules regulating actors within the administrative domain . The administrative domain wide management policy may include rules specifying particular unmanaged devices identified by their respective network addresses for instance . However if an additional unmanaged device joins the administrative domain the rules specifying the particular unmanaged devices do not apply to the additional unmanaged device even if the additional unmanaged device is similar to those unmanaged devices specified by the rule. To cover the additional unmanaged device the global manager modifies the rule to further specify the additional unmanaged device . Other rules specify label sets for improved generality and to facilitate intuitive review by an administrator. Such a rule applies to an additional labeled device introduced to the administrative domain without modification of the rule. Accordingly labeled devices facilitate specification of rules using label sets. Such rules are less computationally complex to maintain so associating an unmanaged device with a label set thereby transforming it into a labeled device beneficially facilitates management of the administrative domain .

A labeled device is an unmanaged device that the administrative domain wide management policy refers to by one or more labels a label set . Since label sets refer to high level characteristics of the labeled device label sets facilitate application of policies controlling communication between a labeled device and a managed server . When the global manager labels an unmanaged device the device becomes a labeled device . Like unmanaged devices that are unlabeled labeled devices may be servers client devices or other computers and may be physical computers or virtual computers.

Some managed servers provide bound services that perform different functionality than other services on a managed server . A bound service is described by a different label set than the label set of the managed server that provides the bound service. Accordingly the global manager associates the bound services with label sets that are independent of their host managed server s label set. When applying rules to a managed server the global manager handles a bound service on the managed server as an independent actor from the managed server . In some embodiments the global manager handles each service on a managed server as a separate actor. However such an embodiment may introduce duplicate actors representing services with matching label sets.

In some embodiments the global manager groups services to reduce the number of actors to manage in the administrative domain . The global manager processes services on a managed server that are not bound services i.e. that are accurately described by the managed server s label set as a single actor. The global manager also groups those bound services on a managed server that have matching label sets into a bound service group which functions as an independent actor associated with the managed server . Accordingly the global manager determines that a rule is relevant to a managed server if the rule is relevant to one or more of the managed server s actors e.g. the actor representing non bound services on the managed server or any actors representing bound service groups on the managed server .

Some bound services are executed by a plurality of managed servers . Such a bound service is referred to as a distributed bound service. Instances of a distributed bound service executing on different managed servers are associated with the same label set regardless of the respective label sets of the managed servers executing the instances of the distributed bound service. Since a distributed bound service is provided by multiple managed servers the distributed bound service is part of a bound service group on each managed server .

In some embodiments the global manager maintains a list of bound services. An entry for a bound service indicates the label set of the bound service and the one or more managed servers providing the bound service. The list entry for a bound service may also indicate identifiers of one more bound service groups containing the bound service. For example the list entry for a distributed bound service indicates the label set for the distributed bound service identifiers of the multiple managed servers executing the distributed bound service and the identifiers of bound service groups containing the distributed bound service on each of the multiple managed servers .

In some embodiments an administrator provides the global manager with the list of bound services and updates the list of bound services. Alternatively or additionally the global manager provides mechanisms for identifying bound services. For example the global manager identifies bound services by analyzing properties of services on managed servers such as whether the service is associated with a binding that overrides the port conventionally assigned to a process used by the service. The global manager also obtains labels for bound services according to an analysis of the properties of the bound services or properties of communications attributable to the bound services according to input provided by an administrator or according to a combination thereof.

A traffic midpoint device regulates communication between a managed server and another actor in the environment such as a managed server unmanaged device or labeled device . Communication or traffic refers to data transferred between actors in the environment typically according to standard protocols specifying transmission of data in discrete segments packets frames or raw bits. A traffic midpoint device may regulate traffic by modifying the data path of the traffic modifying the traffic itself modifying both the data path and the traffic or by relaying the traffic without modification. For example the traffic midpoint device is a server load balancer that selects a backend managed server and modifies a header in the communication to redirect it to the selected backend managed server . Communication between actors in the environment may be regulated by multiple traffic midpoint devices acting in serial in parallel or both. A traffic midpoint device differs from a managed server because the traffic midpoint device does not include a management module to enforce the administrative domain wide management policy .

Example traffic midpoint devices include a server load balancer a proxy a network switch a router and a network bridge. For example the traffic midpoint device is a forward proxy used by a managed server to retrieve data from outside the administrative domain . As another example the traffic midpoint device is a reverse proxy that manages communication between one or more backend managed servers and other devices. Such a reverse proxy may perform load balancing encryption security or content caching functions for example. A load balancer may perform layer 4 load balancing based on data in the network layer or transport layer of traffic or it may perform layer 7 load balancing based on data in the application layer of traffic. A traffic midpoint device may be a physical device a virtual device or a combination thereof.

In some embodiments a managed server enforces rules of the administrative domain wide management policy that regulate communication between that managed server and a traffic midpoint device . These rules may be derived from rules governing communication between a managed server and another device without the presence of the traffic midpoint device . For example the global manager uses the rules specified in terms of the communication end points to derive segment rules that regulate each segment of the traffic s path between the endpoints through one or more traffic midpoint devices . Once the segment rules are derived the segment rules may be enforced from both endpoints of the communication. A traffic midpoint device may be labeled i.e. assigned a label set like a labeled device to facilitate creation of applicable rules. A traffic midpoint device may also be referred to by a unique identifier UID or a network address corresponding to a network interface of the traffic midpoint device .

In some embodiments the traffic midpoint device may include low level security functions configurable by the global manager or a managed server to implement the segment rules derived from the administrative domain wide management policy . For example the global manager configures the traffic midpoint device to enforce the administrative domain wide management policy on communications between the traffic midpoint device and another actor in the environment . Management of traffic midpoint devices according to the administrative domain wide management policy is described further with respect to in the section entitled End to End Communication Policy. 

The global manager the administrative domain state and the administrative domain wide management policy are further described below with respect to .

The storage device includes one or more non transitory computer readable storage media such as a hard drive compact disk read only memory CD ROM DVD or a solid state memory device. The memory holds instructions and data used by the processor . The pointing device is used in combination with the keyboard to input data into the computer system . The graphics adapter displays images and other information on the display device . In some embodiments the display device includes a touch screen capability for receiving user input and selections. The network adapter couples the computer system to the network . Some embodiments of the computer have different and or other components than those shown in . For example the global manager and or the managed server can be formed of multiple blade servers and lack a display device keyboard and other components while the unmanaged device and labeled device can be a notebook or desktop computer a tablet computer or a mobile phone. As another example a traffic midpoint device may be a network switch or network bridge. A traffic midpoint device may perform server load balancing through dedicated hardware e.g. a layer 3 switch software e.g. on a reverse proxy server configured to load balance traffic between backend servers or a combination thereof.

The computer is adapted to execute computer program modules for providing functionality described herein. As used herein the term module refers to computer program instructions and or other logic used to provide the specified functionality. Thus a module can be implemented in hardware firmware and or software. In one embodiment program modules formed of executable computer program instructions are stored on the storage device loaded into the memory and executed by the processor .

The administrative domain state includes descriptions of managed servers and optionally descriptions of other network devices including unmanaged devices labeled devices and or traffic midpoint devices . A description of a managed server includes for example a unique identifier UID an online offline indicator one or more configured characteristics optional network exposure information service information and one or more labels that describe the managed server a label set .

The UID uniquely identifies the managed server . The online offline indicator indicates whether the managed server is online or offline. A configured characteristic stores a value associated with the managed server and can be any type of information e.g. an indication of which operating system is running on the managed server . A configured characteristic is used in conjunction with a rule s condition portion described below .

The network exposure information concerns the managed server s network interfaces. A network interface refers to the hardware software of both that a device e.g. managed server uses to exchange information with the network or other devices in the administrative domain . In one embodiment the network exposure information includes for each of the managed server s network interfaces an identifier of a bidirectionally reachable network BRN to which the network interface is attached and zero or more IP addresses and their subnets that are used for operating within the BRN. A BRN is a set of subnets within an organization or across organizations where any node within the BRN can establish communication with any other node in the BRN. For example all of the nodes in a BRN have unique IP addresses. In other words a BRN does not contain any NATs. Network exposure information e.g. a network interface s BRN identifier can be used in conjunction with a rule s condition portion.

In another embodiment the network exposure information includes routing information and or whether the managed server is behind a network address translator NAT such as a traffic midpoint device . If the managed server is behind a NAT the global manager determines the type of NAT 1 1 or 1 N. For example the global manager determines whether a NAT exists between the global manager and the managed server by comparing a the server s IP address according to the TCP connection between the global manager and the server and b the server s IP address according to the local state information received from the server. If a and b differ then a NAT exists between the global manager and the managed server . If a NAT does exist then the global manager determines the type of NAT 1 1 or 1 N by performing data center detection. For example the global manager identifies the server s data center by the data center s public IP address. Alternatively the managed server performs data center detection by querying information that is external to the server but inside the data center. The server then sends that information to the global manager as part of the local status. Configuration information indicates which types of NATs are used by which data centers. If no NAT information is associated with a particular data center then the global manager assumes that the NAT type is 1 N.

The description of a managed server also includes service information describing services on a managed server as well as bound services on a managed server . The service information includes for example process information and or package information. Process information includes for example names of processes that the managed server is running which network ports and network interfaces those processes are listening on which users initiated those processes configurations of those processes command line launch arguments of those processes and dependencies of those processes e.g. shared objects to which those processes link . Those processes correspond to the managed server providing a service or using a service. Package information includes for example which packages executables libraries or other components are installed on the managed server the versions of those packages the configurations of those packages and the hash values of those packages. If a managed server provides any bound services the managed server s description may identify the bound services bound service groups organizing one or more similar bound services label sets corresponding to each bound service group and a pointer to the bound service group such as a unique identifier UID .

A description of an unmanaged device includes for example network exposure information e.g. the IP address of the unmanaged device and an identifier of the BRN to which the unmanaged device is connected or a unique identifier UID . An unmanaged device is part of an unmanaged device group UDG . A UDG includes one or more unmanaged devices . For example the Headquarters UDG could include the primary circuit and the backup circuit that are used by an administrative domain s headquarters where each circuit is associated with an IP address. A UDG is associated with a unique identifier UID . Information stored in the administrative domain state regarding a UDG includes the UID of the UDG and information regarding the unmanaged devices in the UDG e.g. their network exposure information .

Like the description of other unmanaged devices the description of a labeled device may include network exposure information a UID of the labeled device and or one or more UDGs including the labeled device . Similar to a managed server the description of a labeled device includes a label set describing the high level characteristics of the labeled device . The description of a labeled device may include a flag or other field indicating that the labeled device lacks a policy implementation module or equivalently whether the labeled device is a managed server . The description of a labeled device may also include configured characteristics indicating additional labeled device information that is externally visible to the global manager or a managed server . For example even though a labeled device lacks a policy implementation module a managed server might determine the operating system of the labeled device based on the labeled device s response to valid and invalid requests e.g. valid and invalid transmission control protocol TCP packets . As another example a managed server determines whether a labeled device is online or offline by determining if the labeled device responds to requests e.g. ping requests .

The description of a traffic midpoint device may include an online offline indicator network exposure information a UID of the traffic midpoint device one or more UDGs including the traffic midpoint device a label set describing the high level characteristics of the traffic midpoint device or a combination thereof. The description of a traffic midpoint device may also include an operational configuration that describes the settings and operation parameters of the traffic midpoint device . For example the operational configuration describes NAT parameters e.g. transparent static 1 1 1 N a switching mode e.g. store and forward cut through fragment free a load balancer scheduling algorithm or other settings related to how the traffic midpoint device modifies a data path of traffic. As another example the operational configuration indicates any traffic optimization settings related to content caching traffic prioritization or traffic compression. Although a traffic midpoint device does not include a policy implementation module it may include low level security functions and the description of the traffic midpoint device may describe the security configuration of the low level security functions. For example the security configuration includes firewall settings encryption settings or client authentication settings.

Descriptions of managed servers unmanaged devices labeled devices and traffic midpoint devices can be loaded into the administrative domain state in various ways such as by interacting with the global manager via a graphical user interface GUI or an application programming interface API . Descriptions of managed servers can also be loaded into the administrative domain state based on local status information received from managed servers as described below.

The global manager may assign or reassign a value to a label dimension or a configured characteristic in many ways. For example the assignment setting can be performed using a deployment and configuration tool as part of provisioning a managed server . Any such tool can be used including off the shelf third party tools e.g. Puppet Labs Puppet software Opscode s Chef software or CFEngine AS CFEngine software and custom tools that an administrative domain might have. Assignment of labels is described in further detail with respect to .

As another example the assignment setting can be performed by a label configured characteristic engine not shown that determines labels and or configured characteristic CC values. In one embodiment the label CC engine calculates labels CC values based on label CC assignment rules. A label CC assignment rule is a function that accesses data from the administrative domain state and assigns or suggests assignment of a label or a CC value. A label CC assignment rule can be preset or user configurable. For example the global manager includes a set of predefined rules but the end user can modify and or delete those rules and add new rules based on the user s own custom requirements. Label CC assignment rules can be evaluated for a managed server during the initialization process. Label CC value suggestions can then be made for any dimension CC and the end user can accept or reject those suggestions. For example if a managed server is executing the Postgres database or the MySQL database then the suggested label could be . If a managed server is executing the Linux operating system then the suggested value for the operating system CC could be Linux. In some embodiments separate modules provide the assignment of labels and configured characteristics respectively. For example a module to assign labels is described below in further detail in conjunction with .

In another embodiment the label CC engine calculates labels CC values based on cluster analysis. For example the label CC engine uses a combination of min cut and K means algorithms with additional heuristics of connected graphs to automatically identify a cluster of highly connected managed servers bound services and or labeled devices . The cluster of managed servers and or labeled devices might correspond to an application see Table 1 in the administrative domain . The end user can choose to apply a value for the Application dimension or any other dimension to those managed servers bound service groups and or labeled devices en masse.

The administrative domain wide management policy includes one or more rules. Broadly speaking a rule specifies a relationship between one or more providers of a service and one or more consumers of that service. The administrative domain wide management policy includes a set of communication rules which is described below in the section entitled Communication Rules. 

Rule Function The relationship is subjected to a rule function which is the practical effect of the rule. For example in the case of security the rule function could be access control secure connectivity disk encryption or control of executable processes. A rule with an access control function specifies whether a consumer may use a provider s service. In one embodiment the access control function uses a pure whitelist model which means that only the allowable relationships are expressed and all other relationships are blocked by default. A rule with a secure connectivity function specifies over what secure channels e.g. encrypted network sessions using point to point data encryption a consumer may use a provider s service. For example a rule with a secure connectivity function could specify that usage of a provider s services must be encrypted when the provider is located in the US and the consumer is located in the EU. A rule with a disk encryption function specifies whether a provider must store its data on an encrypted file system. A rule with an executable process control function specifies whether a process is allowed to execute.

In the case of resource usage the rule function could be disk usage or peripheral usage. A rule with a disk usage function specifies an amount of data that a consumer can store on a provider. Note that a rule can specify other rule functions as well beyond just access control secure connectivity disk encryption control of executable processes disk usage and peripheral usage. For example a rule function could specify which Open Systems Interconnection OSI model Layer 7 services to apply to network traffic the amount of metadata to collect for security analytics or the triggers for capturing a complete network packet. The management policy model supports any number of rule functions that can be applied.

A rule function can be associated with one or more settings referred to herein as a function profile that specify details regarding the practical effect of the rule. For example settings associated with a secure connectivity rule function can be a list of cryptographic algorithms used to encrypt network traffic. In one embodiment a rule function is associated with multiple function profiles and a function profile includes a priority. This priority is used by the function level instruction generation module as described below.

Service In general a service is an arbitrary process executing on a specific network port using a specific network protocol. A service of a rule within the management policy is specified by a port protocol pair and optionally additional qualifications such as process information and or package information described above with respect to a description of a managed server within the administrative domain state . If a managed server has multiple network interfaces then a service can be exposed on all networks or on only a subset of those networks. The end user specifies on which networks the service is exposed. Note that depending on the rule function a service might not use any network resources. For example a service for an executable process control rule function does not execute on a network port using a network protocol.

As with other services a bound service is associated with one or more ports protocols or additional qualifications e.g. process information package information . For example a distributed bound service is associated with one or more ports on each managed server executing the distributed bound service. In one embodiment the description of a bound service indicates a binding description of the bound service to the managed server . The binding identifies the managed server as well as one or more ports used by the service. In particular the binding description includes at least one port used by one of the bound service s constituent processes that differs from the port typically associated with that process in a given protocol. For example a PostgreSQL process is typically associated with port 5432 in TCP but a bound service including the PostgreSQL process includes a binding that overrides the port to a different number.

Providers Consumers The one or more providers of the service and the one or more consumers i.e. users of the service are managed servers bound services unmanaged devices and or labeled devices.

In one embodiment a rule is represented within the administrative domain wide management policy using a set of information that includes a rule function portion a service portion a provided by portion a used by portion and an optional rule condition portion. The rule function portion describes the practical effect of the rule and can be associated with one or more settings function profiles . The service portion describes the service to which the rule applies. If the service portion indicates All then the rule applies to all services.

The provided by PB portion describes which managed servers bound service groups unmanaged devices and or labeled devices can provide the service i.e. who the providers are . If the PB portion indicates Anybody then any actor e.g. any managed server bound service groups unmanaged devices labeled devices can provide the service. If the PB portion indicates Any labeled device then any managed server bound service group or labeled device can provide the service. Any labeled device is equivalent to specifying a label set that contains a wildcard thereby matching all managed servers bound service groups and labeled devices . Similarly if the PB portion indicates Any managed server then the any managed server can provide the service regardless of the managed server s label. The used by UB portion describes which managed servers bound service groups unmanaged devices and or labeled devices can use the service i.e. who the consumers are . Similar to the PB portion the UB portion can also indicate Anybody Any labeled device or Any managed server. 

Within the PB portion and the UB portion a managed server or labeled device is specified by using a label set i.e. one or more labels that describe the managed server or a UID. The ability to specify managed servers bound service group and or or labeled devices using label sets stems from the logical management model which references managed servers based on their dimensions and values labels . An unmanaged device that is unlabeled is specified by using a UID of an unmanaged device group UDG . If a rule specifies a UDG then the rule includes additional information regarding the unmanaged devices in that group e.g. the devices network exposure information . The PB portion of a rule and or the UB portion of a rule can include multiple items including label sets to specify managed servers bound service groups and or labeled devices managed server UIDs and or UDG UIDs.

The rule condition portion which is optional specifies whether the rule applies to a particular labeled actor e.g. a managed server a labeled device a bound service group on a particular managed server a traffic midpoint device and or a particular network interface or port of that labeled actor. The rule condition portion is a Boolean expression that includes one or more configured characteristics CCs part of a managed server s description in the administrative domain state and or network exposure information e.g. a network interface s BRN identifier a port s network address also part of a managed server s description in the administrative domain state . A CC portion of the expression specifies whether the rule applies to the particular managed server or bound service group on a particular managed server or labeled device while a network exposure information portion of the expression specifies whether the rule applies to a particular network interface or port of that managed server or labeled device . For example if the expression evaluates to true for a particular managed server s configured characteristics specifically for the values of that managed server s configured characteristics and a particular network interface s information then the rule applies to that managed server and that managed server s relevant network interface. Continuing the example if the expression evaluates to false then the rule does not apply to that managed server and that managed server s relevant network interface. As another example if a configured characteristic stores an indication of which operating system is running on the managed server then a rule condition portion that includes that configured characteristic can control whether the rule applies to a particular managed server based on that server s operating system.

Rules within the administrative domain wide management policy are organized into rule lists. Specifically the management policy includes one or more rule lists and a rule list includes one or more rules and optionally one or more scopes. A scope constrains where i.e. to which managed servers bound service group or labeled devices a rule is applied. A scope includes a provided by PB portion and a used by UB portion that limit the application of the rules in the rule list. The PB portion of the scope limits the PB portion of the rules and the UB portion of the scope limits the UB portion of the rules. The PB and UB portions of a scope can specify a group of managed servers or a bound service group or a group of labeled devices by using a label set. If the label set does not contain a label for a specific dimension then there is no scoping of that dimension for the resulting group of managed servers . If a rule list does not include any scopes then its rules are applied globally.

Different scopes can be applied to a single rule list. For example an end user can build a set of rules that express how the web service tier managed servers and bound service groups with a label consumes services from the database tier managed servers with a label how the load balancing tier consumes services from the web service tier and so on. Then if the end user wants to apply this rule list to his production environment managed servers with an label and to his staging environment managed servers with an label he does not need to copy or duplicate the rule list. Instead he applies multiple scopes to a single rule list a first scope where the PB portion and the UB portion include the label and a second scope where the PB portion and the UB portion include the label . The scope abstraction makes the rule list scale from both a usability perspective and a computational perspective.

Now that the administrative domain wide management policy has been described it is helpful to work through some examples. Consider an administrative domain with a two tier application where a user device accesses a web server the first tier and the web server accesses a database server the second tier . In the first tier the user device is the consumer and the web server is the provider. In the second tier the web server is the consumer and the database server is the provider. The administrative domain includes two instances of this application one in a production environment and one in a staging environment.

The web servers and the database servers are managed servers and their descriptions e.g. label sets are present in the administrative domain state . For example their label sets are 

 The Application dimension the Line of Business dimension and the Location dimension are not relevant to this example so their labels are omitted. 

Now consider the following administrative domain wide management policy which is a security policy that specifies access control and secure connectivity 

Note that the rules above refer to services simply as Apache and PostgreSQL for clarity. Remember that a service is a process and is specified by a port protocol pair and optionally additional qualifications such as process information and or package information described above with respect to a description of a managed server within the administrative domain state .

Rule List 1 Rule 1 allows any device e.g. a user device to connect to a web server and use the Apache service. Specifically the allowance of a connection is specified by Access Control in the Function portion. The any device is specified by Anybody in the UB portion. The web server is specified by a label set that includes only one label in the PB portion. The Apache service is specified by Apache in the Service portion.

Rule List 1 Rule 2 allows a web server to connect to PostgreSQL on a database server. Specifically the allowance of a connection is specified by Access Control in the Function portion. The web server is specified by in the UB portion. The PostgreSQL is specified by PostgreSQL in the Service portion. The database server is specified by a label set that includes only one label in the PB portion.

Rule List 1 also prevents inter environment connections. For example a web server is allowed to connect to PostgreSQL on a database server if the web server and database server are both in the same environment e.g. both in the production environment or both in the staging environment . Both servers in the production environment is specified by a label set that includes only one label in the Scope portion while both servers in the staging environment is specified by a label set that includes only one label in the Scope portion. Since the scopes in this example do not distinguish between the PB portion and the UB portion each scope s label set is applied to both the PB portion and the UB portion. As a result a web server is not allowed to connect to PostgreSQL on a database server if the servers are in different environments e.g. if the web server is in the staging environment and the database server is in the production environment .

Rule List 2 states that whenever any managed server connects to a database server that connection must be performed through an encrypted channel. Specifically the database server is specified by in the PB portion. The encrypted channel is specified by Secure Connectivity in the Function portion. The any managed server is specified by Any managed server in the UB portion. The whenever is specified by All in the Service portion.

Turning aside from the above example consider the following two managed servers Server 1 is a web server that is part of production part of app1 and owned by engineering in California. It would be labeled as 

Server 2 is a database server that is part of production also part of app1 and also owned by engineering but in Germany. It would be labeled as 

Assume that an access control rule allows all access to all managed servers that are part of app1. This rule would allow Server 1 and Server 2 to communicate with each other and would disallow a managed server in Germany that is part of app2 from communicating with Server 1 or Server 2. Now assume that a secure connectivity rule specifies that all network traffic between EU and US must be encrypted. Rule functions are independently applied. In other words the secure connectivity rule is a separate policy that is applied independent of the access control rule. As a result the network traffic from Server 1 to Server 2 would be allowed given the access control rule and encrypted given the secure connectivity rule .

In some embodiments a managed server has services that are associated with different high level characteristics e.g. different roles environments applications or lines of business . These services executing on the same managed server can be described by different label sets. A service having a different label set than the managed server providing the service is referred to as a bound service. Rules that are applicable to the managed server according its label set are inapplicable to the managed server s bound services because the bound services have a different label set. Accordingly the administrative domain wide management policy includes rules applied according to the label set of a service rather than according to the label set of the managed server hosting the service.

A bound service provided by multiple managed servers is referred to as a distributed bound service. Each of the multiple managed servers providing the distributed bound service provides an instance of the distributed bound service. Bound services having the same label set and accordingly similar high level characteristics and provided by the same managed server may be referred to as a bound service group. The global manager may group bound services into bound service groups automatically as described with respect to the labeling engine and or according to instructions from an administrator. Since multiple managed servers provide instances of a distributed bound service the distributed bound service belongs to a bound service group on each of the multiple managed servers . The instances of the distributed bound service have the same label set so the various bound service groups containing the instances of the distributed bound service have matching label sets.

Turning to illustrated is a high level block diagram illustrating example services on managed servers A and B according to one embodiment. Managed server A includes services A B and C which have similar high level characteristics and accordingly are accurately described by the managed server A s label set. The managed server A also includes a bound service A which has a different label set than the managed server A. For example the managed server A has the label and the bound service A has the label . Continuing the example rules that are relevant to the managed server A include rules with a scope including at least one of and . However in this example rules with a scope of are not relevant to bound service A and rules with a scope of are not relevant to services A C. As another example rules often specify a PB portion and a UB portion in terms of label sets so different rules are relevant to services A C and bound service A. For brevity a managed server including one or more bound services with different label sets than the managed server may be referred to as a diverse managed server . In contrast a managed server executing only services adequately described by the managed server s label set i.e. a managed server without bound services may be referred to as a uniform managed server . 

Managed server B includes bound services B C and D. Because managed server B includes bound services it is a diverse managed server B. For example managed server B is set of blade servers at a data center providing cloud computing services and the bound services B D are micro services that consume only a fraction of the managed server B s processing resources. The administrative domain wide management policy may consider each of bound services B D as separate actors when determining which rules apply to managed server B and bound services B D. In some embodiments a managed server provides bound services with such diverse label sets that it is inaccurate to assign a particular label set to the managed server . The global manager may determine relevant rules for a managed server without a label set according to the bound services executing on the managed server .

The managed servers A and B each include an instance of the distributed bound service A. The distributed bound service A has a label set that differs from the respective label sets of managed servers A and B. For example the distributed bound service A has a label set including a label the managed server A has a label set including a label and the managed server B has a label set including a label.

The global manager organizes the bound services on managed servers A and B into bound service groups with matching label sets. Managed server A includes bound service group A which contains bound service A and bound service group B which contains distributed bound service A. Accordingly bound service A has a label set that is different from the label set of distributed bound service A. For example bound service A and the distributed bound service A have labels with different values for the Line of Business dimension. Managed server B includes bound service group C which contains bound services B and C and bound service group D which contains bound service D and distributed bound service A. Hence bound services B and C have matching label sets but their label sets differ from the label sets of bound service D and distributed bound service A in at least one dimension. Note that the two instances of distributed bound service A are in different bound service groups B and D that have matching label sets but correspond to different managed servers A and B.

Returning to the processing server generates management instructions for managed servers and bound services executing on those servers and sends the generated management instructions to the servers. The processing server also processes local state information received from managed servers . The processing server includes various modules such as a policy engine module a relevant rules module a function level instruction generation module an actor enumeration module a relevant actors module an administrative domain state update module a communication rule creation module and a midpoint device management module . In one embodiment the processing server includes a computer or set of computers that communicates with the repository and processes data e.g. by executing the policy engine module the relevant rules module the function level instruction generation module the actor enumeration module the relevant actors module the administrative domain state update module the communication rule creation module and the midpoint device management module .

The relevant rules module takes as input the administrative domain wide management policy and an indication of a particular managed server e.g. that server s UID generates a set of rules that are relevant to that server and outputs the set of rules. This is a filtering process by which the relevant rules module examines the management policy and extracts only the relevant rules for the given managed server . Similarly the relevant rules module may determine whether a rule is relevant to another device e.g. a labeled device a traffic midpoint device .

The relevant rules module identifies whether the managed server is executing any bound services and determines which rules are relevant to the managed server according to the overall label set of the diverse managed server as well as label sets of any identified bound services. The relevant rules module iterates through all of the rule lists in the management policy and analyzes the scope of each rule list to determine whether the scope applies to a at least one of the managed server according to the managed server s overall label set or b at least one of any identified bound services executing on the managed server . If the scope of a rule list applies to the managed server or at least one of its bound services the relevant rules module analyzes the rules of the rule list to determine which rules apply to the managed server or one of its bound services. For example a rule applies to the managed servers that provide a distributed bound service if the rule scope matches the label set of the distributed bound service.

A rule applies to a managed server if a the PB portion of the rule and or the UB portion of the rule specifies the managed server or one of its bound services and b the condition portion of the rule if present evaluates to true for that managed server specifically for the values of that managed server s configured characteristics and network exposure information . The end result referred to herein as a management policy perspective is a collection of two sets of rules rules where this managed server provides a service and rules where this managed server consumes a service. For example a rule applies to those managed servers providing a distributed bound service if a the PB portion of the rule specifies the distributed bound service e.g. using the distributed bound service s label set and b the condition portion of the rule evaluates to true for those managed servers providing the distributed bound service. For a diverse managed server each set of relevant rules may be further divided into a rules that apply to non bound services on the managed server and b rules that apply to each bound service on the diverse managed server .

The function level instruction generation module takes as input a set of rules e.g. a management policy perspective generated by the relevant rules module generates function level instructions and outputs the function level instructions. The function level instructions are later sent to a managed server as part of the management instructions. A function level instruction is similar to a rule in that each one includes a rule function portion a service portion a PB portion and a UB portion. However whereas a rule can include multiple items within its PB portion and or UB portion including label sets addresses of network interfaces managed server UIDs UDG UIDs or other device UIDS a function level instruction includes only one item within its PB portion and only one item within its UB portion. Also whereas a rule can specify a managed server bound service group or labeled device including the labeled actor s one or more network ports within its PB portion and or UB portion a function level instruction refers to only one network interface within its PB portion and one network interface within its UB portion. Alternatively or additionally a function level instruction refers to a network port within its PB portion or UB portion. Alternatively or additionally a function level instruction refers to an actor set within its PB portion or UB portion.

The function level instruction generation module analyzes a rule and generates one or more function level instructions based on that rule. If the rule s PB portion includes multiple items the rule s UB portion includes multiple items or a managed server referenced by the rule in the PB portion or UB portion has multiple network ports then the function level instruction generation module generates multiple function level instructions e.g. one function level instruction for each possible combination of a PB item a UB item and a particular network port . For a diverse managed server the function level instruction generation module determines the one or more network ports that correspond to the service to which the corresponding rule is relevant. For instance for a rule that is relevant to a particular bound service group the function level instruction generation module determines the one or more network interfaces used by the bound services in the bound service group.

Consider a rule that includes two items in its PB portion A and B and two items in its UB portion C and D . The function level instruction generation module would generate four function level instructions with the following PB and UB portions 1 PB A UB C 2 PB A UB D 3 PB B UB C 4 PB B UB D. Now consider a rule that covers multiple managed servers in its PB portion and multiple traffic midpoint devices in its UB portion e.g. by specifying a UID a label set or referring to an actor set . The function level instruction generation module may generate multiple function level instructions e.g. one function level instruction for each combination of traffic midpoint device actor set and managed server actor set or one function level instruction for each combination of managed server network interface and traffic midpoint device network interface .

The function level instruction generation module analyzes the rules the functions within those rules and the function profiles referenced by those rules. If a rule list includes multiple scopes then the function level instruction generation module applies those scopes multiple times to the rule list iteratively thereby generating a complete set of function level instructions for each scope . Recall that a rule function can be associated with multiple function profiles and a function profile can include a priority. The function level instruction generation module orders the rules based on the priorities of the various function profiles such that the function profile with the highest priority is used. The function level instruction generation module translates the ordered rules into function level instructions for the managed server to execute. Function level instructions reference the appropriate managed servers unmanaged devices labeled devices and or traffic midpoint devices taking into account the network exposure details of the services associated with the rules. The function level instructions also reference the appropriate services corresponding to the rule and or the network addresses of the ports corresponding to the appropriate services so the function level instructions can be used with managed servers with or without bound services.

Note that the function level instruction generation module can generate a function level instruction for a particular managed server that turns out to be irrelevant for that server. For example that managed server is covered by the provided by PB portion of a rule so the function level instruction generation module generates a corresponding function level instruction. However the rule also includes a portion that specifies the managed server s local state e.g. a service portion that describes the provided service . Since the global manager does not know the managed server s local state e.g. whether the managed server is actually providing that service the generated function level instruction is sent to the managed server. The managed server checks its local state e.g. whether it is providing that service and processes the function level instruction accordingly as explained below with reference to the policy compilation module .

The actor enumeration module takes as input a collection of descriptions of managed servers bound service groups labeled devices traffic midpoint devices and unmanaged device groups UDGs e.g. the administrative domain state generates representations of those descriptions of servers devices bound services and UDGs in an enumerated form referred to as actor sets and outputs the actor sets. For example the actor enumeration module enumerates the managed servers labeled devices and the UDGs within the administrative domain state and the possible label sets and assigns each a unique identifier UID . These actor sets can then be used in conjunction with UB portions and PB portions of rules and scopes which specify actors using managed server UIDs bound service group UIDs UDG UIDs and or label sets.

The actor enumeration module represents a diverse managed server using multiple actors. The actor set corresponding to a diverse managed server includes an actor corresponding to the managed server s overall label set as well as an actor for each bound service group provided by the diverse managed server . A bound service group refers to one or more bound services having the same label set and provided by a particular managed server . The representation of an actor corresponding to a group of bound services includes the group s label set as well as a UID assigned to the group of bound services. If a diverse managed server executes a distributed bound service then the actor representing the diverse managed server s distributed bound service is the bound service group containing the distributed bound service.

Consider a logical management model that includes a set of N dimensions D i 1 . . . N and each dimension Dincludes a set Sof possible values V j 1 . . . M where the wildcard is one of the possible values . In one embodiment the actor enumeration module enumerates all label sets that are possible based on the logical management model which are equal to the Cartesian product given by S S . . . S. The size of this set is M M . . . M. The enumeration process collapses the multi dimensional label space of the managed servers bound service groups and labeled devices into a simple enumerated form.

In another embodiment the actor enumeration module enumerates only those label sets that are possible based on the administrative domain state e.g. based on descriptions of managed servers and other actors within the administrative domain . For example consider a logical management model that includes 2 dimensions X and Y and each dimension includes 3 possible values A B and . A managed server with the label set can be a member of 4 possible label sets 1 2 3 and 4 . Note that the managed server s label set exists in 2 dimensional space X and Y while possible label sets 2 3 and 4 are projections of the managed server s label set into sub dimensional spaces label set 2 is 1 dimensional space X label set 3 is 1 dimensional space Y and label set 4 is 0 dimensional space . So the actor enumeration module enumerates those 4 possible label sets. The managed server with the label set cannot be a member of the label set so the actor enumeration module does not enumerate that label set.

In yet another embodiment the actor enumeration module enumerates only those label sets that are used in the administrative domain wide management policy e.g. in UB portions and PB portions of rules and scopes .

An actor set includes a UID and zero or more actor set records. An actor set record includes a UID either a managed server UID a labeled device UID a traffic midpoint device UID a UDG UID a bound service group UID an identifier of the actor s operating system and the actor s IP address given the specific BRN. For an actor that is a bound service group the actor s operating system is the operating system executing the bound services and the actor s IP address is the IP address of the managed server providing the bound service group. For example an actor set might include actor set records whose IP addresses correspond to all of the managed servers covered by the label set of and . As another example an actor set might include actor set records whose IP addresses correspond to all of the unmanaged devices in the Headquarters UDG. A single actor e.g. managed server unmanaged device labeled device bound service group traffic midpoint device can appear in multiple actor sets.

Another factor in the actor set calculation is actors with multiple ports and or network interfaces plus the inclusion of network topology such as network address translation NAT . So there could be two actor sets for the label set of and one actor set with the internet facing IP addresses of those managed servers i.e. associated with a first BRN and a different actor set for those same managed servers with the private network facing IP addresses of those managed servers i.e. associated with a second BRN .

In one embodiment the actor enumeration module can also update actor sets based on changes to the administrative domain state . For example the actor enumeration module takes as input actor sets previously output by the actor enumeration module and a change to a managed server s description within the administrative domain state generates updated actor sets which are consistent with the changed server description and outputs the updated actor sets. Similarly a detected change of state in an unmanaged device labeled device or traffic midpoint device triggers generation of updated actor sets. A bound service group changes when the membership of a bound service group changes e.g. removal of a constituent bound service detection of an additional bound service having the same label set as the bound service group or if the state of the managed server providing the bound services of the bound service group changes. The actor enumeration module generates the updated actor sets in different ways depending on the type of change to the description of the actor e.g. managed server unmanaged device labeled device bound service group traffic midpoint device .

Offline online change If the description change indicates that the actor went from online to offline then the actor enumeration module generates the updated actor sets by removing the actor s actor set record from all input actor sets of which the actor was a member. If the description change indicates that the actor went from offline to online then the actor enumeration module generates the updated actor sets by adding the actor s actor set record to any relevant input actor sets. If necessary the actor enumeration module creates a new actor set and adds the actor s actor set record to that new actor set. A bound service group experiences an offline online change when the managed server providing the constituent bound services switches between online and offline states.

Label set change If the description change indicates that the actor s label set changed then the actor enumeration module treats this like a first actor with the old label set going offline and a second actor with the new label set coming online. As an example a change in the label set of any of a bound service group s constituent bound services triggers 1 a change in the membership of the bound service group and 2 an update to the corresponding actor record.

Network exposure information change If the description change indicates that the actor removed a network interface or is associated with a different port then the actor enumeration module generates the updated actor sets by removing the actor s actor set record from all input actor sets associated with that network interface s BRN of which the actor was a member. If the description change indicates that the actor added a network interface or became associated with a new port then the actor enumeration module generates the updated actor sets by adding the actor s actor set record to any relevant input actor sets associated with that network interface s BRN or port s network address . If necessary the actor enumeration module creates a new actor set associated with that network interface s BRN or port s address and adds the actor s actor set record to that new actor set. If the description change indicates that the actor changed a network interface s BRN then the actor enumeration module treats this like a first network interface with the old BRN being removed and a second network interface with the new BRN being added. If the description change indicates that the actor changed a network interface s IP address but not the BRN then the actor enumeration module generates the updated actor sets by modifying the actor s actor set record in all input actor sets associated with that network interface s BRN of which the actor was a member. In response to a change in the port assigned to a bound service or to the port associated with a non bound service the actor enumeration module updates the actor set record of the bound service group corresponding to the bound service and the actor set records of other actors communicating with the changed port.

The relevant actors module takes as input one or more actor sets e.g. the managed servers labeled devices traffic midpoint devices the UDGs and bound service groups within the administrative domain state in enumerated form and a set of rules e.g. a management policy perspective determines which actor sets are relevant to those rules and outputs only those actor sets. This is a filtering process by which the relevant actors module examines the actor sets and extracts only the relevant actor sets for the given set of rules. The relevant actors module performs the filtering by iterating through all of the input actor sets analyzing the PB portions and UB portions of the input rules to determine whether a particular actor set is referenced by any of the rules PB portions or UB portions. The end result referred to herein as an actor perspective is a collection of actor sets. The actor perspective is later sent to a managed server as part of the management instructions.

In one embodiment the relevant actors module uses the input set of rules to generate an actor set filter. The actor set filter selects from the input actor sets only the actor sets that are relevant to the input rules. In other words the relevant actors module uses the actor set filter to filter the input actor sets into relevant actor sets.

The policy engine module generates management instructions for managed servers and sends the generated management instructions to the servers. The policy engine module generates the management instructions using the relevant rules module the function level instruction generation module the actor enumeration module and the relevant actors module based on a the administrative domain state and b the administrative domain wide management policy .

For example the policy engine module executes the relevant rules module providing as input the administrative domain wide management policy and the UID of a particular managed server . The relevant rules module outputs a set of rules that are relevant to that server a management policy perspective . The policy engine module executes the actor enumeration module providing as input the administrative domain state . The actor enumeration module outputs a representation of the descriptions of the managed servers labeled devices unmanaged device groups UDGs and bound service groups within the administrative domain state in an enumerated form actor sets . The policy engine module executes the function level instruction generation module providing as input the management policy perspective output by the relevant rules module . The function level instruction generation module outputs function level instructions. The policy engine module executes the relevant actors module providing as input the actor sets output by the enumeration module and the management policy perspective output by the relevant rules module . The relevant actors module outputs only those actor sets that are relevant to those rules relevant actor sets . The policy engine module sends the function level instructions output by the function level instruction generation module and the relevant actor sets output by the relevant actors module to the particular managed server .

In one embodiment the policy engine module caches information that was generated during the above process. For example the policy engine module caches in association with the particular managed server the management policy perspective the function level instructions the actor set filter and or the relevant actor sets. As another example the policy engine module caches the administrative domain s actor sets which are not specific to a particular managed server . As another example the policy engine module caches the management policy perspective the function level instructions the actor set filter and or the relevant actor sets in association with a particular bound service group.

Since an administrative domain s actor sets are based on the administrative domain state a change to the administrative domain state can require a change to the administrative domain s actor sets. Similarly since a managed server s management instructions are based on the administrative domain state and the administrative domain wide management policy a change to the administrative domain state and or a change to the administrative domain wide management policy can require a change to the managed server s management instructions. In one embodiment the policy engine module can update an administrative domain s actor sets and or update a managed server s management instructions and then distribute these changes if necessary to managed servers . The cached information mentioned above helps the policy engine module more efficiently update the administrative domain s actor sets and or the managed server s management instructions and distribute the changes.

In one embodiment the policy engine module updates an administrative domain s actor sets based on a change to the administrative domain state and distributes the changes to managed servers as follows The policy engine module executes the actor enumeration module providing as input the cached actor sets previously output by the actor enumeration module and the changed portion of the administrative domain state e.g. a changed server description . The actor enumeration module outputs the updated actor sets. In one embodiment the policy engine module then sends all of the updated actor sets to all of the managed servers within the administrative domain . However that embodiment is inefficient since not all managed servers are affected by changes to all actor sets.

In another embodiment only selected actor sets are sent to selected servers. For example a particular managed server is sent only those actor sets that a were previously sent to that server and b have changed. The cached relevant actor sets indicate which actor sets were previously sent to that server see a above . The policy engine module compares the cached actor sets to the updated actor sets to determine which actor sets have changed see b above . The policy engine module then computes the intersection of a and b . Actor sets in that intersection are sent to the particular managed server. In one embodiment for even greater efficiency actor sets are sent in diff format which describes differences between the cached actor sets and the updated actor sets. For example the diff format specifies an actor set identifier an actor identifier e.g. a managed server UID labeled device UID a UDG UID traffic midpoint device UID bound service group UID and an indication of whether that actor should be added to removed from or modified within the actor set.

In yet another embodiment the two tables are organized by service groups where an entry corresponding to a service group corresponds to either a a bound service group or b a managed server each entry corresponding to a managed server signifies those services on the managed server that are not bound services . A first table associates a service group with actor sets of which that service group is a member. A second table associates a service group with actor sets that are relevant to that service group e.g. as determined by the relevant actors module . In these tables a service group is represented by e.g. an identifier the managed server UID or the bound service group UID and an actor set is represented by e.g. that actor set s UID. The policy engine module uses the changed portion of the administrative domain state e.g. the changed server description to determine which managed server s description changed. The policy engine module uses the first table to determine which actor sets that service group was a member of Those actor sets might change as a result of the changed server description. So the policy engine module uses the second table to determine which service groups those actor sets are relevant to. The policy engine module performs the intersection computation described above for only those relevant service groups.

In one embodiment the policy engine module updates a managed server s management instructions based on a change to the administrative domain state and sends the updated management instructions to the managed server as follows The policy engine module executes the relevant rules module providing as input the administrative domain wide management policy and the UID of the managed server . If the managed server provides bound services the policy engine module may also provide the UID of a bound service group provided by the managed server . The relevant rules module outputs a set of rules that are relevant to that server a management policy perspective . The policy engine module compares the management policy perspective that was just output to the cached management policy perspective to determine whether they differ. If the just output management policy perspective and the cached management policy perspective are identical then the policy engine module takes no further action. In this situation the previously generated managed server s management instructions specifically the function level instructions and relevant actor sets are consistent with the change to the administrative domain state and do not need to be re generated and re sent to the managed server .

If the just output management policy perspective and the cached management policy perspective differ then the policy engine module determines which rules should be added to the cached perspective and which rules should be removed from the cached perspective. The policy engine module executes the function level instruction generation module providing as input the rules to add and the rules to remove. The function level instruction generation module outputs function level instructions to add and function level instructions to remove relative to the cached function level instructions which were previously sent to the managed server . The policy engine module instructs the managed server to add or remove the various function level instructions as appropriate. In one embodiment for greater efficiency function level instructions are sent in diff format which describes differences between the cached function level instructions and the updated function level instructions. For example the diff format specifies a function level instruction identifier and an indication of whether that function level instruction should be added to or removed from the previously sent function level instructions.

The policy engine module also executes the actor enumeration module providing as input the cached actor sets and the changed portion of the administrative domain state e.g. the changed server description . The actor enumeration module outputs the updated actor sets. The policy engine module executes the relevant actors module providing as input the updated actor sets and the just output management policy perspective. The relevant actors module outputs only those updated actor sets that are relevant to those rules updated relevant actor sets .

The policy engine module compares the updated relevant actor sets to the cached relevant actor sets to determine whether they differ. If the updated relevant actor sets and the cached relevant actor sets are identical then the policy engine module sends no actor sets to the managed server . In this situation the previously generated relevant actor sets are consistent with the change to the administrative domain state and do not need to be re sent to the managed server. If the updated relevant actor sets and the cached relevant actor sets differ then the policy engine module determines which actor sets should be added removed or modified relative to the cached relevant actor sets. The policy engine module instructs the managed server to add remove or modify the various actor sets as appropriate. In one embodiment for greater efficiency actor sets are sent in diff format which describes differences between the cached relevant actor sets and the updated relevant actor sets. For example the diff format specifies an actor set identifier and an indication of whether that actor set should be added to removed from or modified relative to the previously sent actor sets.

Recall that the policy engine module can update a managed server s management instructions based on a change to the administrative domain wide management policy and send the updated management instructions to the managed server . A change to the management policy is for example the addition removal or modification of a rule or a rule set. In one embodiment a change to the management policy is generated by interaction with the global manager via a GUI or API. In another embodiment a change to the management policy is generated by an automated process within the global manager e.g. in response to a security threat detected by the global manager . The policy engine module updates the managed server s management instructions and sends the updated management instructions to the managed server in a similar way regardless of whether there was a change to the management policy or a change to the administrative domain state . However there are a few differences.

In the case of a change to the management policy the policy engine module does not necessarily update management instructions for all managed servers . Instead the policy engine module compares the previous management policy to the new management policy to determine which rules should be added removed or modified relative to the previous management policy . The policy engine module determines which managed servers are affected by the changed rules e.g. which managed servers or bound service groups are covered by a the rules and or scopes PB and or UB portions and b the rules conditional portions if any . The policy engine module executes the relevant rules module providing as input the changed rules instead of the entire new management policy and the UID of the managed server for only those servers that are affected by the changed rules .

The administrative domain state update ADSU module receives changes to the administrative domain state and processes those changes. A change to the administrative domain state is for example the addition removal or modification of a description of a managed server bound service group or labeled device including the modification of label set or configured characteristics or a description of an unmanaged device or unmanaged device group. In one embodiment a change to the administrative domain state originates in local state information received from a particular managed server . In another embodiment a change to the administrative domain state is generated by interaction with the global manager via a GUI or API. In yet another embodiment a change to the administrative domain state is generated by an automated process within the global manager e.g. in response to a security threat detected by the global manager .

For example the ADSU module receives a change regarding a particular unmanaged device . The ADSU module stores the new information in the administrative domain state e.g. as part of an unmanaged device group of which that particular unmanaged device is a member . The ADSU module then updates the administrative domain s actor sets based on the unmanaged device group change. Specifically the ADSU module instructs the policy engine module to update the administrative domain s actor sets. In one embodiment the ADSU module waits for an event to occur before instructing the policy engine module to update the administrative domain s actor sets. This event can be for example receipt of a user command or occurrence of a specified maintenance window.

As another example the ADSU module receives a change regarding a particular bound service group on a managed server . The ADSU module stores the new information in the administrative domain state as part of the description of that particular managed server . The ADSU module then optionally analyzes that bound service group s description to determine additional information regarding the bound service group and stores that information in the description. Additionally if the description of the managed server providing the bound service group changes or if the description of the bound service group changes then the ADSU module analyzes the change and determines if the change affects the administrative domain s actor sets and or the corresponding managed server s management instructions. If the ADSU module determines to update the administrative domain s actor sets then the ADSU module instructs the policy engine module to update the administrative domain s actor sets. In one embodiment the ADSU module waits for an event to occur before instructing the policy engine module to update the administrative domain s actor sets. If the ADSU module determines to update the corresponding managed server s management instructions then the ADSU module instructs the policy engine module to update the managed server s management instructions. In one embodiment the ADSU module waits for an event to occur before instructing the policy engine module to update the managed server s management instructions. The aforementioned events can be for example receipt of a user command or occurrence of a specified maintenance window.

Whether or not the ADSU module determines to update the administrative domain s actor sets and or the managed server s management instructions depends on the type of change to the managed server s description or the description of bound services provided by the managed server . In one embodiment the ADSU module makes this determination as shown in Table 2 

In one embodiment the ADSU module determines additional information regarding the server by executing the label configured characteristic engine and providing the server s description as input. The label CC engine calculates labels CC values for the server and for bound services it provides based on the server s description the description of any bound services and label CC assignment rules. One embodiment of a labeling engine is described with respect to . In another embodiment the ADSU module determines whether the server is behind a network address translator NAT and if it is behind a NAT what type of NAT 1 1 or 1 N .

The communication rule creation module is described below in the section entitled Access Control Rules and with respect to .

The midpoint device management module is described below in the section entitled End to end communication policy and with respect to .

The policy compilation module takes as input management instructions and state of a managed server and generates a management module configuration . For example the management instructions are received from the global manager and include function level instructions generated by the function level instruction generation module and relevant actor sets output by the relevant actors module . The state of the managed server is retrieved from the local state repository . In one embodiment execution of the policy compilation module is triggered by a the managed server powering up or coming online b the managed server receiving management instructions and or c the contents of the local state repository changing.

The policy compilation module maps the function level instructions and relevant actor sets into a management module configuration . For example the policy compilation module maps an access control function level instruction which contains a port and an actor set reference into an iptables entry and an ipset entry in the Linux operating system or a Windows Filtering Platform WFP rule in the Windows operating system.

The application of management policy at a managed server can be affected by the local state of that server. In one embodiment the policy compilation module evaluates a condition associated with a received function level instruction and generates the management module configuration based on the result of that evaluation. For example the policy compilation module evaluates a condition that references the operating system of the managed server s peer i.e. the other actor in the relationship and selects function profile attributes based on the result of that evaluation where the selected function profile attributes are expressed in the management module configuration .

As another example recall that a managed server can receive a function level instruction that turns out to be irrelevant for that server. For example the rule includes a portion that specifies the managed server s local state e.g. a service portion that describes the provided service . Since the global manager does not know the managed server s local state e.g. whether the managed server is actually providing that service the generated function level instruction is sent to the managed server. The policy compilation module checks the managed server s local state e.g. determines whether the managed server is providing that service . This determination amounts to evaluating a condition that references the managed server s local state. The policy compilation module processes the function level instruction accordingly. If the policy compilation module determines that the condition evaluates to true e.g. the managed server is providing that service then the policy compilation module incorporates that function level instruction into the management module configuration . Specifically the policy compilation module incorporates function level instructions into the management module configuration only after evaluating the associated condition which concerns the local state of that server . If the evaluation of the condition is false then the policy compilation module does not express the function level instructions in the management module configuration . The specific conditions e.g. their nature and particular values are extensible. In one embodiment the conditions are related to the definition of a service and include process information and or package information described above with respect to a description of a managed server within the administrative domain state .

For example consider a function level instruction that allows access to only the Apache service inbound on port 80 i.e. where the managed server is the provider or endpoint . The managed server expresses this function level instruction in the management module configuration to allow access on port 80 only after evaluating the associated condition which concerns whether the application executing on that server that is listening on port 80 is actually Apache and not some other application rogue or otherwise . The managed server expresses this function level instruction in the management module configuration only after determining that the associated condition evaluates to true. If the associated condition evaluates to false then the managed server does not express this function level instruction in the management module configuration . As a result the network traffic is blocked.

In one embodiment a managed server monitors its outbound connections. The managed server compares outbound network traffic to its internal process table to determine which processes in that table are establishing those outbound connections. The managed server can enforce a rule that allows only certain processes given a set of requirements mentioned above as process information to establish an outbound connection.

In one embodiment not shown the policy compilation module is located at the global manager instead of at the managed server . In that embodiment the global manager does not send management instructions to the managed server . Instead the managed server sends its local state to the global manager . After the policy compilation module generates the management module configuration at the global manager the management module configuration is sent from the global manager to the managed server .

The local state update LSU module monitors the local state of the managed server and sends local state information to the global manager . In one embodiment the LSU module determines an initial local state of the managed server stores appropriate local state information in the local state repository and sends that local state information to the global manager . The LSU module determines the local state of the managed server by inspecting various parts of the server s operating system OS and or file system. For example the LSU module obtains service information from the OS kernel tables networking information the OS system tables package information and the file system files and hash values . The LSU module obtains network exposure information from the OS kernel and and or OS level data structures.

After the LSU module sends the initial local state information to the global manager the LSU module monitors changes to the local state. The LSU module monitors changes by for example polling e.g. performing inspections periodically or listening e.g. subscribing to an event stream . The LSU module compares recently obtained local state information to information already stored in the local state repository . If the information matches then the LSU module takes no further action until local state information is obtained again . If they differ then the LSU module stores the recently obtained information in the local state repository executes the policy compilation module to re generate the management module configuration and re configures the management module accordingly and notifies the global manager of the change. In one embodiment the LSU module sends changes to local state information to the global manager in diff format which describes differences between the local state information that was previously stored in the local state repository and therefore previously sent to the global manager and the recently obtained local state information. For example the diff format specifies a type of local state information e.g. operating system and a new value for that information type. In another embodiment the LSU module sends the entire contents of the local state repository to the global manager .

When the method starts the administrative domain state and an administrative domain wide management policy have already been stored in the repository of the global manager . At this point the method begins.

In step the administrative domain state and the administrative domain wide management policy are accessed. For example the policy engine module sends a request to the repository and receives the administrative domain state and the administrative domain wide management policy in response.

In step one or more relevant rules are determined. For example the policy engine module executes the relevant rules module providing as input the administrative domain wide management policy the UID of the particular managed server and a UID of a traffic midpoint device . The relevant rules module outputs a set of rules that are relevant to both the managed server and traffic midpoint device management policy perspective .

In step actors are enumerated. For example the policy engine module executes the actor enumeration module providing as input the administrative domain state . The actor enumeration module generates a representation of the managed servers labeled devices traffic midpoint devices unmanaged device groups UDGs and bound service groups within the administrative domain state in an enumerated form actor sets .

In step one or more function level instructions are generated. For example the policy engine module executes the function level instruction generation module providing as input the management policy perspective generated in step . The function level instruction generation module generates function level instructions relevant to the input managed server and traffic midpoint device .

In step one or more relevant actors are determined. For example the policy engine module executes the relevant actors module providing as input the actor sets generated in step and the management policy perspective generated in step . The relevant actors module outputs only those actor sets that are relevant to those rules relevant actor sets .

In step management instructions are sent to the particular managed server . For example the policy engine module sends the function level instructions generated in step and the relevant actor sets generated in step to the particular managed server .

Note that steps and concern generating the management policy perspective and resulting function level instructions for a particular managed server in communication with a particular traffic midpoint device while steps and concern generating the actor perspective for these devices. The generation of the management policy perspective and the generation of the actor perspective are minimally dependent on each other since step generates a set of rules that is used by step . Even so keeping the management policy calculations i.e. steps and and the actor set calculations i.e. steps and separate enhances the scalability of the policy engine module . Since the management policy calculations and the actor set calculations are kept mostly separate they can be performed in parallel e.g. for different combinations of a particular managed server with different traffic midpoint devices . In addition perspective calculations for different managed servers can also be performed in parallel. Also if an actor changes then only the actor sets need to be recalculated. The function level instructions do not need to be recalculated. If a rule changes then only the function level instructions and the relevant actor sets need to be recalculated. The actors do not need to be re enumerated. 

When the method starts information regarding the local state of the managed server has already been stored in the local state repository of the policy implementation module in the managed server . At this point the method begins.

In step management instructions are received from the global manager . For example the policy compilation module receives function level instructions and relevant actor sets from the global manager .

In step the local state is accessed. For example the policy compilation module accesses information regarding the local state of the managed server that is stored in the local state repository .

In step a management module configuration is generated. For example the policy compilation module takes as input the management instructions received in step and the local state accessed in step and generates a management module configuration .

In step a management module is configured. For example the policy compilation module configures the management module to operate in accordance with the management module configuration generated in step .

When the method starts information regarding local state of the managed server has already been stored in the local state repository of the managed server . At this point the method begins.

In step information regarding the current local state of the managed server is determined. For example the LSU module determines the local state of the managed server by inspecting various parts of the server s operating system OS and or file system to determine services or bound services executed by the managed server .

In step a determination is performed regarding whether information regarding the current local state differs from information stored in the local state repository . For example the LSU module performs this determination. If the information does not differ then the method proceeds to step and ends. If the information does differ then the method proceeds to step .

In step the differing information is stored in the local state repository . For example the LSU module performs this step.

In step the management module configuration is re generated because the contents of the local state repository have changed and the management module is re configured accordingly. For example the LSU module executes the policy compilation module which re generates the management module configuration .

In step the differing information is sent to the global manager . For example the LSU module performs this step.

In step a change regarding a particular managed server is received. For example the administrative domain state update ADSU module receives an online offline indicator an operating system indicator network exposure information and or service information from the managed server as part of local state information. As another example the ADSU module receives information from a traffic midpoint device indicating that the traffic midpoint device s security configuration online offline status or utilization settings have been changed. The change may also regard another actor such as an unmanaged device or a labeled device .

In step the received information is stored. For example the ADSU module stores the received online offline indicator network exposure information and or service information in the administrative domain state specifically in the description of the managed server or traffic midpoint device to which the information pertains .

In step the server description is analyzed to determine additional information regarding the server. For example the ADSU module uses a label configured characteristic engine to calculate labels CC values for the managed server and or determines whether the server is behind a network address translator NAT and if it is behind a NAT what type of NAT 1 1 or 1 N and stores that information in the server description. Alternatively or additionally the NAT information may be received directly from the relevant traffic midpoint device . The ADSU module may also use a label configured characteristic engine to calculate labels CC values for a labeled device when the state of the labeled device changes. Step is optional.

In step a determination is made regarding whether to update the administrative domain s actor sets. For example the ADSU module determines whether to update the administrative domain s actor sets based on a change to the managed server s description. As another example the ADSU module determines whether to update the administrative domain s actor sets based on a change to a labeled device s description or traffic midpoint device s description. If a determination is made to update the administrative domain s actor sets then the method proceeds to step . If a determination is made not to update the administrative domain s actor sets then the method proceeds to step .

In step the administrative domain s actor sets are updated. For example the ADSU module instructs the policy engine module to update the administrative domain s actor sets and notify affected managed servers accordingly. In one embodiment not shown the ADSU module waits for an event to occur before instructing the policy engine module to update the administrative domain s actor sets.

In step a determination is made regarding whether to update the managed server s management instructions. For example the ADSU module determines whether to update the managed server s management instructions based on a change to the managed server s description or a change to the traffic midpoint device s description. If a determination is made to update the managed server s management instructions then the method proceeds to step . If a determination is made not to update the managed server s management instructions then the method proceeds to step .

In step the managed server s management instructions are updated. For example the ADSU module instructs the policy engine module to update the managed server s management instructions. In one embodiment not shown the ADSU module waits for an event to occur before instructing the policy engine module to update the managed server s management instructions. Updating the managed server s management instructions may also include modifying a configuration of a traffic midpoint device to ensure enforcement of a rule by both a managed server and the traffic midpoint device on either side of a segment.

Recall that the administrative domain wide management policy of the global manager includes a set of communication rules . The set of communication rules contains one or more communication rules which are rules that control communication between two actors of the administrative domain. Example rules in the set of communication rules include rules having a rule function specifying permissible communications referred to herein as access control rules rules having a rule function mandating encryption of communication referred to herein as encryption rules and rules having a rule function regulating bandwidth usage referred to herein as bandwidth rules . Other example communication rules are possible such as a rule specifying a Layer 7 service to apply to a communication.

Broadly a communication rule authorizes communication between a first actor e.g. a managed server a traffic midpoint device a bound service and a second actor e.g. another managed server another bound service an unmanaged device a labeled device another traffic midpoint device or a device external to the administrative domain . A communication rule specifies a provided by PB portion a used by UB portion a service. For example an access control rule specifies whether a consumer specified by the UB portion may use a service from a provider specified by the PB portion. In one embodiment the access control rules are used in a pure whitelist model in which a consumer may access a service on a provider only if the set of access control rules includes an access control rule with matching PB UB and service portions. As another example an encryption rule mandates a particular type of encryption for communication between a consumer and provider of a service specified by the rule.

A communication rule may only partially specify the PB UB and service portions by using a wildcard in place of one or more portions. For example if an access control rule has a UB portion that specifies a wildcard then any managed server unmanaged device labeled device traffic midpoint device or other device external to the administrative domain may access the service. The PB and UB portions may specify one or more particular actors e.g. using managed server UIDs bound service group UIDs or UDG UIDs one or more label sets or a combination thereof. If the PB or UB portion specifies the UID of a distributed bound service then the PB or UB portion is equivalent to a PB or UB portion that specifies the UIDs of the managed servers executing the instances of the distributed bound service. An example access control rule has a PB portion indicating a particular managed server and a UB portion indicating the label set and . The example access control rule allows managed servers having a Database Server role and belonging to the Production environment to access the service at the particular managed server . The example access control rule also allows a bound service having the Database Server role and belonging to the Production environment to access the service even in the bound service is provided by a managed server having a label set with values for the role and environment dimensions.

Recall that the policy implementation module of a managed server includes an alert generation module . The alert generation module monitors communication also referred to as network traffic between the managed server and other actors managed servers unmanaged devices labeled devices bound service groups or devices external to the administrative domain for compliance with access control rules contained in the management module configuration . The alert generation module generates an alert in response to detecting a communication that does not comply with the access control rules referred to as an unauthorized communication and sends the alert to the global manager where the alert is processed by the communication rule creation module specifically by the alert processing module . An unauthorized communication includes an attempt by a consumer to use a service provided by the managed server as well as an attempt by the managed server to use a service provided by another actor. For example an attempt to send network traffic to or receive network traffic from a port associated with a service can be an unauthorized communication. In an embodiment where the access control rules serve as a whitelist of permissible activities the management module allows attempted communication that matches an access control rule and denies attempted communication that does not match an access control rule.

When the management module denies or blocks communication to or from the managed server the alert generation module generates an alert. The alert describes the service the provider of the service e.g. using the UID or label set of the relevant actor and the consumer of the service e.g. using the UID or label set of the relevant actor corresponding to the communication. The alert may contain relevant service information about the service as well as network exposure information about the provider and consumer. The alert may contain communication information that describes characteristics of the communication. Communication information may include timing duration frequency protocol type data size e.g. total size packet size or data rate of the attempted communication. For example the communication information differentiates between a single attempt to access a service and repeated attempts to access the service. Communication information may also describe routing information of communication such as source address destination address and path information e.g. load balancers or other traffic midpoint devices routing the unauthorized communication .

Recall that the processing server of the global manager includes a communication rule creation module . is a high level block diagram illustrating a detailed view of the communication rule creation module of the global manager according to one embodiment. The communication rule creation module includes a contextual information collection module a bound service identification module an actor grouping module a labeling engine a flow processing module an alert processing module and an access control rule ACR creation interface .

The contextual information collection module obtains contextual information describing actors in the administrative domain managed servers unmanaged devices labeled devices traffic midpoint devices bound services and describing communication sent or received by actors in the administrative domain . The contextual information collection module may also obtain service information describing individual services on individual devices. Contextual information includes managed server information service information unmanaged device information external device information communication information and administrative domain information.

Managed server information describes characteristics of a managed server . Managed server information includes service information such as process information and package information as described above with respect to the administrative domain state . Managed server information may describe identifiers e.g. UID internet protocol IP address media access control MAC address host name hardware resources e.g. processor type processor throughput processor load total memory available memory network interface devices storage device type or managed server type e.g. physical device cloud provided virtual device virtual machine Linux container . Managed server information may describe software resources such as the operating system and other software described by process information and package information.

The contextual information module obtains service information from managed servers about services executing on the managed servers . In some embodiments the contextual information module obtains service information about services without information indicating whether the services are bound services. In other embodiments the contextual information module obtains a list of bound services and aggregates information from bound services and or bound service groups. Since the contextual information collection module may obtain bound service information before or after bound services are labeled and sorted into bound service groups bound service information may be on a per bound service basis or a per bound service group basis. Such bound service information includes process and package information of constituent bound services the bound service UID as well as managed server information of the managed server providing the bound services of the bound service group as well as any environment information associated with the managed server . Bound service information may also specify ports used by the bound service on the managed server where the specified ports override the ports typically assigned to the bound service. For a distributed bound service the bound service information includes pointers such as UIDs to the managed servers providing the distributed bound service.

A virtualized or cloud based managed server is also associated with environment information which describes the provider of the managed server e.g. a proprietary data center a third party private data center a cloud provider as well as the communication protocol e.g. encapsulation information network address network address translation to communicate with the provider. Managed server information about a managed server is stored in the managed server s local state repository and sent to the global manager for processing by the contextual information collection module . To retrieve managed server information from a virtualized or cloud based managed server the contextual information collection module may query the cloud service provider or the software providing the virtual server to send managed server information or other contextual information.

Unmanaged device information describes characteristics of unmanaged devices labeled devices and traffic midpoint devices . Unmanaged device information includes network exposure information as described above with respect to the administrative domain state identifiers e.g. UDG UID IP address MAC address device name hardware resources software resources or network connectivity e.g. available ports mapping between ports and services of an unmanaged device or labeled device . A managed server may collect unmanaged device information about traffic midpoint devices or labeled devices that communicate with the managed server and send the unmanaged device information to the global manager for processing by the contextual information collection module . Alternatively or additionally the global manager queries or probes unmanaged devices or labeled device in the administrative domain to collect unmanaged device information. Since unmanaged devices labeled devices and traffic midpoint devices do not include a policy implementation module that reports the unmanaged device s local state unmanaged device information may be incomplete or less detailed than managed server information.

External device information describes characteristics of devices external to the administrative domain communicating with managed servers . External device information may include identifiers e.g. IP address uniform resource locator URL other web address hardware resources software resources or network connectivity of an external device. Managed servers may collect external device information and send the information to the global manager for processing by the contextual information collection module but much external device information may not be visible to managed servers . In addition external device information describes reputation information of the external device which indicates trustworthiness of the external device. In one embodiment the contextual information collection module obtains reputation information matching the external device s identifier. Using the reputation information the contextual information collection module classifies the external device as safe malicious or neutral. Reputation information may be a binary indicator e.g. whether the external device s identifier is on a blacklist or a score e.g. a relative assessment of danger associated with an identifier .

Communication information is described above with respect to the alert generation module . A managed server sends communication information to the global manager that describes communication sent or received by the managed server . In one embodiment a managed server sends communication information about communication independently of evaluating whether the communication is authorized or unauthorized. When the contextual information collection module receives duplicate communication information describing the same communication the contextual information collection module may merge or de duplicate the duplicate communication information. For example the contextual information collection module de duplicates communication information received from two managed servers one providing a service and one consuming the service.

The contextual information collection module generates administrative domain information based on contextual information received from managed servers . Administrative domain information aggregates contextual information over the administrative domain or over a subset of actors in the administrative domain . The subset of actors in the administrative domain may be managed servers bound services bound service groups labeled devices traffic midpoint devices or a combination of devices described by a label set. In one embodiment administrative domain information describes communications having at least one common characteristic. The common characteristic may be a particular port process protocol or actor e.g. a managed server an unmanaged device a labeled device a bound service group a bound service an external device a traffic midpoint device . For example the contextual information collection module generates administrative domain information indicating the number of managed servers having corrupted binaries associated with a particular service. As another example the contextual information collection module generates administrative domain information indicating a number of managed servers scanned by a particular actor. Scanning refers to sending a request e.g. probe to a managed server and using the managed server s response or lack thereof to obtain or automatically determine the configuration of the managed server and processes executing on the managed server .

In one embodiment the contextual information collection module generates administrative domain information indicating unusual activity within the administrative domain . The contextual information collection module identifies contextual information associated with a particular actor or an actor group having a common label set a common service or some other characteristic. The contextual information collection module summarizes the contextual information using a quantity e.g. amount of communication number of corrupted files and compares the quantity to a threshold quantity. The threshold quantity may be based on a preconfigured setting or may be determined dynamically based on previous historical norms for the quantity. For example the threshold quantity is two standard deviations above the weekly moving average for the quantity. In response to the comparison to the threshold quantity the contextual information collection module determines whether the summarized contextual information is unusual. For example the contextual information collection module determines that a managed server is attempting to access an unusual number of ports unassociated with any services if the number of such ports that the managed server has accessed exceeds a threshold number.

The actor grouping module obtains communication information describing communication between actors in the administrative domain . Based on the communication information the actor grouping module groups the managed servers bound service groups unmanaged devices labeled devices and or traffic midpoint devices into application groups. An application group is a set of actors e.g. managed servers unmanaged devices labeled devices traffic midpoint devices bound services bound service groups having significant volume of communication within the group compared to volume of communication with actors external to the group. For purposes of determining application groups the actor grouping module separates communications resulting from bound services executing on a managed server from communications attributable to non bound services on the managed server .

In one embodiment the actor grouping module constructs a graph where the nodes represent actors in the administrative domain and where the edges represent communication between the actors. The edges have binary values indicating presence absence of communication between the nodes or have non binary values quantifying the volume of communication e.g. frequency data size duration . For example the value of an edge connecting two nodes is the daily quantity of data exchanged between a managed server corresponding to the first node and a traffic midpoint device corresponding to the second node. The graph may be undirected with edges that disregard direction of communication or the graph may be directed with directed edges according to direction of communication. For example a directional edge pointing away from a node indicates that the corresponding managed server is a consumer of a service and a directional edge pointing towards a node indicates that a corresponding bound service is the provider of a service. Since managed servers report presence and or quantity of communication between actors to the global manager the graph may include values of edges between nodes where one node corresponds to a managed server and the other node corresponds to a traffic midpoint device . Values of edges between nodes corresponding to two traffic midpoint devices may be partially inferred based on communications reported by managed servers if those communications can be presumed to have passed between the two traffic midpoint devices . However such inference may not be possible depending on the topology of the network.

Using the graph representation of the administrative domain the actor grouping module groups the actors into application groups. In one embodiment the actor grouping module partitions the graph into sub graphs each corresponding to an application group. For example the actor grouping module applies a depth first search a k means cluster or a minimum cut algorithm to partition the graph. In other words the actor grouping module groups the managed servers into application groups by applying a graphical analysis to communication information gathered by the contextual information collection module . In one embodiment the actor grouping module constructs a graph where different devices are distinct nodes and edges represent communication between different devices. Using such a graph the actor grouping module may identify actor groups having a common label set.

The labeling engine obtains managed server information and bound service information which the labeling engine uses to determine labels for managed servers bound services and unlabeled traffic midpoint devices . Since managed server information is typically more extensive than unmanaged device information many of the following examples concern using managed server information to determine label sets for managed servers . However if the labeling engine obtains sufficiently detailed unmanaged device information about a traffic midpoint device the labeling engine may use the unmanaged device information to determine a label set for the traffic midpoint device .

In one embodiment the labeling engine determines a group level label set i.e. one or more group level labels to associate with the labeled actors in an application group. In one embodiment the group level label set includes labels with dimensions corresponding to the environment application and location of the labeled actors. Labels are described further with respect to Table 1 and the administrative domain wide management policy . The labeling engine may determine the value of a labeled actor s location dimension based on locations of web addresses e.g. an IP address and or a URL associated with the labeled actor. The labeling engine may determine the value of a labeled actor s label based on conditional heuristics that use contextual information and or information derived from contextual information . A conditional heuristic can be created by an administrator or can be preconfigured. For example a conditional heuristic specifies that if a managed server is provided by a particular cloud service provider or located in a particular data center then the labeling engine determines a particular value for the managed server s line of business dimension. As another example a conditional heuristic specifies that if a managed server contains a particular file or process or a particular set of files or processes then the labeling engine determines a particular value for the managed server s application dimension. The labeling engine may request an administrator to indicate a group level label set or to verify an automatically generated group level label set. The labeling engine modifies the group level label set in response to an indication or correction by the administrator.

Besides group level label sets applicable to an application group the labeling engine determines role labels i.e. labels with a role dimension for individual labeled actors within an application group. In one embodiment the labeling engine determines a role label for a managed server based on hardware resources service information or other managed server information. For example the labeling engine determines that a managed server has a Database role if the total available memory exceeds a threshold. As another example the labeling engine determines that a managed server has a Load Balancer role based on the number of network interfaces. Similarly the labeling engine determines a role label for a managed server based on its associated services or processes. For example a SQLServer process indicates that a managed server has a Database role. In one embodiment the labeling engine obtains information regarding processes executing on a managed server from managed server information and determines the value of the role dimension based on the processes. Table 3 illustrates an example mapping between processes and role dimension values.

The flow processing module obtains communication information between actors in the administrative domain and generates access control rules corresponding to the communication information. In one embodiment the flow processing module identifies communication not authorized by an access control rule and generates an access control rule authorizing the communication. To generate the access control rule the flow processing module identifies the service generating the communication the provider of the service and the consumer of the service. The flow processing module generates the access control rule with a service portion indicating the identified service a PB portion indicating the identified provider and a UB portion indicating the identified consumer. In one embodiment the flow processing module assumes that there are no abnormal or malicious communications in the administrative domain and accordingly generates access control rules authorizing any communication present in the administrative domain .

In one embodiment the flow processing module generates access control rules based on group level label sets and role labels of labeled actors e.g. managed servers traffic midpoint devices labeled devices bound service groups . The flow processing module determines a target access control rule. For example the target access control rule is specified by an administrator through a GUI e.g. by indicating a particular edge of a displayed graph corresponding to the graph generated by the actor grouping module . The generated access control rule specifies a service a first labeled actor as a provider of the service and a second labeled actor as a consumer of the service. The flow processing module identifies role labels and group level label sets of the first and second labeled actors generated by the labeling engine . The flow processing module then generates additional access control rules applying to other consumer provider pairs of labeled actor using the specified service corresponding to particular edges of the displayed graph . The identified managed servers that are providers of the service have group level label sets and role labels matching those of the first labeled actor. The identified managed servers that are consumers of the service have group level label sets and role labels matching those of the second labeled actor. Alternatively or additionally to generating additional access control rules covering the identified consumer provider pairs of labeled actors the flow processing module broadens the target access control rule to include the identified consumer provider pairs of labeled actors. For example the broadened access control rule s PB portion and UB portion are specified in terms of label sets including the role label and group level label sets rather than in terms of UIDs of particular labeled actors.

In one embodiment the flow processing module generates an access control rule controlling communication between a first labeled actor and an unlabeled actor e.g. an unmanaged device or UDG an unlabeled traffic midpoint device an external device outside of the administrative domain . The flow processing module identifies an existing access control rule specifying a service a first labeled actor and the unlabeled actor. The flow processing module identifies a second labeled actor having similar labels including role label and group level label set as the first labeled actor. The first and second labeled actors are either both consumers of the specified service or both providers of the specified service. The flow processing module generates another access control rule authorizing service related communication between the second labeled actor and the unlabeled actor. Alternatively or additionally to generating an additional access control rule the flow processing module broadens the existing access control rule by specifying the access control rule s PB portion or UB portion in terms of the first labeled actor s label set including the role label and group level label set rather than in terms of a UID of the first labeled actor.

In one embodiment the flow processing module generates rules to modify the server state of the managed servers within the administrative domain . The server state determines to what extent the management modules implement the access control rules. In an enforcement state the management modules block or terminate communication that is unauthorized according to the access control rules. For example in a pure whitelist policy the management modules block or terminate communications that do not match at least one access control rule. The server states also include a build state and a test state where the management modules permit communications even if the communications are not authorized by an access control rule. To initiate a build state or test state the flow processing module generates an unrestricted access control rule with PB UB and service portions that specify wildcards. In other words the unrestricted access control rule authorizes all communication because there are no restrictions on the access control rule s applicability to various services or actors. To transition to enforcement state from build state or test state the flow processing module removes the unrestricted access control rule.

The alert processing module obtains alerts from managed servers processes the alerts and if appropriate generates access control rules based on the obtained alerts. In one embodiment the alert processing module obtains alerts from managed servers when the managed servers are in an enforcement state or a test state. When a managed server is in a build state the alert processing module instructs the managed server not to generate alerts in response to detecting communication that is not authorized by an access control rule. When a managed server is in a test state the alert generation module generates alerts indicating unauthorized traffic even though the management module is not enforcing the access control rules to block the unauthorized traffic.

Before generating an access control rule in response to an alert the alert processing module classifies the communication that triggered the alert using obtained contextual information relevant to the alert. The contextual information includes communication information describing the communication managed server information about any managed servers sending or receiving the communication or administrative domain information. If the alert is generated in response to communication with an external device the contextual information includes external device information. If the alert is generated in response to communication with an unmanaged device or labeled device the contextual information includes unmanaged device information. The alert processing module classifies the communication triggering the alert as being legitimate or malicious based on the obtained contextual information. For example if the external device information indicates that the external device is malicious then the communication is classified as malicious.

In one embodiment the alert processing module classifies communication as malicious if the administrative domain information indicates that the actor initiating the communication is associated with unusual activity. The contextual information collection module may generate administrative domain information summarizing the number of alerts associated with a common characteristic such as a common actor process port or protocol. If the number of alerts associated with the common characteristics exceeds a threshold number then the contextual information collection module classifies the communication as malicious. For example if the number of alerts generated in response to traffic initiated by a managed server exceeds a threshold number then communication initiated by the managed server is classified as malicious.

The alert processing module may determine that obtained administrative domain information indicates the presence of a progressive infection. In a progressive infection malicious software spreads across the administrative domain over time. If administrative domain information indicates that the number of alerts from a first actor e.g. a managed server exceeds a threshold and if a second actor e.g. another managed server in communication with the first actor begins generating alerts then the alert processing module determines that the alerts are associated with a progressive infection. Accordingly the alert processing module classifies the communication triggering alerts as malicious.

Alternatively or additionally to classifying the alert according to contextual information the alert processing module notifies an administrator in response to receiving the alert. Notifying the administrator may include reporting contextual information related to the communication triggering the alert. The alert processing module may receive a classification from the administrator indicating whether the corresponding communication is legitimate or malicious.

The alert processing module processes an alert according to the classification of the corresponding communication. If the corresponding communication is classified as malicious the alert processing module does not generate an access control rule authorizing the corresponding communication. In some embodiments the alert processing module instructs the managed servers to cease communication with the originating actor that initiated the communication triggering the alert. In other words the originating actor is quarantined. The alert processing module notifies an administrator about the alert in response to classifying the corresponding communication as malicious. Alternatively or additionally the alert processing module notifies an administrator about the alert regardless of the alert s classification. If the corresponding communication is classified as legitimate then the alert processing module may instruct the flow processing module to generate an access control rule authorizing the communication. In some embodiments the alert processing module may request approval for the access control rule from an administrator before adding the access control rule to the set of access control rules .

The access control rule ACR creation interface provides an administrator an interface for reviewing contextual information application groups label sets e.g. including role labels and or group level label sets assigned to labeled actors e.g. managed servers labeled devices and access control rules. The ACR creation interface may receive a corrected application group of a labeled actor from an administrator. In response the actor grouping module updates the labeled actor s application group to match the corrected application group. Additionally the labeling engine updates the group level label set of the labeled actor to match the group level label set of the newly selected application group. The ACR creation interface may receive a corrected label set for a labeled actor and the labeling engine updates the labeled actor s label set according to the correction. In response to the administrator modifying a labeled actor s group level label set the labeling engine modifies group level label sets of other labeled actors in the application group to match the corrected group level label set.

The ACR creation interface may receive a target access control rule from an administrator e.g. by the administrator indicating a particular edge of a displayed graph . For example the administrator s target access control rule indicates a service the service s provider and the service s consumer. The flow processing module generates an access control rule according to the administrator s instructions and possibly generates additional access control rules or broadens the generated access control rule based on the service and the label sets of the provider and consumer.

The ACR creation interface may notify the administrator about alerts obtained by the alert processing module . The ACR creation interface may receive a classification of the communication triggering the alert and the flow processing module may generate an access control rule according to the classification. In one embodiment the ACR creation interface presents an administrator with an access control rule automatically generated by the flow processing module . The ACR creation interface may receive the administrator s approval modification or denial of the auto generated access control rule. The flow processing module adds the possibly modified auto generated access control rule to the set of access control rules in response to receiving approval or modification from an administrator.

Alternatively or additionally to generating access control rules the methods described herein may be used to facilitate creation of other rules with different rule functions as part of the administrative domain wide management policy . These other rules include communication rules that specify both a provider of a service and a consumer of a service. One example communication rule has a secure connectivity function specifying protocols encryption or channels to be used with communications for a service. For communication rules the global manager obtains a target rule and identifies a label set e.g. including a role label and or group level labels describing the provider and a label set describing the consumer. The global manager then generates additional rules or broadens existing rules that apply to provider consumer pairs with respective label set pairs that match the pair of identified label sets. The additional or broadened rules apply to the same service and have the same function profile e.g. encryption protocol communication protocol type as the target rule.

Some rules specify only the provider of the service or only the consumer of the service. Example rules that specify one of a consumer or a provider may have rule functions regulating stored data encryption disk usage peripheral usage or processor usage. For these rules the global manager obtains a target rule and identifies a label set corresponding to the provider or the consumer. For rules that specify a provider the global manager generates additional rules or broadens existing rules that apply to providers of the service having label sets that match the identified label set. For rules that specify a consumer the global manager generates additional rules or broadens existing rules that apply to consumers of the service having label sets that match the identified label set. The additional or broadened rules apply to the same service and have the same function profile e.g. encryption protocol resource usage limits as the target rule.

Some rules affect a managed server regardless of the services provided by or consumed by the managed server . Example rules regulate which processes may execute on a managed server general disk encryption settings or when to capture a network packet for security analysis. The global manager obtains a target rule identifies a label set from the target rule and generates or broadens rules applying to additional managed servers with label sets matching the identified label set. The additional or broadened rules have the same function profile as the target rule. This process is similar to that described previously except the generated rule does not specify a service.

In some embodiments the flow processing module generates rules based on a different class of labels than are used for other rules e.g. access control rules . Such rules affect a service provided by or used by a managed server and may be generated based on one or more alternative or additional labels for the managed server . The labeling engine may determine multiple process specific role labels to apply to processes of a managed server . In one embodiment the flow processing module generates rules based on alternative role labels for the provider or the consumer of the service. The alternative role labels are the process specific role labels associated with the one or more processes used by the managed server to provide or consume the service specified by the rule.

The administrative domain wide management policy includes an end to end communication policy controlling communication between actors in the administrative domain through a traffic midpoint device . The end to end communication policy may include elements of a security policy e.g. access control traffic encryption elements of a resource usage policy e.g. bandwidth allowance or both. The end to end communication policy is embodied by rules included in the set of communication rules . More specifically the end to end communication policy contains communication rules regulating traffic between two endpoints e.g. a managed server an unmanaged device a labeled device a traffic midpoint device a bound service through a traffic midpoint device . The end to end communication policy may be enforced by a management module of a managed server or through native security functionality of the traffic midpoint device .

For example a provider managed server communicates with a consumer managed server through a traffic midpoint device . The end to end communication policy includes backend communication rules enforced by the provider managed server and frontend communication rules enforced by the consumer managed server . The traffic midpoint device may be configured to independently enforce some or all of the backend communication rules the frontend communication rules or both. In this way the backend and frontend communication rules enable consistent enforcement of the end to end communication policy by multiple actors at the communication s endpoints and midpoints.

Because the traffic midpoint device may modify the traffic passing through it a security implementation unaware of the traffic midpoint device may potentially not recognize or control traffic at endpoints connected by the traffic midpoint device . By using knowledge of the traffic midpoint device and its configuration as indicated in the administrative domain state the global manager may enforce policy on managed servers attached to a traffic midpoint device .

In one embodiment an administrator configures the end to end communication policy. The administrator instructs the global manager to add a traffic midpoint device to the end to end communication policy. For example the administrator provide the global manager with a device name identifier or network address of the traffic midpoint device as well as credentials to configure the traffic midpoint device . As another example the administrator instructs the global manager to scan the administrative domain for traffic midpoint devices regulating traffic between managed servers and other devices in the administrative domain .

The midpoint device management module obtains a configuration of the traffic midpoint device which may include an operational configuration describing how the traffic midpoint device regulates communication or a security configuration indicating native enforcement capabilities of the traffic midpoint device . The midpoint device management module updates a description of the traffic midpoint device in the administrative domain state .

The administrator selects a managed server in communication with the traffic midpoint device and configures communication rules applicable to the traffic midpoint device and to that managed server . For example the administrator configures frontend rules regulating communication between the traffic midpoint device and the frontend managed server A and configures backend rules regulating communication between the traffic midpoint device and the backend managed server B. The midpoint device management module may infer frontend rules and backend rules from rules regulating communication between the frontend managed server A and the backend managed server B. The administrator may review verify and customize such inferred rules.

The global manager generates management instructions based on the rules and sends the management instructions to managed servers A and B to enforce rules applicable to communication with the traffic midpoint device . For example the global manager generates frontend management instructions based on the frontend rules and sends A the frontend management instructions to the frontend managed server A. The global manager generates the backend management instructions based on the backend rules and sends B the backend management instructions to the backend managed server B.

In one embodiment the managed servers A and B use their respective network interfaces as points of enforcement. Frontend managed server A communicates with the traffic midpoint device through network interface . Backend managed server B communicates with the traffic midpoint device through network interface . The traffic midpoint device communicates with the managed servers A and B through network interfaces and respectively. Frontend managed server A verifies whether communication through network interface complies with the frontend management instructions and backend managed server B verifies whether communication through network interface complies with backend management instructions.

Verifying compliance with communication rules and corresponding management instructions may include verifying a communication s destination e.g. interfaces and or source e.g. interfaces and . Verifying the destination of a communication may include verifying the communication s immediate destination e.g. network interface ultimate destination e.g. network interface or both. Similarly verifying the source of a communication may include verifying the communication s immediate source e.g. network interface or initial source e.g. network interface . The identity of the actor associated with the destination or source may be determined from a network address included in the traffic and associated with the actor e.g. IP address MAC address port and protocol pair or from credentials included in the traffic for example. The source or destination of traffic may be any actor in the administrative domain e.g. a managed server an unmanaged device a labeled device a traffic midpoint device a bound service or any device external to the administrative domain.

Although only a single network interface is illustrated at the endpoint of each communication segment the managed servers A and B and the traffic midpoint device may have additional network interfaces and enforce the communication rules on traffic through any of these additional network interfaces. Verifying compliance may further include verifying any conditions associated with a rule function. For example any of the devices in the data path may verify whether an inbound or outbound communication complies with a communication encryption rule or a bandwidth usage rule.

Since the traffic midpoint device does not have a policy implementation module the midpoint device management module configures the native enforcement capabilities of the traffic midpoint device so that it enforces both the frontend rules and backend rules. In particular the traffic midpoint device may be configured to enforce the frontend communication rules on communication through network interface and enforce the backend communication rules on communication through network interface . Examples of the traffic midpoint device s native enforcement capabilities include extensible access control lists application firewall policies programmable traffic control rules and pool management. For example the traffic midpoint device is a server load balancer SLB that performs access control list checks at network interfaces and . As another example the SLB uses pool management enforced at network interface to control which actors e.g. which backend managed servers B the SLB may send communications. Pool management refers to maintaining a pool of one or more grouped actors e.g. physical devices virtual devices bound services that provide similar services.

Configuring the traffic midpoint device includes the midpoint device management module configuring the traffic midpoint device directly indirectly or both. Direct configuration refers to the midpoint device management module sending the traffic midpoint device commands to modify the configuration of its native enforcement capabilities. Indirect configuration refers to the midpoint device management module instructing a controller included in one of the managed servers A or B to modify the configuration of the traffic midpoint device s native enforcement capabilities.

The configuration discovery module obtains a configuration of the traffic midpoint device . For example the configuration discovery module queries the status of the traffic midpoint device using credentials provided by an administrator. The configuration of the traffic midpoint device includes an operational configuration describing an effect of the traffic midpoint device on communication between other devices. For example the operational configuration includes the traffic midpoint device s NAT configuration traffic prioritization settings or load balancer scheduling algorithms. As another example the operational configuration identifies virtual traffic endpoints on the traffic midpoint device such as a virtual server on the traffic midpoint device .

As part of obtaining the configuration of the traffic midpoint device the configuration discovery module may obtain a group configuration indicating that the traffic midpoint device is part of a functional grouping of traffic midpoint devices . The group configuration may also include settings indicating the nature of the functional grouping and relevant settings. For example the group configuration indicates that the traffic midpoint device is part of a group of server load balancers. In this example the group configuration indicates whether the server load balancers are operating in active active mode where the server load balancers distribute the load of communications among themselves or in active passive mode where at least one of the server load balancers remains monitors the other server load balancers and is available to move to active mode if the other server load balancers cannot handle the volume of communication e.g. due to a hardware failure .

As part of obtaining the configuration of the traffic midpoint device the configuration discovery module may obtain a security configuration indicating enforcement capabilities of the traffic midpoint device and current settings of the traffic midpoint device. For example the security configuration includes access control lists configured on the traffic midpoint device . As another example the security configuration includes settings of the firewall e.g. authorized and unauthorized devices . As a third example the security configuration indicates devices having membership in a device management pool.

As part of obtaining the configuration of the traffic midpoint device the configuration discovery module may obtain device status information indicating the availability of the traffic midpoint device . The device status information may indicate the status of resources e.g. memory power connectivity and service availability on the traffic midpoint device . The device status information includes qualitative indicators e.g. error indicators as well as quantitative indicators e.g. temperature resource usage resource capacity . A traffic midpoint device may be considered offline if particular qualitative conditions are fulfilled e.g. particular error messages power failures or if particular quantitative conditions are fulfilled e.g. temperature greater than a threshold resource availability less than a threshold .

In response to changes in the configuration of a traffic midpoint device the global manager may recalculate management instructions e.g. through the administrative domain state update ADSU module . For example when a traffic midpoint device s NAT configuration changes management instructions of managed servers communicating with that traffic midpoint device may change. As another example if a traffic midpoint device comes online or goes offline the ADSU module updates the membership of the actor set of devices having a same label set as the traffic midpoint device .

Based on the configuration of a traffic midpoint device the topology module identifies actors in communication with the traffic midpoint device . The topology module may identify the actors in communication with the traffic midpoint device from devices mentioned by the security configuration of the traffic midpoint device . For example the access control list includes the devices authorized to communicate with the traffic midpoint device . Similarly the topology module may identify the actors from actors mentioned by the operational configuration of the traffic midpoint device . For example traffic prioritization settings may include a list of devices in communication with the traffic midpoint device . The topology module may also determine that a traffic midpoint device is in communication with another device from information reported by a managed server in communication with that traffic midpoint device . Using the configuration information of a traffic midpoint device beneficially enables detection of communication with actors such as unmanaged devices that do not report to the global manager .

The topology module may that infer devices in communication with a traffic midpoint device from a group configuration. The topology module identifies devices determined to be in communication with other traffic midpoint devices in a same functional grouping as a traffic midpoint device and determines that the traffic midpoint device may also be in communication with those identified devices. Using the identified devices in communication with a traffic midpoint device the global manager may more efficiently identify rules relevant to that traffic midpoint device and more efficiently identify other actors affected by a change in state of the traffic midpoint device .

The midpoint labeling module determines a label set for a traffic midpoint device based on devices with which the traffic midpoint device communicates based on its group configuration based on input by an administrator or a combination thereof. The midpoint labeling module may use the communication information determined by the topology module to determine that a traffic midpoint device relays communication between a set of provider devices providing a service and a set of user devices using the service. The midpoint labeling module may identify a label value in common between the set of provider devices and the set of user devices and assign that label value to the traffic midpoint device . For example if the provider and user devices have the same values for the or dimension then the midpoint labeling module assigns that common value to the traffic midpoint device . In some cases the user devices may be unmanaged devices . In this case the midpoint labeling module may assign the traffic midpoint device label values that the provider devices have in common without reference to the user devices.

For the label dimension the midpoint labeling module may determine an intermediate value between the provider devices value of the dimension and the user devices value of the dimension. For example if the provider devices have a value and the user devices have a value the midpoint labeling module assigns the traffic midpoint device a value. The value denotes a role corresponding to a reverse proxy server or another intermediary between provider devices having a value and the Internet. In some embodiments the midpoint labeling module may modify the values of a managed server s label to better reflect the managed server s position in a network topology. For example if a traffic midpoint device is added to the administrative domain the midpoint labeling module assigns the traffic midpoint device a label specifying a value for the dimension equal to the provider managed server s value for the dimension. The midpoint labeling module may further modify the provider managed server s value for the dimension to indicate that the provider managed server is one additional layer removed from the user device relative to the traffic midpoint device s value for the role dimension. For example a provider managed server having a value for the dimension is re labeled to have a value and the traffic midpoint device is assigned the value for the dimension.

The midpoint labeling module may assign a traffic midpoint device a label based on input from an administrator. An administrator may assign values for unassigned label dimensions of a traffic midpoint device or may correct automatically assigned label values. The midpoint labeling module may assign a label to a traffic midpoint device based on membership in a functional group. If a traffic midpoint device in a functional group has a value for a particular label dimension the midpoint labeling module may assign that value to other traffic midpoint devices in the functional group. In this way if an administrator assigns a label value to one traffic midpoint device in a functional group the remaining traffic midpoint devices are labeled which reduces time required for the administrator to configure the administrative domain wide management policy .

Traffic midpoint devices may also be labeled by any of the methods described with respect to the labeling engine . For example the labeling engine identifies a physical location of the traffic midpoint device and identifies a value for the label that matches the physical location.

The midpoint rule creation module identifies rules that are relevant to a traffic midpoint device and derives midpoint rules that are directly applicable the traffic midpoint device from the relevant rules. Midpoint rules include frontend rules backend rules and any other rules that have a PB portion or UB portion applicable to a traffic midpoint device . The rules relevant to the traffic midpoint device are rules governing communication between two actors that communicate through the traffic midpoint device . In one embodiment the midpoint rule creation module determines the relevant rules by obtaining a provider label set of a provider managed server providing a service and obtaining a user label set of a user device consuming the service. The midpoint rule creation module selects relevant rules from the set of communication rules in response to the relevant rules having a provided by portion applicable to the provider label set and a used by portion applicable to the user label set.

Having identified a relevant rule the midpoint rule creation module generates midpoint rules i.e. backend and frontend rules that explicitly pertain to the traffic midpoint device . A backend rule has a PB portion that refers to the same actors as the selected relevant rule using the same label set UID or other identifier included in the initial rule. The backend rule s UB portion refers to the traffic midpoint device by a label set or UID of the midpoint device . Similarly a frontend rule has a UB portion that refers to the same actors as the initial rule using the same label set UID or other identifier included in the selected relevant rule. The backend rule s PB portion refers to the traffic midpoint device by a label set or UID of the traffic midpoint device . The midpoint rules specify the same service as the selected relevant rule and may include the same rule condition. For example if the selected relevant rule has rule conditions dependent on that state of the provider managed server the backend rule includes those rule conditions and the frontend rule excludes those conditions. Generally if a rule condition from the relevant rules refers to an actor named by a midpoint rule s UB or PB portion then the midpoint rule includes that rule condition.

The midpoint rule creation module may present generated midpoint rules for an administrator to verify or modify. For example the ACR creation interface presents the generated midpoint rules and receives modifications to these rules from an administrator.

The server management instruction module takes as input a midpoint rule and outputs management instructions for a managed server . A management instruction includes a function level instruction that references an actor set as well as actor set information identifying which actors belong to the referenced actor set. Using the relevant rules module the server management instruction module determines which midpoint rules are relevant to a particular managed server . Using the function level instruction generation module the server management instruction module generates function level instructions that correspond to the relevant midpoint rules. For example a function level instruction includes a reference to a set of traffic midpoint devices having a common label set that are allowed to use a particular service and the management instruction includes a list of network addresses of traffic midpoint devices having the label set. Using the actor enumeration module and the relevant actors module the server management instruction module generates a list of devices in each actor set referenced by the function level instructions. The function level instructions and lists of devices in each actor set are sent to the managed servers as management instructions.

Prior to sending a function level instruction as part of management instructions and prior to determining the actor set relevant to that function level instruction the server management instruction module may modify the function level instruction according to the configuration of the traffic midpoint device . In particular the server management instruction module may modify the PB portions or UB portions of the function level instructions according to the NAT configuration of the traffic midpoint device . The server management instruction module determines an expected network address of communication according to the NAT configuration. If the traffic midpoint device modifies the network address of communications the server management instruction module replaces a reference to the traffic midpoint device e.g. in the PB or UB portion with a reference to the actor corresponding to the expected network address. For example if the traffic midpoint device operates in source NAT mode then the apparent network address is not modified and the server management instruction module does not modify the function level instructions output by the function level instruction generation module . As another example if the traffic midpoint device operates in transparent NAT mode then the apparent source of traffic will match the initial source. Accordingly the server management instruction module modifies the function level instructions PB or UB portions that referenced the traffic midpoint device to instead reference the device sending the traffic to the traffic midpoint device .

The midpoint management instruction module takes as input a midpoint rule and outputs midpoint management instructions for a traffic midpoint device . Using the relevant rules module the midpoint management instruction module determines which midpoint rules are relevant to a particular traffic midpoint device . Using the function level instruction generation module the midpoint management instruction module generates function level instructions that correspond to the relevant midpoint rules. Using the actor enumeration module and the relevant actors module the midpoint management instruction module generates a list of devices in the actor set referenced by the function level instructions. For example a function level instruction includes a reference to a set of actors having a common label set that are allowed to use a particular service and the management instruction includes a list of network addresses of those actors having the label set. Since the traffic midpoint device does not have a policy implementation module the global manager configures the traffic midpoint device to enforce the management instructions using the midpoint device controller .

A recalculation of the management instructions for the managed servers and traffic midpoint device may be triggered by a change in the administrative domain state . This may be triggered by events as described with respect to the administrative domain state update module and also by events affecting traffic midpoint devices . For example a configuration change a change in online offline status e.g. due to a hardware failure a software failure a change in the label set of a traffic midpoint device or a change in the label set of any other device in the administrative domain may trigger an update of the administrative domain state .

The midpoint device controller takes as input midpoint management instructions generated with respect to a traffic midpoint device and configures the traffic midpoint device to enforce these management instructions using its native capabilities based on the configuration of the traffic midpoint device . The traffic midpoint device may be configured through any means including a representational state transfer REST protocol application programming interface API simple object access protocol SOAP API extensible markup language XML API or secure shell SSH session. The traffic midpoint device configures access control lists application firewall policies programmable traffic control rules pool management or a combination thereof for compliance with the midpoint management instructions.

The midpoint device controller may determine an updated security configuration for a traffic midpoint device based on the management instructions compare the updated security configuration with a current security configuration of the traffic midpoint device and then determine changes to bring the traffic midpoint device into compliance with the updated security configuration. When changes to the administrative domain state occur the midpoint device controller may receive and process only management instructions that have changed as a result of the state change.

In some embodiments a managed server executes the midpoint device controller for a traffic midpoint device . In this configuration the global manager sends the management instructions for the traffic midpoint device to the global manager which then configures the traffic midpoint device through its midpoint device controller .

After adding the SLB A the midpoint labeling module has modified the value of the web managed server s dimension to be instead of . The change in the web managed server s label reflects that the SLB A directly interacts with the one or more client managed servers A and reflects that the web managed server B receives requests from the one or more client managed servers A through the SLB A.

In the initial case of before the addition of the SLB A the processing server of the global manager may build one policy perspective enforced at network interface and another enforced at network interface . The policy perspective at the client managed server A may allow outgoing communication to network interfaces of entities having label values of and . Similarly the policy perspective at the web managed server B may allow incoming communication from network interfaces of entities assigned label values of and .

In with the addition of the SLB A the processing server computes policy perspectives at the client managed server A at the SLB A for both communication through network interface and communication through network interface and at the web managed server B. The function level instructions at the client managed server A may be the same as in because the labels of the virtual server at the SLB A match the initial labels of web managed server B but the actor set referenced by the function level instructions now includes the SLB A and excludes the web managed server B. For example outgoing connections through network interface may now be limited to the one or more IP addresses associated with network interface instead of the one or more IP addresses of network interface .

The policy perspective of the web managed server B depends on the configuration of the virtual server and SLB A. In a typical SNAT configuration the source IP address of incoming connections may be re written to a local address belonging to the SLB A and the destination address may be re written to be one of the backend servers at network interface . In other words for a traffic midpoint device in SNAT mode the management instructions reflect the network address of the immediate destination or immediate source of traffic covered by the rule used to derive the management instructions. Thus the function level instructions corresponding to web managed server B change because the web managed server B receives communications from the network address of the SLB A which has labels differing from the labels assigned the client managed server A.

The function level instructions corresponding to network interface allow outgoing connections to entities in the actor set corresponding to the labels and . The midpoint device controller configures the SLB A to enforce these function level instructions. Similarly the function level instructions corresponding to network interface allow incoming communication from entities in the actor set corresponding to the labels and . There may be multiple actors having the labels and so the processing server may deploy management instructions to these other actors. For example the SLB A directs traffic to one of a plurality of backend managed servers that form the pool of devices represented by web managed server B in order to balance requests among the backend managed servers . In this example the global manager updates the management instructions for each of the backend managed servers . As another example the web managed server B includes multiple bound services managed by respective sets of management instructions. In this example the global manager updates the management instructions for the respective bound services at the web managed server B and also updates the management instructions corresponding to network interface e.g. to reflect the ports corresponding to the different bound services at the web managed server B .

As an alternative example assume that the traffic midpoint device is configured in transparent source IP mode where the source IP address of client managed server A is not modified. The server management instruction module modifies the management instructions relative to the SNAT mode case to reflect the configuration of the virtual server in transparent mode.

In this particular example the management instructions corresponding to network interfaces and may be the same as in the SNAT case. The management instructions corresponding to network interface may now reflect the fact that source IP address of requests corresponds to the network interface of the client managed server A rather than network interface as in the SNAT case . Accordingly the function level instructions specify the actor set corresponding to the label set of the client managed server A instead of the label set of the SLB A. In other words for a traffic midpoint device in transparent mode the management instructions reflect the initial source network address rather than the immediate source network address. The server management instruction module thus uses the SLB s operational configuration to modify management instructions to account for the SLB s effect on traffic.

The SLB A may be configured in other modes of operation such as direct server return DSR . In such a case the web managed server B receives requests from the client managed server A through the SLB A but responds directly to the client managed server A. Accordingly the web managed server s function level instructions specify the actor set of the server load balancer A for inbound requests and the actor set of the client managed server A for outbound responses. In some embodiments more than one traffic midpoint device is present in the communication path. Accordingly the topology module identifies the configuration and the management instructions corresponding to a traffic midpoint device may refer to another traffic midpoint device instead of referring to a managed server bound service unmanaged device or labeled device .

Traffic midpoint devices may have multiple access points e.g. port VLAN virtual local area network tunnel . Management instructions generated by the global manager may indicate a particular access point within network interface or network interface at which the traffic midpoint device enforces policies. The management instructions may also indicate which actors may use the particular access point which modes of access may be used the particular access point or which services are accessible through the particular access point. Using an access point includes sending traffic to an access point and receiving traffic from an access point. For example the midpoint device controller generates an access control list that specifies an access point and tuples indicating allowed actors services and or modes of access for communications through the access point. In the illustrated example the midpoint device controller modifies ingress access control list A corresponding to network interface for compliance with frontend rules. The midpoint device controller modifies egress access control list B corresponding to network interface for compliance with backend rules.

A traffic midpoint device verifies that access mode identifiers from the traffic through an access point match access mode identifiers specified by the access control list s tuple. For example the traffic midpoint device verifies that traffic through the network interface matches a tuple in the ingress access control list A. For an access control list enforced at a network interface the traffic midpoint device 1 identifies the access mode identifier e.g. of a VLAN or tunnel accessed through the port from traffic metadata e.g. a packet header a traffic signature 2 determines whether the identified access mode identifier matches an access mode identifier from a tuple in an access control list and 3 allows the traffic if there is a match and blocks the traffic otherwise. A traffic midpoint device may also verify that an identifier of the accessing actor or the accessed service matches an identifier specified by an access control list s tuple. For example an access control list enforced on a VLAN specifies identifiers of actors allowed to access the VLAN.

Although some management instructions apply to a subset of network interfaces and other access points on a traffic midpoint device management instructions may apply to all access points of a traffic midpoint device . For example management instructions configure an access control list of the programmable switch B to specify allowable ports VLANs tunnels MAC addresses or other access points on the programmable switch B.

When the network switch B or another traffic midpoint device enforces management instructions at distinct access points the network switch B beneficially decreases bandwidth consumption by preventing access to the network switch B by unauthorized actors or web managed server B through the network switch B through improper access points as may occur in a distributed denial of service attack. Enforcing management instructions at the network switch B or another traffic midpoint device improves security by providing an additional security check on traffic within the administrative domain . Even if a managed server is compromised and stops enforcing access control rules a network switch B or another traffic midpoint device may block unauthorized communications with the compromised managed server . For example even if web managed server B is compromised enforcement at network interface may nonetheless prevent unauthorized access to services by the web managed server B.

At step the global manager identifies a traffic midpoint device through which a provider managed server provides a service to a user device. For example the user device is a user managed server an unmanaged device a labeled device a traffic midpoint device or a bound service.

At step the configuration discovery module obtains a configuration of the traffic midpoint device . For example the configuration is an operational configuration indicating an effect of the traffic midpoint device on an apparent source network address of communication between the user device and the provider managed server . As another example the configuration is a security configuration identifying actors currently allowed to communicate with the traffic midpoint device .

At step the midpoint rule creation module determines a relevant rule from the set of communication rules that specifies a service and that is applicable to communication between the provider managed server and the user device.

At step the midpoint rule creation module generates based on the relevant rule a backend rule that specifies the service and that is relevant to communication between the provider managed server and the traffic midpoint device . As another example the user device is a user managed server and the midpoint rule creation module generates based on the relevant rule a frontend rule that specifies the service and that is applicable to communication between the user managed server and the traffic midpoint device .

At step the server management instruction module generates based on the backend rule a backend management instruction. The backend management instruction includes a backend function level instruction including a reference to an actor set authorized to communicate with the provider managed server to use the service. The referenced actor set includes the traffic midpoint device and excludes the user device. The backend management instruction also includes a list of devices in the referenced actor set. For example the processing server obtains a midpoint label set describing high level characteristics of the traffic midpoint device by specifying dimensions and the traffic midpoint device s value for each dimension. The actor enumeration module generates the actor set referenced by the backend function level instruction by enumerating devices having label sets with values matching the traffic midpoint device s values for each dimension of the midpoint label set.

At step the server management instruction module may also generate based on a frontend rule a frontend management instruction which includes a frontend function level instruction including a reference to an actor set authorized to communicate with the user managed server to provide the service. The actor set includes the traffic midpoint device and excludes the provider managed server. The frontend management instruction may also include a list of devices in the referenced actor set.

At step the midpoint management instruction module generates midpoint management instructions. One midpoint management instruction includes a function level instruction specifying an actor set including the provider managed server and another midpoint management instruction includes a function level instruction specifying an actor set including the user device.

At step the global manager sends the backend management instruction to configure the provider managed server to enforce the backend rule on communication with the actor set including the traffic midpoint device . The global manager may also send the frontend management instruction to the user managed server to the provider managed server to configure the user managed server to enforce the frontend rule on communication with the traffic midpoint device .

At step the midpoint device controller instructs the traffic midpoint device to modify its security configuration based on the midpoint management instructions to allow the traffic midpoint device to communicate with the provider managed server and user device.

The above description is included to illustrate the operation of certain embodiments and is not meant to limit the scope of the invention. The scope of the invention is to be limited only by the following claims. From the above discussion many variations will be apparent to one skilled in the relevant art that would yet be encompassed by the spirit and scope of the invention.

