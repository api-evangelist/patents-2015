---

title: Replacement of virtual functions
abstract: Techniques are described for replacement of virtual functions. In one or more implementations, a call to a virtual function is intercepted and redirected to a shim module associated with a replacement function. The shim module is configured to adjust a pointer (e.g., a “this” pointer) for the virtual function. In at least some embodiments, the pointer can be adjusted based on information retrieved from symbol data for the virtual function. The replacement function can utilize the adjusted pointer to access an object instance associated with the virtual function. For example, the replacement function can use the adjusted pointer to access data and/or functionalities of the object instance.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09348610&OS=09348610&RS=09348610
owner: Microsoft Technology Licensing, LLC
number: 09348610
owner_city: Redmond
owner_country: US
publication_date: 20150223
---
This application is a divisional of and claims priority to U.S. patent application Ser. No. 13 288 852 titled Replacement of Virtual Functions and filed Nov. 3 2011 the disclosure of which is incorporated in its entirety by reference herein.

A typical computing device employs a wide variety of executable program code to perform various tasks. For example program code can be included as part of an operating system an application a utility and or other functionality that can be executed via a computing device. Such program code typically includes functions that can be called to perform various tasks. For example a particular function can be called by an application to calculate a value based on parameters that are passed to the function.

Included with such functions are virtual functions. A virtual function refers generally to a function in object oriented programming that is a member function of a base class and whose functionality can be overridden in a derived class of the base class. Virtual functions can be called on derived classes to enable different tasks and or functionalities to be performed than are provided by a base class of the derived classes.

In certain scenarios it can be useful to intercept a call to a virtual function and redirect the call to a replacement function. For example a software testing utility can intercept a call to a virtual function by an application. The utility can then redirect the call to a replacement function in order to test various operating scenarios that may arise when the application is executed. Current techniques for replacing a virtual function with a replacement function are time and resource intensive and are prone to errors that can be introduced due to changes in class layout and or compiler settings.

This Summary is provided to introduce a selection of concepts in a simplified form that are further described below in the Detailed Description. This Summary is not intended to identify key features or essential features of the claimed subject matter nor is it intended to be used as an aid in determining the scope of the claimed subject matter.

Techniques are described for replacement of virtual functions. In one or more implementations a call to a virtual function is intercepted and redirected to a shim module associated with a replacement function. The shim module is configured to adjust a pointer e.g. a this pointer for the virtual function. The replacement function can utilize the adjusted pointer to access an object instance associated with the virtual function. For example the replacement function can use the adjusted pointer to access data and or functionalities of the object instance.

In at least some embodiments a pointer for a virtual function can be adjusted based on information retrieved from symbol data for the virtual function. Examples of symbol data include private symbols public symbols debug symbols and so on. The information retrieved from the symbol data can include a memory offset value associated with the virtual function. The adjusted pointer can point to an object instance for the virtual function and thus enable a replacement function to utilize the adjusted pointer to interact with the object instance.

Techniques are described for replacement of virtual functions. In one or more implementations a call to a virtual function is intercepted and redirected to a shim module associated with a replacement function. The shim module is configured to adjust a pointer e.g. a this pointer for the virtual function. The replacement function can utilize the adjusted pointer to access an object instance associated with the virtual function. For example the replacement function can use the adjusted pointer to access data and or functionalities of the object instance.

In at least some embodiments a pointer for a virtual function can be adjusted based on information retrieved from symbol data for the virtual function. Examples of symbol data include private symbols public symbols debug symbols and so on. The information retrieved from the symbol data can include a memory offset value associated with the virtual function. The adjusted pointer can point to an object instance for the virtual function and thus enable a replacement function to utilize the adjusted pointer to interact with the object instance.

In the following discussion an example environment is first described that is operable to employ techniques for replacement of virtual functions described herein. Next a section entitled Example Methods describes example methods which may be employed in the example environment as well as in other environments. Last a section entitled Example System and Device describes aspects of an example system and an example device that can be utilized to implement one or more embodiments.

The computing device further includes an operating system and one or more applications that reside on the computer readable storage media and which are executable by the processor . The operating system is representative of functionality to manage and provide access to resources of the computing device . The applications are representative of functionalities that enable a wide variety of tasks to be performed via the computing device such as word processing email spreadsheet media content consumption software and or hardware testing and so on.

Further residing on the computer readable storage media are one or more objects and one or more virtual functions . The objects refer to instances of data objects e.g. component object model COM objects that include various properties such as identities states and behaviors. An identity for an object is a property that distinguishes the object from others of the objects . A state for an object refers to the data that is stored as part of the object. Behaviors for an object include methods and or other functionalities that can be called on an object to perform various tasks.

To enable behaviors for the objects to be implemented the virtual functions are provided. The virtual functions include functions that can be called on the objects to perform various tasks. The term function refers generally to a portion of code that can be executed by the computing device to perform a task. Examples of functions include routines subroutines procedures methods subprograms and so on. In implementations one or more of the objects can include respective functions of the virtual functions such that the one or more objects can provide access to a particular virtual function and or group of virtual functions.

In implementations a virtual function refers to a function whose implementation can be overridden by a derived data class associated with the function. For example consider a parent class A that has a subclass B and method print for the class A. The subclass B can inherit the print method from class A and can also provide a different implementation of the method than is provided by the class A. Thus the print method can be called on either the class A or the subclass B to provide different implementations of the method. In embodiments calling the print method provided by the class B can override the implementation of the method provided by the class A. Thus the print method can be considered a virtual function based on the ability of the Class B to inherit the method from the Class A and to override the implementation of the method provided by the Class A.

As mentioned above particular virtual functions can be associated with particular objects . Thus when a particular virtual function is called the virtual function can interact with an associated object to retrieve data e.g. values from the object and or interact with other behaviors of the object. To enable a particular virtual function to interact with its associated object a pointer e.g. a this pointer that points to its associated object can be provided to the virtual function. The pointer can include a memory address for an associated object and or attributes of the object. The pointer can be used by the virtual function to access an associated object and retrieve data and or interact with functionalities of the object.

To enable pointers to be provided to the virtual functions one or more adjustor modules are provided. In implementations one or more of the virtual functions are associated with and or specific to respective adjustor modules . The adjustor modules are representative of functionality to adjust pointers such that the pointers reference an object and or specific portion of an object that is associated with a virtual function. For example with reference to the class A subclass B example discussed above the print method exposed by the subclass B can override that of the class A. When an object associated with the classes is compiled a pointer can be configured to point to the address of class A as the introducing class of the print method.

To enable the overriding class B implementation of the print method to be invoked and interact with an associated object a particular adjustor module associated with the method can adjust the pointer based on a memory offset between an address for the associated object and the address for the class A. In implementations the offset value can be exposed as the TI GET THISADJUST constant value associated with the object. The adjusted pointer can be passed to the class B implementation of the method as part of a call to the method. The class B implementation of the method can utilize the adjusted pointer to interact with the object as a whole e.g. to retrieve data values and or interact with other functionalities of the object.

Further residing on the computer readable storage media are one or more replacement functions and a replacer module . The replacement functions are representative of functions that can be employed to replace other functions of the computing device such as one or more of the virtual functions . The replacer module is representative of functionality to enable functions associated with the computing device to be replaced. In implementations the replacer module is user configurable such that a user can specify particular replacement functions to be used to replace particular virtual functions .

The computer readable storage media further include one or more shim modules which are representative of functionality to receive redirected calls to virtual functions and adjust pointers e.g. this pointers associated with the calls. The replacement functions can use the adjusted pointers to interact with objects associated with replaced virtual functions of the virtual functions . In implementations signatures and calling conventions for the shim modules match those of corresponding virtual functions . Further the shim modules are configured to accept parameters that the corresponding virtual functions are configured to accept. Thus the shim modules can accept redirected calls to the virtual functions and perform various operations based on the calls.

As discussed above the adjustor modules can make adjustments to pointers to enable the virtual functions to interact with their associated objects . In implementations however the adjustments made to pointers by the adjustor modules are class specific to particular virtual functions and their associated objects . Thus the replacement functions may not be configured to utilize a pointer that has been adjusted by one of the adjustor modules to interact with an object associated with a replaced virtual function.

For example the replacement functions may not be configured to compensate for adjustments made to pointers by the adjustor modules . Thus if one of the replacement functions intercepts a function call to one of the virtual functions that includes a pointer that has been adjusted by one of the adjustor modules the replacement function may not be configured to use the adjusted pointer to interact with an object associated with the intercepted function call. For example the pointer may have been adjusted based on a class layout for the object that the replacement function is not configured to compensate for when attempting to access the object.

To enable the replacement functions to interact with objects associated with replaced methods of the virtual functions the shim modules can process a pointer that has been adjusted e.g. by one of the adjustor modules such that the pointer points to the address of the associated object instead of pointing to the introducing class for the replaced virtual function. For example the shim modules can reverse adjustments made to pointers by the adjustor modules . This can enable the replacement method to access various data values and or functionalities included as part of the object. Further aspects of these and other techniques are discussed in more detail below.

Generally any of the functions described herein can be implemented using software firmware hardware e.g. fixed logic circuitry or a combination of these implementations. The terms module functionality and logic as used herein generally represent software firmware hardware or a combination thereof. In the case of a software implementation the module functionality or logic represents program code that performs specified tasks when executed on a processor e.g. CPU or CPUs . The program code can be stored in one or more computer readable memory devices. The features of the techniques described below are platform independent meaning that the techniques may be implemented on a variety of commercial computing platforms having a variety of processors.

For example the computing device may also include an entity e.g. software that causes hardware of the computing device to perform operations e.g. processors functional blocks and so on. For example the computing device may include a computer readable medium that may be configured to maintain instructions that cause the computing device and more particularly hardware of the computing device to perform operations. Thus the instructions function to configure the hardware to perform the operations and in this way result in transformation of the hardware to perform functions. The instructions may be provided by the computer readable medium to the computing device through a variety of different configurations.

One such configuration of a computer readable medium is signal bearing medium and thus is configured to transmit the instructions e.g. as a carrier wave to the hardware of the computing device such as via a network. The computer readable medium may also be configured as a computer readable storage medium and thus is not a signal bearing medium. Examples of a computer readable storage medium include a random access memory RAM read only memory ROM an optical disc flash memory hard disk memory and other memory devices that may use magnetic optical and other techniques to store instructions and other data.

Having described an example environment in which the techniques described herein may operate consider now a discussion of some example methods in accordance with one or more embodiments.

Discussed below are a number of methods that may be implemented to perform techniques discussed herein. Aspects of the methods may be implemented in hardware firmware or software or a combination thereof. The methods are shown as a set of blocks that specify operations performed by one or more devices and are not necessarily limited to the orders shown for performing the operations by the respective blocks. Further an operation shown with respect to a particular method may be combined and or interchanged with an operation of a different method in accordance with one or more implementations. Aspects of the methods can be implemented via interaction between various entities discussed above with reference to the environment and below with reference to the system .

Step determines an offset value for the target virtual function based on the symbol data. For example the symbol data can include an offset value that is used to adjust a pointer e.g. a this pointer when the target virtual function is called. In implementations the offset value can be exposed as a thisAdjust value as part of the symbol data for the target virtual function.

Step passes the offset value to a shim functionality to enable the target virtual function to be replaced with a replacement function. For example one of the adjustor modules can pass the offset value to one of the shim modules . The shim module can use the offset value to adjust a pointer that is to be passed to a replacement function. Further details concerning implementation of the shim functionality are discussed below.

Step invokes an adjustor module associated with the target virtual function as part of a call to the target virtual function. For example one of the applications can invoke one of the adjustor modules in order to access one of the virtual functions associated with the adjustor module. Step adjusts a pointer for the target virtual function to enable the target virtual function to access an associated object instance. For instance one of the adjustor modules associated with the target virtual function can adjust the pointer e.g. a this pointer based on an offset between a memory address for one of the objects associated with the target virtual function and a memory address for an introducing class within the object for the target virtual function. This can enable the target virtual function to access data values and or functionalities of the object for a class in which the target virtual function is declared.

Step jumps from the target virtual function to the shim functionality with the adjusted pointer. For example one of the adjustor modules can jump to one of the virtual functions which can then jump to one of the shim modules associated with the virtual function based on an intercepted call to the virtual function. In implementations step can occur in response to a call to the target virtual function being intercepted such as discussed above with reference to step . Step receives the adjusted pointer at the shim functionality.

Step readjusts the adjusted pointer to point to an object instance associated with the target virtual function. For example one of the shim modules can apply an offset to the pointer that enables one of the replacement functions to interact with one of the objects . The offset can be determined based on symbol files for the object as discussed above with reference to . In implementations the offset can correspond to an offset applied at step above.

Step jumps to the replacement function with the readjusted pointer. For example one of the shim modules can cause a jump to one of the replacement functions with a readjusted this pointer. Step executes the replacement function using the readjusted pointer. For instance the readjusted pointer can indicate a memory address for an object instance associated with a replaced virtual function. Using the readjusted pointer the replacement function can access data and or functionalities of the object instance. In implementations one or more aspects e.g. steps of the methods discussed above can be implemented at an application run time for an application that is calling a target virtual function. Thus techniques discussed herein can enable virtual functions to be dynamically replaced e.g. at an application run time with replacement functions and replacement functions to interact with object instances associated with replaced virtual functions.

Having described example methods in accordance with one or more embodiments consider now a discussion of an example system and an example device in accordance with one or more embodiments.

In one embodiment this interconnection architecture enables functionality to be delivered across multiple devices to provide a common and seamless experience to the user of the multiple devices. Each of the multiple devices may have different physical requirements and capabilities and the central computing device uses a platform to enable the delivery of an experience to the device that is both tailored to the device and yet common to all devices. In one embodiment a class of target device is created and experiences are tailored to the generic class of devices. A class of device may be defined by physical features or usage or other common characteristics of the devices. For example as previously described the computing device may be configured in a variety of different ways such as for mobile computer and television uses. Each of these configurations has a generally corresponding screen size and thus the computing device may be configured as one of these device classes in this example system . For instance the computing device may assume the mobile class of device which includes mobile telephones music players game devices and so on.

The computing device may also assume a computer class of device that includes personal computers laptop computers netbooks and so on. The television configuration includes configurations of device that involve display in a casual environment e.g. televisions set top boxes game consoles and so on. Thus techniques described herein may be supported by these various configurations of the computing device and are not limited to the specific examples described in the following sections.

Cloud is illustrated as including a platform for web services . The platform abstracts underlying functionality of hardware e.g. servers and software resources of the cloud and thus may act as a cloud operating system. For example the platform may abstract resources to connect the computing device with other computing devices. The platform may also serve to abstract scaling of resources to provide a corresponding level of scale to encountered demand for the web services that are implemented via the platform . A variety of other examples are also contemplated such as load balancing of servers in a server farm protection against malicious parties e.g. spam viruses and other malware and so on.

Thus the cloud is included as a part of the strategy that pertains to software and hardware resources that are made available to the computing device via the Internet or other networks. For example techniques for replacement of virtual functions discussed herein may be implemented in part on the computing device as well as via the platform that supports web services .

In implementations input to the computing device may be detected using touchscreen functionality in the mobile configuration track pad functionality of the computer configuration detected by a camera as part of support of a natural user interface NUI that does not involve contact with a specific input device and so on. Further performance of the operations to implement techniques discussed herein may be distributed throughout the system such as by the computing device and or the web services supported by the platform of the cloud .

Device also includes communication interfaces that can be implemented as any one or more of a serial and or parallel interface a wireless interface any type of network interface a modem and as any other type of communication interface. The communication interfaces provide a connection and or communication links between device and a communication network by which other electronic computing and communication devices communicate data with device .

Device includes one or more processors e.g. any of microprocessors controllers and the like which process various computer executable or readable instructions to control the operation of device and to implement the gesture embodiments described above. Alternatively or in addition device can be implemented with any one or combination of hardware firmware or fixed logic circuitry that is implemented in connection with processing and control circuits which are generally identified at . Although not shown device can include a system bus or data transfer system that couples the various components within the device. A system bus can include any one or combination of different bus structures such as a memory bus or memory controller a peripheral bus a universal serial bus and or a processor or local bus that utilizes any of a variety of bus architectures.

Device also includes computer readable media such as one or more memory components examples of which include random access memory RAM non volatile memory e.g. any one or more of a read only memory ROM flash memory EPROM EEPROM etc. and a disk storage device. A disk storage device may be implemented as any type of magnetic or optical storage device such as a hard disk drive a recordable and or rewriteable compact disc CD any type of a digital versatile disc DVD and the like. Device can also include a mass storage media device .

Computer readable media provides data storage mechanisms to store the device data as well as various device applications and any other types of information and or data related to operational aspects of device . For example an operating system can be maintained as a computer application with the computer readable media and executed on processors . The device applications can include a device manager e.g. a control application software application signal processing and control module code that is native to a particular device a hardware abstraction layer for a particular device etc. as well as other applications that can include web browsers image processing applications communication applications such as instant messaging applications word processing applications and a variety of other different applications. The device applications also include system components or modules to implement embodiments of the techniques for replacement of virtual functions described herein.

In this example the device applications include an interface application and a gesture capture driver that are shown as software modules and or computer applications. The gesture capture driver is representative of software that is used to provide an interface with a device configured to capture a gesture such as a touchscreen track pad camera and so on. Alternatively or in addition the interface application and the gesture capture driver can be implemented as hardware software firmware or any combination thereof.

Device also includes an audio and or video input output system that provides audio data to an audio system and or provides video data to a display system . The audio system and or the display system can include any devices that process display and or otherwise render audio video and image data. Video signals and audio signals can be communicated from device to an audio device and or to a display device via an RF radio frequency link S video link composite video link component video link DVI digital video interface analog audio connection or other similar communication link. In an embodiment the audio system and or the display system are implemented as external components to device . Alternatively the audio system and or the display system are implemented as integrated components of example device .

Techniques for replacement of virtual functions are described. Although embodiments have been described in language specific to structural features and or methodological acts it is to be understood that the embodiments defined in the appended claims are not necessarily limited to the specific features or acts described. Rather the specific features and acts are disclosed as example forms of implementing the claimed embodiments.

