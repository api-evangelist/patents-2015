---

title: Computer-implemented system and method for providing secure data processing in a cloud using discrete homomorphic encryption
abstract: A computer-implemented system and method for providing secure data processing in a cloud using discrete homomorphic encryption is provided. Plaintext data items are homomorphically encrypted into queries, which are transmitted to a discrete homomorphic encryption server. From the server are received identifiers associated with the queries. The identifiers are transmitted to a computing server in a cloud-computing environment, where at least one of the identifiers is processed. The plaintext data items are encrypted into ciphertext data items and transmitted to a storage server in the environment requested to store the items in a storage. References for storage locations of the ciphertext data items are received and associated with identifiers for the queries encrypted from the same plaintext data item as the ciphertext data items at the locations. The ciphertext data item whose location is identified by the reference associated with the identifier in the processing result is retrieved and decrypted.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09509494&OS=09509494&RS=09509494
owner: Newline Software, Inc.
number: 09509494
owner_city: Redmond
owner_country: US
publication_date: 20150511
---
This patent application is a continuation of commonly assigned U.S. Pat. No. 9 031 229 issued on May 12 2015 which claims priority under 35 U.S.C. 119 e to U.S. Provisional Patent Application Ser. No. 61 615 835 filed Mar. 26 2012 the disclosures of which are incorporated by reference.

This application relates in general homomorphic encryption and in particular to a computer implemented system and method for providing secure data processing in a cloud using discrete homomorphic encryption.

Homomorphic encryption is a form of encryption where a specific algebraic operation performed on the plaintext is equivalent to another possibly different algebraic operation performed on the ciphertext. Homomorphic encryption can be defined for both public key asymmetric and private key symmetric encryption. The original concept called privacy homomorphism was introduced by Rivest et al. in On data banks and privacy homomorphisms Foundations of Secure Computation pages 169 180 1978 shortly after the invention of RSA the public key encryption algorithm. While encryption used in a number of industries some unresolved difficulties in use of homomorphic encryption remain. In particular the immediate downside aspect of encrypted data is that the data cannot be further processed e.g. added multiplied searched thus severely limiting any post encryption computing of the ciphertext especially by an external processing entity such as a cloud computing service.

Processing of this encrypted data has long been a problem without a practical and secure solution. While homomorphic encryption schemes are being developed to address this situation aside from a few homomorphic encryption schemes involving almost exclusively asymmetric key algorithms there are no practical symmetric key encryption solutions for the cloud today.

Gentry in Fully homomorphic encryption using ideal lattices 41st ACM Symposium on Theory of Computing STOC 2009 used latticed based cryptography to show the first fully homomorphic encryption FHE scheme for public key cryptography. While this method creates an FHE scheme the method remains impractical due to the complexity and large amount of computing involved. This complexity and the large amount of computing involved make the scheme s application such as to a homomorphic search not likely for the next 40 years at least based on Moore s law. The scheme s applicability in the cloud storage and computing is also limited because the cloud uses prevalently private key cryptography to store encrypted data.

Thus existing technologies fail to provide an adequate solution to processing homomorphically encrypted data in a cloud computing environment especially for data that is in motion. With the continual expansion of cloud computing storing encrypted data using mostly symmetric key encryption algorithms having a practical homomorphic encryption method is critical in taking the cloud from a simple storage stage to having a real computing component that can process encrypted data and enable a series of cloud applications while retaining complete data privacy.

Therefore there is a need for a way to provide data privacy in a cloud using homomorphic encryption while allowing the processing of such data.

An application of homomorphic encryption called discrete homomorphic encryption DHE allows querying reading and writing encrypted data to and from any external data store without the data store ever decrypting the data.

The implementation of DHE can be used in conjunction with already established symmetric key encryption algorithms with intrinsic support for block ciphers. Data that is already encrypted with a key and stored in the cloud can also benefit from DHE. The use of DHE enables comparing two pieces of encrypted data and determine if they are the same without decryption thus enabling applications and services to find retrieve and perform equality based set and hierarchy operations on encrypted data located in the cloud without the cloud ever decrypting the data. Furthermore using DHE can enable sharing of encrypted data between applications while having the encryption keys only on the client computing device and never in the cloud. The immediate practical implementation refers to applications in the cloud computing environment where the external data source is a cloud web service. By using DHE these applications can provide a series of cloud services backup restore address books database collaboration sharing while having the data encrypted entirely.

A computer implemented system and method for providing secure data processing in a cloud using discrete homomorphic encryption is provided. One or more plaintext data items are homomorphically encrypted on a client computing device into one or more homomorphic queries each of the queries including a cryptographically safe representation of one of the encrypted data items the queries are transmitted to at least one discrete homomorphic encryption DHE server and from the DHE server are received one or more identifiers each of the identifiers associated with one of the queries the received identifiers are transmitted to at least one computing server in a cloud computing environment the one or more of the plaintext data items are encrypted into ciphertext data items the ciphertext data items are transmitted to at least one storage server in the cloud computing environment and the storage server is requested to store the ciphertext data items in a storage in the cloud computing environment a reference for a location of each of the ciphertext data items in the storage is received from the storage server an association is created between each of the received references and the identifier associated with the query that was encrypted from the same plaintext data item as the ciphertext data item the location of which is identified by that reference the computing server is requested to process at least one of the transmitted identifiers and a result of the processing including at least one of the transmitted identifiers is received the ciphertext data item whose location is identified by the reference associated with the at least one identifier in the result is retrieved and the retrieved ciphertext data item is decrypted into the corresponding plaintext data item.

Still other embodiments of the present invention will become readily apparent to those skilled in the art from the following detailed description wherein are described embodiments by way of illustrating the best mode contemplated for carrying out the invention. As will be realized the invention is capable of other and different embodiments and its several details are capable of modifications in various obvious respects all without departing from the spirit and the scope of the present invention. Accordingly the drawings and detailed description are to be regarded as illustrative in nature and not as restrictive.

The disclosed system and method define an application of the homomorphic encryption called discrete homomorphic encryption DHE that enables applications and services to find retrieve and perform equality based set and hierarchy operations on encrypted data located in a cloud computing environment without the cloud ever decrypting the data. Additionally encrypted data can be shared across applications.

As discussed below the disclosed system and method involve homomorphic encryption algorithm called cryptographically secure semantic reduction CSSR . This algorithm creates cryptographically safe representations of data called homomorphic queries that are answered by a service with a semantic less identity DHE Id usually a number. This Id further enables a variety of equality based set and hierarchy operations. These Ids are further used by cloud applications to replace all encrypted sensitive data that requires processing.

The application is connected over a network such as the Internet or a cellular network to components in a cloud computing environment not shown and transmits encrypted data items into the cloud computing environment. While the described embodiment refers to the application as a single application multiple applications on the client computing device can interact with the cloud computing environment as described below. As described below with reference to the application performs the CSSR homomorphic encryption algorithm to encrypt plaintext data items not shown present on the computing device into homomorphic queries with each query being a cryptographically safe representation of one of the plaintext data items. The application transmits the queries to the cloud computing environment.

The cloud computing environment includes one or more servers called DHE servers for the purposes of this application which receive the queries and implement a DHE service that generates an identifier not shown known as Id or DHE Id below for each query. The DHE servers which can be dedicated or shared servers provide the generated Ids to the application as further described below with reference to . The Ids completely lack any semantic relationship to the queries for which they were created.

The cloud computing environment further includes one or more computing servers connected to a database . These computing servers implement a computing service capable of performing equality based operations on data in data structures stored in the database . In one embodiment the service can be the Amazon Elastic Compute Cloud EC2 offered by Amazon.com Inc. of Seattle Wash. or Windows Azure service offered by Microsoft Corporation of Redmond Wash. The servers can further substitute data in the data structures with the Ids generated by the DHE service when requested by the application .

The application further encrypts plaintext data items into ciphertext data items and transmits the ciphertext data items to be stored in a cloud computing storage . The storage which in one embodiment can be the S storage maintained by Amazon.com Inc. of Seattle Wash. is connected to one or more storage servers . The storage servers implement a storage service which receives the ciphertext data items from the application stores the ciphertext data items in a location in the storage and returns a reference not shown to the location of a stored ciphertext data item to the application . As described below with reference to the application can associate a reference with an Id corresponding to the query generated from the same plaintext data item as the ciphertext data item whose location is identified by the reference and to provide the association to the DHE service . The application can also retrieve the reference associated with one of the Ids from the DHE service . The application can further retrieve the ciphertext data item stored at the location identified by the reference and decrypt the retrieved ciphertext data items into plaintext.

In the system described above the data and the keys are always encrypted while in transit or processed by the services or while these services never have access to the encryption keys. As described below the application includes a DHE Client Application Programming Interface API as well as other APIs to the other services which are implemented on the client computing device .

The operations called by the application at the client computing device drive the functionality of the system . is a block diagram showing a functional architecture of the system of in accordance with one embodiment. The system is separated by a trust no trust line . The trust no trust line conceptually divides the system into two realms or zones the trusted zone and the non trusted zone. In operations and involve calling one of the services and to request the services and to perform at least a part of the operation.

In the trusted zone data is available as plaintext unencrypted . This zone is usually a secure private client application space not on the Internet but connected to the Internet. Only the owner of the data has access to the data in both encrypted and unencrypted form through the trusted client application . In the non trusted zone data must be available as ciphertext only encrypted . This zone is the cloud computing environment located on the Internet. The most important aspect of this zone is that the cloud computing environment components never interact directly but only through the trusted client application .

Four entities interact in the system the client application the DHE service the cloud computing service and the cloud storage service . The application includes the DHE Client API as well as APIs to the other services not shown . In one embodiment the application and the different services have different ownership and are implemented by different entities as described below with reference to Table 1. The ownership of implementation and operation hosting can belong to one of the following entities 

Returning to the application is main driver of the system orchestrating all of the system s operations. The application has access to and uses at least the following entities plaintext data an encryption key K and an encryption algorithm E . The plaintext data needs to be encrypted stored and homomorphically processed in the cloud. When grouped together in data structures e.g. sets hierarchies these form an object model. The encryption key K is used to encrypt the plaintext data . The encryption algorithm E encrypts the plaintext data with the encryption key K .

The DHE Client API is the client side API of the DHE service and is responsible for following operations 

Identity and access Operation is an operation that ensures that all calls to the DHE service are authenticated authorized and audited AAA protocol . A user name which can be an e mail address and a hashed password are provided to the DHE service that returns a user id enclosed securely in a security token not shown . This function means that all secure calls to the service must be accompanied by the security token. This requirement is assumed to be the case for all calls below. The implementation of the AAA protocol is orthogonal to the DHE Client API.

Initialization Initialization ensures that the CSSR algorithm is properly initialized with the encryption key K and encryption algorithm E. If an encryption key is not available a keyphrase provided by the user or obtained from another source can be used to generate the encryption key K . The operation stores a portion of the internal state of the CSRR and associates a public key with the user when sharing mode is used as further described below with reference to . In one embodiment the operation transmits the encrypted CSSR algorithm to the DHE servers for storage in the cloud computing environment as further described with reference to .

Query generation using the CSSR algorithm a cryptographically safe representation of data called homomorphic query is created.

Unique key generation using the CSSR algorithm a unique encryption key K is generated when the sharing mode is used.

Query In operation the DHE service is queried using the homomorphic query and it responds with an Id which lacks any semantic relationship to the query . This Id can be a sequential random or global number based purely on the private internal state of the service DHE Service . Other Ids are possible.

Set reference Operation associates an Uri absolute or partial with the Id. The Uri is a complete or partial reference to the location of the encrypted data with the storage service .

Get reference Operation retrieves the Uri associated with the Id . This function is also called a reverse query.

Unique key sharing Operation enables sharing of the unique encryption key K between two users U U . The superscript notation in the command below refers to operation at user U or U . The CSSR uses public key encryption with the key pair of K K where the K is the public key and K is the private key.

Other services Operation x provides support for extra services such as signup account management key grouping billing expiration deletion status and troubleshooting.

The application further includes a computing service API not shown and the storage service API not shown . The computing service API makes application specific calls to the application s own object model stored in the cloud computing service . These calls are always implemented by the direct consumer of the DHE service making the following operations possible 

Substitution Operation ensures that all encrypted sensitive data items that requires processing in the computing service is replaced with Ids produced by the Operation call for the data items. In a further embodiment the operation can create new data structures and insert the identifiers into the new data structures.

The operations and allow the client side application to substitute the fields in a data structure with the corresponding Ids as further described with reference to . Then the application can find the data structure by secure queries by the DHE Ids instead of the plaintext of its fields. When a data structure is retrieved from the computing service and is available at the application using operation the Uri for each DHE Id is retrieved then the encrypted data is retrieved from the storage service and decrypted locally thus making the data structure available in the plaintext format to the application .

Equality based operations calls made to the object model exposed by the computing service using the discrete homomorphic operations enabled by the Ids 

Operations and are possible because the service can find data organized in the data structures by comparing and matching an equality test Ids and then returning data structures sets hierarchies for these Ids.

Encrypt Decrypt encrypting of the plaintext using the key K an initialization vector described below with reference to and encryption algorithm E . The corresponding decryption algorithm is D not shown is used to decrypt ciphertext into plaintext. If sharing mode is used the encryption key used is K .

Read Write storing and retrieving of the ciphertext to and from the storage accessible to the storage service . The location of the ciphertext in the service is used as the reference for the DHE Client API when associating the reference with the DHE Id .

As described above three other entities interact in the system in addition to the client application the DHE service the cloud computing service and the cloud storage service .

The DHE service is the server side complement of the client side DHE Client API servicing the API s requests. The service s critical responsibility and feature is the ability to answers the Query operation calls with the Ids in constant time which in one implementation can be of O complexity. The Id can be a sequential random or global number based purely on the private internal state of the DHE service and thus have no semantic relationship to the client application A state. The operations for this service are grouped under in .

The computing service includes and exposes the application object model as hosted in the database . The operations for this service are grouped under in . The DHE Client API never calls into this service directly.

This storage service stores the ciphertext data into the storage returning a reference Uri that is associated with an Id . The operations for this service are grouped under in the above diagram. The DHE Client API never calls into this service directly.

As described above the computing service substitutes data structures in the database with the identifiers under the control of the application API. is a block diagram showing substituting of data of in data in a record with Ids in accordance with one embodiment.

Client applications consume data that is stored in various data stores in the cloud. This data is usually organized in and accessed by various data structures the simplest of them being a record which is a row in a database table.

The application record is typical of what is stored in the database accessible to the computing service . The record has the searchable fields F. . . F and the data fields D. . . D . The searchable fields F are usually indexed to be searchable while the data fields D may or may not be searchable depending of their size and data format. Examples of these records are customer account information file directory metadata order details etc.

The client side application substitutes the fields F and D with their corresponding Ids. Then the application can find the record by secure queries by the Ids instead of the plaintext of the fields. Basically each query for Idto Idcan return the application record .

As described above the CSSR algorithm creates cryptographically safe representations of data called homomorphic queries Q that are answered by a service with a sematic less identifiers. The algorithm is based on a 3 phase polynomial time transformation that is designed to gradually reduce the semantics of data until completely eliminated. The critical requirement of the algorithm is to ensure all of its internal operations are performed while maintaining a minimum of bit security level.

During the initialization phase the DHE Client API ensures that the CSSR algorithm is properly initialized with the encryption key K and encryption algorithm E . If an encryption key is not available a keyphrase can be used to generate the encryption key. The size of the key depends on the lambda security level.

The initialization creates the internal state stream of bytes needed for the algorithm plus additional keys using a secure key derivation algorithm 

The internal state is encrypted with the key K in order to be persisted locally or with the DHE service for later re creation or recovery. The public key K is stored with the DHE service and is associated with a user account U .

Using a cryptographically secure one way compression function F with the key K the plaintext on the client computing device is transformed into a vector V . Using a one way compression function F the vector V is transformed into the initialization vector IV later used for the encryption of the plaintext as described with reference to .

The function F can be any secure Merkle Damg rd construction and thus must operate at a 2 bit security level due to collision caused by the birthday paradox. An example of acceptable algorithm is the HMAC SHA256. The function F can also be a Merkle Damg rd construction. Other suitable algorithms can be used.

The transition at operation from the initialization phase to semantic phase is one way. The operation is also one way.

Using a length preserving encryption algorithm E with the key K the vector V is transformed into the query Q . An example of acceptable algorithm is the AES algorithm in FFX or BPS modes.

The client application using the DHE Client API can query the DHE service for the Id or store and retrieve the encrypted data from the storage service.

As mentioned above the client application can also share data with DHE service by running the CSSR algorithm in the sharing mode. In this mode the plaintext is encrypted with a unique key K that is derived by a one way operation from the encryption key E and the vector V described above with reference to . Then a system user U can give access to another user U to specific DHE Ids.

The user U retrieves the encrypted data for these DHE Ids via operations and described with reference to and the associated unique encryption keys K encrypted with the user U public key K from the DHE service. The user U can decrypt these keys with the private key P thus recovering the keys K and finally decrypting the ciphertext associated with each DHE Id. During this process the data or the keys were always encrypted while in transit or processed by the DHE service computing service or the storage service.

The simplicity of how DHE allows equality based operations on encrypted data located in the cloud is also a powerful foundation that enables applications built on a DHE service to deliver very interesting scenarios of processing encrypted data with 100 privacy. is a flow diagram illustrating a method for providing data privacy in a cloud using discrete homomorphic encryption in accordance with one embodiment.

Initially the DHE Client API performs an initialization step step as described above in reference to creating an internal state and obtaining the keys necessary for performance of the CSSR algorithm. Once the initialization step is complete the DHE Client API generates homomorphic queries from plaintext data items maintained at a client computing device step as further described with reference to . The homomorphic queries are transmitted to the DHE service step which generates an Id for each query and transmits the Id to the application at the client computing device which receives the Ids step . The Id for a query lacks a semantic relationship to that query.

Upon receiving the Ids the client application transmits the Ids to the computing service step and requests the computing service to substitute data in data structures in the database accessible to the computing service with the Ids step . Subsequently the application processes at least one of the Ids using the computing service as further described with reference to step . The application can then obtain the plaintext data item from which was generated the query corresponding to an Id delivered from the computing service as a result of the processing in step step as further described with reference to . Optionally if the CSSR algorithm is used in sharing mode the client application can provide to the DHE service a public encryption key that can be used to obtain plaintext corresponding to a query identified by a specific Id and requesting the DHE service to provide the key to a computing device of a user different than the user of client application as described above with reference to step terminating the method .

As described above the homomorphic queries are cryptographically safe representations of plaintext data items. is a flow diagram illustrating a routine for generating homomorphic queries for the method of in accordance with one embodiment. First a plaintext data items is converted into a vector using a cryptographically secure one way compression function which can be a Merkle Damg rd construction and a semantic key described above with reference to step . The vector is further encrypted by a length preserving encryption algorithm using the closure key described above with reference to to generate a homomorphic query step terminating the routine .

Processing Ids corresponding to homomorphic queries allows processing data in a cloud computing environment while maintaining the encryption of the data. In a further embodiment the operation can create new data structures and insert the identifiers into the new data structures. is a flow diagram illustrating a routine for processing at least one identifier for the method of in accordance with one embodiment. First the client side application requests the computing service to find in the database accessible to the computing service and whose data structures include the Ids received from the application the Ids matching a particular Id being processed step . The computing service compares the at least one identifier to the identifiers in the data structures and after the matching identifiers are found based on the comparison the application requests the computing service to perform at least one equality based operation on the matching identifiers or on the data structures in which one of the matching identifiers is present step . As described above the equality based operations can vary depending on the type of data structure involve and in one embodiment can be hierarchy based operations for hierarchy data structures and set operations for set data structures. Some of the equality based operations involve processing more than one identifier. The hierarchy based operations include enumerate traverse and count the set operations query enumerate union intersection difference subset and count. Other operations are possible. Depending on the operation used the computing service can simply retrieve data structures that include one of the matching identifiers retrieve the data structures and perform further processing on the data structures before the data structures are transmitted to the application as a result of the operation and provide a statistic regarding the identifiers in the data structures such as how many matching identifiers are in the data structures when the count operation is performed. The results of at least one of the equality based operations performed are received by the client application terminating the routine . Multiple identifiers can be processed using the routine .

Once either the data structures or the statistic regarding the matching Id are received the client application can obtain plaintext for either at least some of the identifiers in the returned data structures or the Ids regarding which the statistic is received. is a flow diagram illustrating a routine for the method of for obtaining plaintext data items from which queries associated with at least one of identifiers received from the computing service were generated. Initially the client application API converts the same plaintext data items that were used to generate the homomorphic queries into ciphertext data items step . The client application transmits the ciphertext data items into the storage service step . After the storage service stores the ciphertext data items into a location in the cloud computing storage the client application receives a Uri a reference to the location from the storage service step .

The application associates the Uri with an Id identifying a query generated from the same plaintext data item as the ciphertext data item stored at the location identified by the Uri and provides the association to the DHE service step . Upon request the application receives the Uri for a particular Id from the client step . This step can be used to retrieve the Uri for Ids included in the results of the equality based operation described above step . The application then retrieves the ciphertext data item stored at the location by requesting the data item from the storage service step . Upon receiving the data item still encrypted as ciphertext the application decrypts the data item into plaintext by performing a decryption algorithm step terminating the routine . Thus the client application can process data items in the cloud without the data items being decrypted for the processing.

Table 2 presents various structures typical for several records that can be used in one embodiment of the described system and method. Left side is the name of the record name the right side is the fields of the record.

Using the DHE service a user U can share a document D with another user U . The document typically consists of fields F of metadata Name Extension Created Modified and the data populating the fields. Other types of documents are possible.

When the user U stores the document in the computing service in the sharing mode each piece of information F metadata and data will be encrypted with a unique encryption key K and substituted with their corresponding DHE Id. Finally a document identifier D will be returned to the application .

The user U is given access to the document D so that user U can retrieve the composing fields as DHE Ids that can be further decrypted through the DHE service reverse queries in conjunction with their corresponding unique encryption key K as further described with reference to .

While the invention has been particularly shown and described as referenced to the embodiments thereof those skilled in the art will understand that the foregoing and other changes in form and detail may be made therein without departing from the spirit and scope.

