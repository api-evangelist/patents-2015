---

title: Compliance testing engine for integrated computing system
abstract: A technique tests whether an integrated computing system having server, network and storage components complies with a configuration benchmark expressed as rules in first markup-language statements such as XML. The rules are parsed to obtain test definition identifiers identifying test definitions in a second set of markup-language statements, each test definition including a test value and an attribute identifier of system component attribute. A management database is organized as an integrated object model of all system components. An interpreter invoked with the test definition identifier from each rule process each test definition to (a) access the management database using the attribute identifier obtain the actual value for the corresponding attribute, and (b) compare the actual value to the test value of the test definition to generate a comparison result value that can be stored or communicated as a compliance indicator to a human or machine user.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09459995&OS=09459995&RS=09459995
owner: VCE Company, LLC
number: 09459995
owner_city: Richardson
owner_country: US
publication_date: 20150518
---
The present application is a continuation of U.S. patent application Ser. No. 13 729 488 entitled Compliance Testing Engine for Integrated Computing System filed on Dec. 28 2012 which claims priority to from U.S. Provisional Patent Application No. 61 693 221 entitled Controlling Converged Infrastructure filed on Aug. 24 2012 the contents of both of which are incorporated herein by reference.

The invention is in the field of data processing computing systems and more particularly in the field of testing computing systems for compliance with configuration requirements.

Compliance testing is used to compare the actual configuration of a computer to a specified or benchmark configuration. In some cases for example an organization such as the government or a corporation may require that a computer have a particular configuration to satisfy security or interoperability needs. The benchmark configuration may identify various hardware and software elements required for compliance as well as required values of attributes of the elements. For example a benchmark may identify an operating system element as well as a revision level attribute of the operating system that is known to provide certain security related functionality.

The US government sponsors a suite of security related specifications and other resources under an umbrella known as Security Content Automation Protocol or SCAP. Included in this suite are XML based languages for expressing configuration benchmarks and compliance testing. SCAP techniques have been used for compliance testing computers such as government issued portable computers as well as for other components of data processing systems such as network switches.

Data processing systems may be relatively complex collections of various different types of components including for example computers storage devices or subsystems and network components such as switches. There is a need for compliance testing of such complex data processing systems in an efficient manner.

While existing compliance testing techniques can be used with respect to individual components of a system such as for a network switch for example there are shortcomings to such techniques as their limitation to use with individual components makes them ill suited for testing a system having a complex collection of distinct components. For example such existing techniques cannot effectively capture dependencies among the different components in an automated way. One test may be used to identify presence of a certain network switch as well as its configuration for example and another to identify a configuration of a compute server. However there may be required relationships between those two configurations such as required revisions of respective software or firmware components for proper interoperability or security. It may be necessary to rely on an administrative human implemented procedure to express and test for satisfaction of such relationships.

The above difficulties may be more pronounced when data processing systems are deployed using complex but well defined building blocks. As computer technology has progressed with ever greater levels of integration it is possible to create an entire integrated computing system having compute storage and network elements as such a discrete building block usable to provide well defined and scalable computing platforms for a variety of applications. Efficient automated testing of such complex integrated computing systems is desirable.

Methods and apparatus are disclosed for testing whether an integrated computing system complies with a predetermined configuration benchmark which is expressed as a collection of rules in a first set of markup language statements such as XML. The integrated computing system includes interconnected components of different types which may be selected from a server type a network switch type and a storage subsystem type for example.

A disclosed method includes parsing the rules to obtain test definition identifiers identifying test definitions in a second set of markup language statements. Each test definition includes a test value and an attribute identifier of an attribute of a component of the system where the attribute has an actual value to be tested against the test value. The attribute identifier identifies an object in an integrated object model for system management information for the components of the system. The integrated object model expresses physical and functional relationships among all the components of the integrated computing system. Thus the object model reflects the system as a whole enabling uniform access to management information about all the components so as to enable automated testing for relationships among them.

The method includes invoking an interpreter for the second set of markup language statements. The interpreter is invoked with the test definition identifiers from the rules to process the corresponding test definitions to a access the management database using the attribute identifiers of the test definitions to obtain the actual values for the corresponding attributes and b compare the obtained actual values to the test values of the test definitions to generate comparison result values indicating whether the attribute is in compliance with the rule containing the test definition identifier. This comparison result values can be stored or communicated as compliance indicators to a human or machine user.

The system management subsystem is used for system management tasks vis vis the ICSs such as configuration monitoring testing etc. Such tasks may also be referred to as maintenance and operating or M O activities. As described more below one significant feature of the system management subsystem is its use of an integrated representation of all managed components in the ICSs including both hardware and software resources and across different domains of hardware resources in particular. Additionally the system management subsystem includes structures and functions that can be used for compliance testing of each ICS such as whether the actual configuration of a given ICS complies with a specified benchmark configuration. Compliance testing makes use of the integrated representation for flexible efficient and powerful specification of compliance rules and tests.

Although not depicted in the various components of an ICS generally each include some type of management interface enabling an external management application or device to both provide and obtain component specific management information. For example network switches utilized to realize the interconnects may provide a so called Simple Network Management Protocol SNMP interface enabling a separate SNMP management application to interrogate a switch for operational information e.g. hardware status indicators network traffic counters event information etc. and to provide input to tailor operation e.g. configuration information parameter values . Some management protocols provide for reporting asynchronous events that may require specific prompt attention. SNMP for example includes trap messages transactions usable for such event reporting. The system management subsystem is functionally coupled to each of these component specific management interfaces. In some cases the coupling may be direct i.e. via a specific component specific connection while in other cases there may be an intermediate component manager potentially providing a somewhat more abstracted view of its underlying component s .

As also indicated in the database subsystem includes an integrated object model OM management database for the system and exports an OM application programming interface API via which the management applications obtain management information stored in the OM database . In one embodiment the OM API may utilize a protocol for distributed access known as Representational State Transfer REST . A REST API employs uniform resource locators URLs and or uniform resource identifiers URIs to specify resources or objects that are the subject of REST commands and responses as generally known in the art. Certain details of the OM database and OM API are provided below.

The compliance engine is a specialized management application for assessing whether the system and specifically each ICS complies with certain well defined specifications for configuration or other aspects of design and or deployment. It does this based on management information it obtains from the database using the OM API . More detail about the compliance engine and its operation are given below. As shown it may also have one or more additional interfaces to the monitor or in some cases even directly to component managers for the components of the ICSs to obtain management information that for some reason is not obtainable via the database and OM API .

As mentioned in one embodiment the OM database is structured as a set of objects or resources and the OM API employs URLs to identify resources that are the subject of requests and responses. More particularly the OM API may employ a so called Representational State Transfer REST Web Services interface for the OM database having a complete set of URLs to obtain data on the entire physical model discovered on an ICS . The set of REST resources may be organized according to an XML style schema. While the remaining description makes specific references to a REST type of implementation in alternative embodiments other types of interfaces may be used including those following the Simple Object Access Protocol SOAP .

The following is an example of a URL identifying a resource in the OM database in this case a listing of fabric interconnects which are components within the cluster interconnect of . This URL is included in a REST request sent from the compliance engine to the OM database after being obtained from an OVAL test definition for some test directed to a fabric interconnect 

The following is an example portion of a corresponding REST response. The information for the fabric interconnects is provided as a set of tagged values. The REST response for the fabricinterconnects object includes tagged segments or groups of statement for each individual fabric interconnect device which is a system component as well as individual tagged values which are attributes of the fabric interconnect device e.g. its last operational status as shown in the example below . Within the group of statements for a given object may be URLs for sub components usable in separate REST requests to obtain more specific information about them. For example a fabric interconnect includes circuit modules called fabric modules so each fabricinterconnect group includes a corresponding tagged URL for this sub object.

In the description that follows the specific case of using XCCDF and OVAL is assumed and thus the elements and are referred to as the XCCDF files and OVAL files . This is merely for convenience and ease of understanding and is not to be interpreted as limiting.

The process components include respective interpreters for the requirements XCCDF files and tests OVAL files shown as an XCCDF interpreter and OVAL interpreter respectively. They also include separate control components CNTL that manage different aspects of the operations performed by the process components as a unit. The control components include a compliance API via which a client application configures executes and obtains results from units of compliance testing operations referred to as scans . The OVAL interpreter includes a requestor side implementation of the OM API and may include other interfaces as mentioned above. Techniques for parsing or interpreting XML are generally known in the art and may be utilized in realizing the interpreters . In fact in one embodiment an available open source XCCDF interpreter may be used. However the use of a custom OVAL schema means that the OVAL interpreter will be correspondingly customized so that an off the shelf or open source implementation may not be suitable.

As mentioned above one advantage of the presently disclosed technique is the ability to capture cross domain dependencies in compliance testing i.e. to specify and test for certain combinations of attribute values among all or any subset of compute resources network resources and storage resources. In one example not shown there is a specification regarding a degree of network segmentation to limit scope of a compliance assessment. In such a case OVAL criteria is used to examine the segmentation of the network physical or virtual in an ICS to automatically determine the assets components that are in scope for the remainder of a scan i.e. whether patches are up to date etc. .

The following is an example illustrating such dependencies using OVAL coding. In this case a test is satisfied if either of two conditions is true. The first condition is that network segment is in scope for i.e. to be included in a scan and the patches are up to date on the servers attached to the network segment. The second condition is that network segment is not in scope for the scan i.e. is not to be tested as part of the scan. In scope for scan is an attribute of a network segment while patches up to date is an attribute of a virtual server computing software component connected to the network segment.

Referring back to the compliance API may be used to control all aspects of the compliance scans that are executed by the compliance engine including for example starting a scan on demand of a human or machine user. It may be desirable to automate certain aspects of this control however and in particular to use event initiated scans that are started in response to occurrence of one or more specified events in the system. Event driven activity can make use of facilities provided by the above mentioned event subsystem of the monitor which can be implemented in the form of a Java message queue for example. One use of event initiated scanning is as a response to changes in the system configuration as may be detected by the monitor for example. In this case the monitor detects the change and creates a corresponding event. The compliance engine is configured to listen for such an event and upon detecting the event it initiates a compliance scan. In some cases this may be a full system compliance scan while in others it may be a scan more focused and specific to the change that initiated it. An example of this kind of operation is the addition or removal of a hardware component such as a server .

Referring to the physical computer hardware includes one or more processors memory and interface circuitry interconnected by data interconnections such as one or more high speed data buses. The interface circuitry provides a hardware connection to external interconnect and other external devices connections EXT DEVs . The processor s with connected memory may also be referred to as processing circuitry herein. In operation the memory stores data and instructions of system software e.g. operating system and one or more application programs which are executed by the processor s to cause the hardware to function in a software defined manner. Thus the computer hardware executing instructions of a management application such as described herein can be referred to as a management circuit or management component and it will be understood that a collection of such circuits or components can all be realized and interact with each other as one or more sets of computer processing hardware executing different computer programs as generally known in the art.

While various embodiments of the invention have been particularly shown and described it will be understood by those skilled in the art that various changes in form and details may be made therein without departing from the scope of the invention as defined by the appended claims.

While in the above description the various components are specifically included in respective ICSs in alternative embodiments some components may be uncommitted to any particular ICS and virtual machines are provisioned from the resources on the fly.

For example the system management subsystem may be implemented in different ways specifically using alternatives or supplements for obtaining and or storing the management information. Some or all management information may be maintained in an in memory data structure rather than in a database of the type commonly residing on secondary storage. Additionally as indicated the compliance engine may utilize a separate interface apart from the OM API to access management information.

One particular use scenario may be in a host tenant environment in which different applications and or virtual machines of a set of tenant organizations execute on host provided hardware resources. In this kind of system one or more tenants may be running their own compliance engine against components software and or hardware that they are using while the hosting organization also runs a compliance engine that not only checks common not tenant specific components but also interrogates a tenant s compliance engine for its compliance state. This interrogation may be over a specialized interface to which the compliance engine connects to the other compliance engine.

In another scenario the compliance engine may check whether data it requires is in the database OM DB and if not uses some alternative means to fetch the data for an evaluation. For example a system component may be unsupported in the database object model but it has attributes to be tested for compliance evaluation e.g. logical configurations or simply settings that have not yet been included in the object model .

In the above description examples are given using XML based languages but in other embodiments other types of markup language may be used.

Additionally there are a wide variety of other types of system components including software types that fall within the scope of compliance testing as described herein. Specific examples of software types are a hypervisor and an operating system or application running either on a hypervisor or directly on server . There are common scenarios where context for such components is relevant for a compliance assessment. For example it may be required that different workloads applications from different customers be executed on different physical servers which can be seen as a required relationship between a hardware type of component and a software type of component. In an example of a required relationship between different software component types certain types of applications may be required to run on hypervisors with specific configurations. Testing for compliance requires contextual information in addition to the kinds of hardware focused information described above.

It is also noted that the content may have either a relatively static or a more dynamic nature. In one case reference configurations may be defined and be applicable across a large number of systems for long periods months or years . In this case it may make sense to create one or more benchmarks represented in XCCDF and OVAL files and utilize these files in a number of systems without modification. This is an example of a static benchmark. In other cases either the process or another process in a particular system may be used to tailor comparison values and or whole rules before starting a scan. For example a default rule may require that all passwords in a system be at least 12 characters in length. A system manager may to change this comparison value to 14 or 10 for example which may be more consistent with a particular environment or company standard. This is an example of a more customizable or dynamic benchmark.

