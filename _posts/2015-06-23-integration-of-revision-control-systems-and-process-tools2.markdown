---

title: Integration of revision control systems and process tools
abstract: A system for software development includes a central server comprising a revision control system module; a process server including a process tool module; a local server including a local development environment; and an integration server including a mapping module. The revision control system module includes a plurality of branches. The process tool module is configured to create a ticket indicating a product requirement. The central server is configured to maintain and update the ticket that variably associates the development artifact with a respective one of the branches of the revision control system module. The integration server is configured to copy changes in the ticket stored on the revision control system to the ticket in the process tool module, and accordingly control transitions of the development artifact between the plurality of branches in the revision control system module of the central server.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09542159&OS=09542159&RS=09542159
owner: SAP SE
number: 09542159
owner_city: Walldorf
owner_country: DE
publication_date: 20150623
---
A portion of the disclosure of this patent document contains material that is subject to copyright protection. The copyright owner has no objection to the facsimile reproduction by anyone of the patent document or patent disclosure as it appears in the Patent and Trademark Office patent file or records but otherwise reserves all copyrights whatsoever.

There are various recognized software development processes and methodologies. For example the waterfall development methodology i.e. linear methodology provides a sequential approach to software development according to which the development process is divided into various phases. These phases may include requirement analysis software design implementation testing integration deployment and maintenance. Every phase of the development process is strictly defined in the beginning of the development process. For each of the phases only if the particular requirements of the respective phase are met can the byproduct of the respective phase advance to the next phase. Generally the waterfall development methodology requires formal approvals and documentations in the beginning and at the end of each phase.

On the other hand agile software development methodologies do not include the strict structure of and are more flexible than the water fall methodology. Agile processes adapt to changes of the project requirements and to particular needs of the project at any given moment. In other words rather than creating formal documents to iterate and predict the requirements of the development project from beginning to the end agile processes focus on the needs of the updated software as they evolve. In agile processes the various phases are not strictly delineated in linear sequential fashion. For example a testing phase is not necessarily a separate phase that is implemented only after completion of software design. Rather testing may occur concurrently with designing and implementing other aspects of a development object.

Branching is an agile software development methodology where each development element is assigned to a separate branch with various development branches being worked on simultaneously. Branching provides a lot of flexibility isolation and freedom for developers.

The waterfall development methodology is restrictive. For example due to the strict structure of the development process developers may not review and revise creations of previous phases after a subsequent phase has begun. Moreover anticipating all of the design needs in advance of complex development projects is difficult which can result in many of the development efforts being wasted. The agile software development methodologies also suffer from drawbacks. For example the agile software development methodologies lack an overall project design. In the case of branching the agile software development methodologies can result in multiple parallel developments that require tedious integration. Furthermore when utilizing agile software development methodologies it is hard to predict the amount of time and resources needed to complete a project. Lastly due to the iterative nature of agile development multiple rounds of testing are required.

Example embodiments of the present invention are directed to a system and method for facilitating software development which offer a combination of advantages of both the waterfall and agile software development methodologies without many of their disadvantages. Example embodiments of the present invention relate to integration of revisions control systems and process tools.

The central setting includes a process tool and a revision control system RCS . The process tool is a module on a server referred to herein as a process server and provides a project manager with information about the current state of a development artifact in a development process. Process tool assists the project manager in monitoring the development process and governing it. For example the process tool includes information about product requirements and whether these requirements have been assigned to developers for development. The process tool can also include information about the development artifacts that have been developed in response to a product requirement e.g. when they were developed who worked on them etc. The process tool can also include information about the current development phase of a particular development artifact. There can be various development phases for each development artifact. For example in an embodiment the process tool can track the development artifact in a DEVELOP phase TEST phase and PRODUCTION phase .

Based on the information provided by the process tool the project manager can decide whether to start the next phase of the development process e.g. testing or production. For example in response to a product requirement a developer has been assigned to work on a development artifact. Once the developer develops the development artifact the process tool shows the progress and a project manager can decide whether to submit the development artifact for testing. In other words the project manager can decide whether the development artifact can enter into the TEST phase from the DEVELOP phase . By deciding the phase shifts the project manager can govern and drive the development process.

The RCS is a module on another server referred to herein as the central server. RCS can be a software component and facilitates storing and retrieval of various revisions or developments of a software source code. RCS can also facilitate reconciling and merger of conflicts that may arise during parallel development of the same source code. In this embodiment RCS tracks changes made to the enterprise software in the central setting. RCS also stores earlier versions of the development artifact. As a result developers and managers can retrieve earlier versions of the development artifact on the RCS . The RCS includes several branches.

In this example embodiment RCS can include a development branch DEV a quality assurance system branch QAS and a production branch PRD . Each branch is a repository of development artifacts and their prior versions. Sometimes multiple development artifacts can be assigned to a branch and sometimes only one development artifact can be assigned to a branch. There is a sequential relationship between DEV branch QAS branch and PRD branch in that these branches include different phases of a development artifact. For example when a development artifact is in development phase the DEV branch includes all of the versions of that development artifact in this phase. However when the development artifact enters the testing phase the QAS branch includes various versions of the development artifact that has been submitted for testing.

Both the process server and the central server are networked via a network to an integration server . The network can be a local network or a global network such as the Internet. The integration server interconnects various software components of the process tool on the process server to various software components of the RCS on the central server.

The integration server is configured to send notifications to the process tool and the RCS . The process tool and the RCS are also configured to send notifications to the integration server . The notifications can include a binary message or more comprehensive messages including lengthier content. The integration server also is configured to read information from or write information to the process tool and the RCS . The integration server also is capable of storing the ticket.

The central server includes the current state of the enterprise software and is capable of various functionalities such as storing the enterprise software running the enterprise software storing a ticket interconnecting local development environments and can trigger building and deploying development artifacts in a testing environment or for final product deployment. The central server can store information on itself or other databases. The central server can include various interfaces for local developers to interact with it and pull and push development artifacts software and source code to and from it. The process server also can store a ticket and has various interfaces for project managers to interact with the process server to create tickets.

The local setting includes a local environment . There can be one or a plurality of local environments and each local environment can be operated by one or a plurality of developers. The local environment in an example embodiment is provided on a local computing terminal and can include for example local build tools a local test and execution environment and a version control system VCS . The local environment is networked to the RCS of the central server. The network can be a local network or a global network such as the Internet. The local environment can be located on one or more servers. The VCS is a software component that facilitates storing and retrieval of various developments or revisions of a software source code. VCS can be utilized in the local environment i.e. local setting while the RCS is utilized in the central setting.

The local VCS is connected to the central server. When there are several local developers working independently there can be multiple VCSs . The VCS can communicate with the RCS through the central server to pull information from the RCS and push information to the RCS . The information can include for example development artifacts source code and or software.

In an example embodiment the development process begins by a project manager creating a ticket and storing it on the process tool . The ticket can include information about product requirements of a development artifact or multiple development artifacts. The ticket can also include information about a reported problem or bug that needs to be fixed. Every ticket includes a unique Change ID which assists the integration server in tracking the development artifact developed in response to the ticket. The project manager can also include information about the status of the development artifact in the ticket. For example the project manager can include that the development artifact is in DEVELOP phase . The project manager can also begin the development process from other phases. For example there can be development artifacts that were developed externally and only need to be tested within the internal testing environment. Thus the project manager can start the process from the TEST phase . The ticket can also include other metadata. For example the project manager can assign the project to a particular developer or assign the project during a particular period of time in the future. Other information objects can also be included in the ticket at this stage. For example the date that the ticket was created can be included in the ticket or the project manager can include a title for the ticket i.e. Change Title . illustrates an example of respective information objects included in a ticket at respective modules of the software development process.

Upon making and storing the ticket on the process tool the process tool sends a message or notification to the integration server . The message or notification indicates that a new ticket is available. In response the integration server obtains and stores the information in the ticket from the process tool . For example the integration server obtains the Change ID Status and Other Metadata from the ticket on process tool .

Subsequently the integration server notifies the RCS that a new ticket is available in response to which the RCS instantiates one of the branches on the central server. The integration server assigns the branch instantiation a new Branch ID and stores some or all of the information from the ticket into the branch. The branch can be the DEV branch . The RCS can also copy the ticket itself from the integration server . The RCS also notifies a local developer about the availability of a new ticket.

In an example embodiment upon notification the local developer using the local environment can submit to the RCS a request to pull the ticket along with the current state of the enterprise software. Subsequently the RCS transmits the ticket and the current state of the software to the local developer. In an example embodiment the local developer checks out the ticket on the central server. In an example embodiment the central server provides the local developer with a URL link to the ticket and the local developer can view the ticket on its local environment .

The local developer begins working on the development artifact in the local environment using the local build tools . Upon completion of design and implementation of the development artifact the local developer can deploy the development artifact for testing in the local test and execution environment . Assuming that the testing is successful and that the development artifact satisfies the product requirements indicated in the ticket the local developer is ready to push the development artifact back to the DEV branch of the RCS . Using the Branch ID included in the ticket the local developer pushes back the development artifact into the intended branch of the RCS .

The local developer can push the development artifact using the local VCS . The central server is configured to receive the development artifact and store it in the DEV branch which was created for the development artifact . The RCS also is configured to update the content of the ticket. For example the RCS can update information in the ticket to indicate that the development artifact is received when it was received who pushed the artifact the identity of the development artifact etc. The RCS also can include information about pushing the development artifact in the ticket. For example the RCS can ascribe a unique Push ID to the push of the development artifact and can include any messages associated with the push e.g. push was or was not successful for an explained reason or Push Message . Alternatively or additionally instead of storing some or all of the information in the ticket the RCS can store all or some of the information in another file in the DEV branch .

Subsequently the integration server obtains and stores the information of the ticket or any other file including the information on the central server. Then with the new information the integration server can update some of the information that were included from before. For example since now there is a Push ID and Push Message the integration server can conclude that the development artifact was successfully pushed back into the RCS . Thus the integration server can update the Status and reflect that the DEVELOP phase is complete. Then the integration server copies the relevant information to the ticket on the process tool .

After copying the information in the ticket from the central server to the integration sever and then to the process tool a project manager can review the status of the development artifact. For example the project manager can see that a development artifact has become available and is ready for the next phase of the development process. The project manager can modify or update the content of the ticket and trigger a phase shift of the development process. The triggering includes updating the information in the ticket to reflect advancement of the development process into the next phase at the process tool . For example in an example embodiment the project manager can trigger testing of the development artifact. This can be done by updating the Status field in the ticket to reflect that the development artifact can enter into the TEST phase.

Once the development artifact is triggered to enter into the next phase the process tool sends a notification to the integration server . In response the integration server stores a copy of the ticket and notifies the central server about the ticket which included a phase shift. In response RCS creates a new branch instantiation e.g. of the QAS branch on the central server. The integration server assigns this branch a unique Branch ID and stores some or all of the information included in the ticket in the branch. Also the RCS stores the development artifact in the QAS branch of the RCS .

Subsequently the RCS can trigger building and deploying the development artifact into a testing environment. This building and deployment can be done by triggering external build tools by providing the current state of the software and the development artifact. The external build tools are located on a separate build server. If the development artifact is successfully built and deployed into the testing environment the external build tools on the build server notify the RCS about this successful building and deployment. The RCS in turn updates the ticket to reflect that the building and deploying of the development artifact into the testing environment has been successful i.e. Other Metadata and notifies the integration server . The integration server stores this information and updates the content of the ticket on the process tool to reflect this information. For example the integration server can update the Status of the ticket to Built for Testing. 

In an example embodiment if the development artifact satisfies the functionality and quality requirements intended for it and described in the ticket in the testing environment the external build tools send a notification to the RCS . In response the RCS updates the content of the ticket to reflect this success. The RCS also reports that the ticket has been updated to the integration server . The integration server stores this information and sends it to the process tool . At this point the testing phase is completed and the development artifact can move into the next phase of the development process. Moving the development artifact into the next phase of the development process must be triggered by a project manager. The project manager can update the content of the ticket to reflect that the development artifact can be moved into the next phase. For example the project manager can update the Phase field to PRODUCTION.

In an example embodiment if the development artifact does not satisfy the requirements of the testing environment the external build tools notify the RCS of the failure. The RCS updates the content of the ticket to reflect this information. The RCS also notifies the integration server that the content of the ticket has been updated. The integration server stores the updated contents and also transmits it to the process tool . The project manager can decide over the fate of the development artifact. For example the manager can decide that the development artifact has to move back into the previous development phase.

Moving the development artifact into the previous phase of the development process must be triggered by a project manager. The project manager can for example update the content of the ticket i.e. Phase to DEVELOP to indicate more work needs to be done on the development artifact by a local developer. When the content of the ticket is updated the process tool sends a notification to the integration server which stores a copy of the content. The integration server also sends a notification to the RCS . In response using the branch ID stored in the ticket the RCS can move the development artifact into the previous DEV branch of the RCS . The RCS also can send a notification to the local developer and the local developer can request a pull.

Once it is triggered to move the development artifact into the next development phase i.e. from TEST to PRODUCTION the process server notifies the integration server that the content of the ticket has been updated. The integration server in turn stores a copy of the content and notifies the RCS about the ticket. The RCS instantiates a new branch e.g. a PRD branch . Then the RCS copies the development artifact from the QAS branch into the PRD branch . The integration server assigns a Branch ID to the PRD branch and stores the ticket from process tool in PRD branch . Then the RCS uses the external build tools for building and deployment. The external build tools can be on the build server or can be on a different server.

If the development artifact is successfully built and deployed the external build tools on the build server notify the RCS about this successful building and deployment. The RCS in turn updates the ticket to reflect that the building and deploying of the development artifact has been successful and notifies the integration server . The integration server stores this information and updates the content of the ticket on the process tool to reflect this information.

If the external build tools cannot build and deploy the development artifact the external build tools notify the RCS about this failure. The RCS updates the content of the ticket to reflect this information i.e. Other Metadata . The RCS also notifies the integration server that the content of the ticket has been updated. The integration server stores the updated contents and also provides the updated contents to the process tool . The project manager can decide over the fate of the development artifact. For example the manager can decide that the development artifact has to move back into the previous development phase.

The integration server is configured to interact with various RCSs and process tools. Although most RCSs and process tools share some aspects each RCS and process tool has its own nuances. As a result the integration server has the RCS adapter and the process adapter to make it compatible with various RCSs and process tools. The RCS adapter is a module on the integration server which abstracts information from RCS and the process adapter is a module on the integration server which abstracts information from the process tool . For example includes some of the information which can be abstracted by each adapter. The mapping module is a module on integration server and provides information from one adapter to the other. In order to communicate with the RCS the integration server utilizes public application programming interfaces APIs available for a given revision control system.

Once triggered to be built and deployed in the testing environment the external build tools notify the RCS about the success or failure of the building and deployment of the development artifact into the testing environment. The RCS updates the content of the ticket to reflect this information. The RCS can also notify the integration server that the ticket has been updated. The integration server accordingly updates its locally stored copy of the ticket and sends the update to the process tool . Once the ticket is successfully updated the process server sends a success message to the project manager . The message indicates that the development artifact was successfully build and deployed in the test environment.

If the building and deployment is not successful upon notification of the external build tools the RCS updates the content of the ticket to reflect this information. The central server can also notify the integration server of the update in the ticket. The integration server accordingly updates its locally stored copy of the ticket and sends the update to the process tool . The process server can notify the project manager of the failure. In this embodiment the project manager can decide the next action to be taken.

Once the quality and functionality testing is completed the external build tools notify the RCS about the results. If the testing was successful the RCS updates the content of the ticket in the QAS branch of the RCS to reflect this information. The central server also notifies the integration server . The integration server then updates its locally stored copy of the ticket and sends the update to the process tool . The process tool sends a success message to the project manager . At this point depending on the result of the tests the development artifact is ready to be advanced into the next phase of the development process or reverted back into the development phase.

The build server sends a notification to the RCS regarding the success or failure of the building and deployment. The RCS updates the content of the ticket in the PRD branch . The RCS also notifies the integration server of the change. The integration server gathers the relevant information from the RCS and stores this information on the process tool . The process tool can send a success message to the project manager .

If the central server fails to build and deploy the development artifact into the enterprise software the build server notifies the RCS the RCS notifies the integration server and the integration server notifies the process server which in turn notifies the project manager . At this point the project manager can decide about the next development phase of the development artifact.

The Other Metadata field can include additional information about the product requirements or the requirements for the development artifact. This field can include the assignment of the task to a particular developer or assignment of the project during a particular period of time in the future. The field can include the date that the ticket was created. This field also can include any other information that can assist the project manager in monitoring and governing the development process. The field also can include any other information that can help reviewing the development process in the future. The Status can include information about the status of the ticket as of the last update. For example Status can be assigned after the ticket was issued to a particular developer. As another example the Status can be issued but not assigned if the ticket is issued but is not assigned to a developer. The project manager sets the Status in the outset however the Status can also be automatically assigned by the process tool . The Change Title is optional. It provides a title for the ticket which can be set by the project manager .

At the RCS level e.g. RCS in the ticket includes a Branch ID Development Artifact ID Push ID Other Metadata and Push Messages . Branch ID is the identity of the branch of the RCS to which the development artifact is assigned. For example when the local developer using the local VCS pushes the development artifact to the DEV branch of the RCS the Branch ID identifies the DEV branch in which the development artifact was saved. The Branch ID can be set by the integration server after a ticket has been issued and after the development artifact enters into a new development phase which is triggered by a project manager .

The Development Artifact ID can identify the actual development artifact which was developed in response to the ticket. Push ID is a unique identifier that is associated with the pushing of the development artifact. Push Messages can be a message associated with the push. For example when the local developer pushes a development artifact into the RCS this act of pushing receives a confirmation code and the confirmation code is the Push ID . The push can be successful or unsuccessful. If the push is unsuccessful for example there can be an explanation as to why the push did not occur successfully. This explanation can be included in the Push Message .

The Other Metadata field generally includes what was included in the Other Metadata at the process tool . However more information can be added to the field. For example the local developer at the local environment can add comments in this field which will be received by the RCS and updated by it . This field can also be automatically populated by information about the time of development the names of the individuals who worked on the development artifact or other information for tracking the development history of the development artifact. For example upon receiving the development artifact the RCS can update this field.

On the integration server the ticket can include the following fields Change ID Change Title Status Development Artifact ID Push ID Phase DEV Branch ID QAS Branch ID PRD Branch ID Push Messages and Other Metadata . The integration server brings together two sets of data maintained by the process tool and the RCS . The integration server makes available the data form each module to the other. The integration server also becomes a repository for the data which can be used in the future for reviewing purposes.

In the first instance the integration server retrieves the Change ID Change Title Status Phase and Other Metadata from the process tool . The integration server also retrieves the Development Artifact ID Push ID and Push Messages from the RCS . DEV Branch ID QAS Branch ID and PRD Branch ID are retrieved from the Branch ID . For example if the branch which the Branch ID is associated with is a DEV branch the Branch ID can be stored as a DEV Branch ID if the branch which the Branch ID is associated with is a QAS branch the Branch ID can be stored as a QAS Branch ID if the branch which the Branch ID is associated with is a PRD branch the Branch ID can be stored as a PRD Branch ID .

The integration server has the ability to update some of these fields throughout the development process. For example after a ticket is issued the Status fields and can be assigned. However after a development artifact is pushed in response to the ticket there can be a Push ID and Development Artifact ID associated with the development artifact. As a result the integration server can update the Status to developed and pushed for example.

An example embodiment of the present invention is direct to communication between various modules on various servers. All of the communications between these modules can be conducted using the known communication protocols.

An example embodiment of the present invention is directed to one or more processors which can be implemented using any conventional processing circuit and device or combination thereof e.g. a Central Processing Unit CPU of a Personal Computer PC or other workstation processor to execute code provided e.g. on a hardware computer readable medium including any conventional memory device to perform any of the methods described herein alone or in combination. The one or more processors can be embodied in a server or user terminal or combination thereof. The user terminal can be embodied for example as a desktop laptop hand held device Personal Digital Assistant PDA television set top Internet appliance mobile telephone smart phone etc. or as a combination of one or more thereof. The memory device can include any conventional permanent and or temporary memory circuits or combination thereof a non exhaustive list of which includes Random Access Memory RAM Read Only Memory ROM Compact Disks CD Digital Versatile Disk DVD and magnetic tape.

An example embodiment of the present invention is directed to one or more hardware computer readable media e.g. as described above having stored thereon instructions executable by a processor to perform the methods described herein.

An example embodiment of the present invention is directed to a method e.g. of a hardware component or machine of transmitting instructions executable by a processor to perform the methods described herein.

The above description is intended to be illustrative and not restrictive and although the above description provides details for purposes of clarity of understanding it will be apparent that certain changes and modifications may be practiced within the scope of the following claims. The invention is not to be limited to the details given herein but may be modified within the scope and equivalents of the following claims. For example those skilled in the art can appreciate from the foregoing description that the present invention may be implemented in a variety of forms and that the various embodiments may be implemented alone or in combination. Therefore while the embodiments of the present invention have been described in connection with particular examples thereof the true scope of the embodiments and or methods of the present invention should not be so limited since other modifications will become apparent to the skilled practitioner upon a study of the drawings specification and following claims. For example the present invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the present invention is not unnecessarily obscured.

