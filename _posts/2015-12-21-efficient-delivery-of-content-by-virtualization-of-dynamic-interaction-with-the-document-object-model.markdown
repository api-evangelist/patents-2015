---

title: Efficient delivery of content by virtualization of dynamic interaction with the document object model
abstract: A method of updating a document object model (DOM) is disclosed. A request by a web browser for information to update the DOM is intercepted by intercepting an interaction with the DOM. The request is converted to a server request as part of a client-server protocol, requesting at least a portion of the information from a server. The server request is sent to the server. A first server response including at least a portion of the information from the server is received. The first server response is processed according to the client-server protocol to determine a first update to the DOM. The first update is applied to the DOM.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09450803&OS=09450803&RS=09450803
owner: Instart Logic, Inc.
number: 09450803
owner_city: Palo Alto
owner_country: US
publication_date: 20151221
---
This application is a continuation of co pending U.S. patent application Ser. No. 13 563 554 entitled EFFICIENT DELIVERY OF CONTENT BY VIRTUALIZATION OF DYNAMIC INTERACTION WITH THE DOCUMENT OBJECT MODEL filed Jul. 31 2012 which is incorporated herein by reference for all purposes

Typically a web browser needs to receive the dependent resources associated with different links and URLs before it can complete the rendering of a webpage. The startup wait time experienced by an end user of a browsing session may be insignificant in low latency networks such as wired Ethernet networks but unacceptably long for an end user in higher latency networks such as cellular 3G networks. Therefore improved techniques for delivering information corresponding to a webpage would be desirable.

The invention can be implemented in numerous ways including as a process an apparatus a system a composition of matter a computer program product embodied on a computer readable storage medium and or a processor such as a processor configured to execute instructions stored on and or provided by a memory coupled to the processor. In this specification these implementations or any other form that the invention may take may be referred to as techniques. In general the order of the steps of disclosed processes may be altered within the scope of the invention. Unless stated otherwise a component such as a processor or a memory described as being configured to perform a task may be implemented as a general component that is temporarily configured to perform the task at a given time or a specific component that is manufactured to perform the task. As used herein the term processor refers to one or more devices circuits and or processing cores configured to process data such as computer program instructions.

A detailed description of one or more embodiments of the invention is provided below along with accompanying figures that illustrate the principles of the invention. The invention is described in connection with such embodiments but the invention is not limited to any embodiment. The scope of the invention is limited only by the claims and the invention encompasses numerous alternatives modifications and equivalents. Numerous specific details are set forth in the following description in order to provide a thorough understanding of the invention. These details are provided for the purpose of example and the invention may be practiced according to the claims without some or all of these specific details. For the purpose of clarity technical material that is known in the technical fields related to the invention has not been described in detail so that the invention is not unnecessarily obscured.

A webpage accessed by web browser may be described by different markup languages including Hypertext Markup Language HTML Extensible Markup Language XML and the like. The webpage may also be described by different scripting languages including JavaScript Object Notation JSON and the like. The webpage may be described by other custom languages as well. HTML is used hereinafter as an example of the various languages for describing webpages. Note that the examples of HTML are selected for illustration purposes only accordingly the present application is not limited to these specific examples.

The Document Object Model DOM is a standardized model supported by different web browsers e.g. Internet Explorer Firefox and Google Chrome to represent the various components of a webpage. The DOM is a cross platform and language independent convention for representing and interacting with objects in HTML documents as well as XHTML and XML documents. Objects in a DOM tree may be addressed and manipulated using methods on the objects. The public interface of a DOM is specified in its application programming interfaces APIs .

The DOM standard includes different levels. DOM core level 0 and level 1 are the core standards supported by all web browsers while DOM levels 2 and above are extensions to DOM core level 0 and level 1 which can be optionally supported by different web browsers. DOM core level 0 and level 1 define a minimal set of objects and interfaces for accessing and manipulating document objects. It provides a complete model for an entire HTML document including the means to change any portion of the document.

The DOM standard represents documents as a hierarchy of node objects called a DOM tree. Some types of nodes may have child nodes of various types and others are leaf nodes that cannot have any object below them in the document structure hierarchy.

With continued reference to when web browser renders webpage on a screen web browser parses the received HTML webpage file and builds a DOM tree to represent the various components of webpage in a local memory. For example when the image tag shown as in is parsed by web browser the image is represented as an image object and the image object is inserted into the DOM tree accordingly.

After the webpage file is parsed and the corresponding DOM tree is created the entire DOM tree can be traversed to retrieve any dependent resources e.g. images audio clips or videos indicated by any of the nodes in the DOM tree via a network. For example the image object corresponding to the image tag in webpage redirects web browser to fetch an image file from an uniform resource locator URL . Accordingly web browser sends a request via a network requesting the image resource to be downloaded. There are two ways a request may be issued statically in which case it is the browser which manipulates the DOM or dynamically in which case the DOM manipulation is done by Javascript. In response to the request the requested dependent resource is sent to web browser via a network.

For example if the nodes of the DOM tree include N different links and or URLs N separate GET requests e.g. N separate HTTP GET requests are sent via a network requesting the dependent resources to be sent to web browser . In response N separate GET responses e.g. N separate HTTP GET responses are sent to web browser delivering the dependent resources to web browser .

The round trip time or network response time for a GET request to arrive at an edge server and for its corresponding GET response to arrive at web browser is dependent on the latency of the network which is different for different types of networks. The network may be any combination of different types of public or private networks including intranets local area networks LANs wide area networks WANs radio access networks RANs Wi Fi networks the Internet and the like. Therefore the latency associated with the network may vary depending on its network type s .

Some networks have relatively lower network latency. For example the network latency associated with WANs or Wi Fi networks is relatively low e.g. on the order of 10 milliseconds. Suppose the number of links and or URLs included in the DOM tree N is equal to twenty. The total network latency associated with receiving the dependent resources associated with the twenty links and or URLs from the edge server then is approximately 200 milliseconds. To improve network performance present day browsers have become more efficient in reusing connections to the same server such that typically less than 20 of the connections may be fresh connections.

Some networks have relatively higher network latency. For example the network latency associated with a 3generation mobile telecommunications 3G network is relatively high e.g. on the order of 100 milliseconds. In this instance the total network latency associated with receiving the dependent resources associated with the twenty links and or URLs from the edge server is then on the order of 2 seconds.

Since the network latency associated with different types of networks varies widely and web browser needs to receive the dependent resources associated with the links and URLs before web browser can complete the rendering of webpage the startup wait time experienced by the end user of the browsing session may be insignificant in low latency networks such as Wi Fi networks but unacceptably long for an end user in higher latency networks such as 3G networks. Therefore improved techniques for delivering information corresponding to a webpage would be desirable.

Virtualization of the DOM of web browser may be applicable to different types of optimization. In some embodiments using the virtualization engine optimized delivery of information over a network by segmentation and reprioritization of downloaded information can be achieved. For example using the virtualization engine the delivery of the information e.g. the order in which the information is delivered or the granularity of the information delivered and the actual content of the delivered information corresponding to any nodes of the DOM tree may be altered thereby speeding up the rendering of a webpage without compromising the end user s experience.

In some embodiments the virtualization of the DOM of web browser is transparent to web browser . In some embodiments the virtualization of the DOM of web browser is also transparent to the end users. The end users are not required to install any plugins. In some embodiments the virtualization of the DOM of web browser is also transparent to the content publishers without requiring the content publishers to change any codes. In some embodiments client may be injected into web browser based on standards based e.g. HTML or JavaScript procedures. For example after edge server receives a request from web browser requesting an HTML webpage file server may parse the HTML webpage file inject client into the HTML webpage file and then send the response back to web browser . In some embodiments client may be injected by adding JavaScript client code in the head section of the HTML webpage file.

Virtualization of the DOM of web browser includes handling static and dynamic interactions with the DOM of web browser . Both types of interactions may be intercepted or virtualized by the virtualization engine.

Dynamic interactions with the DOM of web browser include interactions that are effected by JavaScripts e.g. Ajax . The DOM of web browser is virtualized by having client intercept and virtualize method API calls to create delete or update elements in the DOM. In some embodiments only DOM core level 1 APIs which are supported by all standardized web browsers are intercepted and virtualized. The DOM core level 1 APIs for manipulating the DOM tree are supplanted by the equivalent JavaScript interfaces of the virtualization engine.

Static interactions to the DOM of web browser include interactions corresponding to static HTML tags in an HTML webpage file e.g. the tag as shown in . An HTML tag redirects web browser to fetch a dependent resource e.g. an image file from an URL. Because the static GET request is not made via a JavaScript the static request is not intercepted by client . Instead the static request is sent by web browser in its native form and then routed over the network e.g. by means of DNS resolution to an edge server supporting virtualization.

In some embodiments edge server may discern whether a GET request is sent by web browser or client using a signature based scheme thus enabling edge server to handle the static case as mentioned above. For example if a GET request was sent by client the GET request would be stamped with a predetermined signature. Conversely if the GET request was sent directly from web browser as in the static case the GET request would not be stamped with the predetermined signature.

In some embodiments when a GET request is sent directly from web browser in a static case edge server may send dummy content in response causing web browser to create a dummy node in the DOM tree. At the same time edge server may also notify client e.g. by sending a JavaScript that a dummy node has just been created in the DOM tree thereby eliminating the need for client to poll the DOM tree for any new dummy nodes added to the DOM tree. Client being notified of the newly created dummy node in the DOM tree may dynamically update the dummy node with the actual content by issuing one or more JavaScript requests to edge server . In response to the one or more requests edge server sends one or more JavaScript updates which are then intercepted by client which may then populate the dummy node with the actual image content.

Using the virtualization engine optimized delivery of information over a network by segmentation and reprioritization of downloaded information can be achieved. Note that the delivery of different information to web browser may be determined by the type of the information. For example dependent resources such as images audio clips and videos may be delivered using different techniques that are optimized based on the type of resource. In some embodiments the virtualization engine may selectively alter or modify the delivery of only certain types of information e.g. images . Images are used hereinafter as an example of the various dependent resources that can be efficiently downloaded to web browser by the virtualization engine. Note that the examples of downloading images are selected for illustration purposes only accordingly the present application is not limited to these specific examples only.

In some other techniques a compressed image is encoded in a format such that the image file is divided into a series of scans. The first scan shows the image at a lower quality and the following scans gradually improve the image quality. For example an image in progressive JPEG format is compressed in multiple passes of progressively higher detail. The initial passes include lower frequency components of the image while the subsequent passes include higher frequency components of the image. Rendering an image in progressive JPEG format shows a reasonable preview of the image after a first pass of rendering of the lower frequency components of the image with the image progressively turning sharper with higher detail after subsequent passes. A web browser can begin displaying an image encoded in progressive JPEG format as it is being downloaded from the network by rendering each successive pass of the image as it is downloaded and received. Doing so improves on the start up time experienced by the end user. Nonetheless upon a GET for an image the entirety of the image is downloaded. In some instances components of the webpage other than the image may have higher priority than the details of the progressively encoded image contained in the subsequent passes and it would be advantageous to download these important components of the web page before the whole image. In some instances it is preferable to deploy the bandwidth used to download the whole image to instead download other important components of the webpage. However such prioritization of webpage content is lost when the image is treated as a single binary content.

Therefore in some embodiments the startup wait time can be reduced by dividing a progressive JPEG image file or other image files that are compressed in multiple passes of progressively higher detail into a plurality of segments based on priorities e.g. frequency. Having control of both ends of the communication in a client and server system the lower frequency components of the image can be requested by client and sent by edge server first and then the higher frequency components can be requested by client and sent by server dynamically to refresh and sharpen the image.

Since a webpage may include content retrieved by multiple GET requests by dividing each GET request into a plurality of GET requests the server transmit queue is reprioritized to transmit and web browser is reprioritized to render the higher priority components of each of the GETs first. In particular if one original GET request corresponds to a huge image the impact of the huge image blocking all the other GET requests would be lessened. As a result the latency of seeing the images from the other GET requests is reduced.

In some embodiments the segment sizes e.g. the percentages of the original image file delivered to web browser in response to the plurality of GET requests may be tuned dynamically based on network load network bandwidth or other specifics of a user s connection. For example the size of the first segment may be only 10 of the total image on a high latency and low bandwidth connection while the size of the first segment may be 90 of the total image on a low latency and high bandwidth connection.

With reference to at to display a webpage e.g. webpage as shown in web browser sends an HTTP request message to edge server requesting the HTML webpage file corresponding to the webpage. After edge server locates the requested HTML webpage file edge server parses the HTML webpage file injects client into the HTML webpage file and then sends the HTML webpage file to web browser in an HTTP response message at . Client is then up and running.

At web browser parses the HTML webpage file and builds a DOM tree to represent the various components of webpage in a local memory. For example when the image tag shown as in is parsed by web browser the image is represented as an image object and the image object is inserted into the DOM tree accordingly.

After the DOM tree is created the DOM tree is traversed to retrieve any dependent resources indicated by any of the nodes in the DOM tree via a network. For example the image object corresponding to the static image tag in webpage redirects web browser to fetch an image file from an URL. At web browser sends a GET request in its native form to edge server . Since the GET request is sent directly from web browser the GET request is not stamped with any signature.

At edge server sends dummy content in response causing web browser to create a dummy node in the DOM tree. Edge server also notifies client that a dummy node corresponding to the image resource has just been created in the DOM tree. At client binds to the dummy node.

At client sends a request to edge server requesting a first segment of the image file to be downloaded. Note that the underlying communication protocol utilized between client and edge server can be any one of many protocols including proprietary protocols or standards based protocols such as HTTP. In some embodiments the request message sent by client may include different information including the URL of the dependent resource the dimensions of the image and the like. In some embodiments the request message may also include an indication of how the image should be segmented. For example the request message may specify a percentage e.g. 70 of the total size of the image to be downloaded. In some embodiments edge server determines a percentage of the total size of the image to be downloaded based on network conditions and the like.

At edge server sends the first segment of the image file to client . For example the first segment may be the first scan of a progressive JPEG image containing the lower frequency components of a progressive JPEG image. Client then uses method API calls to refresh the dummy node in the DOM tree with the received image file and the initial lower quality image can be rendered on the screen.

At client sends another request to edge server requesting the remaining portions of the image file to be downloaded. At edge server sends the remaining portions e.g. the remaining 30 of the image file to client . For example the second segment may be the second scan of a progressive JPEG image containing the higher frequency components of the progressive JPEG image. Client then uses method API calls to refresh the image node in the DOM tree with the received image file and a sharper and higher quality image can be rendered on the screen.

In some embodiments the refreshing of the image node can be reprioritized based on user actions user profiles the statistical behavior of many users in accessing CDN content or other network profiles.

In some embodiments the refreshing of the image node can be reprioritized based on user actions. During a browsing session a user may scroll to the bottom of a webpage before the webpage is loaded to completion. A user may also expand or minimize certain portions of the webpage. These and other user actions can be used to reprioritize the refreshing of the nodes in the DOM tree. For example if it is detected that the user has scrolled to the bottom of a webpage then client may delay or disable the refreshing of an image node corresponding to an image that is no longer in the display zone.

In some embodiments the refreshing of the image node can be reprioritized based on CDN content access statistics. For example statistics may indicate that very few users choose to look at images on the bottom left corner of the webpage. In this case client may delay or disable the refreshing of the image nodes corresponding to those images.

With reference to at to display a webpage e.g. webpage as shown in web browser sends an HTTP request message to edge server requesting the HTML webpage file corresponding to the webpage. After edge server locates the requested HTML webpage file edge server parses the HTML webpage file injects client into the HTML webpage file and then sends the HTML webpage file to web browser in an HTTP response message at . Client is then up and running.

At web browser parses the HTML webpage file and builds a DOM tree to represent the various components of webpage in a local memory. When the script tag as shown in is parsed by web browser a JavaScript is executed. If the JavaScript creates an image node then the corresponding DOM core level 1 method API call s are intercepted by client as part of the virtualization of the DOM enabling client to control the delivery of the content related to the node.

At client sends a request to edge server requesting a first segment of the image file to be downloaded. Note that the underlying communication protocol utilized between client and edge server can be any one of many protocols including proprietary protocols or standards based protocols such as HTTP. In some embodiments the request message sent by client may include different information including the URL of the image resource the height and width of the image and the like. In some embodiments the request message may also include an indication of how the image should be segmented. For example the request message may specify a percentage e.g. 70 of the total size of the image to be downloaded. In some embodiments edge server determines a percentage of the total size of the image to be downloaded based on network conditions and the like.

At edge server sends the first segment of the image file to client . For example the first segment may be the first scan of a progressive JPEG image including the lower frequency components of a progressive JPEG image. Client then uses method API calls to refresh the image node in the DOM tree with the received image file and the initial lower quality image can be rendered on the screen.

At client determines whether there are any events indicating that refreshing of the image node should be delayed or disabled. For example the events checked by client may be any event related to user actions user profiles statistical behavior of many users in accessing CDN content or other network profiles as disclosed above.

If events are not detected then client sends another request to edge server requesting the remaining portions of the image file to be downloaded at . At edge server sends the remaining portions e.g. the remaining 30 of the image file to client . For example the second segment may be the second scan of a progressive JPEG image including the higher frequency components of the progressive JPEG image. Client then uses method API calls to refresh the image node in the DOM tree with the received image file and a sharper and higher quality image can be rendered on the screen.

In some embodiments client may combine more than one GET requests into a single GET request before sending to edge server thereby reducing the overall round trip delays. In some embodiments server may convert an image from one format to another format e.g. from PNG to JPG plus an alpha channel before sending the image to client for faster delivery through the network. Client can convert the image back to the original format before the image is rendered on the screen.

Although the foregoing embodiments have been described in some detail for purposes of clarity of understanding the invention is not limited to the details provided. There are many alternative ways of implementing the invention. The disclosed embodiments are illustrative and not restrictive.

