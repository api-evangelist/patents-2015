---

title: Light data integration
abstract: Methods, systems, and apparatus, including computer programs encoded on computer storage media, for a light integration. One of the methods includes receiving a plurality of objects from a functional logic tier of an application, each object representative of data stored in a data tier of the application, a first portion of the stored data being stored in a first persistent data store and a second portion of the stored data being stored in a second persistent data store. The method includes presenting in a first area of the user interface information from the plurality of objects, the information selected from the first portion of the data. The method includes receiving an indication of an object being selected from the plurality of objects. The method includes presenting in a second area of the user interface information from the second part of data corresponding to the selected business object.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09613108&OS=09613108&RS=09613108
owner: Vinyl Development LLC
number: 09613108
owner_city: Miami Beach
owner_country: US
publication_date: 20151209
---
Data integration refers to a process of combining data residing in different sources and providing a unified view of the data. This process becomes significant in a variety of situations which include both commercial when two similar companies need to merge their databases and scientific combining research results from different bioinformatics repositories for example domains.

In general one innovative aspect of the subject matter described in this specification can be embodied in methods that include the actions of receiving by a computer device executing at least part of a functional logic tier of an application a request from a user for one or more objects present in the functional logic tier. The methods include the actions of determining that a type of one of the one or more requested objects is associated with an object representative of instance level security. The methods include the actions of determining access is authorized to at least some of the one or more objects in response to determining that the type is associated with the object representative of instance level security determining access including accessing by a computer device executing at least part of a data tier of the application a link data structure in the data tier of the application that links the access authorized user with at least some of the one or more objects. The methods also include the actions of providing the at least some of the one or more objects to the access authorized user.

Other embodiments of this aspect include corresponding computer systems apparatus and computer programs recorded on one or more computer storage devices each configured to perform the actions of the methods. A system of one or more computers can be configured to perform particular actions by virtue of having software firmware hardware or a combination of them installed on the system that in operation causes or cause the system to perform the actions. One or more computer programs can be configured to perform particular actions by virtue of including instructions that when executed by data processing apparatus cause the apparatus to perform the actions.

The foregoing and other embodiments can each optionally include one or more of the following features alone or in combination. Multiple objects representative of instance level security may be associated with the link data structure. Multiple objects representative of instance level security may be associated with the same type of object. The object representative of instance level security may be associated with a name and wherein determining the user is authorized to access at least some of the one or more objects is based at least in part on the name. Securing the object using the object representative of instance level security may not require change to a user interface accessing the business object. The link data structure may be a table in a relational database. The methods may include the actions of storing a key references the first portion of the data in the second portion of the data.

Particular embodiments of the subject matter described in this specification can be implemented so as to realize one or more of the following advantages. Objects can be secured at the instance level. Row level security can be implemented at the data and object level without requiring adjustment to the presentation tier.

The details of one or more embodiments of the subject matter described in this specification are set forth in the accompanying drawings and the description below. Other features aspects and advantages of the subject matter will become apparent from the description the drawings and the claims.

User interfaces can be implemented using data from multiple data sources. Organizations tend to store information in many disparate data sources. These data sources can include relational databases enterprise products data warehouses and cloud based data systems. This use of disparate data sources can arise for many reasons including the continued use of older systems the selection of disparate best in class systems for different functionality newer systems potentially being built that use newer technology while older systems remain third party products being potentially purchased but perhaps not offering the complete suite of functionality desired by an organization etc.

Complexity is introduced when the data used to generate the list in the first panel is stored at least in part in a data store that is separate from the data store that contains the information presented in the second panel .

In some arrangements the presentation tier can be the top level of an application. The main function of the presentation tier can be to translate business processes into a form the user can understand. The functional logic tier can coordinate the application process commands perform calculations etc. and make logical decisions evaluations etc. The data tier often coordinates the storage and retrieval of data from one or more data storage systems.

In general each tier of the architecture interacts with one of the other tiers e.g. one adjacent tier . In this example a tier may interaction with the tier that is graphically represented as being directly below it. As such items in a tier can interact with items in the tier directly below. For example the user interface may access the object model . Further the object model can access a function provided by the data storage systems . The user interface however would generally not interact with the data storage systems directly as the data storage systems is not directly below the user interface in this example.

Different types of developers may focus on different tiers. For example GUI designers and web developers may focus on the presentation tier . Application developers and business architects may focus on the functional logic tier . Database administrators and database programmers may focus on the data tier . In some scenarios certain types of developers may focus on multiple tiers. For example security can be an enterprise specialty that influences each of the tiers mentioned above.

A customer object and an address object reside in the functional logic tier of the application which is located below the presentation tier as graphically represented by an arrow . Links can form among objects that reside in these tiers such as the customer object and the address object . For example a relationship exists between the customer object and the address object which can be used to identify the billing address of a particular customer.

One technique used in developing applications in the functional logic tier is object oriented programming. Object oriented programming a class or type of an object represents the object generally herein referred to a class of type . A class of type of the object may be a customer or a product. This is distinguished from an object or instance which references a particular thing. An instance may represent the customer John Smith or the product Pet Rock. herein referred to as an object or instance .

Based upon the presentation tier being position above the functional logic tier in this example the user interface can access the objects . To access the objects one or more techniques may be employed for example the first panel of the user interface which may be user interface of may include pseudo code sufficient to generate a list of customers for example the list of customers in the first panel of . In order to populate the first panel of the user interface the user interface may access the customer object . In this example a GetAllCustomers method on the customer object can be used to obtain a list of all customers. The application iterates over the list of returned customers and adds the name of each customer to the list presented in the first panel . The pseudo code also allows for a customer to be selected from the list of customers.

The second panel includes pseudo code sufficient to populate the second panel with information about the customer object . In this example the second panel is populated with the name of the customer selected from the customer list in panel . The pseudo code includes instructions that use the relationship to navigate from the object of the selected customer to identify a billing address provided by the address object shows the navigation of the billing address relationship in order to identify the billing address for the selected customer. The second panel is populated with the street city state and zip code of the billing address. The second panel is also populated with the selected customer s phone number and annual revenue.

Developing a user interface by using these objects allows a developer to produce a user interface without regard for where the underlying data is stored. Instead coordinating between the objects and the persistent data is relegated to the functional object and data tiers.

The functional logic tier can provide a mapping that allows the system to convert vendor specific data types to vendor neutral data types. The functional logic tier also allows for conversions between some logical datatypes. For example mapping between a relatively small finite set of vendor neutral datatypes is more efficient and requires less programming effort that mapping between a relatively large unbound set of vendor specific data types.

While the following example refers to a relational database and a cloud data system other data storage systems can be used. For example one or more key based storage systems may be employed to provide a data storage system. Data storage systems can include but are not limited to indexed flat files relational databases and NoSQL databases including but not limited to column data stores such as HBASE document databases such as APACHE COUCHDB key value databases such as ORACLE NOSQL DATABASE graph databases such as ALLEGRO and or a multi model data stores such as FOUNDATION DB . The data storage systems may be for example located within an organization or may be provided as a cloud based service.

In this example the database includes a table definition of a customer table . The table definition customer table includes a table definition that provides the name of two columns in the customer table a name column and a customer ID column .

In this example the cloud data system includes an account object . The inner workings of the cloud data system may be unknown or hidden. Instead the cloud data system may be accessed using an application programming interface API . In this example the account object includes account number annual revenue billing city billing state billing street billing country name and phone fields.

In general objects in the cloud data system may not use the same identification fields sometimes referred to as primary keys as the database . Generally there may be no mapping between the cloud data system and the database .

Furthermore as many data storage systems do not support the SQL query language federated query systems may be unable to join data across the database. For example SALESFORCE uses the account object to represent customers. The internal account id which identifies an account is not generally coordinated with the customer ID column .

One way to associate data records across disparate systems is to store an identifier in one system that references the corresponding record in the other system. For example values from the customer ID column can be copied as shown by the customer field and stored in the account object thereby enabling a system to navigate between the account object and the customer table .

The user interface as describe above with respect to includes the first panel and the second panel . Data for the first panel may be provided from the database from . Data for the second panel may be provided by the cloud data system from based on information provided by a user interaction with the first panel . For example a user may select an item in the first panel here the Dragon Toys item and the second panel is then populated with information about Dragon Toys. 

As described above the user interface interacts with functional logic tier the details of which are omitted here for clarity . The functional logic tier simplifies the light integration of data sources. Light integration can include joining data from two different systems based on one or more common values. The common values can be and usually are stored in different vendor specific data types. The system is able to map those to vendor neutral data types and convert the values where necessary.

The functional logic tier in turn causes commands to be executed against the data sources. For example to provide the data that the user interface uses to populate the first panel the functional logic tier can cause a SQL command e.g. SELECT NAME CUSTOMER ID FROM CUSTOMER to be sent to the database . The database can process the query provided by the command and return a list of records as results. The functional logic tier can provide the details of the results as objects to the user interface which then can use those details to populate the first panel .

When the user selects an item in the first panel in this example the Dragon Toys item the user interface interacts with the functional logic tier to obtain more information about the selected item. For example the user interface may execute a method on a customer object that causes the customer object to obtain more detail from the data sources. In response the functional logic tier can cause a query to be executed against the cloud data system . In this example a query is executed using a SALESFORCE API 

Other types of systems that can be used to connect to cloud data systems include for example SOAP calls remote procedure calls streaming OData REST web services etc.

For example the second panel includes an editable box where the user can update the street address. The user interface also includes a drop down box where the user may select a state from a list of states. The second panel also includes another dropdown box where the user can select a type of customer from a list of customer types.

As described above the developer of the user interface interacts with objects or data in the functional logic tier . The functional logic tier interacts with the data tier in order to obtain and store the data.

The selectable items in the second panel may be populated using data from different data sources. For example the drop down box may be populated with a list of states from a state data source . The state data source may be a look up table in a relational data base or may be obtained from a third party service for example a web service. Similarly the customer type drop down may be populated with data from a customer type data source . The customer type data source may be for example a table in a relational database.

Data values selected from a drop down list can be populated using keys and values. For example the customer type data source may store a unique key for each type of customer. As represented by the table the number could represent the small customer type. The number could represent the retail customer type. The number could represent the wholesale customer type.

The items in the first panel may be provided from a customer data source and the information about the selected item e.g. Dragon Toys . For example the customer data source may store that Dragon Toys Billing Address is 29 Summer Way in Somewhere N.H. The customer data source may also store the phone number annual revenue and customer type for Dragon Toys. In this example the data from the drop down list boxes or any other key value selection control may be stored as a key. For example the Dragon Toys customer is associated with the small customer type which as described above is represented by the number in the customer type data source . When the Dragon Toys information is stored in the customer data source the number may be stored instead of the term Small as represented by the data value . In this manner keys originating from the customer type data source may be stored in the customer data source . Similarly when displaying the customer information information from the customer data source may require cross reference with another data source for example the state data source or the customer type data source .

The process can receive a plurality of objects from a functional logic tier of an application each object representative of data stored in a data tier of the application. A first portion of the stored data may be stored in a first persistent data store for example a SQL database and a second portion of the stored data being stored in a second persistent data store for example a NoSQL database different from the first persistent data store.

The process can present in a first area of the user interface information from the plurality of objects the information selected from the first portion of the data.

The process can receive an indication of an object being selected from the plurality of objects. For example a user of the user interface may click touch or otherwise select a data on the user interface that corresponds to one of the objects in the functional logic tier.

The process can present in a second area of the user interface information from the second part of data corresponding to the selected business object.

Embodiments of the subject matter and the operations described in this specification can be implemented in digital electronic circuitry or in computer software firmware or hardware including the structures disclosed in this specification and their structural equivalents or in combinations of one or more of them. Embodiments of the subject matter described in this specification can be implemented as one or more computer programs i.e. one or more modules of computer program instructions encoded on computer storage medium for execution by or to control the operation of data processing apparatus.

The operations described in this specification can be implemented as operations performed by a data processing apparatus on data stored on one or more computer readable storage devices or received from other sources.

The term data processing apparatus encompasses all kinds of apparatus devices and machines for processing data including by way of example a programmable processor a computer a system on a chip or multiple ones or combinations of the foregoing. The apparatus can include special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit . The apparatus can also include in addition to hardware code that creates an execution environment for the computer program in question e.g. code that constitutes processor firmware a protocol stack a database management system an operating system a cross platform runtime environment a virtual machine or a combination of one or more of them . The apparatus and execution environment can realize various different computing model infrastructures such as web services distributed computing and grid computing infrastructures.

A computer program also known as a program software software application script or code can be written in any form of programming language including compiled or interpreted languages or declarative or procedural languages and it can be deployed in any form including as a stand alone program or as a module component subroutine object or other unit suitable for use in a computing environment . A computer program may but need not correspond to a file in a file system. A program can be stored in a portion of a file that holds other programs or data e.g. one or more scripts stored in a markup language document in a single file dedicated to the program in question or in multiple coordinated files e.g. files that store one or more modules sub programs or portions of code . A computer program can be deployed to be executed on one computer or on multiple computers that are located at one site or distributed across multiple sites and interconnected by a communication network.

The processes and logic flows described in this specification can be performed by one or more programmable processors executing one or more computer programs to perform actions by operating on input data and generating output. The processes and logic flows can also be performed by and apparatus can also be implemented as special purpose logic circuitry e.g. an FPGA field programmable gate array or an ASIC application specific integrated circuit .

Processors suitable for the execution of a computer program include by way of example both general and special purpose microprocessors and any one or more processors of any kind of digital computer. Generally a processor will receive instructions and data from a read only memory or a random access memory or both. The essential elements of a computer are a processor for performing actions in accordance with instructions and one or more memory devices for storing instructions and data. Generally a computer will also include or be operatively coupled to receive data from or transfer data to or both one or more mass storage devices for storing data e.g. magnetic magneto optical disks or optical disks however a computer need not have such devices. Moreover a computer can be embedded in another device e.g. a mobile telephone a personal digital assistant PDA a mobile audio or video player a game console a Global Positioning System GPS receiver or a portable storage device e.g. a universal serial bus USB flash drive to name just a few . Devices suitable for storing computer program instructions and data include all forms of non transitory computer readable media and memory devices including by way of example semiconductor memory devices e.g. EPROM EEPROM and flash memory devices magnetic disks e.g. internal hard disks or removable disks magneto optical disks and CD ROM and DVD ROM disks. The processor and the memory can be supplemented by or incorporated in special purpose logic circuitry.

To provide for interaction with a user embodiments of the subject matter described in this specification can be implemented on a computer that has a display device e.g. a CRT cathode ray tube or LCD liquid crystal display monitor for displaying information to the user and a keyboard and a pointing device e.g. a mouse or a trackball by which the user can provide input to the computer. Other kinds of devices can be used to provide for interaction with a user as well for example feedback provided to the user can be any form of sensory feedback e.g. visual auditory or tactile feedback and input from the user can be received in any form including acoustic speech or tactile input. In addition a computer can interact with a user by sending documents to and receiving documents from a device that is used by the user for example by sending web pages to a web browser on a user s user device in response to requests received from the web browser .

Embodiments of the subject matter described in this specification can be implemented in a computing system that includes a back end component e.g. as a data server a middleware component e.g. an application server or a front end component e.g. a client computer having a graphical user interface or a Web browser through which a user can interact with an implementation of the subject matter described in this specification or any combination of one or more such back end middleware or front end components. The components of the system can be interconnected by any form or medium of digital data communication e.g. a communication network . Examples of communication networks include a local area network LAN and a wide area network WAN an inter network e.g. the Internet and peer to peer networks e.g. ad hoc peer to peer networks .

The computing system can include clients and servers. A client and server are generally remote from each other and typically interact through a communication network. The relationship of client and server arises by virtue of computer programs running on the respective computers and having a client server relationship to each other. In some embodiments a server transmits data e.g. an HTML page to a user device e.g. for purposes of displaying data to and receiving user input from a user interacting with the user device . Data generated at the user device e.g. a result of the user interaction can be received from the user device at the server.

While this specification contains many specific implementation details these should not be construed as limitations on the scope of any inventions or of what may be claimed but rather as descriptions of features specific to particular embodiments of particular inventions. Certain features that are described in this specification in the context of separate embodiments can also be implemented in combination in a single embodiment. Conversely various features that are described in the context of a single embodiment can also be implemented in multiple embodiments separately or in any suitable subcombination. Moreover although features may be described above as acting in certain combinations and even initially claimed as such one or more features from a claimed combination can in some cases be excised from the combination and the claimed combination may be directed to a subcombination or variation of a subcombination.

Similarly while operations are depicted in the drawings in a particular order this should not be understood as requiring that such operations be performed in the particular order shown or in sequential order or that all illustrated operations be performed to achieve desirable results. In certain circumstances multitasking and parallel processing may be advantageous. Moreover the separation of various system components in the embodiments described above should not be understood as requiring such separation in all embodiments and it should be understood that the described program components and systems can generally be integrated together in a single software product or packaged into multiple software products.

Thus particular embodiments of the subject matter have been described. Other embodiments are within the scope of the following claims. In some cases the actions recited in the claims can be performed in a different order and still achieve desirable results. In addition the processes depicted in the accompanying figures do not necessarily require the particular order shown or sequential order to achieve desirable results. In certain implementations multitasking and parallel processing may be advantageous.

