---

title: Cloud computing system and method
abstract: A system and method deploying cloud computing software applications and resources to mobile devices is disclosed. The system/method virtualizes the graphical user experience (GEX) and user input experience (UEX) that comprise the graphical user interface (GUI) for host application software (HAS) running on a host computer system (HCS). The virtualized GUI (VUI) GEX component is converted to a remote video stream (RVS) and communicated to a remote mobile computing device (MCD) over a computer communication network (CCN). A MCD thin client application (TCA) receives the RVS and presents this GEX content on the MCD display using a graphics experience mapper (GEM). A TCA user experience mapper (UEM) translates MCD user inputs to a form suitable for UEX protocols and communicates this user input over the CCN to the HCS for translation by the UEX into HCS operating system protocols compatible with the HAS.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09197697&OS=09197697&RS=09197697
owner: 
number: 09197697
owner_city: 
owner_country: 
publication_date: 20150309
---
This application claims benefit under 35 U.S.C. 119 and incorporates by reference U.S. Provisional patent application for CLOUD COMPUTING SYSTEM AND METHOD by inventors Joseph Scott Morton Christopher Michael McDonald and Glenn Donald Knepp filed electronically with the USPTO on Mar. 10 2014 with Ser. No. 61 950 289 EFS ID 18414620 confirmation number 2283.

All of the material in this patent application is subject to copyright protection under the copyright laws of the United States and of other countries. As of the first effective filing date of the present application this material is protected as unpublished material.

However permission to copy this material is hereby granted to the extent that the copyright owner has no objection to the facsimile reproduction by anyone of the patent documentation or patent disclosure as it appears in the United States Patent and Trademark Office patent file or records but otherwise reserves all copyright rights whatsoever.

The present invention generally relates to cloud computing systems and methods for deploying host computer system HCS software applications to a mobile computing device MCD . More specifically and without limitation the present invention permits virtualizing enterprise class software applications to MCD environments via the use of a thin client MCD software application in contexts where the computer communication network CCN linking the HCS and MCD is of low bandwidth and or the MCD is of limited processing power.

The deployment of cloud computing services typically involves the presentation of host application software HAS by a host computer system HCS to a remote computing device RCD which may be in some circumstances a mobile computing device MCD such as a computer tablet or smartphone. The deployment of software applications to the RCD MCD platform can be problematic for several reasons including 

All of these issues may result in a poor user experience with the HCS HAS combination and in many circumstances prevent the HAS from being capable of deployment in a MCD environment.

The typical approaches to HAS deployment to remote computing devices includes the use of a web browser interface on the HCS as an access portal to the HAS or the use of a virtual private network VPN that links the MCD to the HCS over a secure network interface. Both of these approaches suffer from significant performance limitations in that they require a large communication overhead between the HCS and MCD to maintain a real time view of the display screen that is simulated by the HCS for the purposes of providing a virtualized display for the HAS. MCDs having limited processing power or limited communication bandwidth to the HCS suffer in these circumstances because these limitations result in poor application responsiveness and a resulting poor user experience.

Additionally the large communication overhead associated with VPN methodologies especially in situations where the video display experiences a high rate of change or where user input such as keyboard or mouse input is common results in higher communication costs for MCDs using this form of interface. High frame rate updates by a typical VPN remote console simulator often result in very high communication link bandwidth utilization between the HCS and MCD and cannot be supported in situations where the communication link bandwidth is limited. All of these drawbacks may be cost performance prohibitive in situations where the end user has limited financial and hardware means.

While some of the prior art may teach some solutions to several of these problems the core deficiencies in the prior art systems have not been addressed.

Accordingly the objectives of the present invention are among others to circumvent the deficiencies in the prior art and affect the following objectives 

While these objectives should not be understood to limit the teachings of the present invention in general these objectives are achieved in part or in whole by the disclosed invention that is discussed in the following sections. One skilled in the art will no doubt be able to select aspects of the present invention as disclosed to affect any combination of the objectives described above.

The present invention supports the deployment of cloud computing host software applications HAS and content to a mobile computing device MCD from a host computer system HCS over a computer communication network CCN . In an exemplary invention system embodiment the HCS is configured with conventional host operating system software HOS that supports execution of the HAS. This HOS is equipped with a virtualized graphical user interface VUI device driver that is configured to virtualize the graphical user experience GEX and user input experience UEX associated with the HAS as it is executed on the HCS. The VUI permits the HAS to operate transparently on the HCS and appear as if it is operating in a standalone computer environment.

The VUI is configured to translate the GEX into a remote video stream RVS . This RVS may be contained in one or more compressed video formats to minimize the effective bandwidth of transmitting this application display image. The HCS is configured to transmit the RVS to the MCD over the CCN. The MCD further comprises a thin client application TCA that implements a graphics experience mapper GEM and user experience mapper UEM . The GEM is configured to receive the RVS and present the RVS to a display on the MCD. Simultaneously the UEM is configured to accept user input data UID entered on the MCD and translate the UID to an equivalent UEX protocol. This equivalent UEX protocol is then transmitted by the TCA to the VUI for presentation to the HAS through the HCS. In this manner the user input capabilities of the MCD are mapped to equivalent UEX protocols that are understood by the HAS.

By utilizing streamed video rather than transmitting display images frame by frame from the HCS to the MCD the bandwidth requirements for hosting the HAS on the MCD are drastically reduced as the HCS can implement the HAS locally and merely provide a thin client audio video keyboard mouse interface to the MCD via translation services performed by the VUI GEX UEX and TCA GEM UEM .

While this invention is susceptible of embodiment in many different forms there is shown in the drawings and will herein be described in detailed preferred embodiments of the invention with the understanding that the present disclosure is to be considered as an exemplification of the principles of the invention and is not intended to limit the broad aspect of the invention to the embodiment illustrated.

The numerous innovative teachings of the present application will be described with particular reference to the presently preferred embodiment wherein these innovative teachings are advantageously applied to the particular problems of a CLOUD COMPUTING SYSTEM AND METHOD. However it should be understood that this embodiment is only one example of the many advantageous uses of the innovative teachings herein. In general statements made in the specification of the present application do not necessarily limit any of the various claimed inventions. Moreover some statements may apply to some inventive features but not to others.

The present invention anticipates that a wide variety of remote video streaming formats may be used to implement the video streaming component of the present invention. Without limitation the RVS may include audio and or video formats including but not limited to MPEG MPEG 2 MPEG 4 H.264 THEORA WEBM DIRAC REALVIDEO VP8 and HEVC.

The present invention anticipates that a wide variety of host computer system and host operating system software HOS may be used to implement the present invention. Without limitation the HOS may include MICROSOFT WINDOWS MAC and LINUX operating system products.

The present invention has as a general objective to use cloud technologies to deliver the latest software solutions to any Internet enabled devices. The disclosed invention provides a complete desktop experience to mobile computing devices MCDs such as inexpensive pen and touch devices. Various invention embodiments for example would permit any WINDOWS MAC or LINUX software application running on a host computer to effectively operate on a 50 ANDROID tablet.

The present invention operates to lower the effective cost of deploying cloud computing solutions. The present invention leverages cloud computing to put the power of an expensive laptop into the hands of individuals unable to afford the tools necessary to support traditional cloud computing resources. The present invention allows for an individual in any underdeveloped nation with a cellphone Internet connection and inexpensive tablet computer to have the same software tools available to any person in a developed nation.

This objective is achieved by changing the way in which software is deployed to mobile devices. Rather than executing host software applications HASs on the mobile computing device MCD these applications are executed on cloud host computer systems HCSs . The presentation displays for these HASs operating on the HCSs are then streamed as video to the MCD. This allows the HSC to perform the heavy processing associated with the HAS and simultaneously minimize the communication bandwidth necessary to support a virtualized display to the MCD. User input from the MCD is translated into native HCS user input protocols and transparently entered into the HAS.

The general invention concept may be better understood by inspecting the system overview block diagram depicted in . In this exemplary system embodiment a host computing context is connected with a mobile computing context via the use of a computer communication network CCN . In each context there are corresponding computing devices such as a host computer system and mobile computing device each executing machine instructions read from computer readable media .

Within the host computer context host application software is retrieved from a software database SDB and typically run under control of a host operating system HOS executed within the context of the host computer system HCS . This HAS has both display and user input interfaces to the HOS .

The present invention translates the display data component of the HAS output to a video stream that is communicated over the CCN to the MCD display under control of a thin client application running on the MCD . The advantage of this approach to cloud computing application deployment is the ability to minimize the hardware needed on the MCD to run a software application and also minimize the CCN network bandwidth necessary to support the application remotely. By converting the display data to streaming video the use of advanced video compression technologies can be used to reduce the necessary bandwidth to support the MCD video display of the HAS display content .

The HAS user input is handled by the MCD via the use of user inputs received on the MCD and relayed via the CCN to the user input portion of the HOS running on the HCS . The MCD user input is then passed through an emulator to convert MCD user input into user input information compatible with both the HOS and the HAS .

Note that this approach to application deployment is also efficient with respect to software installation and maintenance in that the SDB may serve as a central repository for all software to be deployed to a plethora of remotely connected MCD systems. Additionally licensing for the software contained in the SDB may be purchased base on simultaneous use rather than on a per MCD installation basis thus reducing the overall cost of deploying software to MCDs that may not necessarily make simultaneous use of the software.

An exemplary present invention method can be generally described in the flowchart of as incorporating the following steps 

This general method may be modified heavily depending on a number of factors with rearrangement and or addition deletion of steps anticipated by the scope of the present invention. Integration of this and other preferred exemplary embodiment methods in conjunction with a variety of preferred exemplary embodiment systems described herein is anticipated by the overall scope of the present invention.

Additional detail regarding operation of a preferred invention embodiment may be found by inspecting the block diagram depicted in . In this exemplary system embodiment the host computer system HCS executing software read from a computer readable medium operates under control of a host operating system HOS to retrieve and execute application software from a software database . This application software as it operates under control of the HOS interacts with a virtualized software application I O interface that mimics the hardware interfaces associated with a normal display monitor and keyboard mouse input via the use of virtualized user display VUD and virtualized user input VUI device driver modules.

The VUI device driver is responsible for converting standard GUI display commands such as window displays character output graphic output and the liked into a compressed video communication CVC video stream that is transmitted over a communication network to mobile user device MCD executing software read from a computer readable medium and implementing a thin client application TCA responsible for mimicking a HCS user experience within the context of the MCD . The TCA comprises a CVC display component responsible for converting the VUD output to the display of the MCD . The use of CVC communication between the HCS and MCD may in some embodiments permit standard MPEG or other video decoders to be used in this display capacity.

Integration of user input to the HAS is accomplished by use of a user input module component that operates with the TCA to collect a variety of user input e.g. keypad entries hand gestures simulated mouse gestures etc. from the MCD and translate these to compatible user inputs for the VUI that are then translated to appropriate HOS inputs and passed to the HAS for processing by the application software.

An exemplary present invention detailed method can be generally described in the flowchart of as incorporating the following steps 

This general method may be modified heavily depending on a number of factors with rearrangement and or addition deletion of steps anticipated by the scope of the present invention. Integration of this and other preferred exemplary embodiment methods in conjunction with a variety of preferred exemplary embodiment systems described herein is anticipated by the overall scope of the present invention.

The MCD TCA may incorporate a number of subfunction modules as depicted generally in . These modules may include but are not limited to any of the following 

One skilled in the art will recognize that this list of TCA features is illustrative and not limitive of the present invention.

As depicted in the present invention anticipates that some preferred embodiments may incorporate steganographic encryption within the video stream transmitted between the HCS and MCD. This use of steganographic encryption may form the basis for a secure web browser interface that provides an added layer of security on top of that provided by conventional web browser services.

Steganography is the art or practice of concealing a message image or file within another message image or file. The advantage of steganography over cryptography alone is that the intended secret message does not attract attention to itself as an object of scrutiny. Plainly visible encrypted messages no matter how unbreakable will arouse interest and may in themselves be incriminating in countries where encryption is illegal. Thus whereas cryptography is the practice of protecting the contents of a message alone steganography is concerned with concealing the fact that a secret message is being sent as well as concealing the contents of the message.

Steganography includes the concealment of information within computer files. In digital steganography electronic communications may include steganographic coding inside of a transport layer such as a document file image file program or protocol. Media files are ideal for steganographic transmission because of their large size. For example a sender might start with an innocuous image file and adjust the color of every 100th pixel to correspond to a letter in the alphabet a change so subtle that someone not specifically looking for it is unlikely to notice it.

The present invention anticipates the use of steganography in conjunction with encryption to permit the merging of both GEX display data and source data files within an encryption process operating in the HCS context to form a merged video data stream comprising both an encrypted video stream as well as an optional embedded key. This merged video information is then input to a video encoder e.g. MPEG encoder and transmitted via the CCN to a video decoder operating in the MCD context . The video decoder regenerates the video stream and this video stream is then run through a steganographic decryption process that extracts the GEM display data and optional target data . The fact that the video encoder and video decoder may implement lossy compression decompression may be used in this process to hide the encryption keys associated with the data transfer and make the decryption of the combined source data and GEX display even more difficult for attacks that rely on tapping the CCN communication link.

Within this context a key generator may be populated by MCD user inputs from the UEM or GEM modules and be used to populate a key sequencer that is the basis of the original encryption process . It is significant to note that this process is capable of supporting a number of secure data subchannels within the video stream and thus simultaneously support a number of GEX GEM displays and or source target databases .

The present invention anticipates that there may be a physical disconnect between the hardware provided by the MCD and that associated with the host application software HAS . For example the HAS may be configured to run in a personal computer PC environment and expect the availability of a conventional QWERTY keyboard and mouse trackball touchpad as standard user input devices whereas the MCD may not support a keyboard or mouse but only a touchscreen display. The present invention permits the MCD to provide input to the HAS by means of a combination of a user experience mapper UEM and user input experience translator UEX .

An example of this situation is depicted in wherein the HCS context and MCD operational context are linked via a computer communication network CCN . Within this context the MCD display is linked to the HCS operational context via a thin client application TCA that controls both a graphics experience manager responsible for presentation of information on the MCD display and a user experience mapper responsible for gathering user inputs to the MCD and presenting them properly to the HCS context .

The MCD operational context and specifically the MCD display are scanned for a variety of user input function types such as hand gestures simulated keyboard screen inputs screen touches corresponding to mapped regions of video a simulated mouse input and or movement including mouse clicks and button activations and cursor trajectory information. This information is packetized by the user experience mapper UEM in a standardized application agnostic format and sent as a UEM command by the TCA via the CCN to the HCS . The HCS relays the UEM command to the UEX translator that translates the generic UEM command into an operating system specific emulated API message that is then relayed via internal operating system message queues to the host application software HAS 0714 .

While a wide variety of UEM functions are anticipated as within the scope of the present invention several are preferred and listed below 

The present invention may also be applied in the context of AMAZON Web Services AWS infrastructure. AMAZON AppStream s STX Protocol manages streaming a computer application from AMAZON Web Services AWS to local client devices. It monitors network conditions and automatically adapts the video stream to provide a low latency and high resolution experience to users. It minimizes latency while synchronizing audio and video as well as interactively capturing input from users to be sent back to the application running in AWS.

AMAZON AppStream deploys streaming enabled applications on an AMAZON EC2 instance. A streaming application can be added through the AWS Management Console where the service creates an AMAZON Machine Image AMI required to host the application and makes the application available to devices running streaming clients. The service scales the application as needed within the capacity limits that have been set to meet demand.

The AMAZON team developed an AppStream software development kit SDK for integrating streaming applications into AMAZON s Web Services. AMAZON s AppStream SDK simplifies the development of interactive streaming applications and client applications. The SDK provides Application Programming Interfaces APIs that connect devices directly to an application. It captures and encodes audio and video streams content across the Internet in near real time decodes content on client devices and returns user input to the application.

AMAZON has built their AppStream SDK in a native C programming language. It provides C header files and libraries that provide the functionality needed to stream an application from AMAZON AppStream as well as receive the streamed content from the server application in a client application.

The AppStream SDK currently limits software developers to using the C language for new development or forces design challenges when utilizing other programming languages such as Microsoft C .NET or VB.NET. When designing applications that have a graphically intensive user interface like games it is often necessary to use a low level programming language to better manage device resources and increase performance. The SDK provides methods for creating server applications and lightweight client applications that work in conjunction with one another. For an application to function properly it is necessary to have a server application and a client application communicating where the client application interacts with the video and audio stream that is being streamed from a server application.

The AWS AppStream application provisioning methods are extremely laborious and time intensive. It requires an in depth knowledge of cloud computing and specific knowledge of AMAZON s AWS platform to provision an account for streaming applications from AWS. The learning curve is very large for an average developer when committing to streaming their application using AMAZON s AppStream. A heavy burden lies with either IT personnel or software developers to get applications streaming on AWS utilizing a non intuitive web interface.

One major obstacle that currently exists with the AMAZON s AppStream concept is the fact that there is no built in automation for provisioning a single or multiple applications to the AWS cloud. A second major obstacle with AMAZON AppStream is that there are no Integrated Development Environment templates or plug ins to assist a developer with rapid application development. A third major obstacle revolves around the requirement for the use of Java wrappers within the SDK when connecting to an entitlement service. A template for other programming languages currently does not exist within the AMAZON AppStream SDK that provides connectivity the REST API of the AMAZON AppStream service.

To bridge the gap between AMAZON s AppStream native C API s and the .NET Framework for application development the present invention in some preferred embodiments as depicted in builds a wrapper that provides interface access to AppStream API resources from within another programming language such as C or VB. The wrapper includes interfaces from the native C environment to a Microsoft .NET managed environment using a C CLI wrapping technique creating a managed dynamically linked library that may be used as a reference from within a C application. In addition to the C CLI library a visual studio plug in is designed and developed to provide .NET desktop application developers a set of tools templates and a framework to automate the building of a streaming application using the Microsoft .NET Framework. This will increase productivity and reduce the amount of time in a development lifecycle.

To bridge the gap between AppStream application development and provisioning an AppStream application in the AWS cloud automation is implemented in this invention embodiment. Automation is implemented using web service connections to the AMAZON Web Services platform from within a control application that shares information within an integrated development environment.

AMAZON s AppStream application provisioning currently requires that an application use a single executable .exe file that does not require user interaction that is installed on an AMAZON EC2 instance in silent or unattended mode. Part of the automation may occur within the setup routines that allow information to be shared with the auto provisioning application that will allow a developer to design a streaming application create an appropriate installer and build the provisioning connections.

AMAZON AppStream application provisioning currently requires a software developer to build an entitlement service for authentication. An entitlement service authenticates and authorizes users between a light weight client and an AppStream server application ensuring that only those clients entitled to access the application do so. The entitlement service can authenticate users in a variety of ways 

To bridge the gap between the AppStream application and authentication an entitlement service is automated within an Integrated Development Environment such that it will expose a template that can be utilized with an AppStream application. The entitlement service sends HTTP requests directly to the AMAZON AppStream REST API using a .NET Framework programming language.

An exemplary N multicore CPU embodiment of the present invention is depicted in and will now be discussed in more detail.

The present invention anticipates a wide variety of server CPU cores and Data Plane cores may be used in this disclosed embodiment including 86 Intel and ARM.

The present invention anticipates a wide variety of multicore accelerator cores including compute intensive GPU Graphics Processing Unit neural network packet processing and other types may be used in this disclosed embodiment. Examples of manufacturers of these cores include Intel Texas Instruments Nvidia Freescale ARM and others.

This present invention embodiment combines customized hardware in the form of suitable low SWaP multicore accelerator expansion cards that are configured into customized compute servers including 

Definitions relating to this exemplary embodiment that will be understood by those skilled in the art include 

The present invention exemplary embodiment has an approach to HPC and supercomputing in cloud computing and data centers that provides several advantages including 

Additional detail regarding operation of a preferred invention embodiment may be found by considering a video stream data flow in . In this exemplary system embodiment a custom computing server enhanced for HPC and Supercomputing applications hosts a plurality of VMs each running independent user applications with dedicated user display buffers i.e. one display per user . The HPC server enhanced with a plurality of multicore accelerators and performing Background Acceleration as described herein captures each VM display buffer video output encodes and compresses the display video content for efficient network transmission and streams the compressed output to remote devices allowing each VM user to view control and otherwise run their applications remotely. From a server efficiency perspective the ability to host multiple users concurrently demonstrates the performance benefit of this invention embodiment.

In another preferred invention embodiment additional detail may be found by considering a modification of the video stream data flow in . In this case video input streams are received from a plurality of remote devices and processed by one or more VMs executing image analytics and image processing algorithm programs which are accelerated on the multicore accelerator . Results such as face recognition or location recognition are then streamed back to remote device users. This invention embodiment demonstrates a great benefit to users of mobile devices which lack sufficient computational resources and power sources to perform complex algorithms and processing required by artificial intelligence applications of image analytics.

The general invention concept may be better understood by inspecting the system overview block diagram depicted in . In this exemplary system embodiment a custom host server CHS contains a plurality of virtual machines VMs a host Linux machine a plurality of data plane cores a KVM Kernel based Virtual Machine hypervisor and a VM host shared file system .

The host machines depicted in are described in further detail in and contain a plurality of multicore CPU accelerators connected via gigabit Ethernet and PCIE bus a DIRECTCORE driver DIRECTCORE API library and a control plane process .

The virtual machines as depicted in are further detailed in and contain one or more applications such as the image analytics example shown in and a DIRECTCORE driver and DIRECTCORE API library .

The present invention allows numerous performance benefits to Virtual Machines VMs stemming from hardware enhancement of the custom server hardware using multicore accelerators . The present invention provides two 2 types of acceleration for the VMs i automated VM Background Acceleration for example capture and streaming of VM screen display video output to remote devices and ii VM Foreground Acceleration by offloading specific program sections expressed at the source code level such as and containing compute intensive functions thru to the multicore accelerator .

VM Foreground Acceleration occurs when a VM runs a program that has been annotated by the programmer to target certain sections of the program for acceleration and is accomplished by the following sequence ref VM Foreground Acceleration flowchart 

For both Background Acceleration and Foreground Acceleration the Control Plane process continuously monitors and gathers statistics about multicore accelerator core usage network I O usage and memory usage in order to efficiently determine VM to core mapping cores on the multicore accelerator optimize performance and prevent overbooking situations when multiple VMs are accelerated.

In a nominal off the shelf commodity server with size of 1 U about 1.8 inches height 19 inch width and 30 inch depth up to eight 8 64 core multicore accelerators can be installed which would provide 512 compute intensive cores. This is in addition to a number of native cores allocated to the custom server host machine and virtual machines . This configuration contrasts to a typical off the shelf server might contain from eight 8 to thirty two 32 native cores all of the same type such as Intel 86 cores or ARM cores in which an additional 512 compute intensive cores represents a substantial increase in cores. For off the shelf servers with sizes of 2 U 3 U 5 U etc. even more multicore accelerators may be added resulting in servers with more thousands of cores.

Multicore accelerators in the form of PCIe expansion cards may be configured to drop in to the PCIe expansion slots available in properly configured server backplanes. Various such cards may be configured using this design approach containing compute intensive and other types of cores made by semiconductor manufacturers such as Intel Nvidia Texas Instruments Octasic Freescale and others. It is desirable for the multicore accelerator to be of single slot thickness to economize on space usage and operate without excessive power consumption in order to avoid generating excessive heat which may affect the server manufacturer s warranty and mean time between failure specifications.

Note that this approach to application virtualization in deployment is also efficient with respect to software installation and maintenance in that the HPC server acts as a central repository for all software to be deployed and run by remote mobile device users. Additionally licensing cost or usage fees for the software contained in the HPC server may be calculated based on number of simultaneous users rather than on a per server basis.

The present invention system anticipates a wide variety of variations in the basic theme of construction but can be generalized as a cloud computing system comprising 

This general system summary may be augmented by the various elements described herein to produce a wide variety of invention embodiments consistent with this overall design description.

The present invention method anticipates a wide variety of variations in the basic theme of implementation but can be generalized as a CLOUD COMPUTING method wherein the method is performed on a CLOUD COMPUTING system comprising 

This general method summary may be augmented by the various elements described herein to produce a wide variety of invention embodiments consistent with this overall design description.

The present invention anticipates a wide variety of variations in the basic theme of construction. The examples presented previously do not represent the entire scope of possible usages. They are meant to cite a few of the almost limitless possibilities.

This basic system and method may be augmented with a variety of ancillary embodiments including but not limited to 

One skilled in the art will recognize that other embodiments are possible based on combinations of elements taught within the above invention description.

In various alternate embodiments the present invention may be implemented as a computer program product for use with a computerized computing system. Those skilled in the art will readily appreciate that programs defining the functions defined by the present invention can be written in any appropriate programming language and delivered to a computer in many forms including but not limited to a information permanently stored on non writeable storage media e.g. read only memory devices such as ROMs or CD ROM disks b information alterably stored on writeable storage media e.g. hard disks and USB thumb drives and or c information conveyed to a computer through communication media such as a local area network a telephone network or a public network such as the Internet. When carrying computer readable instructions that implement the present invention methods such computer readable media represent alternate embodiments of the present invention.

As generally illustrated herein the present invention system embodiments can incorporate a variety of computer readable media that comprise computer usable medium having computer readable code means embodied therein. One skilled in the art will recognize that the software associated with the various processes described herein can be embodied in a wide variety of computer accessible media from which the software is loaded and activated. Pursuant to In re Beauregard 35 USPQ2d 1383 U.S. Pat. No. 5 710 578 the present invention anticipates and includes this type of computer readable media within the scope of the invention. Pursuant to In re Nuijten 500 F.3d 1346 Fed. Cir. 2007 U.S. patent application Ser. No. 09 211 928 the present invention scope is limited to computer readable media wherein the media is both tangible and non transitory.

A system and method deploying cloud computing software applications and resources to mobile devices has been disclosed. The system method virtualizes the graphical user experience GEX and user input experience UEX that comprise the graphical user interface GUI for host application software HAS running on a host computer system HCS . The virtualized GUI VUI GEX component is converted to a remote video stream RVS and communicated to a remote mobile computing device MCD over a computer communication network CCN . A MCD thin client application TCA receives the RVS and presents this GEX content on the MCD display using a graphics experience mapper GEM . A TCA user experience mapper UEM translates MCD user inputs to a form suitable for UEX protocols and communicates this user input over the CCN to the HCS for translation by the UEX into HCS operating system protocols compatible with the HAS.

