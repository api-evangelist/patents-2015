---

title: Managing parallel processes for application-level partitions
abstract: Various techniques are described herein for creating data partition process schedules and executing such partition schedules using multiple parallel process instances. Data processing tasks initiated by or for applications may be executed by creating and executing partition schedules, in which a number of different process instances are created and each assigned a subset of data to process. Partition schedules may be used to determine a number of process instances to be created, and each process instance may be assigned a unique set of run-time data values corresponding to a unique set of parameters within the data set to be processed by the application. The process instances may operate independently and in parallel to retrieve and process separate partitions of the data required for the overall data processing task initiated by/for the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09600342&OS=09600342&RS=09600342
owner: ORACLE INTERNATIONAL CORPORATION
number: 09600342
owner_city: Redwood Shores
owner_country: US
publication_date: 20150710
---
The present application is a non provisional of and claims priority to U.S. Provisional Patent Application No. 62 022 953 filed Jul. 10 2014 entitled PARALLEL PROCESSING AND AUTOMATION OF BUSINESS PROCESS EXECUTION IN DISTRIBUTED ENVIRONMENTS the contents of which are incorporated herein by reference for all purposes.

Applications that process large data sets may face technical challenges and difficulties with respect to processing performance application stability and scalability among other potential problems. For example data processing applications may be slow to complete and may encounter additional stability problems when applied to very large data sets. Such large scale data processing applications have become more common as the data volumes collected and analyzed by companies and other organizations has increased. At the same time such organizations may have decreasing time windows to complete these large scale processing tasks.

Despite advances in hardware faster processors virtualization techniques cloud computing and the like organizations still face challenges and difficulties in performing large scale data processing tasks.

Embodiments of the invention provide techniques for creating data partition process schedules and executing such partition schedules using multiple parallel process instances. In some examples one or more applications may be programmed to perform data processing tasks on data records within data stores. Such applications may include for example enterprise applications data mining applications document management applications customer relationship management applications e Commerce applications and various other applications configured to perform data processing tasks involving quantities of data and or data intensive analyses. In various embodiments data processing task s initiated by or for such applications may be executed by creating and executing data partition process schedules or partition schedules in which a number of different process instances are created and each assigned a subset of data to process. In some cases partition schedules may be used to determine a number of process instances to be created as a set of process instances to perform the data processing task s and each process instance may be assigned a unique i.e. unique with respect to the set of process instances set of run time data values corresponding to a unique set of parameters within the data set to be processed by the application. Partition schedules may identify or reference sets of partition parameters and or application classes that may be used to determine a number of different process instances to be created and to assign each process instance a distinct partition of the data set to retrieve and process.

Unique combinations of parameter values may be generated and provided to each new process instance and each process instance may use its unique parameter values to retrieve and process a separate data partition within an application data store. The process instances may operate independently and in parallel to retrieve and process separate portions of the data required for the overall data processing task initiated by for the application. In some cases individual process instances may execute at the application level to perform data processing on target data that is either retrieved from an underlying data store or has been cached at the application layer. The process instances also may be created having a child parent relationship to a partition scheduler used to control and monitor the execution of the process instances. For example the process instances may be configured to transmit data processing status messages to the partition scheduler or other monitoring processes allowing a partition manager to monitor and control execution of the individual process instances and the overall data processing tasks.

In the following description for the purposes of explanation numerous specific details are set forth in order to provide a thorough understanding of various embodiments of the present invention. It will be apparent however to one skilled in the art that embodiments of the present invention may be practiced without some of these specific details. In other instances well known structures and devices are shown in block diagram form.

The ensuing description provides exemplary embodiments only and is not intended to limit the scope applicability or configuration of the disclosure. Rather the ensuing description of the exemplary embodiments will provide those skilled in the art with an enabling description for implementing an exemplary embodiment. It should be understood that various changes may be made in the function and arrangement of elements without departing from the spirit and scope of the invention as set forth in the appended claims.

Specific details are given in the following description and referenced figures to provide a thorough understanding of the embodiments. However it will be understood by one of ordinary skill in the art that the embodiments may be practiced without these specific details. For example certain circuits systems networks processes and other components may be described or shown in block diagram form in order not to obscure the embodiments in unnecessary detail. Additionally certain well known circuits processes algorithms structures and techniques may be excluded and or shown without unnecessary detail in order to avoid obscuring the embodiments.

Also it is noted that individual embodiments may be described as a process which is depicted as a flowchart a flow diagram a data flow diagram a structure diagram or a block diagram. Although a flowchart may describe the operations as a sequential process many of the operations can be performed in parallel or concurrently. In addition the order of the operations may be re arranged. A process is terminated when its operations are completed but could have additional steps not included in a figure. A process may correspond to a method a function a procedure a subroutine a subprogram etc. When a process corresponds to a function its termination can correspond to a return of the function to the calling function or the main function.

The term computer readable medium includes but is not limited to non transitory media such as portable or fixed storage devices optical storage devices and various other media capable of storing containing or carrying instruction s and or data. A code segment or computer executable instructions may represent a procedure a function a subprogram a program a routine a subroutine a module a software package a class or any combination of instructions data structures or program statements. A code segment may be coupled to another code segment or a hardware circuit by passing and or receiving information data arguments parameters or memory contents. Information arguments parameters data etc. may be passed forwarded or transmitted via any suitable means including memory sharing message passing token passing network transmission etc.

Furthermore embodiments may be implemented by hardware software firmware middleware microcode hardware description languages or any combination thereof. When implemented in software firmware middleware or microcode the program code or code segments to perform the necessary tasks may be stored in a machine readable medium. A processor s may perform the necessary tasks.

Various techniques e.g. methods systems non transitory computer readable storage memory storing a plurality of instructions executable by one or more processors etc. are described herein for creating data partition process schedules and executing such partition schedules using multiple parallel process instances. In some examples one or more applications may be programmed to perform data processing tasks on data records within data stores. Such applications may include for example enterprise applications data mining applications document management applications customer relationship management applications e Commerce applications and various other applications configured to perform data processing tasks involving quantities of data and or data intensive analyses. In various embodiments data processing tasks initiated by or for such applications may be executed by creating and executing data partition process schedules or partition schedules in which a number of different process instances are created and each assigned a subset of data to process. In some cases partition schedules may be used to determine a number of process instances to be created and each process instance may be assigned a unique i.e. unique with respect to the set of process instances set of run time data values corresponding to a unique set of parameters within the data set to be processed by the application. Partition schedules may identify or reference sets of partition parameters and or application classes that may be used to determine a number of different process instances to be created and to assign each process instance a distinct partition of the data set to retrieve and process

In some embodiments unique combinations of parameter values may be generated and provided to each new process instance and each process instance may use its unique parameter values to retrieve and process a separate data partition within an application data store. The process instances may operate independently and in parallel to retrieve and process separate portions of the data required for the overall data processing task initiated by for the application. In some cases individual process instances may execute at the application level to perform data processing on target data that is either retrieved from an underlying data store or has been cached at the application layer. The process instances also may be created having a child parent relationship to a partition scheduler used to control and monitor the execution of the process instances. For instance the process instances may be configured to transmit data processing status messages to the partition scheduler or other monitoring processes allowing a partition manager to monitor and control execution of the individual process instances and the overall data processing tasks.

In various embodiments server may be adapted to run one or more services or software applications provided by one or more of the components of the system. In some embodiments these services may be offered as web based or cloud services or under a Software as a Service SaaS model to the users of client computing devices and or . Users operating client computing devices and or may in turn utilize one or more client applications to interact with server to utilize the services provided by these components.

In the configuration depicted in the figure the software components and of system are shown as being implemented on server . In other embodiments one or more of the components of system and or the services provided by these components may also be implemented by one or more of the client computing devices and or . Users operating the client computing devices may then utilize one or more client applications to use the services provided by these components. These components may be implemented in hardware firmware software or combinations thereof. It should be appreciated that various different system configurations are possible which may be different from distributed system . The embodiment shown in the figure is thus one example of a distributed system for implementing an embodiment system and is not intended to be limiting.

Client computing devices and or may be portable handheld devices e.g. an iPhone cellular telephone an iPad computing tablet a personal digital assistant PDA or wearable devices e.g. a Google Glass head mounted display running software such as Microsoft Windows Mobile and or a variety of mobile operating systems such as iOS Windows Phone Android BlackBerry 10 Palm OS and the like and being Internet e mail short message service SMS Blackberry or other communication protocol enabled. The client computing devices can be general purpose personal computers including by way of example personal computers and or laptop computers running various versions of Microsoft Windows Apple Macintosh and or Linux operating systems. The client computing devices can be workstation computers running any of a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems such as for example Google Chrome OS. Alternatively or in addition client computing devices and may be any other electronic device such as a thin client computer an Internet enabled gaming system e.g. a Microsoft Xbox gaming console with or without a Kinect gesture input device and or a personal messaging device capable of communicating over network s .

Although exemplary distributed system is shown with four client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with server .

Network s in distributed system may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including without limitation TCP IP transmission control protocol Internet protocol SNA systems network architecture IPX Internet packet exchange AppleTalk and the like. Merely by way of example network s can be a local area network LAN such as one based on Ethernet Token Ring and or the like. Network s can be a wide area network and the Internet. It can include a virtual network including without limitation a virtual private network VPN an intranet an extranet a public switched telephone network PSTN an infra red network a wireless network e.g. a network operating under any of the Institute of Electrical and Electronics IEEE 802.11 suite of protocols Bluetooth and or any other wireless protocol and or any combination of these and or other networks.

Server may be composed of one or more general purpose computers specialized server computers including by way of example PC personal computer servers UNIX servers mid range servers mainframe computers rack mounted servers etc. server farms server clusters or any other appropriate arrangement and or combination. In various embodiments server may be adapted to run one or more services or software applications described in the foregoing disclosure. For example server may correspond to a server for performing processing described above according to an embodiment of the present disclosure.

Server may run an operating system including any of those discussed above as well as any commercially available server operating system. Server may also run any of a variety of additional server applications and or mid tier applications including HTTP hypertext transport protocol servers FTP file transfer protocol servers CGI common gateway interface servers JAVA servers database servers and the like. Exemplary database servers include without limitation those commercially available from Oracle Microsoft Sybase IBM International Business Machines and the like.

In some implementations server may include one or more applications to analyze and consolidate data feeds and or event updates received from users of client computing devices and . As an example data feeds and or event updates may include but are not limited to Twitter feeds Facebook updates or real time updates received from one or more third party information sources and continuous data streams which may include real time events related to sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like. Server may also include one or more applications to display the data feeds and or real time events via one or more display devices of client computing devices and .

Distributed system may also include one or more databases and . Databases and may reside in a variety of locations. By way of example one or more of databases and may reside on a non transitory storage medium local to and or resident in server . Alternatively databases and may be remote from server and in communication with server via a network based or dedicated connection. In one set of embodiments databases and may reside in a storage area network SAN . Similarly any necessary files for performing the functions attributed to server may be stored locally on server and or remotely as appropriate. In one set of embodiments databases and may include relational databases such as databases provided by Oracle that are adapted to store update and retrieve data in response to SQL formatted commands.

It should be appreciated that cloud infrastructure system depicted in the figure may have other components than those depicted. Further the embodiment shown in the figure is only one example of a cloud infrastructure system that may incorporate an embodiment of the invention. In some other embodiments cloud infrastructure system may have more or fewer components than shown in the figure may combine two or more components or may have a different configuration or arrangement of components.

Although exemplary system environment is shown with three client computing devices any number of client computing devices may be supported. Other devices such as devices with sensors etc. may interact with cloud infrastructure system .

Network s may facilitate communications and exchange of data between clients and and cloud infrastructure system . Each network may be any type of network familiar to those skilled in the art that can support data communications using any of a variety of commercially available protocols including those described above for network s .

Cloud infrastructure system may comprise one or more computers and or servers that may include those described above for server .

In certain embodiments services provided by the cloud infrastructure system may include a host of services that are made available to users of the cloud infrastructure system on demand such as online data storage and backup solutions Web based e mail services hosted office suites and document collaboration services database processing managed technical support services and the like. Services provided by the cloud infrastructure system can dynamically scale to meet the needs of its users. A specific instantiation of a service provided by cloud infrastructure system is referred to herein as a service instance. In general any service made available to a user via a communication network such as the Internet from a cloud service provider s system is referred to as a cloud service. Typically in a public cloud environment servers and systems that make up the cloud service provider s system are different from the customer s own on premises servers and systems. For example a cloud service provider s system may host an application and a user may via a communication network such as the Internet on demand order and use the application.

In some examples a service in a computer network cloud infrastructure may include protected computer network access to storage a hosted database a hosted web server a software application or other service provided by a cloud vendor to a user or as otherwise known in the art. For example a service can include password protected access to remote storage on the cloud through the Internet. As another example a service can include a web service based hosted relational database and a script language middleware engine for private use by a networked developer. As another example a service can include access to an email software application hosted on a cloud vendor s web site.

In certain embodiments cloud infrastructure system may include a suite of applications middleware and database service offerings that are delivered to a customer in a self service subscription based elastically scalable reliable highly available and secure manner. An example of such a cloud infrastructure system is the Oracle Public Cloud provided by the present assignee.

In various embodiments cloud infrastructure system may be adapted to automatically provision manage and track a customer s subscription to services offered by cloud infrastructure system . Cloud infrastructure system may provide the cloud services via different deployment models. For example services may be provided under a public cloud model in which cloud infrastructure system is owned by an organization selling cloud services e.g. owned by Oracle and the services are made available to the general public or different industry enterprises. As another example services may be provided under a private cloud model in which cloud infrastructure system is operated solely for a single organization and may provide services for one or more entities within the organization. The cloud services may also be provided under a community cloud model in which cloud infrastructure system and the services provided by cloud infrastructure system are shared by several organizations in a related community. The cloud services may also be provided under a hybrid cloud model which is a combination of two or more different models.

In some embodiments the services provided by cloud infrastructure system may include one or more services provided under Software as a Service SaaS category Platform as a Service PaaS category Infrastructure as a Service IaaS category or other categories of services including hybrid services. A customer via a subscription order may order one or more services provided by cloud infrastructure system . Cloud infrastructure system then performs processing to provide the services in the customer s subscription order.

In some embodiments the services provided by cloud infrastructure system may include without limitation application services platform services and infrastructure services. In some examples application services may be provided by the cloud infrastructure system via a SaaS platform. The SaaS platform may be configured to provide cloud services that fall under the SaaS category. For example the SaaS platform may provide capabilities to build and deliver a suite of on demand applications on an integrated development and deployment platform. The SaaS platform may manage and control the underlying software and infrastructure for providing the SaaS services. By utilizing the services provided by the SaaS platform customers can utilize applications executing on the cloud infrastructure system. Customers can acquire the application services without the need for customers to purchase separate licenses and support. Various different SaaS services may be provided. Examples include without limitation services that provide solutions for sales performance management enterprise integration and business flexibility for large organizations.

In some embodiments platform services may be provided by the cloud infrastructure system via a PaaS platform. The PaaS platform may be configured to provide cloud services that fall under the PaaS category. Examples of platform services may include without limitation services that enable organizations such as Oracle to consolidate existing applications on a shared common architecture as well as the ability to build new applications that leverage the shared services provided by the platform. The PaaS platform may manage and control the underlying software and infrastructure for providing the PaaS services. Customers can acquire the PaaS services provided by the cloud infrastructure system without the need for customers to purchase separate licenses and support. Examples of platform services include without limitation Oracle Java Cloud Service JCS Oracle Database Cloud Service DBCS and others.

By utilizing the services provided by the PaaS platform customers can employ programming languages and tools supported by the cloud infrastructure system and also control the deployed services. In some embodiments platform services provided by the cloud infrastructure system may include database cloud services middleware cloud services e.g. Oracle Fusion Middleware services and Java cloud services. In one embodiment database cloud services may support shared service deployment models that enable organizations to pool database resources and offer customers a Database as a Service in the form of a database cloud. Middleware cloud services may provide a platform for customers to develop and deploy various business applications and Java cloud services may provide a platform for customers to deploy Java applications in the cloud infrastructure system.

Various different infrastructure services may be provided by an IaaS platform in the cloud infrastructure system. The infrastructure services facilitate the management and control of the underlying computing resources such as storage networks and other fundamental computing resources for customers utilizing services provided by the SaaS platform and the PaaS platform.

In certain embodiments cloud infrastructure system may also include infrastructure resources for providing the resources used to provide various services to customers of the cloud infrastructure system. In one embodiment infrastructure resources may include pre integrated and optimized combinations of hardware such as servers storage and networking resources to execute the services provided by the PaaS platform and the SaaS platform.

In some embodiments resources in cloud infrastructure system may be shared by multiple users and dynamically re allocated per demand. Additionally resources may be allocated to users in different time zones. For example cloud infrastructure system may enable a first set of users in a first time zone to utilize resources of the cloud infrastructure system for a specified number of hours and then enable the re allocation of the same resources to another set of users located in a different time zone thereby maximizing the utilization of resources.

In certain embodiments a number of internal shared services may be provided that are shared by different components or modules of cloud infrastructure system and by the services provided by cloud infrastructure system . These internal shared services may include without limitation a security and identity service an integration service an enterprise repository service an enterprise manager service a virus scanning and white list service a high availability backup and recovery service service for enabling cloud support an email service a notification service a file transfer service and the like.

In certain embodiments cloud infrastructure system may provide comprehensive management of cloud services e.g. SaaS PaaS and IaaS services in the cloud infrastructure system. In one embodiment cloud management functionality may include capabilities for provisioning managing and tracking a customer s subscription received by cloud infrastructure system and the like.

In one embodiment as depicted in the figure cloud management functionality may be provided by one or more modules such as an order management module an order orchestration module an order provisioning module an order management and monitoring module and an identity management module . These modules may include or be provided using one or more computers and or servers which may be general purpose computers specialized server computers server farms server clusters or any other appropriate arrangement and or combination.

In exemplary operation a customer using a client device such as client device or may interact with cloud infrastructure system by requesting one or more services provided by cloud infrastructure system and placing an order for a subscription for one or more services offered by cloud infrastructure system . In certain embodiments the customer may access a cloud User Interface UI cloud UI cloud UI and or cloud UI and place a subscription order via these UIs. The order information received by cloud infrastructure system in response to the customer placing an order may include information identifying the customer and one or more services offered by the cloud infrastructure system that the customer intends to subscribe to.

After an order has been placed by the customer the order information is received via the cloud UIs and or .

At operation the order is stored in order database . Order database can be one of several databases operated by cloud infrastructure system and operated in conjunction with other system elements.

At operation the order information is forwarded to an order management module . In some instances order management module may be configured to perform billing and accounting functions related to the order such as verifying the order and upon verification booking the order.

At operation information regarding the order is communicated to an order orchestration module . Order orchestration module may utilize the order information to orchestrate the provisioning of services and resources for the order placed by the customer. In some instances order orchestration module may orchestrate the provisioning of resources to support the subscribed services using the services of order provisioning module .

In certain embodiments order orchestration module enables the management of business processes associated with each order and applies business logic to determine whether an order should proceed to provisioning. At operation upon receiving an order for a new subscription order orchestration module sends a request to order provisioning module to allocate resources and configure those resources needed to fulfill the subscription order. Order provisioning module enables the allocation of resources for the services ordered by the customer. Order provisioning module provides a level of abstraction between the cloud services provided by cloud infrastructure system and the physical implementation layer that is used to provision the resources for providing the requested services. Order orchestration module may thus be isolated from implementation details such as whether or not services and resources are actually provisioned on the fly or pre provisioned and only allocated assigned upon request.

At operation once the services and resources are provisioned a notification of the provided service may be sent to customers on client devices and or by order provisioning module of cloud infrastructure system .

At operation the customer s subscription order may be managed and tracked by an order management and monitoring module . In some instances order management and monitoring module may be configured to collect usage statistics for the services in the subscription order such as the amount of storage used the amount data transferred the number of users and the amount of system up time and system down time.

In certain embodiments cloud infrastructure system may include an identity management module . Identity management module may be configured to provide identity services such as access management and authorization services in cloud infrastructure system . In some embodiments identity management module may control information about customers who wish to utilize the services provided by cloud infrastructure system . Such information can include information that authenticates the identities of such customers and information that describes which actions those customers are authorized to perform relative to various system resources e.g. files directories applications communication ports memory segments etc. Identity management module may also include the management of descriptive information about each customer and about how and by whom that descriptive information can be accessed and modified.

Bus subsystem provides a mechanism for letting the various components and subsystems of computer system communicate with each other as intended. Although bus subsystem is shown schematically as a single bus alternative embodiments of the bus subsystem may utilize multiple buses. Bus subsystem may be any of several types of bus structures including a memory bus or memory controller a peripheral bus and a local bus using any of a variety of bus architectures. For example such architectures may include an Industry Standard Architecture ISA bus Micro Channel Architecture MCA bus Enhanced ISA EISA bus Video Electronics Standards Association VESA local bus and Peripheral Component Interconnect PCI bus which can be implemented as a Mezzanine bus manufactured to the IEEE P1386.1 standard.

Processing unit which can be implemented as one or more integrated circuits e.g. a conventional microprocessor or microcontroller controls the operation of computer system . One or more processors may be included in processing unit . These processors may include single core or multicore processors. In certain embodiments processing unit may be implemented as one or more independent processing units and or with single or multicore processors included in each processing unit. In other embodiments processing unit may also be implemented as a quad core processing unit formed by integrating two dual core processors into a single chip.

In various embodiments processing unit can execute a variety of programs in response to program code and can maintain multiple concurrently executing programs or processes. At any given time some or all of the program code to be executed can be resident in processor s and or in storage subsystem . Through suitable programming processor s can provide various functionalities described above. Computer system may additionally include a processing acceleration unit which can include a digital signal processor DSP a special purpose processor and or the like.

I O subsystem may include user interface input devices and user interface output devices. User interface input devices may include a keyboard pointing devices such as a mouse or trackball a touchpad or touch screen incorporated into a display a scroll wheel a click wheel a dial a button a switch a keypad audio input devices with voice command recognition systems microphones and other types of input devices. User interface input devices may include for example motion sensing and or gesture recognition devices such as the Microsoft Kinect motion sensor that enables users to control and interact with an input device such as the Microsoft Xbox 360 game controller through a natural user interface using gestures and spoken commands. User interface input devices may also include eye gesture recognition devices such as the Google Glass blink detector that detects eye activity e.g. blinking while taking pictures and or making a menu selection from users and transforms the eye gestures as input into an input device e.g. Google Glass . Additionally user interface input devices may include voice recognition sensing devices that enable users to interact with voice recognition systems e.g. Sirit navigator through voice commands.

User interface input devices may also include without limitation three dimensional 3D mice joysticks or pointing sticks gamepads and graphic tablets and audio visual devices such as speakers digital cameras digital camcorders portable media players webcams image scanners fingerprint scanners barcode reader 3D scanners 3D printers laser rangefinders and eye gaze tracking devices. Additionally user interface input devices may include for example medical imaging input devices such as computed tomography magnetic resonance imaging position emission tomography medical ultrasonography devices. User interface input devices may also include for example audio input devices such as MIDI keyboards digital musical instruments and the like.

User interface output devices may include a display subsystem indicator lights or non visual displays such as audio output devices etc. The display subsystem may be a cathode ray tube CRT a flat panel device such as that using a liquid crystal display LCD or plasma display a projection device a touch screen and the like. In general use of the term output device is intended to include all possible types of devices and mechanisms for outputting information from computer system to a user or other computer. For example user interface output devices may include without limitation a variety of display devices that visually convey text graphics and audio video information such as monitors printers speakers headphones automotive navigation systems plotters voice output devices and modems.

Computer system may comprise a storage subsystem that comprises software elements shown as being currently located within a system memory . System memory may store program instructions that are loadable and executable on processing unit as well as data generated during the execution of these programs.

Depending on the configuration and type of computer system system memory may be volatile such as random access memory RAM and or non volatile such as read only memory ROM flash memory etc. The RAM typically contains data and or program modules that are immediately accessible to and or presently being operated and executed by processing unit . In some implementations system memory may include multiple different types of memory such as static random access memory SRAM or dynamic random access memory DRAM . In some implementations a basic input output system BIOS containing the basic routines that help to transfer information between elements within computer system such as during start up may typically be stored in the ROM. By way of example and not limitation system memory also illustrates application programs which may include client applications Web browsers mid tier applications relational database management systems RDBMS etc. program data and an operating system . By way of example operating system may include various versions of Microsoft Windows Apple Macintosh and or Linux operating systems a variety of commercially available UNIX or UNIX like operating systems including without limitation the variety of GNU Linux operating systems the Google Chrome OS and the like and or mobile operating systems such as iOS Windows Phone Android OS BlackBerry 10 OS and Palm OS operating systems.

Storage subsystem may also provide a tangible computer readable storage medium for storing the basic programming and data constructs that provide the functionality of some embodiments. Software programs code modules instructions that when executed by a processor provide the functionality described above may be stored in storage subsystem . These software modules or instructions may be executed by processing unit . Storage subsystem may also provide a repository for storing data used in accordance with the present invention.

Storage subsystem may also include a computer readable storage media reader that can further be connected to computer readable storage media . Together and optionally in combination with system memory computer readable storage media may comprehensively represent remote local fixed and or removable storage devices plus storage media for temporarily and or more permanently containing storing transmitting and retrieving computer readable information.

Computer readable storage media containing code or portions of code can also include any appropriate media known or used in the art including storage media and communication media such as but not limited to volatile and non volatile removable and non removable media implemented in any method or technology for storage and or transmission of information. This can include tangible computer readable storage media such as RAM ROM electronically erasable programmable ROM EEPROM flash memory or other memory technology CD ROM digital versatile disk DVD or other optical storage magnetic cassettes magnetic tape magnetic disk storage or other magnetic storage devices or other tangible computer readable media. This can also include nontangible computer readable media such as data signals data transmissions or any other medium which can be used to transmit the desired information and which can be accessed by computing system .

By way of example computer readable storage media may include a hard disk drive that reads from or writes to non removable nonvolatile magnetic media a magnetic disk drive that reads from or writes to a removable nonvolatile magnetic disk and an optical disk drive that reads from or writes to a removable nonvolatile optical disk such as a CD ROM DVD and Blu Ray disk or other optical media. Computer readable storage media may include but is not limited to Zip drives flash memory cards universal serial bus USB flash drives secure digital SD cards DVD disks digital video tape and the like. Computer readable storage media may also include solid state drives SSD based on non volatile memory such as flash memory based SSDs enterprise flash drives solid state ROM and the like SSDs based on volatile memory such as solid state RAM dynamic RAM static RAM DRAM based SSDs magnetoresistive RAM MRAM SSDs and hybrid SSDs that use a combination of DRAM and flash memory based SSDs. The disk drives and their associated computer readable media may provide non volatile storage of computer readable instructions data structures program modules and other data for computer system .

Communications subsystem provides an interface to other computer systems and networks. Communications subsystem serves as an interface for receiving data from and transmitting data to other systems from computer system . For example communications subsystem may enable computer system to connect to one or more devices via the Internet. In some embodiments communications subsystem can include radio frequency RF transceiver components for accessing wireless voice and or data networks e.g. using cellular telephone technology advanced data network technology such as 3G 4G or EDGE enhanced data rates for global evolution WiFi IEEE 802.11 family standards or other mobile communication technologies or any combination thereof global positioning system GPS receiver components and or other components. In some embodiments communications subsystem can provide wired network connectivity e.g. Ethernet in addition to or instead of a wireless interface.

In some embodiments communications subsystem may also receive input communication in the form of structured and or unstructured data feeds event streams event updates and the like on behalf of one or more users who may use computer system .

By way of example communications subsystem may be configured to receive data feeds in real time from users of social networks and or other communication services such as Twitter feeds Facebook updates web feeds such as Rich Site Summary RSS feeds and or real time updates from one or more third party information sources.

Additionally communications subsystem may also be configured to receive data in the form of continuous data streams which may include event streams of real time events and or event updates that may be continuous or unbounded in nature with no explicit end. Examples of applications that generate continuous data may include for example sensor data applications financial tickers network performance measuring tools e.g. network monitoring and traffic management applications clickstream analysis tools automobile traffic monitoring and the like.

Communications subsystem may also be configured to output the structured and or unstructured data feeds event streams event updates and the like to one or more databases that may be in communication with one or more streaming data source computers coupled to computer system .

Computer system can be one of various types including a handheld portable device e.g. an iPhone cellular phone an iPad computing tablet a PDA a wearable device e.g. a Google Glass head mounted display a PC a workstation a mainframe a kiosk a server rack or any other data processing system.

Due to the ever changing nature of computers and networks the description of computer system depicted in the figure is intended only as a specific example. Many other configurations having more or fewer components than the system depicted in the figure are possible. For example customized hardware might also be used and or particular elements might be implemented in hardware firmware software including applets or a combination. Further connection to other computing devices such as network input output devices may be employed. Based on the disclosure and teachings provided herein a person of ordinary skill in the art will appreciate other ways and or methods to implement the various embodiments.

As described below system and other systems described herein may be used to perform automated and parallel processing of data within computing environments. For example the techniques described herein may relate to systems for enhancing performance of data processing tasks performed by applications by dynamically creating multiple parallel processes or process instances configured to process different portions or partitions of a data set stored in a back end data store e.g. a database server or application level cache . Thus the techniques described herein may be referred to as data partitioning techniques because the creation of multiple process instances to retrieve and process separate portions or partitions of a uniform data set may effectively partition the data set for the purposes of the data processing task. However it should be understood that the data partitioning techniques described herein are independent and separate from any partitioning schemes or other data storage techniques used by the back end data store such as table partitioning. The data partitioning techniques described herein may be performed by creating multiple process instances each of which is configured and or assigned to process a different partition of an underlying data set. Each process instance may be provided a unique combination of parameter values which may be determined independently of the backend data store in which the underlying data tables are stored. That is the back end data store storing the underlying data set to be processed by the application may use table partitioning and or other data storage partitioning technologies or might not use such data storage partitioning technologies. The use or lack of use of such data storage partitioning technologies or any underlying design and implementation decisions for the back end data storage need not affect the operation of the data partitioning techniques described herein. In some cases the parameters identified within the data set and the unique combinations of parameter values provided to the process instances to perform the data partitioning techniques described herein may be different from an additional set of parameters used by a partitioning scheme within the backend data store storing the data tables.

In some cases multiple process instances may be created to process separate partitions of a data set in real time in response to an initiation of a data processing task by an application on the data set. Although the different process instances may be configured and or assigned to retrieve and process different target data partitions e.g. by receiving unique combinations of parameter values the different target data for multiple process instances may reside in the same data table s within a database server application level cache etc. In fact the data partitioning described herein need not require the creation or modification of any existing storage structures but may be performed entirely in real time by process instances which retrieve and process separate portions of a data set. In other examples individual process instances may create additional data structures e.g. temp tables to copy and store their respective data partitions during processing after which the temporary data structures may be deleted.

In some embodiments the process instances described herein may be created at the application level e.g. by the application itself and or a partition scheduler or partition manager rather than by a data store server or system level server so that the application may provide each process instance with the necessary context to retrieve and process its respective target data from the data tables in the back end storage. For example as described below the data partitioning described herein may be performed by using partition schedules to create multiples process instances with run time data values corresponding to unique sets of process parameters for each process instance. The data partitioning also may include creating partition schedules for applications based on sets of process parameters determining sets of values of partition parameter from either application tables or application classes and executing partition schedules by creating and launching the multiple parallel processes.

In order to perform these features and other functionality described herein each of the components shown in the example system may correspond to a single computer server or a complex computing system including a combination of computing devices storage devices network components etc. Further each of these components and their respective subcomponents may be implemented in hardware software or a combination thereof including some or all of the components discussed above in reference to . As shown in the computing environment may include multiple separate computing systems and layers such as one or more application servers configured to execute software applications one or more separate partition servers and or other middle tier servers configured to execute partition managers and partition schedulers one or more system servers configured to execute the process manager and or database servers configured to implement application data stores . In such examples the separate computing systems or layers may correspond to separate implementations of hardware software and networking components which may be operated at separate physical locations and or by separate entities. However in some embodiments the various computing devices and or servers and or may correspond to a single integrated computing system with dedicated hardware and or software that operates at the same physical location and under the control of a single entity. In such examples communications networks may be optional or may be an intranet or LAN rather than the various WAN computer networks or other communication networks that may be used in other embodiments.

In some cases system may be built and maintained by an enterprise or other organization such as an educational institution or governmental entity to provide services to users such as customers employees students or other organization members. Accordingly system may be implemented as a multi tier computer architecture which may include web based and or cloud based implementations and in which client devices are provided data and services via application servers and or middle tier servers which are executed upon an underlying set of hardware and or software resources.

As shown in example system users may interact with applications via client terminal devices such as desktop and laptop computer mobile devices etc. Specific examples of applications may include data intensive applications such as enterprise resource planning ERP applications e.g. payroll systems account systems procurement systems manufacturing systems distributions systems etc. data mining applications document management applications customer relationship management CRM applications e Commerce applications and the like. As discussed below in more detail many applications may initiate data processing tasks to be performed using data retrieved from one or more application data stores . In some embodiments application data stores may reside on application servers while in other cases application data stores may reside on separate database servers and or other external systems.

System also includes a partition manager partition data store partition scheduler and process manager . As discussed below in more detail partition manager may provide one or more interfaces e.g. APIs command line or graphical user interfaces etc. through which client devices may access the partition data store and the partition scheduler to define create and execute partition schedules for various applications . The partition data store may be implemented for example on or more application servers or database servers and may be configured to store definitions of partitionable parameters application classes partition schedules and or status data received from process instances during execution. Partition scheduler discussed below in more detail may coordinate execution of partition schedules by retrieving the partition schedules from the partition data store determining numbers of process instances to be created for a data processing task and determining the process parameters for each process instance. Process manager may be configured to instantiate monitor and control new process instances clean up after complete process instances and handle errors failures within process instances. As shown in this example the partition manager partition data store and partition scheduler may be implemented on a partition server . However in other examples one or more of these components may be implemented separately by dedicated servers or using other various combinations of hardware software and or network components. Additionally in various embodiments the process manager may be implemented on a separate server e.g. a system server or application server or on the same systems servers as the partition manager and or partition scheduler .

In step one or more sets of partitionable parameters and or application classes may be defined for an application . As discussed above various applications may be programmed to perform data processing tasks on large amounts of data within one or more application data stores . For example an enterprise application may be configured to perform data intensive processing tasks such as payroll processing order processing inventory auditing and the like. Other applications such as data mining applications document management applications customer relationship management CRM applications e Commerce applications and the like may be configured to perform various other types of data processing tasks involving large quantities of data and or data intensive analyses. Such tasks may be executed according to a predetermined schedule defined by the user or the system or may be executed on demand in response to a user request. Each application may perform processing tasks on data sets stored in one or more data tables or other storage structures within one or more data stores . As used herein a data set for a processing task performed by an application may refer to the entire collection of data to be processed during one execution of the data processing task. Due to the multi user continuous and dynamic nature of the systems and applications the application data within the underlying data stores may change frequently and continuously. Additionally the same application data potentially may be accessed modified and or deleted by other applications with the system . Therefore the data set for a processing task performed by an application may be a dynamic and constantly changing data set which may be different each time the processing task is executed.

The techniques described herein include creating and executing data partition process schedules or partition schedules in which a number of different process instances are created and each assigned a subset of data to process for the application . Specifically partition schedules may be used to determine a number of process instances to be created and each process instance may be assigned a unique set of run time data values corresponding to a unique set of parameters within the data set to be processed by the application. Accordingly the partitionable parameters and or application classes defined in step may identify which possible parameters may be used to partition the data set as well as the different possible subsets of values or other conditions to limit the data set.

In some cases the partitionable parameters defined in step may correspond to one or more data fields e.g. columns within data tables within an application s data set. For example in a payroll processing application if the partitionable parameters are defined as a country field state field and office location field then users creating partition schedules in step may have the option to partition the application s data set based on any or all of those data fields. As another example in an order processing application if the partitionable parameters are defined as a business unit identifier and a vendor identifier then users creating partition schedules in step may have the option to partition the application s data set based on one or both of those data fields. In some cases any data field within a data set may be used as a partitionable parameter. In other cases only a limited number of parameters may be selected as partitionable parameters in step . For instance for certain parameters that may have relatively few unique values within the data set e.g. Boolean fields uniform fields with constant values etc. or for parameters that may have many unique values within the data set e.g. primary key fields timestamps text fields and the like it may be inefficient and or cause high process overhead to use multiple parallel processes to partition the data based on these parameters. Therefore in step one or more of these types of parameters may be excluded from selection as partitionable parameters.

As illustrated in the above examples defining partitionable parameters may include identifying data fields columns within the data set to be processed by an application . However the partitionable parameters may be defined in step programmatically using application classes which may be implemented as software applications program extensions on applications or various other types of software objects. In various different embodiments application classes may be developed and built using various different programming languages and or development environments. For example application classes may be developed and deployed concurrently with specific applications by application developers. Alternatively some application classes may be designed developed and deployed e.g. by customers or users after the release of an application in order to customize the application for the specific systems of the customer or user. In some cases an application may support one or more programmatic interfaces e.g. APIs interactive user interfaces command line interfaces etc. to allow users to create application classes as program extensions for the application .

Within an application class programming code may define a set of partitionable parameters along with value subsets or ranges for one or more of the parameters. For example if country and business unit are partitionable parameters for a payroll processing application then an application class may identify these parameters and define the specific values or range of values for each parameter. An application class in this case may include code limiting the country parameter to a specific number of countries or a geographic region and or code limiting the business unit parameter to a specific subset of business units. The limits on parameter values encoded into application classes may limit or narrow the number of process instances created and the total amount of data processed. For instance rather than creating one or multiple process instances for each unique country in the data set the limitations on the country parameter values within an application class e.g. listing a subset of countries or geographic region will cause process instances to be created only for the unique countries within the data set that satisfy the limitations and conditions of the application class. Accordingly multiple different application classes may be created for each application for example to encode different subsets of parameter values or value ranges e.g. different geographic regions for a country parameter different business unit values for the business unit parameter etc. .

Application classes also may encode additional conditions rather than only encoding subsets of parameter values or value ranges which may affect the data to be processed and or the number of process instances to be created. For example application classes may implement additional programming logic such as date ranges for data processing tasks rankings e.g. top N or top N data items for processing tasks and other conditions that may narrow or limiting the amount of data that will be processed by the application .

In step one or more data partition process schedules or partition schedules may be created for an application based on one or more of the partitionable parameters and or application classes defined in step . As discussed above a partition schedule may represent a plan or set of instructions for partitioning a data set into multiple data subsets to be processed in parallel by multiple different process instances. In some embodiments a partition manager may provide various interfaces and underlying functionality to create partition schedules in step . For example a partition manager may receive requests and or support various user interactions with client devices to allow a partition schedule to be designed and then stored in a partition data store .

Referring briefly to several example screens A D and related data structures E G are shown of user interfaces generated by the partition manager to allow users to create new partition schedules and modify existing partition schedules via client devices . In these examples a partitioning schedule may be either a field based partition schedule as illustrated in or an application class based partition schedule as illustrated in . is an example of an application class pseudo code implementing the partitioning logic. For either field based partition schedules or application class based partition schedules the user interface allows selection of the parameters e.g. partitioning fields or application class to be used to perform the partitioning during subsequent execution of the data processing task by the application . For field based partition schedules the user may select one or more of the individual parameters defined in step as shown in field selection user interface in . For application class based partition schedules the user may select any application class created in step for the application . As illustrated in these examples other parameters also may be defined using the interfaces provided by the partition manager such as the process type process name component interface name output destination types and output destination format that may be used with executing the partition schedule. Additionally users may input a server name and template if applicable . As a whole the information received in step via the users interfaces may fully define of a partition schedule. Additionally although graphical user interfaces are used in these examples it should be understood that programmatic interfaces e.g. APIs or command line tools may be used to provide the partition schedule definition information to the partition manager in other examples.

After the information defining the partition schedule has been provided in step the partition schedule definition may be saved and stored for example within a partition data store on a partition server . In some embodiments partition schedule may be stored as a file metadata XML object or the like which includes specific data needed to perform the data partitioning and processing task for the application . Additionally as discussed above regarding the partitionable parameters and application classes the partition manager and or partition data stores may support the creation of multiple different partition schedules for each application . For instance a first partition schedule may be executed to perform a specified data processing task using a certain partitioning scheme while a second partition schedule may be executed to perform the same data processing task and or related tasks using a different partitioning scheme.

In step one or more of the partition schedules created and stored in step may be retrieved and executed for example by the partition scheduler and or process manager . The processes and techniques involved in retrieving and executing partition schedules to perform data processing tasks for applications are described in more detail below in reference to . The execution of a partition schedule in step may be initiated in accordance with data processing task schedule defined by users and or administrators of applications . For example applications may have specific data processing tasks e.g. payroll processing order processing inventory processing data mining system maintenance auditing etc. which are configured to be executed on a recurring basis e.g. hourly daily weekly monthly yearly etc. according to a schedule setup by a user or administrator. In other cases applications may support manual and on demand initiation of data processing tasks instead of or in addition to setting up predetermined schedules for the data processing tasks. As discussed below in either case the determination by an application to perform a data processing task may cause the corresponding partition schedule to be retrieved and executed by the partition scheduler and process manager in step . Accordingly it should be understood that step need not directly follow step and need not be performed by the same components. To the contrary a partition schedule may be created and stored in step far in advance of the time that the partition schedule is ultimately retrieved and executed in step and the execution of the partition schedule may be initiated and or performed by an entirely different entities and components than those that created the partition schedule.

In step a data processing task may be initiated by or for an application . As discussed above application may be any application configured to perform data processing tasks such as report generation data mining and analysis database modification data auditing and any other type of data processing tasks which may involve large quantities of data and or data intensive analyses. Accordingly non limiting examples of applications may include enterprise resource planning ERP applications e.g. payroll systems account systems procurement systems manufacturing systems distributions systems etc. data mining applications document management applications customer relationship management CRM applications e Commerce applications and the like.

The initiation of a data processing task in step may be caused by a user interaction directly with the application a so called on demand data processing task or may be triggered based on a predetermined schedule of data processing tasks for the application. For example a document management application may be configured to automatically execute a daily document reporting process a payroll application may be configured to automatically execute a monthly payroll processing task and so on. In some cases the application may initiate the data processing task by invoking an application programming interface API of the process scheduler . In other cases the process scheduler may be automatically triggered to initiate the process based on a schedule and or based on the occurrence of specific event conditions relevant to the application e.g. data conditions execution conditions etc. .

In step a partition schedule may be retrieved in response to the initiation of the data processing task in step . As discussed above in reference to step partition schedules may be created and stored in a partition data store . Accordingly in step the partition scheduler may receive a notification that a data processing task has been initiated step for example from the process manager the partition manager or directly from the application . In response to such a notification the partition scheduler may retrieve the partition schedule corresponding to the data processing task from partition data store . As discussed above partition schedules may be stored as metadata objects and or files that identify the partitioning parameters parameter values or value ranges and or other conditions to be used when partitioning the data for parallel processing by multiple process instances.

In some cases multiple different partition schedules may be created and stored corresponding to a single data processing task. For example for a particular payroll or order processing task or any other specific data processing task different partition schedules may be retrieved based on a user or application that initiated the task the time period during which the task was initiated or based on the current conditions of the application or application data etc. In such cases the partition scheduler may determine which among multiple partition schedules to retrieve from the partition data store in step . For instance if a user with a first system authorization level requested the data processing task in step the partition scheduler may retrieve one partition schedule whereas if a user with a different system authorization level requested the data processing task in step the partition scheduler may retrieve a different partition schedule for the data processing task. Similarly if a client device in a first geographic region initiated the data processing task in step the partition scheduler may retrieve one partition schedule whereas if a client device in a different geographic region initiated the data processing task in step the partition scheduler may retrieve a different partition schedule. The retrieval of a specific partition schedule in step may be performed by the partition scheduler based these and other user characteristics e.g. user role user organization etc. as well as other factors such as the current time current system status or load current state of the application data store etc.

In step the partition scheduler may initially analyze the partition schedule retrieved in step to determine if the partition parameters for the schedule correspond to table fields or an application class. As discussed above a partition schedule may define one or more parameters that may be used to partition the data for parallel processing of a data processing task. These partition parameters may correspond to one or more individual table fields e.g. columns within data tables or may be determined programmatically by an application class. If the partition schedule indicates e.g. via the metadata of the partition schedule that the partition parameters are individual table fields Table Fields then partition scheduler may identify the parameters which may be included or referenced directly within the partition schedule itself in step . Alternatively if the partition schedule refers to an application class Application Class then the partition scheduler may access and execute the application class to determine the partition parameters in step . As discussed above an application class may be implemented as a program extension that defines the partition parameters the subset of values or value ranges for each parameter and or other conditions relating to the data partitioning and or the number of process instances to be created.

In step the partition scheduler may calculate a number of process instances to be created based on the partition parameters determined in step or . In some embodiments the calculation in step may be a calculation of the number of unique combinations of parameter values of the parameters determined in step or which may correspond to the cross product of the parameter values. For instance consider a scenario in which three parameters are determined based on an analysis of a partition schedule in step a country parameter a business unit parameter and a vendor ID parameter. For the country parameter the data store may store X distinct values each value representing a different country. For the business unit parameter the data store may store Y distinct values each value representing a different business unit. For the vendor ID parameter the data store may store Z distinct values each value representing a different vendor. Country Parameter Values C C1 C2 C3 . . . Cx Business Unit Parameter Values B B1 B2 B3 . . . By Vendor ID Parameter Values V V1 V2 V3 . . . Vz In this example the partition scheduler may calculate the number of processes to create as the cross product of these three parameters for instance X Y Z.

However in some cases the application data store might not contain a data record for every unique combination of parameter values. Thus the calculation in step may be less than the total cross product of the unique parameter values e.g. X Y Z . To illustrate this distinction refer briefly to application data table shown in . Assuming the data records shown in table are the entire data set for an application the calculation of unique combinations of the business unit and vendor ID parameters would equal 5 even though the total product of the parameters would equal 9 i.e. 3 distinct business units 3 distinct vendors because not all of the possible business unit vendor combinations are found in the current data set.

Any of the above scenarios may apply when a partition schedule defines a number of parameters by table fields which may be determined in step . However similar scenarios may be applied when a partition schedule identifies one or more application classes from which the parameters value subsets or ranges and or other conditions may be determined in step . As discussed above an application class may include software code and or logical rules that identify which parameters should be used to partition the data and also may define subsets or ranges of values for each parameter as well as other conditions controlling the data partitioning and or the number of process instances to be created. For instance continuing the above example an application class may identify the same three parameters discussed above but may enforce a requirement that only the following subsets or ranges of values should be processed for each parameter Country Parameter Values C C1 C5 Business Unit Parameter Values B B1 B4 B5 B12 Vendor ID Parameter Values V V1 V2 V3 . . . Vz Accordingly in this example the partition scheduler may calculate the number of processes to create in step as the cross product of these three parameters taking into account the subsets or ranges defined by the application class in step . In this case the number of processes calculated in step may be 5 4 Z.

Furthermore as discussed above an application class may include additional programming code logic to enforce other conditions which may affect the calculation of the number of processes in step . For example when a partition schedule includes or refers to an application class the calculation of the number of processes in step may depend on additional factors such as the geographic region from which the data processing request in step was initiated or the authorization level role or organization of the user that initiated the data processing request in step and or other various factors such as the current time current system status processing load data states etc. associated with the application .

Regardless of whether the partition parameters are determined based on data fields table field within a partition schedule step or determined programmatically based on an application class associated with a partition schedule step the calculation in step may be dynamic in the sense that it may be performed subsequently and in response to the initiation of the data processing task in step . As a result because the underlying application data stored in data store may be constantly changing the calculation in step may yield a different result whenever the underlying application data changes. For instance referring to the above example if a new data record is added to the data store having new values of the Country C Business Unit B and Vendor ID V parameters or new unique combinations of the values for these parameters then the next time the calculation in step is performed the result may be greater by one to account for these new parameter values and or new unique combinations of values. Similarly after deleting or modifying data records in the application data store if certain values of the C B and V parameters or certain unique combinations of the values for these parameters are no longer found among the current data records then the next time the calculation in step is performed the result may be lesser because these parameter values and or unique combinations of parameter values are no longer present.

In step a number of different processes which also may be referred to as process instances may be created corresponding to the number calculated in step . In some embodiments the partition scheduler may instruct the process manager to create the calculated number of process instances. For example as discussed below the partition manager may insert a number of new data records into a run control table and the process manager may read the data records and create a new process for each record in the table.

Each new process instance created in step also may be provided with a unique i.e. unique with respect to the set of process instances combination of parameter values that may be used by the process to retrieve a corresponding unique data partition from the application data store . For example the partition scheduler may use a recursive traversal algorithm to generate distinct sets of parameter values to provide as input for each different process. The algorithm may traverse across each of the parameter value sets for the different parameters and construct new sets comprising of one element from each parameter value set such that each constructed set of values is distinct. To illustrate such a process using the above example assume that three parameters C B and V e.g. Country Business Unit and Vendor ID and or any other partitionable parameters within the partition schedule each have different numbers of values as follows set of C C1 C2 C3 . . . Cx set of B B1 B2 B3 . . . By set of V V1 V2 V3 . . . Vz

In this case the partition scheduler may select distinct sets of parameter values by picking one value from each of the original sets of C B and V as shown below C1 B1 V1 C1 B1 V2

The algorithm used by the partition scheduler e.g. a recursive traversal algorithm also may take into account that the different parameter value sets e.g. C B and V may be of different sizes and that there may be any number of such sets. Additionally in some cases the distinct sets of values determined by the partition scheduler in step may correspond to subsets or ranges of parameter values defined by an application class rather than including every distinct combination of parameter values Cx By Vz.

In some embodiments the partition scheduler may store the initial data sets in a two dimensional array such that each array consists of the set of related values. For example the data sets from the previous example may be stored in two dimensional array TWODIM as shown below set of N N1 N2 N3 . . . Nx set of M M1 M2 M3 . . . My set of L L1 L2 . . . Lz TWODIM 1 1 N1 TWODIM 1 2 N2 TWODIM 2 1 M1

The partition scheduler may calculate the total number of combinations possible and number of values in each combination. As noted above the total number of combinations may be the cross product of the size of each parameter value set. In the above example if there are there parameter value sets e.g. C B and V of sizes 5 6 and 8 respectively then the total number of combination possible is 240 i.e. 5 6 8 and number of parameter values in each combination is 3. Thus the partition scheduler may create a two dimensional array of integers of size 240 3 i.e. 240 rows each having 3 data values and may generate indexes such that each index gives the position of the elements in the original data set so that the partition scheduler may know which element from the original data set needs to be obtained for each combination.

After generating the unique combination of parameter values each new process created in step may be provided one of the unique combinations of parameter values. As illustrated in each process may use its unique combination of parameter values to retrieve and process a separate partition of data within the application data store . The processes may operate independently and in parallel to retrieve and process separate slices of the data involved in the overall data processing task initiated by for the application in step . In some embodiments the individual process instances may execute at the application level to perform data processing on target data that is either retrieved from an underlying data store or has been cached at the application layer.

Referring now to a block diagram is shown illustrating components of a system for creating and managing process instances to perform parallel processing on an application data store in accordance with a partition schedule. System shown in this example may be similar or identical to the system used for creating executing and managing partition processes discussed above. In this example system includes a partition scheduler and a process manager which may correspond to the partition scheduler and process manager discussed above in reference to . The computing environment may also include various additional systems not shown in such as client devices application servers a partition manager and application data stores similar to those discussed above. also shows an example application data table that may reside in an application data store an example partition schedule table that may reside in a partition data store an example run control table and multiple process instances that have been created to perform parallel processing on separate data records within the example table .

In this example system is shown performing an illustrative data processing task using data partitioning and multiple parallel process instances such as discussed above in . For instance after a data processing task has been initiated by or for an application a corresponding partition schedule may be retrieved from a partition schedule table . In this case the partition schedule table includes a schedule identifier along with the metadata of the partition schedule.

After retrieving the partition schedule from table the partition scheduler may analyze and or execute the partition schedule as described above in steps to determine the number of process instances to create and the unique sets of parameter values to provide to each process instance. In this case the partition scheduler may insert a data record into the run control table for each process instances to be created. Each record added to the run control table may include a run control identifier and a set of parameters corresponding to a unique set of parameter values determined for the process in step . The process manager may retrieve the records from the run control table and create a new process instance for each record. The process manager also may provide the unique parameter sets to each new process instance either during or after the creation of the process instance . As shown in this example a multiple process instances have been created by the process manager and each process instance has been provided with a unique combination of the business unit and vendor ID parameters.

As shown in each of the multiple process instances may retrieve and process a portion of the data records from application data table based on the unique set of parameters provided to the process instance . Therefore the process instances may collectively perform data partitioning filtering and parallel processing of the entire set of application data to be processed for the application . In some cases process instances may be identical copies and may execute identical code bases and thus the only execution differences between the processes may be the result of the different parameter sets provided to the each process instance. Each process instance may execute independently using the available resources for computing network communication storage etc. from the computing environment . In some cases the individual process instances may execute at the application level and may perform the programmed data processing functions on their respective target data partitions which may either be retrieved from the underlying data store e.g. data store in a database layer or may be retrieved from a cache in the application layer. Some process instances may retrieve their respective partitions of the application data and create temp tables to store their partitions during processing while in other cases the process instances may retrieve and process their data partitions without creating temp tables.

In some embodiments process instances may be created having a child parent relationship to the partition scheduler and or other processes used to control and monitor the execution of the process instances . In such cases process instances may be configured to transmit data processing status messages to the partition scheduler e.g. directly or via the process manger or to another monitoring process. The messages transmitted from a process instance may indicate the progress of the process while processing its data partition may indicate when its processing has been completed and or the results of the data processing on its data partition and or may indicate runtime errors or other failures during the processing.

The process scheduler and or other parent processes which may be configured to monitor and control the process instances also may provide various interfaces to allow users at client devices to monitor and control the execution of overall data processing tasks for applications in general and specifically to monitor and control the individual process instances that have been created to partition and process the data in parallel. For example the partition scheduler may receive messages from process instances and then communicate the process status data with a partition manager which provide access to the status data to client devices via one or more interfaces. Similarly interfaces provided by a partition manager may allow users to control specific process instances by canceling re executing and the like as shown in .

Referring now to several example screens are shown of user interfaces generated by a partition manager and or partition scheduler to allow users to monitor and control the execution of partition schedules as a whole including individual process instances . As discussed below a partition manager may provide one or more user interface pages to allow users to manage the creation and execution of partition schedules. Such interfaces may provide functionality to execute and archive schedules and also to allow Re Run Update and Delete of partitioned processes. Additionally although graphical user interfaces are used in these examples it should be understood that programmatic interfaces e.g. APIs and or command line tools also may be used to allow client devices to similarly monitor and control the execution of partition schedules.

In this example a first interface screen may correspond to a partition manager page e.g. provided by a partition manager that provides functionality to retrieve and execute partition schedules. The first step may be receiving search criteria for a partition schedule identifying a partition schedule based on the search criteria and opening it which may open the partition schedule in the partition manager page as shown in for the example my Query Partition partition schedule. As shown in the partition manager page may list the schedule instances of that particular partition schedule. To create a new instance of the partition Schedule the user may selected the Execute button after which a new instance e.g. Schedule Instance 13 may be created as described as described above in reference to steps . After creation of a new schedule instance the user interface may be automatically updated to shown the new schedule instance as illustrated in . In some cases the automatic update may be implemented with a server side push enabled or configured.

To view the partition processes e.g. process instances corresponding to any of the schedule instance a user may select a schedule instance row. In some cases a context menu may be presented on the screen and the user can select a View Partitions item from the menu as shown in . After the selection the process instances specific to the particular schedule instance may be displayed in a partition process window as shown in for schedule instance 13 of the example partition schedule my Query Partition. Alternatively and additionally the process instances for all current partition schedules may be shown in a partition process window as shown in for example. In some embodiments schedule instances that are no longer being actively monitored may be archived by selecting an Archive menu option as illustrated in . This selection may archive the schedule instance and remove it from the schedule instance window. As shown in the archived schedule instance 2 for the example partition schedule my Query Partition has been removed from the schedule instances window and its process instances have been removed from the partition processes window.

As illustrated in a re run option and corresponding functionality may be provided in some embodiments which may create a new process instance identical to the selected partitioned process instance. This feature may be useful for example when a particular process instance 841 has generated an error and needs to be re run. The process instance being re run may use the same run control and hence all the run control parameters may be re used.

As illustrated in an update option and corresponding functionality may allow the run control to be edited and saved. This feature may be useful for example when a process instance has generated an error due to wrong data in the run control page which may need to be corrected before re running the process instance. As illustrated in a delete option and the corresponding functionality may be provided to remove a process instance from the schedule instance. This feature may be useful for example when a particular process instance is no longer useful for a schedule instance and or is generating errors and blocking the success completion of the schedule instance in which case the process instance may be deleted so that the status of the schedule instance may be updated to complete successful. illustrates the current set of process instances for schedule instance 11 after deleting the process instance corresponding to data partition 3 from schedule instance 11.

In the foregoing description for the purposes of illustration methods were described in a particular order. It should be appreciated that in alternate embodiments the methods may be performed in a different order than that described. It should also be appreciated that the methods described above may be performed by hardware components or may be embodied in sequences of machine executable instructions which may be used to cause a machine such as a general purpose or special purpose processor or logic circuits programmed with the instructions to perform the methods. These machine executable instructions may be stored on one or more machine readable mediums or memory devices such as CD ROMs or other type of optical disks floppy diskettes ROMs RAMs EPROMs EEPROMs magnetic or optical cards flash memory or other types of machine readable mediums or memory devices suitable for storing electronic instructions. Alternatively the methods may be performed by a combination of hardware and software.

While illustrative and presently preferred embodiments of the invention have been described in detail herein it is to be understood that the inventive concepts may be otherwise variously embodied and employed and that the appended claims are intended to be construed to include such variations except as limited by the prior art.

