---

title: Methods of running applications on mobile devices including notifications/blocking responsive to resource consumption
abstract: A wrapped application may be stored in memory of a mobile device. The wrapped application includes application code and an application wrapper, and the application code integrates primary and secondary application modules and a policy monitoring plugin module. Operations of the application code may be executed on a processor of the mobile device using system events and/or API calls. Responsive to executing operations of the primary/secondary application modules of the application code, consumption of a mobile device resource by the secondary application module may be monitored using the policy monitoring plugin module of the application. Responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold, a notification of the consumption may be transmitted through a wireless communication interface of the mobile device to a third party source of the application code using the policy monitoring plugin module of the application.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09645868&OS=09645868&RS=09645868
owner: CA, INC.
number: 09645868
owner_city: New York
owner_country: US
publication_date: 20150625
---
Inventive concepts described herein relate to applications for mobile computing devices and more particularly to monitoring of such applications.

A mobile application also referred to as an app is a type of application software designed to run on a mobile device such as a smartphone or a tablet computer. Such an application may be developed for mobile devices and distributed in an application package containing the elements used to run the application such as program code resources certificates and or a manifest.

In some cases a mobile application may be provided with application code including a primary application module defining a primary functionality ies of the application and a secondary application module defining a secondary functionality ies of the application. The primary functionality may be a functionality desired by the end user such as a game a media source a browser etc. The secondary functionality e.g. advertising may be independent of the primary functionality and may be added to provide revenue to the application developer. A mobile application developer may independently develop the primary application module to provide a service functionality that consumers may desire and the mobile application developer may add the secondary application module e.g. to provide advertisements using third party code provided for example in a Software Development Kit SDK . Use of such third party code may thus reduce a cost to develop the application.

When code from a third party is used to provide such a secondary application module however the application developer may not be fully aware of all aspects of operation of the secondary application module. When an application including such third party code is installed on a mobile device for example the third party code may cause unintended resource consumption at the mobile device and or may allow unintended access to and or snooping of information at the mobile device by the third party.

Some embodiments of the present disclosure are directed to methods of running an application on a mobile device including a memory with an operating system stored therein and a processor operating according to the operating system. A wrapped application may be stored in the memory of the mobile device wherein the wrapped application includes application code and an application wrapper providing an interface between the application code and the operating system. The application code may integrate a primary application module providing a primary functionality of the application a policy monitoring plugin module and a secondary application module providing a secondary functionality of the application. Operations of the application code including the primary and secondary application modules may be executed on the processor using system events provided from the operating system to the application code using the interface of the application wrapper and or using API calls provided from the application code to the operating system using the interface of the application wrapper. Responsive to executing operations of the primary and or secondary application modules of the application code consumption of a mobile device resource may be monitored by the secondary application module providing the secondary functionality of the application code using the policy monitoring plugin module of the application. Responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold a notification of the consumption may be transmitted through a wireless communication interface of the mobile device to a third party source of the application code using the policy monitoring plugin module of the application and the interface of the application wrapper.

Some other embodiments of the present disclosure are directed to a mobile device that includes a processor a communication interface coupled to the processor and a memory coupled to the processor and storing computer readable program code that when executed by the processor causes the processor to perform operations. More particularly the computer readable program code may include a wrapped application in the memory of the mobile device wherein the wrapped application includes application code and an application wrapper providing an interface between the application code and the operating system and wherein the application code integrates a primary application module providing a primary functionality of the application a policy monitoring plugin module and a secondary application module providing a secondary functionality of the application. The operations include executing operations of the application code including the primary and secondary application modules on the processor using system events provided from the operating system to the application code using the interface of the application wrapper and or using API calls provided from the application code to the operating system using the interface of the application wrapper monitoring consumption of a mobile device resource by the secondary application module providing the secondary functionality of the application code using the policy monitoring plugin module of the application responsive to executing operations of the primary and or secondary application modules of the application code and transmitting a notification of the consumption through a wireless communication interface of the mobile device to a third party source of the application code using the policy monitoring plugin module of the application and the interface of the application wrapper responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold.

Still other embodiments of the present disclosure are directed to methods of running an application on a mobile device including a memory with an operating system stored therein and a processor operating according to the operating system. A wrapped application may be stored in the memory of the mobile device wherein the wrapped application includes application code and an application wrapper providing an interface between the application code and the operating system. The application code may integrate a primary application module providing a primary functionality of the application a policy monitoring plugin module and a secondary application module providing a secondary functionality of the application. Operations of the application code including the primary and secondary application modules may be executed on the processor using system events provided from the operating system to the application code using the interface of the application wrapper and or using API calls provided from the application code to the operating system using the interface of the application wrapper. Responsive to executing operations of the primary and or secondary application modules of the application code consumption of a mobile device resource may be monitored by the secondary application module providing the secondary functionality of the application code using the policy monitoring plugin module of the application. Responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold access of the secondary application module to a source of information may be selectively blocked while continuing to allow access of the primary application module to the source of information.

Yet other embodiments of the present disclosure are directed to a mobile device that includes a processor a communication interface coupled to the processor and a memory coupled to the processor and storing computer readable program code that when executed by the processor causes the processor to perform operations. More particularly the computer readable program code may include a wrapped application in the memory of the mobile device wherein the wrapped application includes application code and an application wrapper providing an interface between the application code and the operating system and wherein the application code integrates a primary application module providing a primary functionality of the application a policy monitoring plugin module and a secondary application module providing a secondary functionality of the application. The operations include executing operations of the application code including the primary and secondary application modules on the processor using system events provided from the operating system to the application code using the interface of the application wrapper and or using API calls provided from the application code to the operating system using the interface of the application wrapper monitoring consumption of a mobile device resource by the secondary application module providing the secondary functionality of the application code using the policy monitoring plugin module of the application responsive to executing operations of the primary and or secondary application modules of the application code and selectively blocking access of the secondary application module to a source of information while continuing to allow access of the primary application module to the source of information responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold.

Other methods computing devices and computer program products according to embodiments of the present disclosure will be or become apparent to one with skill in the art upon review of the following drawings and detailed description. It is intended that all such methods computing devices and computer program products be included within this description be within the scope of the present inventive subject matter and be protected by the accompanying claims.

In the following detailed description numerous specific details are set forth in order to provide a thorough understanding of embodiments of the present disclosure. However it will be understood by those skilled in the art that present inventive concepts may be practiced without these specific details. In other instances well known methods procedures components and circuits have not been described in detail so as not to obscure present inventive concepts. It is intended that all embodiments disclosed herein can be implemented separately or combined in any way and or combination.

According to some embodiments of inventive concepts policy enforcement and or monitoring of secondary application modules developed using third party SDKs Software Development Kits may be integrated in mobile applications that are installed on mobile devices such as smartphones tablet computers etc. Considering that an SDK may be used to provide a secondary application module s that is tightly coupled with the primary application module in the application code and that the SDK secondary application module may have a same level of access privileges as the primary application module enabling static dynamic runtime policy enforcement and or monitoring of operations of a third party SDK secondary application module that is integrated in code of a mobile application may be useful.

Software developers may generally use paid third party SDKs to develop secondary application modules also referred to as SDK secondary application modules SDK application modules or SDK modules for various purposes referred to as secondary functionalities such as advertisements Ads security test automation etc. Because these SDK modules are tightly coupled with the application app itself and the primary application module thereof an SDK module may create security violation issues and or performance issues. Currently there is no methodology available to monitor and or report such violations performance issues created by SDK modules which aren t a part of the application s primary functionality also referred to as an original or intended functionality . Accordingly a policy control and or monitoring engine which can control manage such SDK modules may be useful to prevent reduce SDK modules from snooping into application device data and other information which is desirably available only to the primary application module and not the SDK secondary application module.

As an example a primary application module may be developed to provide media content e.g. print media content such as newspaper or magazine content music audio streaming video streaming etc. gaming and or other user desired functionality at a mobile device and an SDK secondary application module developed using a third party SDK may be added to the application code to provide advertisements at the mobile device. Because the primary and secondary application modules are integrated in the application code the SDK module for the advertisements may be able to steal the location of the mobile device i.e. the location of the user if the location information is available to the primary application module. Stated in other words the third party provider of the SDK used for the secondary application module may be able to gain access to device user information for a purpose that was not intended by the developer of the primary application module.

According to some embodiments of inventive concepts a policy monitoring plugin PMP module may be integrated into the application code along with the primary and secondary application modules to monitor and or reduce prevent such unintended access by an SDK secondary application module based on a third party SDK. This policy monitoring plugin module can be configured to act in 2 different modes 1 Pro active Monitoring mode and or 2 Re active Enforcement mode.

The PMP module may include a configuration file which takes input from the application developer on which parameters of the secondary application are to be monitored thresholds for monitoring how violations are to be reported back to the application developer and or action to be taken responsive to such violations. A configurable UI User Interface may be available for the application developer to modify the configuration file and thus the parameters before and or after the application is installed in a mobile device. Parameters of the secondary application module to be monitored may include Central Processing Unit CPU utilization e.g. measured as a percentage of secondary application module CPU usage relative to overall application CPU usage memory e.g. random access memory or RAM usage e.g. measured as a percentage of secondary application module memory usage relative to overall application memory usage battery power consumption e.g. measured as a percentage of secondary application module battery power usage relative to overall application battery power usage network traffic snooping location access control etc. The application developer may configure these parameters when the application is developed and or the application developer can configure reconfigure these parameters remotely once the application has been installed in a mobile device. For example the application developer may turn monitoring of one or more of these parameters on off before after installation on a mobile device and or the application developer may set reset a monitoring threshold for one or more of these parameters before after installation on a mobile device.

In a pro active monitoring mode the PMP module will monitor the pre configured set of parameters and send a report back to the application developer if any parameter thresholds are exceeded. Through a console type of UI user interface the application developer may easily scan through reported violations committed by the 3rd party SDK module s and take appropriate action.

In a re active enforcement mode the PMP module may both detect SDK module violations and also block unauthorized access to the application s sandbox files to location information etc. for which the SDK module does not have appropriate permissions.

The source code for the primary and secondary applications and to may be integrated to provide integrated source code for primary and secondary applications . In addition source code for a policy monitoring plugin may be developed based on the source code for the one or more secondary applications to . Source code for the policy monitoring plugin may then be integrated to provide integrated source code for primary and secondary applications and for the policy monitoring plugin and the integrated source code may be provided as an application project including various files including source code libraries resources and certificates for the primary and secondary applications and for the policy monitoring plugin.

The integrated source code also referred to as an application project may be compiled into binary executable code that is packaged along with the associated resources and manifest to provide application package including application code with primary application module PMP module and secondary module . As shown the PMP module may be functionally provided between the primary application module and the secondary SDK module s to monitor and or control block operations of the secondary module s .

The primary application and or the policy monitoring plugin may be written in a high level programming language such as Java. During compilation and packaging integrated source code may be first compiled into a binary format and then converted into a format appropriate for the operating system on which the application is to be used. For a Java application running on an Android platform for example the source code may first be compiled into class files in the Java bytecode format which are then converted into .dex files in the Dalvik bytecode. The Dalvik bytecode is the native format of the Android operating system.

The application package such as an Android Package in the .apk format may then be generated including the binary program code in .dex files along with associated resources and a manifest file. During installation onto a device the operating system of the device may read the manifest file and unpack and install the program code and associated resources from the .apk file on the device . The device may be an end user device such as a smart phone tablet computer laptop computer desktop computer appliance terminal e.g. thermostat etc.

The logic of the application wrapper may also determine whether or not the system event should be passed along to the application code . Accordingly the application wrapper may implement logic that listens for system events provided to the application code . Note that the listener function of the application code may be left in place to process system events that are passed through to the application code by the application wrapper

For example the operating system may generate an onResume event which is intercepted by the application wrapper . If the logic in the application wrapper determines that the application is not authorized to resume then the application wrapper blocks the event by not forwarding it to the listener function in the application code

The application wrapper may also intercept application programming interface API calls made by the application code to the operating system . The application code may issue an API call to request services from the operating system . For example an API call may be used to turn on a camera to read data from storage to display an image on a screen or to invoke any other functionality provided by the operating system .

The application wrapper may pass the API call along to the operating system . Before the API call is passed to the operating system the logic of the application wrapper determines if any action needs to be taken in response to the API call and may also determine whether or not to pass the API call along to the operating system .

In general the application wrapper includes executable code that monitors and or controls behavior of the application code by intercepting one or more API calls by the application code executes monitoring and or control code in response to the API call and thereafter returns control to the application code and or passes the API call to the operating system for processing.

For example in case the application wrapper is designed to limit access to a feature or resource on the device during a designated time frame the application wrapper may intercept an API call from the application code that invokes the feature and if the API call is made outside the designated time frame generate and return an error code to the application code instead of passing the API call on to the operating system .

As shown in the application wrapper intervenes between the operating system and the application code and filters and or operates on system events and API calls passing between the operating system and the application code . When a system event is generated and sent to the application code by the operating system a first listener function in the application wrapper intercepts the system event and passes it to the wrapper logic . The wrapper logic determines how to respond to the system event and whether or not to pass the system event along to the application code

A second listener function in the application wrapper listens for API calls from the application code and passes the API calls to the wrapper logic . The wrapper logic determines how to respond to the API call whether to modify the API call and whether or not to pass the API call or the modified API call along to the operating system .

For example assume that the application code issues a system log API call to log an event that occurred during operation of the application code to a system log. The wrapper logic may determine that the event should be logged to a separate event log and may modify the API call to log the event to the separate event log rather than to the system log.

It will be appreciated that many different types of wrapping instrumentation tools are offered by various vendors. For example application monitoring tools are available such as Flurry CA Mobile Application Analytics and Tealeaf. Testing tools such as IBM Rational Test Workbench Mobile MonkeyTalk Jamo SeeTest and Squish are also available while management applications are also available such as CA Mobile Application Management AirWatch Mobilelron and Fibrelink. In some cases it is desirable to apply two different wrapping applications to a single application program so that for example the application can be both monitored and managed simultaneously.

Application wrapper may thus provide an interface between application code including primary application module PMP module and secondary application module controlling interactions between all modules of the application code and operating system . Application wrapper however may not be able to distinguish between system events and or API calls that relate to primary application module and system events and or API calls that relate to secondary application module . PMP module is thus integrated in application code to selectively monitor control and or block operations of secondary application module relative to operations of primary application module . PMP module is thus shown between primary application module and secondary application module to schematically illustrate a separation of primary and secondary application modules. It will be understood however that PMP module may be shown in other configurations. PMP module may be provided as an element of application wrapper and or portions of PMP module may be split between application code and application wrapper

As further shown in operating system and wrapped application including application wrapper and application code with primary application module PMP module and secondary application module may be installed stored in memory . Processor can thus perform operations of operating system and application code responsive to user input through input elements of input output interface to provide audio image output through output elements of input output interface .

According to embodiments illustrated in the application may be run on mobile device including memory with operating system stored therein as discussed above with respect to and processor may operate in accordance with operating system . At block processor may store wrapped application in memory with wrapped application including application code and an application wrapper providing an interface between application code and operating system . Moreover application code may integrate primary application module providing a primary functionality of the application policy monitoring plugin module and secondary application module providing a secondary functionality of the application. Primary application module for example may include code to provide media content e.g. print media content such as newspaper or magazine content music audio streaming video streaming etc. gaming and or other user desired functionality at a mobile device and secondary application module developed using a third party SDK may include code to provide advertisements at the mobile device.

At block processor may initiate operations of the application responsive to user input received through a user input device of input output interface . For example processor may initiate operations of the application responsive to user selection of an icon on a touch sensitive display of input output interface .

Responsive to initiating operations of the application at block processor may execute operations of application code including primary and secondary application modules and using system events provided from operating system to application code using an interface of application wrapper and or using API calls provided from application code to operating system using the interface of application wrapper

According to some embodiments secondary application module may be configured to provide an advertisement s on a display of input output interface responsive to a user initiating the application and before operations of primary application module are performed in accordance with primary application module . In addition or in an alternative secondary application module may be configured to provide advertisements on the display of input output interface at periodic and or random intervals while operations of primary application module are being performed. As used herein the term interrupt may include initially delaying operation of primary application module and interrupting operation of primary application module after initiating operations of primary application module and then resuming operations of primary application module . Operations of primary application module e.g. providing media content and or gaming may thus be delayed interrupted by operations of second application module e.g. to provide advertisements .

Responsive to executing operations of the primary and or secondary application modules of application code processor may monitor consumption of a mobile device resource by secondary application module providing the secondary functionality of application code using policy monitoring plugin PMP module of the application at block . For example monitoring consumption of a mobile device resource may include monitoring consumption of at least one of central processing unit CPU utilization memory utilization battery consumption network traffic snooping and or location access control.

Monitoring consumption at block may include monitoring consumption of a mobile device resource by secondary application module providing the secondary functionality relative to consumption of the mobile device resource by application code including consumption of the mobile device resource by primary application module providing the primary functionality. For example monitoring consumption may include monitoring consumption by secondary application module as a ratio percentage of consumption by all modules of application code and or as a ratio percentage of consumption by primary application module. According to some other embodiments monitoring consumption may include monitoring consumption by secondary application module relative to threshold that is independent of consumption by other modules of application code

Responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold at block processor may transmit a notification of the consumption through wireless communication interface of mobile device to a third party source of application code at block using policy monitoring plugin module of the application and the interface of application wrapper . According to some embodiments transmitting the notification at block for example may include transmitting the notification responsive to the consumption of the mobile device resource by the secondary application module exceeding a threshold percentage also referred to as a ratio of a total consumption of the mobile device resource by application code including the primary and secondary application modules. According to some other embodiments the notification may be transmitted responsive to the consumption of the mobile device resource by secondary application module exceeding a percentage also referred to as a ration of consumption by all modules of application code . According to still other embodiments the notification may be transmitted responsive to the consumption of the mobile device resource by secondary application module exceeding a percentage also referred to as a ratio of consumption by primary application module . According to yet other embodiments the notification may be transmitted responsive to the consumption of the mobile device resource by secondary application module exceeding a threshold that is independent of consumption by other modules of application code

According to embodiments illustrated in operations of blocks and may be substantially the same as discussed above with respect to . Responsive to the consumption of the mobile device resource by the secondary application module exceeding the threshold at block however processor may selectively block access of secondary application module to a source of information at block while continuing to allow access of primary application module to the source of information. Determinations of such thresholds may be the same as discussed above with respect to block of .

According to some embodiments of processor may selectively block access of secondary application module to mobile device location information e.g. Global Positioning System or GPS information at block while continuing to allow access of primary application module to the mobile device location information. According to some other embodiments processor may selectively block access of secondary application module to a sandbox file at block while continuing to allow access of primary application module to the sandbox file.

According to yet other embodiments processor may selectively block access of secondary application module to initiate application program interface API calls at block while continuing to allow access of primary application module to initiate application program interface API calls that are provided to operating system using the interface of application wrapper . For example processor may selectively block access of secondary application module to initiate API calls at block to a camera of interface a photo library stored in memory a microphone of interface an external storage device interface coupled to bus phone interface contacts stored in memory location services e.g. GPS services provided by a GPS receiver network e.g. Internet access and or encryption decryption services. According to still other embodiments processor may selectively block access of secondary application module from receiving system events from operating system at block while continuing to allow primary application module to receive system events from operating system using the interface of application wrapper . For example processor may selectively block access of secondary application module to receive system events at block from a camera of interface a photo library stored in memory a microphone of interface an external storage device interface coupled to bus phone interface contacts stored in memory location services e.g. GPS services provided by a GPS receiver network e.g. Internet access and or encryption decryption services.

According to embodiments illustrated in operations of blocks and may be substantially the same as discussed above with respect to . In however operations of block of of may both be performed responsive to resource consumption by secondary application module exceeding the threshold of .

According to some embodiments primary application module may provide a primary functionality of gaming and or media content access and secondary application module may provide a secondary functionality of advertising. Accordingly executing operations of application code at block may include using primary application module to provide gaming and or media content access at mobile device through a display and or an audio output of input output interface based on data received over wireless communication interface and using secondary application module to delay interrupt the gaming and or media content access of primary application module to provide an advertisement through the display and or audio output of input output interface based on data received over wireless communication interface .

According to some embodiments of a configuration file may be provided in mobile device memory for PMP module to define parameters for monitoring such as mobile device resources to be monitored thresholds for notifications blocking and or access to be blocked. Moreover the configuration file may be revised updated by a developer of the application for example responsive to notifications of block .

For example monitoring consumption at block may include providing a first list of at least one mobile device resource in the configuration file and monitoring consumption of a mobile device resource at block based on the first list in the configuration file e.g. during initial iterations through block . After initial iterations through block a second list of at least one mobile device resource may be provided in the configuration file based on information received over wireless interface after monitoring based on the first list and a mobile device resource may be monitored based on the second list in the configuration file after providing the second list. More particularly the first and second lists may be different.

Such a configuration file may also be used to define modify the threshold of blocks and . For example monitoring deciding of blocks may include initially monitoring based on a first threshold of the configuration file and transmitting the notification and or blocking access of blocks may initially include transmitting blocking based on the consumption exceeding the first threshold. After initial iterations through blocks and or a second threshold may be provided based on information received over wireless communication interface . Responsive to the consumption of the mobile device resource by secondary application module exceeding the second threshold transmitting a second notification of consumption through wireless communication interface of mobile device to a third party source of application code using policy monitoring plugin module of the application and the interface of application wrapper

If the first list of the configuration file identifies a plurality of mobile device resources to be monitored at block the configuration file may identify a respective threshold for each resource monitoring at block may include monitoring each resource of the first list and deciding at block may include deciding based on a comparison of consumption of each resource with the respective threshold. Moreover a different notification may be provided at block for each resource being monitored e.g. the notification may identify the particular resource that triggered the notification and or access to a different source s may be blocked at block for each resource being monitored e.g. the blocking may be different depending on the resource that triggered the blocking .

In addition or in an alternative the configuration file may be used to define modify the source of information that is to be blocked at block . For example the configuration file may initially provide a first list of at least one source of information and initial iterations through block may include selectively blocking access based on the first list of at least one source of information. After selectively blocking based on the first list a second list of at least one source of information may be provided in the configuration file based on information received over wireless interface after blocking access based on the first list with the first and second lists being different. After providing the second list in the configuration file access of secondary application module to a source of information may be selectively blocked based on the second list while continuing to allow access of primary application module to the source of information.

Although some operations are described herein as being executed by a processor the operations are not necessarily executed by the same processor. In other words at least one processor may execute the operations described herein and illustrated by the accompanying drawings.

In the above description of various embodiments of the present disclosure aspects of the present disclosure may be illustrated and described herein in any of a number of patentable classes or contexts including any new and useful process machine manufacture or composition of matter or any new and useful improvement thereof. Accordingly aspects of the present disclosure may be implemented in entirely hardware entirely software including firmware resident software micro code etc. or combining software and hardware implementation that may all generally be referred to herein as a circuit module component or system. Furthermore aspects of the present disclosure may take the form of a computer program product comprising one or more computer readable media having computer readable program code embodied thereon.

Any combination of one or more computer readable media may be used. The computer readable media may be a computer readable signal medium or a computer readable storage medium. A computer readable storage medium may be for example but not limited to an electronic magnetic optical electromagnetic or semiconductor system apparatus or device or any suitable combination of the foregoing. More specific examples a non exhaustive list of the computer readable storage medium would include the following a portable computer diskette a hard disk a random access memory RAM a read only memory ROM an erasable programmable read only memory EPROM or Flash memory an appropriate optical fiber with a repeater a portable compact disc read only memory CD ROM an optical storage device a magnetic storage device or any suitable combination of the foregoing. In the context of this document a computer readable storage medium may be any tangible medium that can contain or store a program for use by or in connection with an instruction execution system apparatus or device.

A computer readable signal medium may include a propagated data signal with computer readable program code embodied therein for example in baseband or as part of a carrier wave. Such a propagated signal may take any of a variety of forms including but not limited to electro magnetic optical or any suitable combination thereof. A computer readable signal medium may be any computer readable medium that is not a computer readable storage medium and that can communicate propagate or transport a program for use by or in connection with an instruction execution system apparatus or device. Program code embodied on a computer readable signal medium may be transmitted using any appropriate medium including but not limited to wireless wireline optical fiber cable RF etc. or any suitable combination of the foregoing.

Computer program code for carrying out operations for aspects of the present disclosure may be written in any combination of one or more programming languages including an object oriented programming language such as Java Scala Smalltalk Eiffel JADE Emerald C C VB.NET Python or the like conventional procedural programming languages such as the C programming language Visual Basic Fortran 2003 Perl COBOL 2002 PHP ABAP dynamic programming languages such as Python Ruby and Groovy or other programming languages. The program code may execute entirely on the user s computer partly on the user s computer as a stand alone software package partly on the user s computer and partly on a remote computer or entirely on the remote computer or server. In the latter scenario the remote computer may be connected to the user s computer through any type of network including a local area network LAN or a wide area network WAN or the connection may be made to an external computer for example through the Internet using an Internet Service Provider or in a cloud computing environment or offered as a service such as a Software as a Service SaaS .

Aspects of the present disclosure are described herein with reference to flowchart illustrations and or block diagrams of methods apparatus systems and computer program products according to embodiments of the disclosure. It will be understood that each block of the flowchart illustrations and or block diagrams and combinations of blocks in the flowchart illustrations and or block diagrams can be implemented by computer program instructions. These computer program instructions may be provided to a processor of a general purpose computer special purpose computer or other programmable data processing apparatus to produce a machine such that the instructions which execute via the processor of the computer or other programmable instruction execution apparatus create a mechanism for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

These computer program instructions may also be stored in a computer readable medium that when executed can direct a computer other programmable data processing apparatus or other devices to function in a particular manner such that the instructions when stored in the computer readable medium produce an article of manufacture including instructions which when executed cause a computer to implement the function act specified in the flowchart and or block diagram block or blocks. The computer program instructions may also be loaded onto a computer other programmable instruction execution apparatus or other devices to cause a series of operational steps to be performed on the computer other programmable apparatuses or other devices to produce a computer implemented process such that the instructions which execute on the computer or other programmable apparatus provide processes for implementing the functions acts specified in the flowchart and or block diagram block or blocks.

It is to be understood that the terminology used herein is for the purpose of describing particular embodiments only and is not intended to be limiting of the inventive concepts. Unless otherwise defined all terms including technical and scientific terms used herein have the same meaning as commonly understood by one of ordinary skill in the art to which this disclosure belongs. It will be further understood that terms such as those defined in commonly used dictionaries should be interpreted as having a meaning that is consistent with their meaning in the context of this specification and the relevant art and will not be interpreted in an idealized or overly formal sense unless expressly so defined herein.

The flowchart and block diagrams in the figures illustrate the architecture functionality and operation of possible implementations of systems methods and computer program products according to various aspects of the present disclosure. In this regard each block in the flowchart or block diagrams may represent a module segment or portion of code which comprises one or more executable instructions for implementing the specified logical function s . It should also be noted that in some alternative implementations the functions noted in the block may occur out of the order noted in the figures. For example two blocks shown in succession may in fact be executed substantially concurrently or the blocks may sometimes be executed in the reverse order depending upon the functionality involved. It will also be noted that each block of the block diagrams and or flowchart illustration and combinations of blocks in the block diagrams and or flowchart illustration can be implemented by special purpose hardware based systems that perform the specified functions or acts or combinations of special purpose hardware and computer instructions.

The terminology used herein is for the purpose of describing particular aspects only and is not intended to be limiting of the disclosure. As used herein the singular forms a an and the are intended to include the plural forms as well unless the context clearly indicates otherwise. It will be further understood that the terms comprises and or comprising when used in this specification specify the presence of stated features integers steps operations elements and or components but do not preclude the presence or addition of one or more other features integers steps operations elements components and or groups thereof. As used herein the term and or includes any and all combinations of one or more of the associated listed items. Like reference numbers signify like elements throughout the description of the figures.

The corresponding structures materials acts and equivalents of any means or step plus function elements in the claims below are intended to include any disclosed structure material or act for performing the function in combination with other claimed elements as specifically claimed. The description of the present disclosure has been presented for purposes of illustration and description but is not intended to be exhaustive or limited to the disclosure in the form disclosed. Many modifications and variations will be apparent to those of ordinary skill in the art without departing from the scope and spirit of the disclosure. The aspects of the disclosure herein were chosen and described in order to best explain the principles of the disclosure and the practical application and to enable others of ordinary skill in the art to understand the disclosure with various modifications as are suited to the particular use contemplated.

