---

title: Information processing apparatus and method
abstract: An information processing apparatus includes a free page storage unit and a page allocating unit. The free page storage unit divides a memory region in a memory into pages of a plurality of different page sizes and manages the divided pages, and stores management information about an initialization state corresponding to an unused memory region in the memory. The page allocating unit selects a free page of a page size according to a requested region size or a requested page size from the free page storage unit when an allocation of the unused memory region is requested, and performs an initializing process on a memory region on which the initializing process has not been performed in a memory region corresponding to the free page using management information about the selected free page.
url: http://patft.uspto.gov/netacgi/nph-Parser?Sect1=PTO2&Sect2=HITOFF&p=1&u=%2Fnetahtml%2FPTO%2Fsearch-adv.htm&r=1&f=G&l=50&d=PALL&S1=09489295&OS=09489295&RS=09489295
owner: FUJITSU LIMITED
number: 09489295
owner_city: Kawasaki
owner_country: JP
publication_date: 20150106
---
This application is based upon and claims the benefit of priority of the prior Japanese Patent Application No. 2014 017240 filed on Jan. 31 2014 the entire contents of which are incorporated herein by reference.

The present invention is related to an information processing apparatus a control method executed by an information processing apparatus and a control program for an information processing apparatus.

A processor which executes an Operating System OS implemented for a computer re allocates a memory region freed up after the execution of a prior process or task as a memory region of memory for use in executing a new process or task which will operate with the OS. Before executing the re allocation of such a memory region the memory region is reinitialized to prevent the leakage of the information about the prior process or task left in the memory region to be re allocated. However there may be a case in which the initialization is not desired in allocating memory in the kernel of the OS or a case in which a freed up memory region is not used in executing a new process in a specified valid duration such as a period up to the turning off of a power supply of a computer even though the freed up memory region has been initialized. Then to control undesired execution of initialization the reinitialization of a memory region may be performed when the re allocation of a memory region is requested.

In the OS operated by a processor the memory region in memory is managed by dividing it into units of pages that is into size region size units of specified consecutive memory regions. The size of a page managed by the OS may be 4 Kbytes or 8 Kbytes. Recently depending on the type of OS or process or task operated under control of the OS a page of which size is larger than a normal size of 4 Kbytes or 8 Kbytes for example a page in units of Mbytes has been used. In the following explanation a page of a normal size such as 4 Kbytes or 8 Kbytes is referred to as a normal page for convenience and a page of which size is larger than the normal size is referred to as a large page for convenience. When a memory region in memory is managed using a large page the number of pages requested for using memory of the same size is smaller than in the case where a normal page is used thereby reducing the page management costs. Therefore when a large page is used in managing the memory region within the memory an occurrence of a malfunction such as an erroneous Translation Lookaside Buffer TLB address conversion buffer may be reduced and the performance of the application may be improved.

However when a large page of a single size is used in managing the memory region in memory the effectively available amount of memory may be decreased. For example if a program of 64 Kbytes is executed in the case where a memory region within the memory is managed using a large page of 4 Mbytes then it becomes necessary to allocate a memory region of 4 Mbytes for one page to the execution of the program even though the size of the program is only 64 Kbytes.

Therefore memory may be more effectively used if pages of different sizes are available in accordance with use. A method for efficiently managing memory blocks of different of sizes may be a buddy system which is used in a Linux kernel and elsewhere. In the buddy system a plurality of consecutive pages are combined with pages of larger sizes and a large page is divided into smaller pages thereby variably controlling a page size. By the execution of the combination and the division of pages a memory region of an appropriate region size is allocated in accordance with the executed process or task.

The following page allocation system is known. Relating to the memory managed in a page unit an unsecure page for which it is necessary to prevent the leakage of data is detected when a page acquisition request is issued from an application when a page is freed up from the application or when data is set for a page from the application which has secured a page. Then only the detected unsecure page is initialized.

In addition the following memory allocation system is known. A system load monitor mechanism monitors the load state of a computer system and when it determines that the system load is low it activates a page zero clear mechanism. The page zero clear mechanism retrieves from a free page pool a page to be allocated at the next request zero clears the contents and transfers the page to a zero clear page pool. When the page zero clear mechanism determines that a zero cleared page is requested it returns to a requester the page retrieved from the zero cleared page pool prepared by the page zero clear mechanism.

Furthermore the following microprocessor system is known. A microprocessor specifies the leading address and the size to be initialized in the memory. A DMA controller initializes the memory by transferring the initialization data to all addresses to be initialized in the memory having the leading address and the size specified. When the memory is initialized by the DMA transfer the bit width of the initialization data output from the initialization data register is expanded in the bit width expansion circuit and transferred to the memory through a data bus.

According to an aspect of the embodiments an information processing apparatus includes a free page storage unit and a page allocating unit. The free page storage unit divides a memory region in a memory into pages of a plurality of different page sizes and manages the divided pages and stores management information about an initialization state corresponding to an unused memory region in the memory. The page allocating unit selects a free page of a page size according to a requested region size or a requested page size from the free page storage unit when an allocation of the unused memory region is requested and performs an initializing process on a memory region on which the initializing process has not been performed in a memory region corresponding to the free page using management information about the selected free page.

The object and advantages of the invention will be realized and attained by means of the elements and combinations particularly pointed out in the claims.

It is to be understood that both the foregoing general description and the following detailed description are exemplary and explanatory and are not restrictive of the invention.

The mode for embodying the present invention is described below with reference to the attached drawings.

The processing time desired for newly allocating a memory region in memory to a process or a task may depend on the number of pages corresponding to the region size of the memory requested to execute the process or the task and the region size of the memory to be initialized for the allocation. In the case where the memory region of the memory is managed using a large page the number of pages desired for the allocation may decrease more than in the case where the management is performed using a normal page. On the other hand the region size of the memory to be initialized to allocate the memory region corresponding to the requested region size is the same as in the case where a normal page is used. As a result in the case where the memory region within the memory is managed using a large page the time period desired for the process of initializing the memory region within the memory may be a predominant time period in the processing time desired for newly allocating a memory region corresponding to 1 page to a process or a task.

Furthermore if the initializing process on a memory region is performed on each page to be allocated when the memory region is allocated then the time requested in one memory allocating process using a large page will be longer than the time in the case where a normal page is used.

For the reason described above when a memory region in memory is managed using a large page it may undesirably affect the performance or the behavior of the entire parallel computer system including a plurality of calculation nodes depending on the length of the time desired for a memory allocating process including an initializing process on the memory region.

For example the time taken for the initializing process performed in allocating memory in a calculation node may be a length of time equal to or greater than the communication time between calculation nodes in a computer system. In this case if a plurality of calculation nodes simultaneously perform communications via an Application Programming Interface API such as a Message Passing Interface MPI etc. a delay due to a wait for initialization of memory occurs in the relaying operation between a portion of the calculation nodes. The influence of the occurrence of the delay reaches all calculation nodes thereby causing a delay in the entire process.

Furthermore in the process including an interprocess communication such as the above mentioned communication between the calculation nodes the time out period up to the reply of the process of a communication partner may be set with the worst case taken into account. Then the time out period may be requested for setting to be sufficiently long with the above mentioned initialization wait time of memory taken into account.

As described below in detail an information processing apparatus according to the embodiment invention manages a memory region in memory using pages of a plurality of different page sizes. For example the information processing apparatus according to the embodiment manages the initialization state zero clear state of the memory region which corresponds to each page within the memory using management information of each page. The information processing apparatus according to the embodiment performs the initializing process on the memory region which corresponds to each page within the memory using management information of each page. By the above mentioned management of the initializing state and the execution of the initializing process the time desired for performing the initializing process on the memory region when a memory region within the memory is allocated is reduced and the allocating process of a memory region in accordance with the requested region size is performed at a high speed. In the following explanation the term zero clear refers to initialization.

As illustrated in a computer system includes application execution computers through and a job management computer . The computer system is connected to a user terminal apparatus through the job management computer . The computer system executes an application program a source code an execution binary etc. specified by an application program processing unit A of the user terminal apparatus . In the following explanation unless otherwise specified the term application program refers to for convenience an application program a source code an execution binary etc. executed by the computer system at an instruction from the user terminal apparatus .

The job management computer includes a job scheduler processing unit A. The job scheduler processing unit A manages a schedule for allowing any of the application execution computers through to perform a job of the application program specified by the user terminal apparatus .

The application execution computers through execute respective jobs of the application program specified by the job management computer . The application execution computers through are calculation nodes of the computer system and are examples of an information processing apparatus according to the embodiment. In three application execution computers through are illustrated but the number of application execution computers included in the computer system may be optional. In the following explanation unless otherwise specified the application execution computers through are described as an application execution computer .

The application execution computer includes a job management unit process execution units and and an Operating System OS processing unit . In two process execution units and are illustrated but the number of process execution units included in the application execution computer may be optional. In the following explanation unless otherwise specified the process execution units and are described as a process execution unit .

The job management unit is connected to the job scheduler processing unit A the process execution unit and the OS processing unit . In cooperation with the job scheduler processing unit A the job management unit manages the entire job which is executed in the application execution computer and which includes scheduling for executing a job of an application program monitoring of the execution state of a job reporting the execution state of a job etc. The job scheduler processing unit A and the job management unit configure a job scheduling system of the computer system .

The process execution unit performs the process of an application program specified by the job management unit using a memory region of the memory allocated by the OS processing unit . The process execution unit performs the process of the application program specified by the job management unit according to the schedule specified by the OS processing unit .

The OS processing unit executes the OS implemented in the application execution computer . The OS processing unit includes a process scheduler processing unit a page allocating unit a zero clearing unit and a free page storage unit .

The process scheduler processing unit is connected to the job management unit the process execution unit and the zero clearing unit . In cooperation with the job management unit the process scheduler processing unit manages the schedule of the execution of the process of the application program by the process execution unit and the execution of the zero clearing process on a free page by the zero clearing unit .

The page allocating unit is connected to the process execution unit . The page allocating unit receives a request to allocate a memory region within the memory from the process execution unit . The request to allocate the memory region may be configured to request a region size of memory desired for executing the process or to request a page size desired for executing the process. The page allocating unit searches the free page storage unit for a free page of the page size corresponding to the region size of the memory requested from the process execution unit or a free page corresponding to the page size requested from the process execution unit . The page allocating unit determines whether or not the searched for free page has been zero cleared. When the searched for free page is not a zero cleared page as a result of the determination the page allocating unit zero clears the memory region corresponding to the searched for free page. The page allocating unit passes the zero cleared memory region to the process execution unit .

The zero clearing unit is connected to the process scheduler processing unit and the free page storage unit . The zero clearing unit acquires a free page in the free page storage unit according to the schedule by the process scheduler processing unit . The zero clearing unit determines whether or not the memory region which corresponds to the acquired free page within the memory has been zero cleared. When the memory region corresponding to the acquired free page is a memory region which has not been zero cleared as a result of the determination then the zero clearing unit zero clears the memory region which has not been zero cleared.

The free page storage unit manages the free page corresponding to the memory region which is not being used in executing the process of the application program by the process execution unit etc. within the memory. The free page storage unit includes a physical memory a page structure group and a free page management list .

The physical memory is a physical memory managed by dividing it into pages of a plurality of different page sizes and is an entity of pages. Unless otherwise described the term memory is a synonym for the term physical memory .

The page structure group is a set of page structures for management of the information relating to a page. A page structure is set in a page unit of the smallest page size in the pages of plural sizes to be managed that is in a normal page unit. A normal page is a page in a size of for example 4 Kbytes or 8 Kbytes. Each page structure set in a normal page unit corresponds to the memory region of a specified address within the memory.

In each page structure information about a corresponding normal page or a large page including one corresponding normal page. That is the information about a normal page is stored in a corresponding page structure and the information about a large page is stored in at least one of corresponding page structures for each of normal pages obtained by dividing a large page. is a schematic view of an exemplary page structure according to an embodiment.

As illustrated in a page structure A according to the embodiment includes a zero clear state bit A a zero clear state lock bit A a zero clearing process control bit A and a free page bit A. The page structure A includes a pointer A to the page structure on the next free page and a pointer A to the page structure on the preceding free page. The page structure A includes a zero clear state size A.

The zero clear state bit A is a bit indicating whether or not the page corresponding to the page structure A a corresponding normal page or a large page including one corresponding normal page is a zero cleared page. The zero clear state lock bit A is a bit on which a flag is set for the zero clearing unit to exclusively perform the zero clearing process on the page corresponding to the page structure A. The zero clearing process control bit A is a bit for controlling whether or not the zero clearing process by the zero clearing unit on the page corresponding to the page structure A is allowed. The free page bit A is a bit indicating whether or not the page corresponding to the page structure A is a free page. Each of the flags A through A is for example one bit and the entire flag may be not more than 64 bits.

The pointer A to the page structure on the next free page and the pointer A to the page structure on the preceding free page are pointers to the page structure A of the adjacent free page connected to the page structure A in the free page management list . The pointer AS to the page structure on the next free page and the pointer A to the page structure on the preceding free page may be for example 64 bits.

The zero clear state size A is a bit indicating the length of the consecutive zero clear state within the memory region corresponding to the page. That is the zero clear state size A is a bit indicating the size of the consecutive zero cleared region of the page a corresponding normal page or a large page including one corresponding normal page corresponding to the page structure A. The zero clear state size A is expressed by a power of two of the page size of a normal page for example 8 bits.

In the information processing apparatus according to the embodiment the allocating process of the memory region performed by the page allocating unit and the zero clearing process of the memory region performed by the zero clearing unit are controlled using the information in the page structure A. For example using the zero clear state lock bit A and the zero clearing process control bit A control is performed so that the processes by the page allocating unit and the zero clearing unit are not to be simultaneously performed on the same free page a memory region corresponding to the same free page . In the memory region corresponding to a free page within the memory a memory region on which a zero clearing process has not been performed that is a memory region on which the zero clearing process is to be performed is identified using the zero clear state bit A a free page bit A and a zero clear state size A.

The free page management list is a list for management of a free page corresponding to an unused memory region which is not used in executing a process of an application program by the process execution unit . The page allocating unit and the zero clearing unit search for a free page and a memory region corresponding to the free page with reference to the free page management list . is an example of a free page management list according to an embodiment.

As illustrated in an entry indicating a page size such as 8 Kbytes 16 Kbytes 32 Kbytes 64 Kbytes etc. is added to the first row of the free page management list and each of free pages having different page sizes is managed in association with an entry of a corresponding page size. In the example illustrated in the size of a normal page is 8 Kbytes and the page sizes of large pages are 16 Kbytes 32 Kbytes and 64 Kbytes. As indicated by the arrow illustrated in free pages for each entry are combined with each other by the above mentioned pointers A and A of the corresponding page management structures A. Note that is only an example of the free page management list according to the embodiment. That is the size of a normal page may be any page size other than 8 Kbytes. Furthermore the page size of a large page may be any page size other than 16 Kbytes 32 Kbytes and 64 Kbytes. The type of large page having different page sizes is not limited to these three types but may be any type.

As illustrated in a computer system includes application execution computers through a job management computer and an inter node connection network . The computer system is connected to a user terminal apparatus such as a computer via the job management computer . Although illustrates five application execution computers through there maybe any number of application execution computers included in the computer system . In the following explanation when the application execution computers through are not specifically designated an application execution computer is described.

The job management computer is an information processing apparatus such as a computer and corresponds to the job management computer . The job scheduler processing unit A in the job management computer is for example a Central Processing Unit CPU in the job management computer .

The application execution computer is an information processing apparatus such as a computer and corresponds to the application execution computer which is an example of an information processing apparatus according to the embodiment. Each application execution computer is a calculation node of the computer system .

As illustrated in the application execution computer includes Central Processing Unit CPU cores through level 1 L1 caches through a level 2 L2 cache a main memory a storage a storage medium drive an interconnect and a bus . illustrates four CPU cores through and four level 1 caches through corresponding to the four CPU cores through . However there may be any number of CPU cores included in the application execution computer and the level 1 caches corresponding to the CPU cores. In the following explanation when the CPU cores through are not specifically designated the CPU core is described. When the level 1 caches through are not specifically designated the level 1 cache is described.

The CPU core is a core of a processor and a logical circuit which performs an arithmetic process. Each CPU core is connected to the corresponding level 1 cache which may be accessed at a high speed and is connected to the level 2 cache shared by a plurality of CPU cores . The CPU core the level 1 cache and the level 2 cache configure a multiprocessor. The CPU core the level 1 cache and the level 2 cache correspond to the job management unit the process execution unit the process scheduler processing unit the page allocating unit and the zero clearing unit .

The main memory temporarily stores a program being executed and the data being processed and is directly accessed by the CPU core . The main memory is for example Random Access Memory RAM . The main memory corresponds to the free page storage unit .

The storage is for example a hard disk drive HDD . The storage stores a program such as an OS etc. and data.

The storage medium drive reads data stored in a recording medium and or writes data processed in the application execution computer into a recording medium. The recording medium may be for example Compact Disk Read Only Memory CD ROM a Digital Versatile Disk DVD Universal Serial Bus USB memory flash memory etc.

The interconnect is a communication device connected to the other node and the job management computer via the inter node connection network .

The bus interconnects a multiprocessor including the CPU core the level 1 cache and the level 2 cache the main memory the storage the storage medium drive and the interconnect . The bus includes a memory bus which connects the multiprocessor including the CPU core the level 1 cache and the level 2 cache to the main memory .

The inter node connection network is a cable and a switch which connects the job management computer and the job management computer and interconnects the application execution computers .

First the zero clearing process performed by the zero clearing unit is described. The zero clearing process refers to an initializing process on the memory region corresponding to a free page within the memory. is an exemplary flow diagram of a zero clearing process performed by a zero clearing unit.

When the zero clearing unit starts the zero clearing process in accordance with an instruction from the process scheduler processing unit step S the zero clearing unit refers to the free page management list so as to search for a free page not yet zero cleared step S . In particular with reference to the zero clear state bit A of the page structure A corresponding to the free page in the free page management list the zero clearing unit searches for a free page not zero cleared.

When no free page not zero cleared is found NO in step S as a result of the search the zero clearing unit terminates the zero clearing process series. The zero clearing unit waits for a new instruction to perform the zero clearing process from the process scheduler processing unit step S .

When a free page not zero cleared is found YES in step S as a result of the search the zero clearing unit selects one free page from among the found free pages. As described above with reference to the free page management list is used to manage a free page for each different page size. Therefore the free page selected by the zero clearing unit may be a normal page a large page obtained by combining normal pages or a large page which is obtained by further combining large pages and of which a page size is larger than the large pages to be combined.

The zero clearing unit attempts to lock the entire selected free page step S . In particular the zero clearing unit attempts to set a lock flag indicating the exclusive execution of the zero clearing process on the zero clear state lock bit A of the page structure A corresponding to the selected free page. By executing the process in step S it may be suppressed to make the same free page be processed by the zero clearing unit and the page allocating unit .

When the lock on the entire selected free page fails NO in step S the zero clearing unit returns to the process in step S and searches again for a free page which has not been zero cleared.

When the lock on the entire selected free page succeeds YES in step S the zero clearing unit determines whether or not there is a request in waiting for an allocation of the selected free page step S . In particular the zero clearing unit determines whether or not the page allocating unit defines the selected free page as a page to be allocated with reference to the zero clearing process control bit A of the page structure A of the page structure A corresponding to the selected free page. By periodically confirming the flag of the zero clearing process control bit A in the process in step S control is performed to prioritize the allocating process by the page allocating unit over the zero clearing process by the zero clearing unit thereby preventing the process execution of the application program by the process execution unit which has requested the page allocating unit to allocate a memory from stagnating due to the process by the zero clearing unit .

When there is a request in waiting for an allocation of the selected free page as a result of the determination that is When a zero clearing process suspension flag is set on the zero clearing process control bit A NO in step S then the zero clearing unit releases the lock on the selected free page step S . Then the zero clearing unit returns to the process in step S and searches again for a free page which has not been zero cleared.

When there is no request in waiting for an allocation of the selected free page as a result of the determination that is When a zero clearing process suspension flag is not set on the zero clearing process control bit A YES in step S then the zero clearing unit performs the process in step S. That is the zero clearing unit zero clears the memory region within the physical memory corresponding to one normal page which has not been zero cleared in the selected page step S .

The zero clearing unit reflects the newly zero cleared state on the page structure A corresponding to the selected page step S . In particular the zero clearing unit sets a flag indicating the zero cleared state on the zero clear state bit A of the corresponding page structure A. The zero clearing unit adds a newly zero cleared region size to the zero clear state size A of the corresponding page structure A.

For example when the selected free page is a large page the zero clearing unit sets a flag indicating the zero cleared state for the page structure A corresponding to the one leading normal page within the selected free page and adds a zero cleared region size. Furthermore the zero clearing unit may set a flag indicating the zero cleared state for the page structure A corresponding to the one newly zero cleared normal page and add a zero cleared region size.

When the zero clearing process on a memory region corresponding to one normal page within the physical memory has been completed the zero clearing unit determines whether or not the zero clearing process on the entire selected page has been completed step S . In particular the zero clearing unit determines whether or not the zero clear state size A of the page structure A corresponding to one leading normal page within the selected free page matches the page size of the selected free page.

When it is determined that the zero clearing process on the entire selected page has not been completed NO in step S the zero clearing unit returns to the process in step S and determines whether or not there is a request in waiting for an allocation of the selected free page.

When the zero clearing process on the entire selected page has been completed YES in step S the zero clearing unit releases the lock on the selected free page step S . In particular the zero clearing unit sets a lock release flag indicating the stopping of the exclusive execution of the zero clearing process by the zero clearing unit on the zero clear state lock bit A on which a lock flag is set in the process in step S. Then the zero clearing unit returns to the process in step S and searches again for a free page which has not been zero cleared. Thus the zero clearing process series is performed until there is no free page which has not been zero cleared in the free page management list .

Thus the zero clearing process of the memory which is to be requested in the allocating process of a memory region within the memory may be reduced by performing the above mentioned zero clearing process series separately from the zero clearing process performed in the allocating process of the memory region within the memory. As a result the initialized memory region of an appropriate region size corresponding to the requested process or task may be allocated at a high speed from the memory regions in the memory managed using a plurality of page sizes. In addition by performing control so that the memory region allocating process may be prioritized over the above mentioned zero clearing process series the zero clearing process of the memory region corresponding to a free page may be performed without the delay in the allocating process of a memory region that is desired for performing a process or task.

Described next is the process performed by the page allocating unit . The process performed by the page allocating unit may be roughly divided into a memory allocating process and a memory freeing up process.

Described first is a memory allocating process performed by the page allocating unit . The memory allocating process is a process of allocating a memory region zero cleared in accordance with the region size or the page size of the memory requested from the process execution unit from the memory regions within the memory managed using pages of a plurality of different page sizes. is an exemplary flow diagram of a memory allocating process performed by a page allocating unit.

The page allocating unit receives a request to allocate a memory region within the memory which is desired for executing a process or task from the process execution unit and starts the memory allocating process series step S . A configuration is made such that the request to allocate a memory region may be made by requesting the desired region size of memory and by requesting a desired page size. The page allocating unit searches for a free page having a page size equal to or larger than the region size of the memory requested from the process execution unit or a free page having a page size equal to or larger than the page size requested from the process execution unit with reference to the free page management list step S .

When there is no free page of which size is equal to or larger than the region size or the page size requested from the process execution unit NO in step S then the page allocating unit determines that there is no unused memory region having the request region size transmits a memory allocation error to the process execution unit and terminates the memory allocating processes series step S .

When there is a free page of which size is equal to or larger than the region size or page size requested from the process execution unit YES in step S the page allocating unit determines one free page in the detected free pages to be a page to be allocated. As described above with reference to a free page is managed for each different page size in the free page management list . Therefore the free page determined by the page allocating unit may be a normal page a large page obtained by combining normal pages or a large page which is obtained by further combining large pages and which is larger than the large page to be combined.

For example the page allocating unit selects a free page of the smallest size from among the free pages of which size is equal to or larger than the region size or page size requested from the process execution unit from the free page management list . If the page size of the selected free page is twice as large as or more than twice the region size or page size requested from the process execution unit then the page allocating unit divides the selected free page into two free pages except when the selected free page is a normal page. Then the page allocating unit selects one of the divided free pages as an allocation candidate page and returns the other one of the divided free pages to the free page management list so that it may be managed as the size of the divided page. If the page size of the free page selected as an allocation candidate page is twice as large as or more than twice the region size or page size requested from the process execution unit then the page allocating unit re divides the selected free page into two free pages. Then the page allocating unit selects one of the re divided free pages as a new allocation candidate page and returns the other one of the re divided free page to the free page management list so that it maybe managed as the size of the re divided page. Thus until the size of the selected free page is less than twice the region size or page size requested from the process execution unit the page allocating unit repeats the above mentioned dividing process. When the size of the selected free page becomes less than twice the region size requested by the process execution unit the page allocating unit determines the selected free page to be a page to be allocated.

When the above mentioned dividing process on a free page is performed the page allocating unit performs the updating process of management information about the divided free page such as the management information about the zero clear state etc. is an exemplary flow diagram of an updating process of the management information related to a dividing process.

When the page allocating unit starts the updating process on the management information associated with the dividing process on a free page step S the page allocating unit acquires the zero clear state size

A of the page structure A corresponding to the free page managed by the free page management list step S . For example when a free page to be processed is a large page the page allocating unit acquires the zero clear state size A of the page structure A corresponding to one leading normal page in the large page.

The page allocating unit compares the zero cleared region size indicated by the acquired zero clear state size A with the page size of the free page managed by the free page management list step S .

When the both sizes match each other as a result of the comparison YES in step S the page allocating unit halves the zero cleared region size indicated by the acquired zero clear state size A. Then the page allocating unit writes the halved region size to the zero clear state size A of each page structure A corresponding to the two free pages obtained by dividing the free page by the dividing process step S .

When the both sizes do not match each other as a result of the comparison NO in step S the page allocating unit holds the zero clear state size A as the management information about each of the two divided free pages without rewriting the zero clear state size A already recorded in each page structure A corresponding to each of the two divided free pages step S .

When the process in step S or the process in step S is performed the page allocating unit terminates the management information updating process series step

S . When the large page selected as an allocation candidate page is re divided the page allocating unit again performs the updating process series on the management information.

For comprehensibility of the processes in steps S and S the updating process of the management information related to the dividing process is explained below with reference to .

In an example illustrated in the memory region corresponding to the large page A within the memory is all zero cleared and zero clear state zero cleared for Kbytes is recorded in the management information region of the large page A. In particular in the management information region of the large page A the information zero clear state zero cleared is recorded in the zero clear state bit A of the page structure A corresponding to one leading normal page in the large page A that is one first half normal page in the large page A. The information zero clear state 16 Kbytes is recorded in the zero clear state size A of the page structure A corresponding to one first half normal page in the large page A. Thus the management information about the large page A is recorded in the page structure A corresponding to one first half normal page in the large page A. In this manner in the method of recording the management information about a page according to the embodiment the management information about a large page may be searched or updated without reference to the entire page structure for each normal page in the large page thereby simplifying and speeding up the processes of searching and updating the management information. Furthermore independent of the page size the process of dividing a page accompanied by the update of the management information may be performed.

Relating to the large page A illustrated in the page size 16 Kbytes of the large page A matches the zero cleared region size 16 Kbytes of the large page A. Then in the case where the large page A is divided into two that is normal pages B and C the region size in the zero cleared state recorded in the management information region of the large page A that is 16 Kbytes is halved. Then as illustrated in the information zero clear state zero cleared for 8 Kbytes after performing the halving process is recorded as the management information about the divided normal pages B and C in the respective management information regions. In particular the information zero clear state zero cleared is recorded in the zero clear state bit A of each page structure A corresponding to the normal pages B and C. Furthermore the information zero clear state 8 Kbytes is recorded in the zero clear state size A of each page structure A corresponding to the normal pages B and C.

In the example illustrated in the memory region of one first half normal page of the large page D has been zero cleared and the memory region of one second half normal page has not been zero cleared. Then in the management information region of the large page D zero clear state zero cleared for 8 Kbytes is recorded for one first half normal page and zero clear state not zero cleared for 8 Kbytes is recorded for one second half normal page. In particular the information zero clear state zero cleared for 8 Kbytes is recorded in the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the first half normal page in the large page D. The information zero clear state not zero cleared for 8 Kbytes is recorded in the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the second half normal page in the large page D. Thus the management information about the large page D is divided so as to be recorded and managed in first and second half normal pages.

In the large page D illustrated in the page size 16 Kbytes of the large page D does not match the zero cleared region size 8 Kbytes of the large page D. Then in the process in step S in the information zero clear state zero cleared for 8 Kbytes for the one first half normal page in the management information of the large page D is continuously held as the management information about the normal page E corresponding to one first half normal page of the large page D. In the management information about the large page D the information zero clear state not zero cleared for 8 Kbytes for one second half normal page is continuously held as the management information about the normal page F corresponding to the second half normal page of the large page D. In particular the information zero clear state zero cleared for 8 Kbytes is continuously held by the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the normal page E. Furthermore the information zero clear state not zero cleared for 8 Kbytes is continuously held by the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the normal page F.

In the process in step S in including the above mentioned page dividing process and the management information updating process a free page to be allocated is determined. The page allocating unit requests the zero clearing unit to suspend the zero clearing process on the determined free page to be allocated step S . In particular the page allocating unit sets a zero clearing process suspension flag on the zero clearing process control bit A of the page structure A corresponding to the free page to be allocated. In the process in step S control is performed so that the allocating process by the page allocating unit can be prioritized over the zero clearing process by the zero clearing unit even though the memory region corresponding to the free page to be allocated is in the zero clear process of the zero clearing unit . Therefore the execution of the process of the application program by the process execution unit which requests the page allocating unit to allocate the memory region in the memory may be prevented from becoming stalled by the process of the zero clearing unit .

The page allocating unit waits for the suspension of the zero clearing process being performed by the zero clearing unit on the free page to be allocated step S . In particular the page allocating unit refers to the zero clear state lock bit A of the page structure A corresponding to the free page to be allocated. If a lock flag is set on the referenced zero clear state lock bit A the page allocating unit waits for the zero clear state lock bit A to change from the lock flag to the lock release flag. The lock flag refers to a flag indicating the exclusive execution of the zero clearing process by the zero clearing unit . The lock release flag refers to the flag indicating the suspension of the exclusive execution of the zero clearing process by the zero clearing unit .

When the zero clearing process by the zero clearing unit on the free page to be allocated is suspended the page allocating unit reads the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the free page to be allocated. Then the page allocating unit searches using the read zero clear state bit A and zero clear state size A the free pages to be allocated for a memory region on which the zero clearing process has not been performed. In particular the page allocating unit determines whether or not a flag indicating the zero cleared state is set on the read zero clear state bit A. The page allocating unit also determines whether or not the page size of the free page to be allocated matches the read zero clear state size A. When the flag indicating the zero cleared state is not set on the zero clear state bit A and when the page size of the free page to be allocated does not match the read zero clear state size A the page allocating unit determines that there is a memory region in which the zero clearing process has not been performed. Then the page allocating unit zero clears the memory region in which the zero clearing process has not been performed step S .

When all memory regions corresponding to the free page to be allocated are zero cleared the page allocating unit passes the zero cleared memory region corresponding to the free page to be allocated to the process execution unit which has requested the allocation step S . Then the page allocating unit terminates the memory allocating process series step S .

Described next is the memory freeing up process executed by the page allocating unit . The memory freeing up process is a process of freeing up the memory region within the memory which is freed up after the execution of the process or task by the process execution unit as a memory region corresponding to a free page of a specified page size in a plurality of different page sizes targeted for management.

When the memory region within the memory which has been allocated to the execution of the process or task by the process execution unit is freed up the page allocating unit starts the memory freeing up process. The page allocating unit marks the page corresponding to the freed up memory region as a free page which has not been zero cleared. In particular the page allocating unit sets on the zero clear state bit A of the page structure A corresponding to the freed up free page a flag indicating that the zero clearing process has not been performed. The page allocating unit sets a flag indicating a free page on the free page bit A. The page allocating unit writes 0 which is a value indicating that there is no zero cleared region size on the zero clear state size A.

The page allocating unit stores in the free page management list the page marked as a free page which has not been zero cleared. In particular the page allocating unit performs the following process.

As described above with reference to etc. in the information processing apparatus according to the embodiment including the application execution computer as an example the memory regions in the memory are managed using pages having a plurality of different page sizes. Then a buddy of a free page to be stored may exist in the free page management list . A buddy refers to a page to be combined with the current page so as to make a page of which a page size is larger than the current page. In the buddy system a buddy to be a combination partner of the current page is determined in advance according to a specified combination rule. The page allocating unit refers to an entry corresponding to the page size of a free page to be stored and confirms whether or not there is a buddy of the free page to be stored in the free page management list .

When there is no buddy of the free page to be stored as a result of the confirmation the page allocating unit writes a specified value to the pointers A and A of the page structure A corresponding to the free page to be stored and stores the free page to be stored in the free page management list . When there is a buddy of the free page to be stored as a result of the confirmation the page allocating unit performs a process of combining the free page to be stored with the buddy of the free page to be stored.

The page allocating unit confirms whether or not there is a buddy of the combined page in the free page management list . When there is no buddy of the combined page as a result of the confirmation the page allocating unit writes a specified value to the pointers A and A of the page structure A corresponding to the combined page and stores the combined page in the free page management list . When there is a buddy of the combined page as a result of the confirmation the page allocating unit performs the process of combining the combined page with the buddy of the combined page. Then the page allocating unit repeats the above mentioned combining process until it is confirmed that there is no buddy in the free page management list .

When the above mentioned combining process is performed the page allocating unit reflects the management information about the two combined pages in the management information about the combined page so as not to lose the management information about the two combined page. is an exemplary flow diagram of an updating process of the management information related to a combining process.

When the updating process of the management information related to the free page combining process is started step S the page allocating unit acquires the management information about the first half free page to be combined first free page S . The page allocating unit also acquires the management information about the second half free page to be combined second free page S . In the first and second half free pages one free page corresponds to a newly freed up memory region or a combined page obtained by combining the page corresponding to the newly freed up memory region with the buddy in the free page management list . Another free page is a buddy of the first half free page and exists in the free page management list . The management information acquired by the processes in steps S and S is the zero clear state bit A and the zero clear state size A of each page structure A corresponding to the first and second half free pages.

The page allocating unit determines on the basis of the acquired management information whether or not the zero clear state of the first half free page matches the zero clear state of the second half free page step S . In particular the page allocating unit determines whether or not the zero clear state bit A of the first half free page matches the zero clear state bit A of the second half free page the page size of the first half free page matches the zero clear state size A of the first half free page and the page size of the second half free page matches the zero clear state size A of the second half free page.

When it is determined that the zero clear state of the first half free page matches the zero clear state of the second half free page YES in step S the page allocating unit collectively describes the management information about the first and second half free pages as the management information about the combined page step S . In particular the page allocating unit holds the zero clear state bit A of the page structure A corresponding to the first half free page as the information as to whether or not the combined page has been zero cleared. Furthermore the page allocating unit writes a total value of the zero clear state size A of the first and second half free pages to the zero clear state size A of the page structure A corresponding to the first half free page.

When it is determined that the zero clear state of the first half free page does not match the zero clear state of the second half free page NO in step S the page allocating unit holds the management information about the first and second half free pages as the management information about the combined page step S . In particular the page allocating unit holds the zero clear state bit A of each of page structures A corresponding to the first and second half free pages as the information as to whether or not the combined page has been zero cleared. Furthermore the page allocating unit holds the zero clear state size A of each of page structures A corresponding to the first and second half free pages as the information about the zero cleared region size of the combined page.

When the process in step S or the process in step is executed the page allocating unit terminates the updating process series on the management information step S . When the combined page and the buddy of the combined page are further combined the page allocating unit performs again the updating process series on the management information.

For comprehensibility of the process in step S and the process in step S the process of updating the management information related to the combining process is described below with reference to .

In an example illustrated in the memory region corresponding to the normal pages G and H within the memory is all zero cleared and clear state zero cleared for 8 Kbytes is recorded in each management information region of the normal pages G and H. In particular in each management information region of the normal pages G and H the information zero clear state zero cleared is recorded in the zero clear state bit A of each of the page structures A corresponding to the normal pages G and H. Furthermore the information zero clear state 8 Kbytes is recorded in the zero clear state size A of each of the page structures A corresponding to the normal pages G and H.

In the normal pages G and H illustrated in the zero clear state bit A of the normal page G matches the zero clear state bit A of the normal page H. Furthermore the page size of the normal page G matches the zero clear state size A of the normal page G. The page size of the normal page H matches the zero clear state size A of the normal page H. Then in the case where the normal pages G and H are combined into a large page I the information about the zero cleared state recorded in the management information region of the normal page G in the process in step S in is held in the management information region of the large page I. In addition the total value of the zero cleared region size of the normal pages G and H is held in the management information region of the large page I. In particular the information zero clear state zero cleared of the large page I is recorded in the zero clear state bit A of the page structure A corresponding to one first half normal page of the large page I. Furthermore the information zero clear state 16 Kbytes of the large page I is recorded in the zero clear state size A of the page structure A corresponding to one first half normal page of the large page I.

Thus the management information about the large page may not be recorded in all page structures for each normal page in the large page. In addition the management information about the large page may be acquired without reference to all page structures of each normal page in the large page. Therefore in the updating process of the management information relating to the a page according to the embodiment the searching and updating processes of the management information about a page may be simplified and performed at a high speed.

In the example illustrated in the memory region corresponding to the normal page J within the memory has been zero cleared and the memory region corresponding to the normal page K within the memory has not been zero cleared. Then in the management information region of the normal page J zero clear state zero cleared for 8 Kbytes is recorded and in the management information region of the normal page K zero clear state not zero cleared for 8 Kbytes is recorded. In particular the information zero clear state zero cleared for 8 Kbytes of the normal page J is recorded in the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the normal page J. The information zero clear state not zero cleared for 8 Kbytes of the normal page K is recorded in the zero clear state bit A and the zero clear state size A of the page structure A corresponding to the normal page K.

In the two normal pages J and K illustrated in the zero clear state bit A of the normal page J does not match the zero clear state bit A of the normal page K. Furthermore the page size of the normal page K does not match the zero clear state size A of the normal page K. Then in the process in step S in the information zero clear state zero cleared for 8 Kbytes of the normal page J is continuously held in the management information region of the combined large page L. In addition the information zero clear state not zero cleared for 8 Kbytes of the normal page K is continuously held in the management information region of the combined large page L. In particular the information zero clear state zero cleared for 8 Kbytes of the normal page J is continuously held by the zero clear state bit A and the zero clear state size A of the page structure A corresponding to one first half normal page of the large page L. Furthermore the information zero clear state not zero cleared for 8 Kbytes of the normal page K is continuously held by the zero clear state bit A and the zero clear state size A of the page structure A corresponding to one second half normal page of the large page L.

As illustrated in in the management information region of the large page L zero clear state zero cleared for 8 Kbytes is recorded as the management information about one first half normal page. In addition in the management information region of the large page L zero clear state zero cleared for 8 Kbytes is recorded as the management information about one second half normal page. As illustrated in in the management information region of the large page I zero clear state zero cleared for 16 Kbytes is recorded. Therefore the zero clear state of the large page L does not match the zero clear state of the large page I. That is the zero clear state bit A of the large page L does not match the zero clear state bit A of the large page I. Furthermore the page size of the large page L does not match the zero clear state size A of the large page L. Then as illustrated in the management information region of the large page M continuously holds the information about the zero clear state of the large pages L and I.

Thus in the case where large pages are combined the management information about the combined large pages may not be recorded in all page structures for each normal page in the combined large page. In addition the management information about the combined large page may be acquired without reference to all page structures for each normal page in the combined large page. Therefore according to the process of updating the management information about a page according to the embodiment the searching and updating process on the management information about a page may be simplified and performed at a high speed. Furthermore the combining process of pages accompanied by the update of management information may be performed without dependence on the page size.

As is understood from the explanation above the information processing apparatus according to the embodiment in which the application execution computer is used as an example manages the initialization state of the memory region corresponding to each page within the memory using the management information about each page having different page sizes. Then the information processing apparatus according to the embodiment performs the initializing process on an uninitialized region indicated by the management information in the memory region corresponding to the free page. Therefore as compared with the case where all memory regions corresponding to the page to be allocated are constantly initialized the region size required to perform the initializing process in allocating the memory region may be reduced thereby shortening the processing time of the entire allocating process accompanied by the initializing process. That is the process of allocating an initialized memory region in accordance with the size specified by a memory requester may be performed at a high speed.

Furthermore the information processing apparatus according to the embodiment may perform the initializing process on the memory region corresponding to a free page within the memory separately from the allocating process of the memory region in the memory. Therefore since the region size desired for the initializing process in allocating a memory region may be reduced the processing time of the entire allocating process accompanied by the initializing process may be reduced. That is the process of allocating the initialized memory region in accordance with the size specified by a memory acquisition requester may be performed at a higher speed.

Various types of processes performed by the information processing apparatus according to the above mentioned embodiment including the allocating process of memory and the initializing process of memory are illustrative only and may be modified as appropriate. For example in the description above the combining process of pages is an example performed in the memory freeing up process and may be modified so that the combining process of pages is performed during the memory allocating process.

As described above in the information processing apparatus according to the embodiment the execution of the memory allocating process is given priority over the execution of the memory initializing process which is performed asynchronously with the memory allocating process to suppress the delay of a job for which a memory allocation is requested. Furthermore in the information processing apparatus according to the embodiment the asynchronous zero clearing process may be controlled to suppress the influence on the performance of a job.

The timing with which the process scheduler processing unit allows the zero clearing unit to perform the zero clearing process in cooperation with the job scheduler processing unit A and the job management unit may be the following two timings that is there is a first timing at which all jobs of the application program specified via a job scheduling system such as the job scheduler processing unit A and the job management unit are completed in the application execution computer . In addition there is a second timing at which the initializing process is performed concurrently with the job of the application program specified via the scheduling system in the application execution computer . Using an example of the application execution computer illustrated in a method of controlling the zero clearing process with the first and second timings is described below.

The first timing is described first. is an explanatory view of a zero clearing process with the first timing. For clarity of explanation a portion of the components of the application execution computer illustrated in are omitted.

With the first timing at which all jobs of the application program specified via the job scheduling system are completed there is no job prioritized over the zero clearing process in the application execution computer .

Then with the first timing the processor resources in the application execution computer are used for performing the zero clearing process so that the zero clearing process on the main memory may be completed within a short time. For example as illustrated in the zero clearing process on the main memory is completed within a short time by allowing two CPU cores from among the four CPU cores to perform the zero clearing process. With the first timing the CPU core which perform the zero clearing process may exclusively use the level 2 cache and a memory bus in the bus .

The second timing is described next. is an explanatory view of a zero clearing process with the second timing. illustrates an example of allowing one CPU core to which no job is allocated to perform the zero clearing process when a job is allocated to three CPU cores in the four CPU cores included in the application execution computer . For clarity of explanation a portion of the components of the application execution computer illustrated in are omitted.

With the second timing at which the zero clearing process is performed concurrently with the execution of the job of the specified application program the level 2 cache and the memory bus in the bus is shared by the CPU core which performs the job and the CPU core which performs the zero clearing process. Since the band of the level 2 cache and the memory bus is limited the memory access performance of a job is degraded if the band of the level 2 cache and the memory bus is allocated to the execution of the zero clearing process and a performance delay in the job may occur. Thus with the second timing control is performed so that the zero clearing process is performed using at least one of the two methods described below.

First in the first control method with the store instruction in the zero clearing process the CPU core which performs the zero clearing process uses an instruction to suppress the use of a cache. In particular the CPU core which performs the zero clearing process accesses the main memory using the CPU instruction which is capable of directly accessing to the memory bus by bypassing the level 2 cache . In the first control method since the level 2 cache is not shared between the CPU core which performs a job and the CPU core which performs the zero clearing process the influence on the performance of a job may be reduced.

In the second control method the interconnect is implemented with the Remote Direct Memory Access RDMA function. In addition a zero cleared memory region is set in advance in the main memory of any calculation node in a plurality of calculation nodes application execution computers included in the computer system . Then the calculation node which performs the zero clearing process RDMA transfers the zero cleared memory region in any calculation node on the main memory in the calculation node via the interconnect thereby performing the zero clearing process of a specified region in the main memory . When the interconnect is connected to the memory bus as illustrated in the interconnect may directly access the main memory without the level 2 cache . Therefore in the second control method since the zero clearing process may be performed without any conflict for the level 2 cache between the CPU core which performs a job and the CPU core which performs the zero clearing process the influence on the performance of the job may be reduced.

As described above the components for performing the various above mentioned processes according to the embodiment including the page allocating unit and the zero clearing unit may be realized by hardware components including the CPU core the level 1 cache and the level 2 cache . Furthermore the components for performing various above mentioned processes according to the embodiment may also be realized by a computer which executes a control program which regulates the various above mentioned process procedures including the memory allocating process and the memory initializing process according to the embodiment. For example the control program which regulates the various above mentioned process procedures is stored in a recording medium such as a magnetic disk an optical disk a magneto optical disk etc. The control program stored in the recording medium is stored in the storage via the storage medium drive . Then the processor including the CPU core the level 1 cache and the level 2 cache reads the control program stored in the storage into the main memory and executes the control program.

All examples and conditional language provided herein are intended for the pedagogical purposes of aiding the reader in understanding the invention and the concepts contributed by the inventor to further the art and are not to be construed as limitations to such specifically recited examples and conditions nor does the organization of such examples in the specification relate to a showing of the superiority and inferiority of the invention. Although one or more embodiments of the present invention have been described in detail it should be understood that the various changes substitutions and alterations could be made hereto without departing from the spirit and scope of the invention.

